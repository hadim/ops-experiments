// Targeted by JavaCPP version 1.3: DO NOT EDIT THIS FILE

package org.bytedeco.javacpp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class mkl_rt extends net.imagej.ops.experiments.filter.deconvolve.MKLRichardsonLucyWrapper {
    static { Loader.load(); }

// Parsed from mkl.h

/*******************************************************************************
* Copyright 1999-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
!  Content:
!      Intel(R) Math Kernel Library (Intel(R) MKL) interface
!******************************************************************************/

// #ifndef _MKL_H_
// #define _MKL_H_

// #define _Mkl_Api(rtype,name,arg) extern rtype name    arg;
// #define _mkl_api(rtype,name,arg) extern rtype name##_ arg;
// #define _MKL_API(rtype,name,arg) extern rtype name##_ arg;

// #include "mkl_version.h"
// #include "mkl_types.h"
// #include "mkl_blas.h"
// #include "mkl_trans.h"
// #include "mkl_cblas.h"
// #include "mkl_spblas.h"
// #include "mkl_lapack.h"
// #include "mkl_lapacke.h"
// #include "mkl_pardiso.h"
// #include "mkl_sparse_handle.h"
// #include "mkl_dss.h"
// #include "mkl_rci.h"
// #include "mkl_vml.h"
// #include "mkl_vsl.h"
// #include "mkl_df.h"
// #include "mkl_service.h"
// #include "mkl_dfti.h"
// #include "mkl_trig_transforms.h"
// #include "mkl_poisson.h"
// #include "mkl_solvers_ee.h"
// #include "mkl_direct_call.h"
// #include "mkl_dnn.h"

// #endif /* _MKL_H_ */


// Parsed from mkl_version.h

// #if 0
// #endif

// #if 0
// #endif

// #ifndef _MKL_VERSION_H_
// #define _MKL_VERSION_H_

public static final int __INTEL_MKL_BUILD_DATE = 20170413;

public static final int __INTEL_MKL__ = 2017;
public static final int __INTEL_MKL_MINOR__ = 0;
public static final int __INTEL_MKL_UPDATE__ = 3;

public static final int INTEL_MKL_VERSION = 20170003;

// #endif


// Parsed from mkl_types.h

/*******************************************************************************
* Copyright 1999-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
! Content:
!      Intel(R) Math Kernel Library (Intel(R) MKL) types definition
!****************************************************************************/

// #ifndef _MKL_TYPES_H_
// #define _MKL_TYPES_H_

// #ifdef __cplusplus
// #endif /* __cplusplus */

/* Intel(R) MKL Complex type for single precision */
// #ifndef MKL_Complex8
public static class MKL_Complex8 extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public MKL_Complex8() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MKL_Complex8(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MKL_Complex8(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public MKL_Complex8 position(long position) {
        return (MKL_Complex8)super.position(position);
    }

    public native float real(); public native MKL_Complex8 real(float real);
    public native float imag(); public native MKL_Complex8 imag(float imag);
}
// #endif

/* Intel(R) MKL Complex type for double precision */
// #ifndef MKL_Complex16
public static class MKL_Complex16 extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public MKL_Complex16() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MKL_Complex16(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MKL_Complex16(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public MKL_Complex16 position(long position) {
        return (MKL_Complex16)super.position(position);
    }

    public native double real(); public native MKL_Complex16 real(double real);
    public native double imag(); public native MKL_Complex16 imag(double imag);
}
// #endif

/* Intel(R) MKL Version type */
public static class MKLVersion extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public MKLVersion() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MKLVersion(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MKLVersion(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public MKLVersion position(long position) {
        return (MKLVersion)super.position(position);
    }

    public native int MajorVersion(); public native MKLVersion MajorVersion(int MajorVersion);
    public native int MinorVersion(); public native MKLVersion MinorVersion(int MinorVersion);
    public native int UpdateVersion(); public native MKLVersion UpdateVersion(int UpdateVersion);
    public native @Cast("char*") BytePointer ProductStatus(); public native MKLVersion ProductStatus(BytePointer ProductStatus);
    public native @Cast("char*") BytePointer Build(); public native MKLVersion Build(BytePointer Build);
    public native @Cast("char*") BytePointer Processor(); public native MKLVersion Processor(BytePointer Processor);
    public native @Cast("char*") BytePointer Platform(); public native MKLVersion Platform(BytePointer Platform);
}

/* Intel(R) MKL integer types for LP64 and ILP64 */
// #if (!defined(__INTEL_COMPILER)) & defined(_MSC_VER)
    public static final int MKL_INT64 = __int64;
    public static native @MemberGetter int MKL_UINT64();
    public static final int MKL_UINT64 = MKL_UINT64();
// #else
// #endif

// #ifdef MKL_ILP64

/* Intel(R) MKL ILP64 integer types */
// #ifndef MKL_INT
    public static final int MKL_INT = MKL_INT64;
// #endif
// #ifndef MKL_UINT
    public static final int MKL_UINT = MKL_UINT64;
// #endif
public static final int MKL_LONG = MKL_INT64;

// #else

/* Intel(R) MKL LP64 integer types */
// #ifndef MKL_INT
// #endif
// #ifndef MKL_UINT
// #endif

// #endif

/* Intel(R) MKL threading stuff. Intel(R) MKL Domain names */
public static final int MKL_DOMAIN_ALL =      0;
public static final int MKL_DOMAIN_BLAS =     1;
public static final int MKL_DOMAIN_FFT =      2;
public static final int MKL_DOMAIN_VML =      3;
public static final int MKL_DOMAIN_PARDISO =  4;

/* Intel(R) MKL CBWR stuff */

/* options */
public static final int MKL_CBWR_BRANCH = 1;
public static final int MKL_CBWR_ALL =   ~0;

/* common settings */
public static final int MKL_CBWR_UNSET_ALL = 0;
public static final int MKL_CBWR_OFF =       0;

/* branch specific values */
public static final int MKL_CBWR_BRANCH_OFF =     1;
public static final int MKL_CBWR_AUTO =           2;
public static final int MKL_CBWR_COMPATIBLE =     3;
public static final int MKL_CBWR_SSE2 =           4;
public static final int MKL_CBWR_SSSE3 =          6;
public static final int MKL_CBWR_SSE4_1 =         7;
public static final int MKL_CBWR_SSE4_2 =         8;
public static final int MKL_CBWR_AVX =            9;
public static final int MKL_CBWR_AVX2 =          10;
public static final int MKL_CBWR_AVX512_MIC =    11;
public static final int MKL_CBWR_AVX512 =        12;
public static final int MKL_CBWR_AVX512_MIC_E1 = 13;

/* error codes */
public static final int MKL_CBWR_SUCCESS =                   0;
public static final int MKL_CBWR_ERR_INVALID_SETTINGS =     -1;
public static final int MKL_CBWR_ERR_INVALID_INPUT =        -2;
public static final int MKL_CBWR_ERR_UNSUPPORTED_BRANCH =   -3;
public static final int MKL_CBWR_ERR_UNKNOWN_BRANCH =       -4;
public static final int MKL_CBWR_ERR_MODE_CHANGE_FAILURE =  -8;

/* Obsolete */
public static final int MKL_CBWR_SSE3 =           5;

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif /* _MKL_TYPES_H_ */


// Parsed from mkl_trans.h

/*******************************************************************************
* Copyright 2007-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
!  Content:
!      Intel(R) Math Kernel Library (Intel(R) MKL) include for transposition routines
!******************************************************************************/

// #if !defined(_MKL_TRANS_H)
// #define _MKL_TRANS_H

/* for size_t */
// #include <stddef.h>
/* for MKL complex data types */
// #include "mkl_types.h"

// #ifdef __cplusplus
// #endif /* __cplusplus */

/* In-place transposition routines */

public static final int mkl_simatcopy = MKL_Simatcopy;
public static native void MKL_Simatcopy(
    byte ordering, byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    float alpha,
    FloatPointer AB, @Cast("size_t") long lda, @Cast("size_t") long ldb);
public static native void MKL_Simatcopy(
    byte ordering, byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    float alpha,
    FloatBuffer AB, @Cast("size_t") long lda, @Cast("size_t") long ldb);
public static native void MKL_Simatcopy(
    byte ordering, byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    float alpha,
    float[] AB, @Cast("size_t") long lda, @Cast("size_t") long ldb);

public static final int mkl_dimatcopy = MKL_Dimatcopy;
public static native void MKL_Dimatcopy(
    byte ordering, byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    double alpha,
    DoublePointer AB, @Cast("size_t") long lda, @Cast("size_t") long ldb);
public static native void MKL_Dimatcopy(
    byte ordering, byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    double alpha,
    DoubleBuffer AB, @Cast("size_t") long lda, @Cast("size_t") long ldb);
public static native void MKL_Dimatcopy(
    byte ordering, byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    double alpha,
    double[] AB, @Cast("size_t") long lda, @Cast("size_t") long ldb);

public static final int mkl_cimatcopy = MKL_Cimatcopy;
public static native void MKL_Cimatcopy(
    byte ordering, byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    @Const @ByVal MKL_Complex8 alpha,
    MKL_Complex8 AB, @Cast("size_t") long lda, @Cast("size_t") long ldb);

public static final int mkl_zimatcopy = MKL_Zimatcopy;
public static native void MKL_Zimatcopy(
    byte ordering, byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    @Const @ByVal MKL_Complex16 alpha,
    MKL_Complex16 AB, @Cast("size_t") long lda, @Cast("size_t") long ldb);

/* Out-of-place transposition routines */

public static final int mkl_somatcopy = MKL_Somatcopy;
public static native void MKL_Somatcopy(
    @Cast("char") byte ordering, @Cast("char") byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    float alpha,
    @Const FloatPointer A, @Cast("size_t") long lda,
    FloatPointer B, @Cast("size_t") long ldb);
public static native void MKL_Somatcopy(
    @Cast("char") byte ordering, @Cast("char") byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    float alpha,
    @Const FloatBuffer A, @Cast("size_t") long lda,
    FloatBuffer B, @Cast("size_t") long ldb);
public static native void MKL_Somatcopy(
    @Cast("char") byte ordering, @Cast("char") byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    float alpha,
    @Const float[] A, @Cast("size_t") long lda,
    float[] B, @Cast("size_t") long ldb);

public static final int mkl_domatcopy = MKL_Domatcopy;
public static native void MKL_Domatcopy(
    @Cast("char") byte ordering, @Cast("char") byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    double alpha,
    @Const DoublePointer A, @Cast("size_t") long lda,
    DoublePointer B, @Cast("size_t") long ldb);
public static native void MKL_Domatcopy(
    @Cast("char") byte ordering, @Cast("char") byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    double alpha,
    @Const DoubleBuffer A, @Cast("size_t") long lda,
    DoubleBuffer B, @Cast("size_t") long ldb);
public static native void MKL_Domatcopy(
    @Cast("char") byte ordering, @Cast("char") byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    double alpha,
    @Const double[] A, @Cast("size_t") long lda,
    double[] B, @Cast("size_t") long ldb);

public static final int mkl_comatcopy = MKL_Comatcopy;
public static native void MKL_Comatcopy(
    @Cast("char") byte ordering, @Cast("char") byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    @Const @ByVal MKL_Complex8 alpha,
    @Const MKL_Complex8 A, @Cast("size_t") long lda,
    MKL_Complex8 B, @Cast("size_t") long ldb);

public static final int mkl_zomatcopy = MKL_Zomatcopy;
public static native void MKL_Zomatcopy(
    @Cast("char") byte ordering, @Cast("char") byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    @Const @ByVal MKL_Complex16 alpha,
    @Const MKL_Complex16 A, @Cast("size_t") long lda,
    MKL_Complex16 B, @Cast("size_t") long ldb);

/* Out-of-place transposition routines (all-strided case) */

public static final int mkl_somatcopy2 = MKL_Somatcopy2;
public static native void MKL_Somatcopy2(
    @Cast("char") byte ordering, @Cast("char") byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    float alpha,
    @Const FloatPointer A, @Cast("size_t") long lda, @Cast("size_t") long stridea,
    FloatPointer B, @Cast("size_t") long ldb, @Cast("size_t") long strideb);
public static native void MKL_Somatcopy2(
    @Cast("char") byte ordering, @Cast("char") byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    float alpha,
    @Const FloatBuffer A, @Cast("size_t") long lda, @Cast("size_t") long stridea,
    FloatBuffer B, @Cast("size_t") long ldb, @Cast("size_t") long strideb);
public static native void MKL_Somatcopy2(
    @Cast("char") byte ordering, @Cast("char") byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    float alpha,
    @Const float[] A, @Cast("size_t") long lda, @Cast("size_t") long stridea,
    float[] B, @Cast("size_t") long ldb, @Cast("size_t") long strideb);

public static final int mkl_domatcopy2 = MKL_Domatcopy2;
public static native void MKL_Domatcopy2(
    @Cast("char") byte ordering, @Cast("char") byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    double alpha,
    @Const DoublePointer A, @Cast("size_t") long lda, @Cast("size_t") long stridea,
    DoublePointer B, @Cast("size_t") long ldb, @Cast("size_t") long strideb);
public static native void MKL_Domatcopy2(
    @Cast("char") byte ordering, @Cast("char") byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    double alpha,
    @Const DoubleBuffer A, @Cast("size_t") long lda, @Cast("size_t") long stridea,
    DoubleBuffer B, @Cast("size_t") long ldb, @Cast("size_t") long strideb);
public static native void MKL_Domatcopy2(
    @Cast("char") byte ordering, @Cast("char") byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    double alpha,
    @Const double[] A, @Cast("size_t") long lda, @Cast("size_t") long stridea,
    double[] B, @Cast("size_t") long ldb, @Cast("size_t") long strideb);

public static final int mkl_comatcopy2 = MKL_Comatcopy2;
public static native void MKL_Comatcopy2(
    @Cast("char") byte ordering, @Cast("char") byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    @Const @ByVal MKL_Complex8 alpha,
    @Const MKL_Complex8 A, @Cast("size_t") long lda, @Cast("size_t") long stridea,
    MKL_Complex8 B, @Cast("size_t") long ldb, @Cast("size_t") long strideb);

public static final int mkl_zomatcopy2 = MKL_Zomatcopy2;
public static native void MKL_Zomatcopy2(
    @Cast("char") byte ordering, @Cast("char") byte trans,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    @Const @ByVal MKL_Complex16 alpha,
    @Const MKL_Complex16 A, @Cast("size_t") long lda, @Cast("size_t") long stridea,
    MKL_Complex16 B, @Cast("size_t") long ldb, @Cast("size_t") long strideb);

/* Out-of-place memory movement routines */

public static final int mkl_somatadd = MKL_Somatadd;
public static native void MKL_Somatadd(
    @Cast("char") byte ordering, @Cast("char") byte transa, @Cast("char") byte transb,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    float alpha,
    @Const FloatPointer A, @Cast("size_t") long lda,
    float beta,
    @Const FloatPointer B, @Cast("size_t") long ldb,
    FloatPointer C, @Cast("size_t") long ldc);
public static native void MKL_Somatadd(
    @Cast("char") byte ordering, @Cast("char") byte transa, @Cast("char") byte transb,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    float alpha,
    @Const FloatBuffer A, @Cast("size_t") long lda,
    float beta,
    @Const FloatBuffer B, @Cast("size_t") long ldb,
    FloatBuffer C, @Cast("size_t") long ldc);
public static native void MKL_Somatadd(
    @Cast("char") byte ordering, @Cast("char") byte transa, @Cast("char") byte transb,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    float alpha,
    @Const float[] A, @Cast("size_t") long lda,
    float beta,
    @Const float[] B, @Cast("size_t") long ldb,
    float[] C, @Cast("size_t") long ldc);

public static final int mkl_domatadd = MKL_Domatadd;
public static native void MKL_Domatadd(
    @Cast("char") byte ordering, @Cast("char") byte transa, @Cast("char") byte transb,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    double alpha,
    @Const DoublePointer A, @Cast("size_t") long lda,
    double beta,
    @Const DoublePointer B, @Cast("size_t") long ldb,
    DoublePointer C, @Cast("size_t") long ldc);
public static native void MKL_Domatadd(
    @Cast("char") byte ordering, @Cast("char") byte transa, @Cast("char") byte transb,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    double alpha,
    @Const DoubleBuffer A, @Cast("size_t") long lda,
    double beta,
    @Const DoubleBuffer B, @Cast("size_t") long ldb,
    DoubleBuffer C, @Cast("size_t") long ldc);
public static native void MKL_Domatadd(
    @Cast("char") byte ordering, @Cast("char") byte transa, @Cast("char") byte transb,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    double alpha,
    @Const double[] A, @Cast("size_t") long lda,
    double beta,
    @Const double[] B, @Cast("size_t") long ldb,
    double[] C, @Cast("size_t") long ldc);

public static final int mkl_comatadd = MKL_Comatadd;
public static native void MKL_Comatadd(
    @Cast("char") byte ordering, @Cast("char") byte transa, @Cast("char") byte transb,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    @Const @ByVal MKL_Complex8 alpha,
    @Const MKL_Complex8 A, @Cast("size_t") long lda,
    @Const @ByVal MKL_Complex8 beta,
    @Const MKL_Complex8 B, @Cast("size_t") long ldb,
    MKL_Complex8 C, @Cast("size_t") long ldc);

public static final int mkl_zomatadd = MKL_Zomatadd;
public static native void MKL_Zomatadd(
    @Cast("char") byte ordering, @Cast("char") byte transa, @Cast("char") byte transb,
    @Cast("size_t") long rows, @Cast("size_t") long cols,
    @Const @ByVal MKL_Complex16 alpha,
    @Const MKL_Complex16 A, @Cast("size_t") long lda,
    @Const @ByVal MKL_Complex16 beta,
    @Const MKL_Complex16 B, @Cast("size_t") long ldb,
    MKL_Complex16 C, @Cast("size_t") long ldc);

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif /* _MKL_TRANS_H */


// Parsed from mkl_cblas.h

/*******************************************************************************
* Copyright 1999-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
!  Content:
!      Intel(R) Math Kernel Library (Intel(R) MKL) CBLAS interface
!******************************************************************************/

// #ifndef __MKL_CBLAS_H__
// #define __MKL_CBLAS_H__
// #include <stddef.h>

// #include "mkl_types.h"

// #ifdef __cplusplus            /* Assume C declarations for C++ */
// #endif /* __cplusplus */

// #ifndef MKL_DECLSPEC
// #ifdef _WIN32
public static native @MemberGetter int MKL_DECLSPEC();
public static final int MKL_DECLSPEC = MKL_DECLSPEC();
// #else
// #define MKL_DECLSPEC
// #endif
// #endif
/*
 * Enumerated and derived types
 */
public static final int CBLAS_INDEX = size_t;  /* this may vary between platforms */


/** enum CBLAS_LAYOUT */
public static final int CblasRowMajor= 101, CblasColMajor= 102;
/** enum CBLAS_TRANSPOSE */
public static final int CblasNoTrans= 111, CblasTrans= 112, CblasConjTrans= 113;
/** enum CBLAS_UPLO */
public static final int CblasUpper= 121, CblasLower= 122;
/** enum CBLAS_DIAG */
public static final int CblasNonUnit= 131, CblasUnit= 132;
/** enum CBLAS_SIDE */
public static final int CblasLeft= 141, CblasRight= 142;
/** enum CBLAS_STORAGE */
public static final int CblasPacked= 151;
/** enum CBLAS_IDENTIFIER */
public static final int CblasAMatrix= 161, CblasBMatrix= 162; /* this for backward compatibility with CBLAS_ORDER */

/*
 * ===========================================================================
 * Prototypes for level 1 BLAS functions (complex are recast as routines)
 * ===========================================================================
 */


public static native double cblas_dcabs1(@Const Pointer z);
public static native float cblas_scabs1(@Const Pointer c);

public static native float cblas_sdot(@Const @ByVal MKL_INT N, @Const FloatPointer X, @Const @ByVal MKL_INT incX,
                  @Const FloatPointer Y, @Const @ByVal MKL_INT incY);
public static native float cblas_sdot(@Const @ByVal MKL_INT N, @Const FloatBuffer X, @Const @ByVal MKL_INT incX,
                  @Const FloatBuffer Y, @Const @ByVal MKL_INT incY);
public static native float cblas_sdot(@Const @ByVal MKL_INT N, @Const float[] X, @Const @ByVal MKL_INT incX,
                  @Const float[] Y, @Const @ByVal MKL_INT incY);
public static native float cblas_sdoti(@Const @ByVal MKL_INT N, @Const FloatPointer X, @Const MKL_INT indx,
                   @Const FloatPointer Y);
public static native float cblas_sdoti(@Const @ByVal MKL_INT N, @Const FloatBuffer X, @Const MKL_INT indx,
                   @Const FloatBuffer Y);
public static native float cblas_sdoti(@Const @ByVal MKL_INT N, @Const float[] X, @Const MKL_INT indx,
                   @Const float[] Y);
public static native double cblas_ddot(@Const @ByVal MKL_INT N, @Const DoublePointer X, @Const @ByVal MKL_INT incX,
                  @Const DoublePointer Y, @Const @ByVal MKL_INT incY);
public static native double cblas_ddot(@Const @ByVal MKL_INT N, @Const DoubleBuffer X, @Const @ByVal MKL_INT incX,
                  @Const DoubleBuffer Y, @Const @ByVal MKL_INT incY);
public static native double cblas_ddot(@Const @ByVal MKL_INT N, @Const double[] X, @Const @ByVal MKL_INT incX,
                  @Const double[] Y, @Const @ByVal MKL_INT incY);
public static native double cblas_ddoti(@Const @ByVal MKL_INT N, @Const DoublePointer X, @Const MKL_INT indx,
                   @Const DoublePointer Y);
public static native double cblas_ddoti(@Const @ByVal MKL_INT N, @Const DoubleBuffer X, @Const MKL_INT indx,
                   @Const DoubleBuffer Y);
public static native double cblas_ddoti(@Const @ByVal MKL_INT N, @Const double[] X, @Const MKL_INT indx,
                   @Const double[] Y);


public static native double cblas_dsdot(@Const @ByVal MKL_INT N, @Const FloatPointer X, @Const @ByVal MKL_INT incX,
                  @Const FloatPointer Y, @Const @ByVal MKL_INT incY);
public static native double cblas_dsdot(@Const @ByVal MKL_INT N, @Const FloatBuffer X, @Const @ByVal MKL_INT incX,
                  @Const FloatBuffer Y, @Const @ByVal MKL_INT incY);
public static native double cblas_dsdot(@Const @ByVal MKL_INT N, @Const float[] X, @Const @ByVal MKL_INT incX,
                  @Const float[] Y, @Const @ByVal MKL_INT incY);

public static native float cblas_sdsdot(@Const @ByVal MKL_INT N, float sb, @Const FloatPointer X,
		    @Const @ByVal MKL_INT incX, @Const FloatPointer Y, @Const @ByVal MKL_INT incY);
public static native float cblas_sdsdot(@Const @ByVal MKL_INT N, float sb, @Const FloatBuffer X,
		    @Const @ByVal MKL_INT incX, @Const FloatBuffer Y, @Const @ByVal MKL_INT incY);
public static native float cblas_sdsdot(@Const @ByVal MKL_INT N, float sb, @Const float[] X,
		    @Const @ByVal MKL_INT incX, @Const float[] Y, @Const @ByVal MKL_INT incY);

/*
 * Functions having prefixes Z and C only
 */
public static native void cblas_cdotu_sub(@Const @ByVal MKL_INT N, @Const Pointer X, @Const @ByVal MKL_INT incX,
                       @Const Pointer Y, @Const @ByVal MKL_INT incY, Pointer dotu);
public static native void cblas_cdotui_sub(@Const @ByVal MKL_INT N, @Const Pointer X, @Const MKL_INT indx,
                        @Const Pointer Y, Pointer dotui);
public static native void cblas_cdotc_sub(@Const @ByVal MKL_INT N, @Const Pointer X, @Const @ByVal MKL_INT incX,
                       @Const Pointer Y, @Const @ByVal MKL_INT incY, Pointer dotc);
public static native void cblas_cdotci_sub(@Const @ByVal MKL_INT N, @Const Pointer X, @Const MKL_INT indx,
                        @Const Pointer Y, Pointer dotui);

public static native void cblas_zdotu_sub(@Const @ByVal MKL_INT N, @Const Pointer X, @Const @ByVal MKL_INT incX,
                       @Const Pointer Y, @Const @ByVal MKL_INT incY, Pointer dotu);
public static native void cblas_zdotui_sub(@Const @ByVal MKL_INT N, @Const Pointer X, @Const MKL_INT indx,
                        @Const Pointer Y, Pointer dotui);
public static native void cblas_zdotc_sub(@Const @ByVal MKL_INT N, @Const Pointer X, @Const @ByVal MKL_INT incX,
                       @Const Pointer Y, @Const @ByVal MKL_INT incY, Pointer dotc);
public static native void cblas_zdotci_sub(@Const @ByVal MKL_INT N, @Const Pointer X, @Const MKL_INT indx,
                        @Const Pointer Y, Pointer dotui);

/*
 * Functions having prefixes S D SC DZ
 */
public static native float cblas_snrm2(@Const @ByVal MKL_INT N, @Const FloatPointer X, @Const @ByVal MKL_INT incX);
public static native float cblas_snrm2(@Const @ByVal MKL_INT N, @Const FloatBuffer X, @Const @ByVal MKL_INT incX);
public static native float cblas_snrm2(@Const @ByVal MKL_INT N, @Const float[] X, @Const @ByVal MKL_INT incX);
public static native float cblas_sasum(@Const @ByVal MKL_INT N, @Const FloatPointer X, @Const @ByVal MKL_INT incX);
public static native float cblas_sasum(@Const @ByVal MKL_INT N, @Const FloatBuffer X, @Const @ByVal MKL_INT incX);
public static native float cblas_sasum(@Const @ByVal MKL_INT N, @Const float[] X, @Const @ByVal MKL_INT incX);

public static native double cblas_dnrm2(@Const @ByVal MKL_INT N, @Const DoublePointer X, @Const @ByVal MKL_INT incX);
public static native double cblas_dnrm2(@Const @ByVal MKL_INT N, @Const DoubleBuffer X, @Const @ByVal MKL_INT incX);
public static native double cblas_dnrm2(@Const @ByVal MKL_INT N, @Const double[] X, @Const @ByVal MKL_INT incX);
public static native double cblas_dasum(@Const @ByVal MKL_INT N, @Const DoublePointer X, @Const @ByVal MKL_INT incX);
public static native double cblas_dasum(@Const @ByVal MKL_INT N, @Const DoubleBuffer X, @Const @ByVal MKL_INT incX);
public static native double cblas_dasum(@Const @ByVal MKL_INT N, @Const double[] X, @Const @ByVal MKL_INT incX);

public static native float cblas_scnrm2(@Const @ByVal MKL_INT N, @Const Pointer X, @Const @ByVal MKL_INT incX);
public static native float cblas_scasum(@Const @ByVal MKL_INT N, @Const Pointer X, @Const @ByVal MKL_INT incX);

public static native double cblas_dznrm2(@Const @ByVal MKL_INT N, @Const Pointer X, @Const @ByVal MKL_INT incX);
public static native double cblas_dzasum(@Const @ByVal MKL_INT N, @Const Pointer X, @Const @ByVal MKL_INT incX);


/*
 * Functions having standard 4 prefixes (S D C Z)
 */
public static native @ByVal CBLAS_INDEX cblas_isamax(@Const @ByVal MKL_INT N, @Const FloatPointer X, @Const @ByVal MKL_INT incX);
public static native @ByVal CBLAS_INDEX cblas_isamax(@Const @ByVal MKL_INT N, @Const FloatBuffer X, @Const @ByVal MKL_INT incX);
public static native @ByVal CBLAS_INDEX cblas_isamax(@Const @ByVal MKL_INT N, @Const float[] X, @Const @ByVal MKL_INT incX);
public static native @ByVal CBLAS_INDEX cblas_idamax(@Const @ByVal MKL_INT N, @Const DoublePointer X, @Const @ByVal MKL_INT incX);
public static native @ByVal CBLAS_INDEX cblas_idamax(@Const @ByVal MKL_INT N, @Const DoubleBuffer X, @Const @ByVal MKL_INT incX);
public static native @ByVal CBLAS_INDEX cblas_idamax(@Const @ByVal MKL_INT N, @Const double[] X, @Const @ByVal MKL_INT incX);
public static native @ByVal CBLAS_INDEX cblas_icamax(@Const @ByVal MKL_INT N, @Const Pointer X, @Const @ByVal MKL_INT incX);
public static native @ByVal CBLAS_INDEX cblas_izamax(@Const @ByVal MKL_INT N, @Const Pointer X, @Const @ByVal MKL_INT incX);
public static native @ByVal CBLAS_INDEX cblas_isamin(@Const @ByVal MKL_INT N, @Const FloatPointer X, @Const @ByVal MKL_INT incX);
public static native @ByVal CBLAS_INDEX cblas_isamin(@Const @ByVal MKL_INT N, @Const FloatBuffer X, @Const @ByVal MKL_INT incX);
public static native @ByVal CBLAS_INDEX cblas_isamin(@Const @ByVal MKL_INT N, @Const float[] X, @Const @ByVal MKL_INT incX);
public static native @ByVal CBLAS_INDEX cblas_idamin(@Const @ByVal MKL_INT N, @Const DoublePointer X, @Const @ByVal MKL_INT incX);
public static native @ByVal CBLAS_INDEX cblas_idamin(@Const @ByVal MKL_INT N, @Const DoubleBuffer X, @Const @ByVal MKL_INT incX);
public static native @ByVal CBLAS_INDEX cblas_idamin(@Const @ByVal MKL_INT N, @Const double[] X, @Const @ByVal MKL_INT incX);
public static native @ByVal CBLAS_INDEX cblas_icamin(@Const @ByVal MKL_INT N, @Const Pointer X, @Const @ByVal MKL_INT incX);
public static native @ByVal CBLAS_INDEX cblas_izamin(@Const @ByVal MKL_INT N, @Const Pointer X, @Const @ByVal MKL_INT incX);

/*
 * ===========================================================================
 * Prototypes for level 1 BLAS routines
 * ===========================================================================
 */

/*
 * Routines with standard 4 prefixes (s, d, c, z)
 */
public static native void cblas_sswap(@Const @ByVal MKL_INT N, FloatPointer X, @Const @ByVal MKL_INT incX,
                 FloatPointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_sswap(@Const @ByVal MKL_INT N, FloatBuffer X, @Const @ByVal MKL_INT incX,
                 FloatBuffer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_sswap(@Const @ByVal MKL_INT N, float[] X, @Const @ByVal MKL_INT incX,
                 float[] Y, @Const @ByVal MKL_INT incY);
public static native void cblas_scopy(@Const @ByVal MKL_INT N, @Const FloatPointer X, @Const @ByVal MKL_INT incX,
                 FloatPointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_scopy(@Const @ByVal MKL_INT N, @Const FloatBuffer X, @Const @ByVal MKL_INT incX,
                 FloatBuffer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_scopy(@Const @ByVal MKL_INT N, @Const float[] X, @Const @ByVal MKL_INT incX,
                 float[] Y, @Const @ByVal MKL_INT incY);
public static native void cblas_saxpy(@Const @ByVal MKL_INT N, float alpha, @Const FloatPointer X,
                 @Const @ByVal MKL_INT incX, FloatPointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_saxpy(@Const @ByVal MKL_INT N, float alpha, @Const FloatBuffer X,
                 @Const @ByVal MKL_INT incX, FloatBuffer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_saxpy(@Const @ByVal MKL_INT N, float alpha, @Const float[] X,
                 @Const @ByVal MKL_INT incX, float[] Y, @Const @ByVal MKL_INT incY);
public static native void cblas_saxpby(@Const @ByVal MKL_INT N, float alpha, @Const FloatPointer X,
                 @Const @ByVal MKL_INT incX, float beta, FloatPointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_saxpby(@Const @ByVal MKL_INT N, float alpha, @Const FloatBuffer X,
                 @Const @ByVal MKL_INT incX, float beta, FloatBuffer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_saxpby(@Const @ByVal MKL_INT N, float alpha, @Const float[] X,
                 @Const @ByVal MKL_INT incX, float beta, float[] Y, @Const @ByVal MKL_INT incY);
public static native void cblas_saxpyi(@Const @ByVal MKL_INT N, float alpha, @Const FloatPointer X,
                 @Const MKL_INT indx, FloatPointer Y);
public static native void cblas_saxpyi(@Const @ByVal MKL_INT N, float alpha, @Const FloatBuffer X,
                 @Const MKL_INT indx, FloatBuffer Y);
public static native void cblas_saxpyi(@Const @ByVal MKL_INT N, float alpha, @Const float[] X,
                 @Const MKL_INT indx, float[] Y);
public static native void cblas_sgthr(@Const @ByVal MKL_INT N, @Const FloatPointer Y, FloatPointer X,
                                 @Const MKL_INT indx);
public static native void cblas_sgthr(@Const @ByVal MKL_INT N, @Const FloatBuffer Y, FloatBuffer X,
                                 @Const MKL_INT indx);
public static native void cblas_sgthr(@Const @ByVal MKL_INT N, @Const float[] Y, float[] X,
                                 @Const MKL_INT indx);
public static native void cblas_sgthrz(@Const @ByVal MKL_INT N, FloatPointer Y, FloatPointer X,
                                 @Const MKL_INT indx);
public static native void cblas_sgthrz(@Const @ByVal MKL_INT N, FloatBuffer Y, FloatBuffer X,
                                 @Const MKL_INT indx);
public static native void cblas_sgthrz(@Const @ByVal MKL_INT N, float[] Y, float[] X,
                                 @Const MKL_INT indx);
public static native void cblas_ssctr(@Const @ByVal MKL_INT N, @Const FloatPointer X, @Const MKL_INT indx,
                                 FloatPointer Y);
public static native void cblas_ssctr(@Const @ByVal MKL_INT N, @Const FloatBuffer X, @Const MKL_INT indx,
                                 FloatBuffer Y);
public static native void cblas_ssctr(@Const @ByVal MKL_INT N, @Const float[] X, @Const MKL_INT indx,
                                 float[] Y);
public static native void cblas_srotg(FloatPointer a, FloatPointer b, FloatPointer c, FloatPointer s);
public static native void cblas_srotg(FloatBuffer a, FloatBuffer b, FloatBuffer c, FloatBuffer s);
public static native void cblas_srotg(float[] a, float[] b, float[] c, float[] s);

public static native void cblas_dswap(@Const @ByVal MKL_INT N, DoublePointer X, @Const @ByVal MKL_INT incX,
                 DoublePointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_dswap(@Const @ByVal MKL_INT N, DoubleBuffer X, @Const @ByVal MKL_INT incX,
                 DoubleBuffer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_dswap(@Const @ByVal MKL_INT N, double[] X, @Const @ByVal MKL_INT incX,
                 double[] Y, @Const @ByVal MKL_INT incY);
public static native void cblas_dcopy(@Const @ByVal MKL_INT N, @Const DoublePointer X, @Const @ByVal MKL_INT incX,
                 DoublePointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_dcopy(@Const @ByVal MKL_INT N, @Const DoubleBuffer X, @Const @ByVal MKL_INT incX,
                 DoubleBuffer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_dcopy(@Const @ByVal MKL_INT N, @Const double[] X, @Const @ByVal MKL_INT incX,
                 double[] Y, @Const @ByVal MKL_INT incY);
public static native void cblas_daxpy(@Const @ByVal MKL_INT N, double alpha, @Const DoublePointer X,
                 @Const @ByVal MKL_INT incX, DoublePointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_daxpy(@Const @ByVal MKL_INT N, double alpha, @Const DoubleBuffer X,
                 @Const @ByVal MKL_INT incX, DoubleBuffer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_daxpy(@Const @ByVal MKL_INT N, double alpha, @Const double[] X,
                 @Const @ByVal MKL_INT incX, double[] Y, @Const @ByVal MKL_INT incY);
public static native void cblas_daxpby(@Const @ByVal MKL_INT N, double alpha, @Const DoublePointer X,
                 @Const @ByVal MKL_INT incX, double beta, DoublePointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_daxpby(@Const @ByVal MKL_INT N, double alpha, @Const DoubleBuffer X,
                 @Const @ByVal MKL_INT incX, double beta, DoubleBuffer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_daxpby(@Const @ByVal MKL_INT N, double alpha, @Const double[] X,
                 @Const @ByVal MKL_INT incX, double beta, double[] Y, @Const @ByVal MKL_INT incY);
public static native void cblas_daxpyi(@Const @ByVal MKL_INT N, double alpha, @Const DoublePointer X,
                 @Const MKL_INT indx, DoublePointer Y);
public static native void cblas_daxpyi(@Const @ByVal MKL_INT N, double alpha, @Const DoubleBuffer X,
                 @Const MKL_INT indx, DoubleBuffer Y);
public static native void cblas_daxpyi(@Const @ByVal MKL_INT N, double alpha, @Const double[] X,
                 @Const MKL_INT indx, double[] Y);
public static native void cblas_dgthr(@Const @ByVal MKL_INT N, @Const DoublePointer Y, DoublePointer X,
                                 @Const MKL_INT indx);
public static native void cblas_dgthr(@Const @ByVal MKL_INT N, @Const DoubleBuffer Y, DoubleBuffer X,
                                 @Const MKL_INT indx);
public static native void cblas_dgthr(@Const @ByVal MKL_INT N, @Const double[] Y, double[] X,
                                 @Const MKL_INT indx);
public static native void cblas_dgthrz(@Const @ByVal MKL_INT N, DoublePointer Y, DoublePointer X,
                                 @Const MKL_INT indx);
public static native void cblas_dgthrz(@Const @ByVal MKL_INT N, DoubleBuffer Y, DoubleBuffer X,
                                 @Const MKL_INT indx);
public static native void cblas_dgthrz(@Const @ByVal MKL_INT N, double[] Y, double[] X,
                                 @Const MKL_INT indx);
public static native void cblas_dsctr(@Const @ByVal MKL_INT N, @Const DoublePointer X, @Const MKL_INT indx,
                                 DoublePointer Y);
public static native void cblas_dsctr(@Const @ByVal MKL_INT N, @Const DoubleBuffer X, @Const MKL_INT indx,
                                 DoubleBuffer Y);
public static native void cblas_dsctr(@Const @ByVal MKL_INT N, @Const double[] X, @Const MKL_INT indx,
                                 double[] Y);
public static native void cblas_drotg(DoublePointer a, DoublePointer b, DoublePointer c, DoublePointer s);
public static native void cblas_drotg(DoubleBuffer a, DoubleBuffer b, DoubleBuffer c, DoubleBuffer s);
public static native void cblas_drotg(double[] a, double[] b, double[] c, double[] s);

public static native void cblas_cswap(@Const @ByVal MKL_INT N, Pointer X, @Const @ByVal MKL_INT incX,
                 Pointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_ccopy(@Const @ByVal MKL_INT N, @Const Pointer X, @Const @ByVal MKL_INT incX,
                 Pointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_caxpy(@Const @ByVal MKL_INT N, @Const Pointer alpha, @Const Pointer X,
                 @Const @ByVal MKL_INT incX, Pointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_caxpby(@Const @ByVal MKL_INT N, @Const Pointer alpha, @Const Pointer X,
                 @Const @ByVal MKL_INT incX, @Const Pointer beta, Pointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_caxpyi(@Const @ByVal MKL_INT N, @Const Pointer alpha, @Const Pointer X,
                 @Const MKL_INT indx, Pointer Y);
public static native void cblas_cgthr(@Const @ByVal MKL_INT N, @Const Pointer Y, Pointer X,
                                 @Const MKL_INT indx);
public static native void cblas_cgthrz(@Const @ByVal MKL_INT N, Pointer Y, Pointer X,
                                 @Const MKL_INT indx);
public static native void cblas_csctr(@Const @ByVal MKL_INT N, @Const Pointer X, @Const MKL_INT indx,
                                 Pointer Y);
public static native void cblas_crotg(Pointer a, @Const Pointer b, FloatPointer c, Pointer s);
public static native void cblas_crotg(Pointer a, @Const Pointer b, FloatBuffer c, Pointer s);
public static native void cblas_crotg(Pointer a, @Const Pointer b, float[] c, Pointer s);

public static native void cblas_zswap(@Const @ByVal MKL_INT N, Pointer X, @Const @ByVal MKL_INT incX,
                 Pointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_zcopy(@Const @ByVal MKL_INT N, @Const Pointer X, @Const @ByVal MKL_INT incX,
                 Pointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_zaxpy(@Const @ByVal MKL_INT N, @Const Pointer alpha, @Const Pointer X,
                 @Const @ByVal MKL_INT incX, Pointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_zaxpby(@Const @ByVal MKL_INT N, @Const Pointer alpha, @Const Pointer X,
                 @Const @ByVal MKL_INT incX, @Const Pointer beta, Pointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_zaxpyi(@Const @ByVal MKL_INT N, @Const Pointer alpha, @Const Pointer X,
                 @Const MKL_INT indx, Pointer Y);
public static native void cblas_zgthr(@Const @ByVal MKL_INT N, @Const Pointer Y, Pointer X,
                                 @Const MKL_INT indx);
public static native void cblas_zgthrz(@Const @ByVal MKL_INT N, Pointer Y, Pointer X,
                                 @Const MKL_INT indx);
public static native void cblas_zsctr(@Const @ByVal MKL_INT N, @Const Pointer X, @Const MKL_INT indx,
                                 Pointer Y);
public static native void cblas_zrotg(Pointer a, @Const Pointer b, DoublePointer c, Pointer s);
public static native void cblas_zrotg(Pointer a, @Const Pointer b, DoubleBuffer c, Pointer s);
public static native void cblas_zrotg(Pointer a, @Const Pointer b, double[] c, Pointer s);

/*
 * Routines with S and D prefix only
 */
public static native void cblas_srotmg(FloatPointer d1, FloatPointer d2, FloatPointer b1, float b2, FloatPointer P);
public static native void cblas_srotmg(FloatBuffer d1, FloatBuffer d2, FloatBuffer b1, float b2, FloatBuffer P);
public static native void cblas_srotmg(float[] d1, float[] d2, float[] b1, float b2, float[] P);
public static native void cblas_srot(@Const @ByVal MKL_INT N, FloatPointer X, @Const @ByVal MKL_INT incX,
                FloatPointer Y, @Const @ByVal MKL_INT incY, float c, float s);
public static native void cblas_srot(@Const @ByVal MKL_INT N, FloatBuffer X, @Const @ByVal MKL_INT incX,
                FloatBuffer Y, @Const @ByVal MKL_INT incY, float c, float s);
public static native void cblas_srot(@Const @ByVal MKL_INT N, float[] X, @Const @ByVal MKL_INT incX,
                float[] Y, @Const @ByVal MKL_INT incY, float c, float s);
public static native void cblas_sroti(@Const @ByVal MKL_INT N, FloatPointer X, @Const MKL_INT indx,
                FloatPointer Y, float c, float s);
public static native void cblas_sroti(@Const @ByVal MKL_INT N, FloatBuffer X, @Const MKL_INT indx,
                FloatBuffer Y, float c, float s);
public static native void cblas_sroti(@Const @ByVal MKL_INT N, float[] X, @Const MKL_INT indx,
                float[] Y, float c, float s);
public static native void cblas_srotm(@Const @ByVal MKL_INT N, FloatPointer X, @Const @ByVal MKL_INT incX,
                FloatPointer Y, @Const @ByVal MKL_INT incY, @Const FloatPointer P);
public static native void cblas_srotm(@Const @ByVal MKL_INT N, FloatBuffer X, @Const @ByVal MKL_INT incX,
                FloatBuffer Y, @Const @ByVal MKL_INT incY, @Const FloatBuffer P);
public static native void cblas_srotm(@Const @ByVal MKL_INT N, float[] X, @Const @ByVal MKL_INT incX,
                float[] Y, @Const @ByVal MKL_INT incY, @Const float[] P);

public static native void cblas_drotmg(DoublePointer d1, DoublePointer d2, DoublePointer b1, double b2, DoublePointer P);
public static native void cblas_drotmg(DoubleBuffer d1, DoubleBuffer d2, DoubleBuffer b1, double b2, DoubleBuffer P);
public static native void cblas_drotmg(double[] d1, double[] d2, double[] b1, double b2, double[] P);
public static native void cblas_drot(@Const @ByVal MKL_INT N, DoublePointer X, @Const @ByVal MKL_INT incX,
                DoublePointer Y, @Const @ByVal MKL_INT incY, double c, double s);
public static native void cblas_drot(@Const @ByVal MKL_INT N, DoubleBuffer X, @Const @ByVal MKL_INT incX,
                DoubleBuffer Y, @Const @ByVal MKL_INT incY, double c, double s);
public static native void cblas_drot(@Const @ByVal MKL_INT N, double[] X, @Const @ByVal MKL_INT incX,
                double[] Y, @Const @ByVal MKL_INT incY, double c, double s);
public static native void cblas_drotm(@Const @ByVal MKL_INT N, DoublePointer X, @Const @ByVal MKL_INT incX,
                DoublePointer Y, @Const @ByVal MKL_INT incY, @Const DoublePointer P);
public static native void cblas_drotm(@Const @ByVal MKL_INT N, DoubleBuffer X, @Const @ByVal MKL_INT incX,
                DoubleBuffer Y, @Const @ByVal MKL_INT incY, @Const DoubleBuffer P);
public static native void cblas_drotm(@Const @ByVal MKL_INT N, double[] X, @Const @ByVal MKL_INT incX,
                double[] Y, @Const @ByVal MKL_INT incY, @Const double[] P);
public static native void cblas_droti(@Const @ByVal MKL_INT N, DoublePointer X, @Const MKL_INT indx,
                DoublePointer Y, double c, double s);
public static native void cblas_droti(@Const @ByVal MKL_INT N, DoubleBuffer X, @Const MKL_INT indx,
                DoubleBuffer Y, double c, double s);
public static native void cblas_droti(@Const @ByVal MKL_INT N, double[] X, @Const MKL_INT indx,
                double[] Y, double c, double s);

/*
 * Routines with CS and ZD prefix only
 */
public static native void cblas_csrot(@Const @ByVal MKL_INT N, Pointer X, @Const @ByVal MKL_INT incX,
                 Pointer Y, @Const @ByVal MKL_INT incY, float c, float s);
public static native void cblas_zdrot(@Const @ByVal MKL_INT N, Pointer X, @Const @ByVal MKL_INT incX,
                 Pointer Y, @Const @ByVal MKL_INT incY, double c, double s);

/*
 * Routines with S D C Z CS and ZD prefixes
 */
public static native void cblas_sscal(@Const @ByVal MKL_INT N, float alpha, FloatPointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_sscal(@Const @ByVal MKL_INT N, float alpha, FloatBuffer X, @Const @ByVal MKL_INT incX);
public static native void cblas_sscal(@Const @ByVal MKL_INT N, float alpha, float[] X, @Const @ByVal MKL_INT incX);
public static native void cblas_dscal(@Const @ByVal MKL_INT N, double alpha, DoublePointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_dscal(@Const @ByVal MKL_INT N, double alpha, DoubleBuffer X, @Const @ByVal MKL_INT incX);
public static native void cblas_dscal(@Const @ByVal MKL_INT N, double alpha, double[] X, @Const @ByVal MKL_INT incX);
public static native void cblas_cscal(@Const @ByVal MKL_INT N, @Const Pointer alpha, Pointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_zscal(@Const @ByVal MKL_INT N, @Const Pointer alpha, Pointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_csscal(@Const @ByVal MKL_INT N, float alpha, Pointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_zdscal(@Const @ByVal MKL_INT N, double alpha, Pointer X, @Const @ByVal MKL_INT incX);

/*
 * ===========================================================================
 * Prototypes for level 2 BLAS
 * ===========================================================================
 */

/*
 * Routines with standard 4 prefixes (S, D, C, Z)
 */
public static native void cblas_sgemv(@Cast("const CBLAS_LAYOUT") int Layout,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 float alpha, @Const FloatPointer A, @Const @ByVal MKL_INT lda,
                 @Const FloatPointer X, @Const @ByVal MKL_INT incX, float beta,
                 FloatPointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_sgemv(@Cast("const CBLAS_LAYOUT") int Layout,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 float alpha, @Const FloatBuffer A, @Const @ByVal MKL_INT lda,
                 @Const FloatBuffer X, @Const @ByVal MKL_INT incX, float beta,
                 FloatBuffer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_sgemv(@Cast("const CBLAS_LAYOUT") int Layout,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 float alpha, @Const float[] A, @Const @ByVal MKL_INT lda,
                 @Const float[] X, @Const @ByVal MKL_INT incX, float beta,
                 float[] Y, @Const @ByVal MKL_INT incY);
public static native void cblas_sgbmv(@Cast("const CBLAS_LAYOUT") int Layout,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT KL, @Const @ByVal MKL_INT KU, float alpha,
                 @Const FloatPointer A, @Const @ByVal MKL_INT lda, @Const FloatPointer X,
                 @Const @ByVal MKL_INT incX, float beta, FloatPointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_sgbmv(@Cast("const CBLAS_LAYOUT") int Layout,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT KL, @Const @ByVal MKL_INT KU, float alpha,
                 @Const FloatBuffer A, @Const @ByVal MKL_INT lda, @Const FloatBuffer X,
                 @Const @ByVal MKL_INT incX, float beta, FloatBuffer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_sgbmv(@Cast("const CBLAS_LAYOUT") int Layout,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT KL, @Const @ByVal MKL_INT KU, float alpha,
                 @Const float[] A, @Const @ByVal MKL_INT lda, @Const float[] X,
                 @Const @ByVal MKL_INT incX, float beta, float[] Y, @Const @ByVal MKL_INT incY);
public static native void cblas_strmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const FloatPointer A, @Const @ByVal MKL_INT lda,
                 FloatPointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_strmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const FloatBuffer A, @Const @ByVal MKL_INT lda,
                 FloatBuffer X, @Const @ByVal MKL_INT incX);
public static native void cblas_strmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const float[] A, @Const @ByVal MKL_INT lda,
                 float[] X, @Const @ByVal MKL_INT incX);
public static native void cblas_stbmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, @Const FloatPointer A, @Const @ByVal MKL_INT lda,
                 FloatPointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_stbmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, @Const FloatBuffer A, @Const @ByVal MKL_INT lda,
                 FloatBuffer X, @Const @ByVal MKL_INT incX);
public static native void cblas_stbmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, @Const float[] A, @Const @ByVal MKL_INT lda,
                 float[] X, @Const @ByVal MKL_INT incX);
public static native void cblas_stpmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const FloatPointer Ap, FloatPointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_stpmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const FloatBuffer Ap, FloatBuffer X, @Const @ByVal MKL_INT incX);
public static native void cblas_stpmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const float[] Ap, float[] X, @Const @ByVal MKL_INT incX);
public static native void cblas_strsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const FloatPointer A, @Const @ByVal MKL_INT lda, FloatPointer X,
                 @Const @ByVal MKL_INT incX);
public static native void cblas_strsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const FloatBuffer A, @Const @ByVal MKL_INT lda, FloatBuffer X,
                 @Const @ByVal MKL_INT incX);
public static native void cblas_strsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const float[] A, @Const @ByVal MKL_INT lda, float[] X,
                 @Const @ByVal MKL_INT incX);
public static native void cblas_stbsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, @Const FloatPointer A, @Const @ByVal MKL_INT lda,
                 FloatPointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_stbsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, @Const FloatBuffer A, @Const @ByVal MKL_INT lda,
                 FloatBuffer X, @Const @ByVal MKL_INT incX);
public static native void cblas_stbsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, @Const float[] A, @Const @ByVal MKL_INT lda,
                 float[] X, @Const @ByVal MKL_INT incX);
public static native void cblas_stpsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const FloatPointer Ap, FloatPointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_stpsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const FloatBuffer Ap, FloatBuffer X, @Const @ByVal MKL_INT incX);
public static native void cblas_stpsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const float[] Ap, float[] X, @Const @ByVal MKL_INT incX);

public static native void cblas_dgemv(@Cast("const CBLAS_LAYOUT") int Layout,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 double alpha, @Const DoublePointer A, @Const @ByVal MKL_INT lda,
                 @Const DoublePointer X, @Const @ByVal MKL_INT incX, double beta,
                 DoublePointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_dgemv(@Cast("const CBLAS_LAYOUT") int Layout,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 double alpha, @Const DoubleBuffer A, @Const @ByVal MKL_INT lda,
                 @Const DoubleBuffer X, @Const @ByVal MKL_INT incX, double beta,
                 DoubleBuffer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_dgemv(@Cast("const CBLAS_LAYOUT") int Layout,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 double alpha, @Const double[] A, @Const @ByVal MKL_INT lda,
                 @Const double[] X, @Const @ByVal MKL_INT incX, double beta,
                 double[] Y, @Const @ByVal MKL_INT incY);
public static native void cblas_dgbmv(@Cast("const CBLAS_LAYOUT") int Layout,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT KL, @Const @ByVal MKL_INT KU, double alpha,
                 @Const DoublePointer A, @Const @ByVal MKL_INT lda, @Const DoublePointer X,
                 @Const @ByVal MKL_INT incX, double beta, DoublePointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_dgbmv(@Cast("const CBLAS_LAYOUT") int Layout,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT KL, @Const @ByVal MKL_INT KU, double alpha,
                 @Const DoubleBuffer A, @Const @ByVal MKL_INT lda, @Const DoubleBuffer X,
                 @Const @ByVal MKL_INT incX, double beta, DoubleBuffer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_dgbmv(@Cast("const CBLAS_LAYOUT") int Layout,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT KL, @Const @ByVal MKL_INT KU, double alpha,
                 @Const double[] A, @Const @ByVal MKL_INT lda, @Const double[] X,
                 @Const @ByVal MKL_INT incX, double beta, double[] Y, @Const @ByVal MKL_INT incY);
public static native void cblas_dtrmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const DoublePointer A, @Const @ByVal MKL_INT lda,
                 DoublePointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_dtrmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const DoubleBuffer A, @Const @ByVal MKL_INT lda,
                 DoubleBuffer X, @Const @ByVal MKL_INT incX);
public static native void cblas_dtrmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const double[] A, @Const @ByVal MKL_INT lda,
                 double[] X, @Const @ByVal MKL_INT incX);
public static native void cblas_dtbmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, @Const DoublePointer A, @Const @ByVal MKL_INT lda,
                 DoublePointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_dtbmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, @Const DoubleBuffer A, @Const @ByVal MKL_INT lda,
                 DoubleBuffer X, @Const @ByVal MKL_INT incX);
public static native void cblas_dtbmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, @Const double[] A, @Const @ByVal MKL_INT lda,
                 double[] X, @Const @ByVal MKL_INT incX);
public static native void cblas_dtpmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const DoublePointer Ap, DoublePointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_dtpmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const DoubleBuffer Ap, DoubleBuffer X, @Const @ByVal MKL_INT incX);
public static native void cblas_dtpmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const double[] Ap, double[] X, @Const @ByVal MKL_INT incX);
public static native void cblas_dtrsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const DoublePointer A, @Const @ByVal MKL_INT lda, DoublePointer X,
                 @Const @ByVal MKL_INT incX);
public static native void cblas_dtrsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const DoubleBuffer A, @Const @ByVal MKL_INT lda, DoubleBuffer X,
                 @Const @ByVal MKL_INT incX);
public static native void cblas_dtrsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const double[] A, @Const @ByVal MKL_INT lda, double[] X,
                 @Const @ByVal MKL_INT incX);
public static native void cblas_dtbsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, @Const DoublePointer A, @Const @ByVal MKL_INT lda,
                 DoublePointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_dtbsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, @Const DoubleBuffer A, @Const @ByVal MKL_INT lda,
                 DoubleBuffer X, @Const @ByVal MKL_INT incX);
public static native void cblas_dtbsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, @Const double[] A, @Const @ByVal MKL_INT lda,
                 double[] X, @Const @ByVal MKL_INT incX);
public static native void cblas_dtpsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const DoublePointer Ap, DoublePointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_dtpsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const DoubleBuffer Ap, DoubleBuffer X, @Const @ByVal MKL_INT incX);
public static native void cblas_dtpsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const double[] Ap, double[] X, @Const @ByVal MKL_INT incX);

public static native void cblas_cgemv(@Cast("const CBLAS_LAYOUT") int Layout,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const Pointer alpha, @Const Pointer A, @Const @ByVal MKL_INT lda,
                 @Const Pointer X, @Const @ByVal MKL_INT incX, @Const Pointer beta,
                 Pointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_cgbmv(@Cast("const CBLAS_LAYOUT") int Layout,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT KL, @Const @ByVal MKL_INT KU, @Const Pointer alpha,
                 @Const Pointer A, @Const @ByVal MKL_INT lda, @Const Pointer X,
                 @Const @ByVal MKL_INT incX, @Const Pointer beta, Pointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_ctrmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const Pointer A, @Const @ByVal MKL_INT lda,
                 Pointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_ctbmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, @Const Pointer A, @Const @ByVal MKL_INT lda,
                 Pointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_ctpmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const Pointer Ap, Pointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_ctrsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const Pointer A, @Const @ByVal MKL_INT lda, Pointer X,
                 @Const @ByVal MKL_INT incX);
public static native void cblas_ctbsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, @Const Pointer A, @Const @ByVal MKL_INT lda,
                 Pointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_ctpsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const Pointer Ap, Pointer X, @Const @ByVal MKL_INT incX);

public static native void cblas_zgemv(@Cast("const CBLAS_LAYOUT") int Layout,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const Pointer alpha, @Const Pointer A, @Const @ByVal MKL_INT lda,
                 @Const Pointer X, @Const @ByVal MKL_INT incX, @Const Pointer beta,
                 Pointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_zgbmv(@Cast("const CBLAS_LAYOUT") int Layout,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT KL, @Const @ByVal MKL_INT KU, @Const Pointer alpha,
                 @Const Pointer A, @Const @ByVal MKL_INT lda, @Const Pointer X,
                 @Const @ByVal MKL_INT incX, @Const Pointer beta, Pointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_ztrmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const Pointer A, @Const @ByVal MKL_INT lda,
                 Pointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_ztbmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, @Const Pointer A, @Const @ByVal MKL_INT lda,
                 Pointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_ztpmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const Pointer Ap, Pointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_ztrsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const Pointer A, @Const @ByVal MKL_INT lda, Pointer X,
                 @Const @ByVal MKL_INT incX);
public static native void cblas_ztbsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, @Const Pointer A, @Const @ByVal MKL_INT lda,
                 Pointer X, @Const @ByVal MKL_INT incX);
public static native void cblas_ztpsv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_DIAG") int Diag,
                 @Const @ByVal MKL_INT N, @Const Pointer Ap, Pointer X, @Const @ByVal MKL_INT incX);


/*
 * Routines with S and D prefixes only
 */
public static native void cblas_ssymv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, float alpha, @Const FloatPointer A,
                 @Const @ByVal MKL_INT lda, @Const FloatPointer X, @Const @ByVal MKL_INT incX,
                 float beta, FloatPointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_ssymv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, float alpha, @Const FloatBuffer A,
                 @Const @ByVal MKL_INT lda, @Const FloatBuffer X, @Const @ByVal MKL_INT incX,
                 float beta, FloatBuffer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_ssymv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, float alpha, @Const float[] A,
                 @Const @ByVal MKL_INT lda, @Const float[] X, @Const @ByVal MKL_INT incX,
                 float beta, float[] Y, @Const @ByVal MKL_INT incY);
public static native void cblas_ssbmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, float alpha, @Const FloatPointer A,
                 @Const @ByVal MKL_INT lda, @Const FloatPointer X, @Const @ByVal MKL_INT incX,
                 float beta, FloatPointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_ssbmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, float alpha, @Const FloatBuffer A,
                 @Const @ByVal MKL_INT lda, @Const FloatBuffer X, @Const @ByVal MKL_INT incX,
                 float beta, FloatBuffer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_ssbmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, float alpha, @Const float[] A,
                 @Const @ByVal MKL_INT lda, @Const float[] X, @Const @ByVal MKL_INT incX,
                 float beta, float[] Y, @Const @ByVal MKL_INT incY);
public static native void cblas_sspmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, float alpha, @Const FloatPointer Ap,
                 @Const FloatPointer X, @Const @ByVal MKL_INT incX,
                 float beta, FloatPointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_sspmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, float alpha, @Const FloatBuffer Ap,
                 @Const FloatBuffer X, @Const @ByVal MKL_INT incX,
                 float beta, FloatBuffer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_sspmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, float alpha, @Const float[] Ap,
                 @Const float[] X, @Const @ByVal MKL_INT incX,
                 float beta, float[] Y, @Const @ByVal MKL_INT incY);
public static native void cblas_sger(@Cast("const CBLAS_LAYOUT") int Layout, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                float alpha, @Const FloatPointer X, @Const @ByVal MKL_INT incX,
                @Const FloatPointer Y, @Const @ByVal MKL_INT incY, FloatPointer A, @Const @ByVal MKL_INT lda);
public static native void cblas_sger(@Cast("const CBLAS_LAYOUT") int Layout, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                float alpha, @Const FloatBuffer X, @Const @ByVal MKL_INT incX,
                @Const FloatBuffer Y, @Const @ByVal MKL_INT incY, FloatBuffer A, @Const @ByVal MKL_INT lda);
public static native void cblas_sger(@Cast("const CBLAS_LAYOUT") int Layout, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                float alpha, @Const float[] X, @Const @ByVal MKL_INT incX,
                @Const float[] Y, @Const @ByVal MKL_INT incY, float[] A, @Const @ByVal MKL_INT lda);
public static native void cblas_ssyr(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, float alpha, @Const FloatPointer X,
                @Const @ByVal MKL_INT incX, FloatPointer A, @Const @ByVal MKL_INT lda);
public static native void cblas_ssyr(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, float alpha, @Const FloatBuffer X,
                @Const @ByVal MKL_INT incX, FloatBuffer A, @Const @ByVal MKL_INT lda);
public static native void cblas_ssyr(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, float alpha, @Const float[] X,
                @Const @ByVal MKL_INT incX, float[] A, @Const @ByVal MKL_INT lda);
public static native void cblas_sspr(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, float alpha, @Const FloatPointer X,
                @Const @ByVal MKL_INT incX, FloatPointer Ap);
public static native void cblas_sspr(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, float alpha, @Const FloatBuffer X,
                @Const @ByVal MKL_INT incX, FloatBuffer Ap);
public static native void cblas_sspr(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, float alpha, @Const float[] X,
                @Const @ByVal MKL_INT incX, float[] Ap);
public static native void cblas_ssyr2(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, float alpha, @Const FloatPointer X,
                @Const @ByVal MKL_INT incX, @Const FloatPointer Y, @Const @ByVal MKL_INT incY, FloatPointer A,
                @Const @ByVal MKL_INT lda);
public static native void cblas_ssyr2(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, float alpha, @Const FloatBuffer X,
                @Const @ByVal MKL_INT incX, @Const FloatBuffer Y, @Const @ByVal MKL_INT incY, FloatBuffer A,
                @Const @ByVal MKL_INT lda);
public static native void cblas_ssyr2(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, float alpha, @Const float[] X,
                @Const @ByVal MKL_INT incX, @Const float[] Y, @Const @ByVal MKL_INT incY, float[] A,
                @Const @ByVal MKL_INT lda);
public static native void cblas_sspr2(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, float alpha, @Const FloatPointer X,
                @Const @ByVal MKL_INT incX, @Const FloatPointer Y, @Const @ByVal MKL_INT incY, FloatPointer A);
public static native void cblas_sspr2(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, float alpha, @Const FloatBuffer X,
                @Const @ByVal MKL_INT incX, @Const FloatBuffer Y, @Const @ByVal MKL_INT incY, FloatBuffer A);
public static native void cblas_sspr2(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, float alpha, @Const float[] X,
                @Const @ByVal MKL_INT incX, @Const float[] Y, @Const @ByVal MKL_INT incY, float[] A);

public static native void cblas_dsymv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, double alpha, @Const DoublePointer A,
                 @Const @ByVal MKL_INT lda, @Const DoublePointer X, @Const @ByVal MKL_INT incX,
                 double beta, DoublePointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_dsymv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, double alpha, @Const DoubleBuffer A,
                 @Const @ByVal MKL_INT lda, @Const DoubleBuffer X, @Const @ByVal MKL_INT incX,
                 double beta, DoubleBuffer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_dsymv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, double alpha, @Const double[] A,
                 @Const @ByVal MKL_INT lda, @Const double[] X, @Const @ByVal MKL_INT incX,
                 double beta, double[] Y, @Const @ByVal MKL_INT incY);
public static native void cblas_dsbmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, double alpha, @Const DoublePointer A,
                 @Const @ByVal MKL_INT lda, @Const DoublePointer X, @Const @ByVal MKL_INT incX,
                 double beta, DoublePointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_dsbmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, double alpha, @Const DoubleBuffer A,
                 @Const @ByVal MKL_INT lda, @Const DoubleBuffer X, @Const @ByVal MKL_INT incX,
                 double beta, DoubleBuffer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_dsbmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, double alpha, @Const double[] A,
                 @Const @ByVal MKL_INT lda, @Const double[] X, @Const @ByVal MKL_INT incX,
                 double beta, double[] Y, @Const @ByVal MKL_INT incY);
public static native void cblas_dspmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, double alpha, @Const DoublePointer Ap,
                 @Const DoublePointer X, @Const @ByVal MKL_INT incX,
                 double beta, DoublePointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_dspmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, double alpha, @Const DoubleBuffer Ap,
                 @Const DoubleBuffer X, @Const @ByVal MKL_INT incX,
                 double beta, DoubleBuffer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_dspmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, double alpha, @Const double[] Ap,
                 @Const double[] X, @Const @ByVal MKL_INT incX,
                 double beta, double[] Y, @Const @ByVal MKL_INT incY);
public static native void cblas_dger(@Cast("const CBLAS_LAYOUT") int Layout, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                double alpha, @Const DoublePointer X, @Const @ByVal MKL_INT incX,
                @Const DoublePointer Y, @Const @ByVal MKL_INT incY, DoublePointer A, @Const @ByVal MKL_INT lda);
public static native void cblas_dger(@Cast("const CBLAS_LAYOUT") int Layout, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                double alpha, @Const DoubleBuffer X, @Const @ByVal MKL_INT incX,
                @Const DoubleBuffer Y, @Const @ByVal MKL_INT incY, DoubleBuffer A, @Const @ByVal MKL_INT lda);
public static native void cblas_dger(@Cast("const CBLAS_LAYOUT") int Layout, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                double alpha, @Const double[] X, @Const @ByVal MKL_INT incX,
                @Const double[] Y, @Const @ByVal MKL_INT incY, double[] A, @Const @ByVal MKL_INT lda);
public static native void cblas_dsyr(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, double alpha, @Const DoublePointer X,
                @Const @ByVal MKL_INT incX, DoublePointer A, @Const @ByVal MKL_INT lda);
public static native void cblas_dsyr(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, double alpha, @Const DoubleBuffer X,
                @Const @ByVal MKL_INT incX, DoubleBuffer A, @Const @ByVal MKL_INT lda);
public static native void cblas_dsyr(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, double alpha, @Const double[] X,
                @Const @ByVal MKL_INT incX, double[] A, @Const @ByVal MKL_INT lda);
public static native void cblas_dspr(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, double alpha, @Const DoublePointer X,
                @Const @ByVal MKL_INT incX, DoublePointer Ap);
public static native void cblas_dspr(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, double alpha, @Const DoubleBuffer X,
                @Const @ByVal MKL_INT incX, DoubleBuffer Ap);
public static native void cblas_dspr(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, double alpha, @Const double[] X,
                @Const @ByVal MKL_INT incX, double[] Ap);
public static native void cblas_dsyr2(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, double alpha, @Const DoublePointer X,
                @Const @ByVal MKL_INT incX, @Const DoublePointer Y, @Const @ByVal MKL_INT incY, DoublePointer A,
                @Const @ByVal MKL_INT lda);
public static native void cblas_dsyr2(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, double alpha, @Const DoubleBuffer X,
                @Const @ByVal MKL_INT incX, @Const DoubleBuffer Y, @Const @ByVal MKL_INT incY, DoubleBuffer A,
                @Const @ByVal MKL_INT lda);
public static native void cblas_dsyr2(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, double alpha, @Const double[] X,
                @Const @ByVal MKL_INT incX, @Const double[] Y, @Const @ByVal MKL_INT incY, double[] A,
                @Const @ByVal MKL_INT lda);
public static native void cblas_dspr2(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, double alpha, @Const DoublePointer X,
                @Const @ByVal MKL_INT incX, @Const DoublePointer Y, @Const @ByVal MKL_INT incY, DoublePointer A);
public static native void cblas_dspr2(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, double alpha, @Const DoubleBuffer X,
                @Const @ByVal MKL_INT incX, @Const DoubleBuffer Y, @Const @ByVal MKL_INT incY, DoubleBuffer A);
public static native void cblas_dspr2(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, double alpha, @Const double[] X,
                @Const @ByVal MKL_INT incX, @Const double[] Y, @Const @ByVal MKL_INT incY, double[] A);

/*
 * Routines with C and Z prefixes only
 */
public static native void cblas_chemv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, @Const Pointer alpha, @Const Pointer A,
                 @Const @ByVal MKL_INT lda, @Const Pointer X, @Const @ByVal MKL_INT incX,
                 @Const Pointer beta, Pointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_chbmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, @Const Pointer alpha, @Const Pointer A,
                 @Const @ByVal MKL_INT lda, @Const Pointer X, @Const @ByVal MKL_INT incX,
                 @Const Pointer beta, Pointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_chpmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, @Const Pointer alpha, @Const Pointer Ap,
                 @Const Pointer X, @Const @ByVal MKL_INT incX,
                 @Const Pointer beta, Pointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_cgeru(@Cast("const CBLAS_LAYOUT") int Layout, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const Pointer alpha, @Const Pointer X, @Const @ByVal MKL_INT incX,
                 @Const Pointer Y, @Const @ByVal MKL_INT incY, Pointer A, @Const @ByVal MKL_INT lda);
public static native void cblas_cgerc(@Cast("const CBLAS_LAYOUT") int Layout, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const Pointer alpha, @Const Pointer X, @Const @ByVal MKL_INT incX,
                 @Const Pointer Y, @Const @ByVal MKL_INT incY, Pointer A, @Const @ByVal MKL_INT lda);
public static native void cblas_cher(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, float alpha, @Const Pointer X, @Const @ByVal MKL_INT incX,
                Pointer A, @Const @ByVal MKL_INT lda);
public static native void cblas_chpr(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, float alpha, @Const Pointer X,
                @Const @ByVal MKL_INT incX, Pointer A);
public static native void cblas_cher2(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo, @Const @ByVal MKL_INT N,
                @Const Pointer alpha, @Const Pointer X, @Const @ByVal MKL_INT incX,
                @Const Pointer Y, @Const @ByVal MKL_INT incY, Pointer A, @Const @ByVal MKL_INT lda);
public static native void cblas_chpr2(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo, @Const @ByVal MKL_INT N,
                @Const Pointer alpha, @Const Pointer X, @Const @ByVal MKL_INT incX,
                @Const Pointer Y, @Const @ByVal MKL_INT incY, Pointer Ap);

public static native void cblas_zhemv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, @Const Pointer alpha, @Const Pointer A,
                 @Const @ByVal MKL_INT lda, @Const Pointer X, @Const @ByVal MKL_INT incX,
                 @Const Pointer beta, Pointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_zhbmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K, @Const Pointer alpha, @Const Pointer A,
                 @Const @ByVal MKL_INT lda, @Const Pointer X, @Const @ByVal MKL_INT incX,
                 @Const Pointer beta, Pointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_zhpmv(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Const @ByVal MKL_INT N, @Const Pointer alpha, @Const Pointer Ap,
                 @Const Pointer X, @Const @ByVal MKL_INT incX,
                 @Const Pointer beta, Pointer Y, @Const @ByVal MKL_INT incY);
public static native void cblas_zgeru(@Cast("const CBLAS_LAYOUT") int Layout, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const Pointer alpha, @Const Pointer X, @Const @ByVal MKL_INT incX,
                 @Const Pointer Y, @Const @ByVal MKL_INT incY, Pointer A, @Const @ByVal MKL_INT lda);
public static native void cblas_zgerc(@Cast("const CBLAS_LAYOUT") int Layout, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const Pointer alpha, @Const Pointer X, @Const @ByVal MKL_INT incX,
                 @Const Pointer Y, @Const @ByVal MKL_INT incY, Pointer A, @Const @ByVal MKL_INT lda);
public static native void cblas_zher(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, double alpha, @Const Pointer X, @Const @ByVal MKL_INT incX,
                Pointer A, @Const @ByVal MKL_INT lda);
public static native void cblas_zhpr(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                @Const @ByVal MKL_INT N, double alpha, @Const Pointer X,
                @Const @ByVal MKL_INT incX, Pointer A);
public static native void cblas_zher2(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo, @Const @ByVal MKL_INT N,
                @Const Pointer alpha, @Const Pointer X, @Const @ByVal MKL_INT incX,
                @Const Pointer Y, @Const @ByVal MKL_INT incY, Pointer A, @Const @ByVal MKL_INT lda);
public static native void cblas_zhpr2(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo, @Const @ByVal MKL_INT N,
                @Const Pointer alpha, @Const Pointer X, @Const @ByVal MKL_INT incX,
                @Const Pointer Y, @Const @ByVal MKL_INT incY, Pointer Ap);

/*
 * ===========================================================================
 * Prototypes for level 3 BLAS
 * ===========================================================================
 */

/*
 * Routines with standard 4 prefixes (S, D, C, Z)
 */
public static native void cblas_sgemm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_TRANSPOSE") int TransB, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, float alpha, @Const FloatPointer A,
                 @Const @ByVal MKL_INT lda, @Const FloatPointer B, @Const @ByVal MKL_INT ldb,
                 float beta, FloatPointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_sgemm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_TRANSPOSE") int TransB, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, float alpha, @Const FloatBuffer A,
                 @Const @ByVal MKL_INT lda, @Const FloatBuffer B, @Const @ByVal MKL_INT ldb,
                 float beta, FloatBuffer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_sgemm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_TRANSPOSE") int TransB, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, float alpha, @Const float[] A,
                 @Const @ByVal MKL_INT lda, @Const float[] B, @Const @ByVal MKL_INT ldb,
                 float beta, float[] C, @Const @ByVal MKL_INT ldc);
public static native void cblas_sgemm_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") IntPointer TransA_Array,
                       @Cast("const CBLAS_TRANSPOSE*") IntPointer TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                       @Const MKL_INT K_Array, @Const FloatPointer alpha_Array, @Cast("const float**") PointerPointer A_Array,
                       @Const MKL_INT lda_Array, @Cast("const float**") PointerPointer B_Array, @Const MKL_INT ldb_Array,
                       @Const FloatPointer beta_Array, @Cast("float**") PointerPointer C_Array, @Const MKL_INT ldc_Array,
                       @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_sgemm_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") IntPointer TransA_Array,
                       @Cast("const CBLAS_TRANSPOSE*") IntPointer TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                       @Const MKL_INT K_Array, @Const FloatPointer alpha_Array, @Const @ByPtrPtr FloatPointer A_Array,
                       @Const MKL_INT lda_Array, @Const @ByPtrPtr FloatPointer B_Array, @Const MKL_INT ldb_Array,
                       @Const FloatPointer beta_Array, @ByPtrPtr FloatPointer C_Array, @Const MKL_INT ldc_Array,
                       @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_sgemm_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") IntBuffer TransA_Array,
                       @Cast("const CBLAS_TRANSPOSE*") IntBuffer TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                       @Const MKL_INT K_Array, @Const FloatBuffer alpha_Array, @Const @ByPtrPtr FloatBuffer A_Array,
                       @Const MKL_INT lda_Array, @Const @ByPtrPtr FloatBuffer B_Array, @Const MKL_INT ldb_Array,
                       @Const FloatBuffer beta_Array, @ByPtrPtr FloatBuffer C_Array, @Const MKL_INT ldc_Array,
                       @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_sgemm_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") int[] TransA_Array,
                       @Cast("const CBLAS_TRANSPOSE*") int[] TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                       @Const MKL_INT K_Array, @Const float[] alpha_Array, @Const @ByPtrPtr float[] A_Array,
                       @Const MKL_INT lda_Array, @Const @ByPtrPtr float[] B_Array, @Const MKL_INT ldb_Array,
                       @Const float[] beta_Array, @ByPtrPtr float[] C_Array, @Const MKL_INT ldc_Array,
                       @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_sgemmt(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_TRANSPOSE") int TransB,
		          @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                  float alpha, @Const FloatPointer A, @Const @ByVal MKL_INT lda,
                  @Const FloatPointer B, @Const @ByVal MKL_INT ldb, float beta,
                  FloatPointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_sgemmt(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_TRANSPOSE") int TransB,
		          @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                  float alpha, @Const FloatBuffer A, @Const @ByVal MKL_INT lda,
                  @Const FloatBuffer B, @Const @ByVal MKL_INT ldb, float beta,
                  FloatBuffer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_sgemmt(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_TRANSPOSE") int TransB,
		          @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                  float alpha, @Const float[] A, @Const @ByVal MKL_INT lda,
                  @Const float[] B, @Const @ByVal MKL_INT ldb, float beta,
                  float[] C, @Const @ByVal MKL_INT ldc);
public static native void cblas_ssymm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 float alpha, @Const FloatPointer A, @Const @ByVal MKL_INT lda,
                 @Const FloatPointer B, @Const @ByVal MKL_INT ldb, float beta,
                 FloatPointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_ssymm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 float alpha, @Const FloatBuffer A, @Const @ByVal MKL_INT lda,
                 @Const FloatBuffer B, @Const @ByVal MKL_INT ldb, float beta,
                 FloatBuffer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_ssymm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 float alpha, @Const float[] A, @Const @ByVal MKL_INT lda,
                 @Const float[] B, @Const @ByVal MKL_INT ldb, float beta,
                 float[] C, @Const @ByVal MKL_INT ldc);
public static native void cblas_ssyrk(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                 float alpha, @Const FloatPointer A, @Const @ByVal MKL_INT lda,
                 float beta, FloatPointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_ssyrk(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                 float alpha, @Const FloatBuffer A, @Const @ByVal MKL_INT lda,
                 float beta, FloatBuffer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_ssyrk(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                 float alpha, @Const float[] A, @Const @ByVal MKL_INT lda,
                 float beta, float[] C, @Const @ByVal MKL_INT ldc);
public static native void cblas_ssyr2k(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                  float alpha, @Const FloatPointer A, @Const @ByVal MKL_INT lda,
                  @Const FloatPointer B, @Const @ByVal MKL_INT ldb, float beta,
                  FloatPointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_ssyr2k(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                  float alpha, @Const FloatBuffer A, @Const @ByVal MKL_INT lda,
                  @Const FloatBuffer B, @Const @ByVal MKL_INT ldb, float beta,
                  FloatBuffer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_ssyr2k(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                  float alpha, @Const float[] A, @Const @ByVal MKL_INT lda,
                  @Const float[] B, @Const @ByVal MKL_INT ldb, float beta,
                  float[] C, @Const @ByVal MKL_INT ldc);
public static native void cblas_strmm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_DIAG") int Diag, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 float alpha, @Const FloatPointer A, @Const @ByVal MKL_INT lda,
                 FloatPointer B, @Const @ByVal MKL_INT ldb);
public static native void cblas_strmm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_DIAG") int Diag, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 float alpha, @Const FloatBuffer A, @Const @ByVal MKL_INT lda,
                 FloatBuffer B, @Const @ByVal MKL_INT ldb);
public static native void cblas_strmm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_DIAG") int Diag, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 float alpha, @Const float[] A, @Const @ByVal MKL_INT lda,
                 float[] B, @Const @ByVal MKL_INT ldb);
public static native void cblas_strsm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_DIAG") int Diag, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 float alpha, @Const FloatPointer A, @Const @ByVal MKL_INT lda,
                 FloatPointer B, @Const @ByVal MKL_INT ldb);
public static native void cblas_strsm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_DIAG") int Diag, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 float alpha, @Const FloatBuffer A, @Const @ByVal MKL_INT lda,
                 FloatBuffer B, @Const @ByVal MKL_INT ldb);
public static native void cblas_strsm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_DIAG") int Diag, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 float alpha, @Const float[] A, @Const @ByVal MKL_INT lda,
                 float[] B, @Const @ByVal MKL_INT ldb);

public static native void cblas_dgemm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_TRANSPOSE") int TransB, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, double alpha, @Const DoublePointer A,
                 @Const @ByVal MKL_INT lda, @Const DoublePointer B, @Const @ByVal MKL_INT ldb,
                 double beta, DoublePointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_dgemm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_TRANSPOSE") int TransB, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, double alpha, @Const DoubleBuffer A,
                 @Const @ByVal MKL_INT lda, @Const DoubleBuffer B, @Const @ByVal MKL_INT ldb,
                 double beta, DoubleBuffer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_dgemm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_TRANSPOSE") int TransB, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, double alpha, @Const double[] A,
                 @Const @ByVal MKL_INT lda, @Const double[] B, @Const @ByVal MKL_INT ldb,
                 double beta, double[] C, @Const @ByVal MKL_INT ldc);
public static native void cblas_dgemm_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") IntPointer TransA_Array,
                       @Cast("const CBLAS_TRANSPOSE*") IntPointer TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                       @Const MKL_INT K_Array, @Const DoublePointer alpha_Array, @Cast("const double**") PointerPointer A_Array,
                       @Const MKL_INT lda_Array, @Cast("const double**") PointerPointer B_Array, @Const MKL_INT ldb_Array,
                       @Const DoublePointer beta_Array, @Cast("double**") PointerPointer C_Array, @Const MKL_INT ldc_Array,
                       @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_dgemm_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") IntPointer TransA_Array,
                       @Cast("const CBLAS_TRANSPOSE*") IntPointer TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                       @Const MKL_INT K_Array, @Const DoublePointer alpha_Array, @Const @ByPtrPtr DoublePointer A_Array,
                       @Const MKL_INT lda_Array, @Const @ByPtrPtr DoublePointer B_Array, @Const MKL_INT ldb_Array,
                       @Const DoublePointer beta_Array, @ByPtrPtr DoublePointer C_Array, @Const MKL_INT ldc_Array,
                       @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_dgemm_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") IntBuffer TransA_Array,
                       @Cast("const CBLAS_TRANSPOSE*") IntBuffer TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                       @Const MKL_INT K_Array, @Const DoubleBuffer alpha_Array, @Const @ByPtrPtr DoubleBuffer A_Array,
                       @Const MKL_INT lda_Array, @Const @ByPtrPtr DoubleBuffer B_Array, @Const MKL_INT ldb_Array,
                       @Const DoubleBuffer beta_Array, @ByPtrPtr DoubleBuffer C_Array, @Const MKL_INT ldc_Array,
                       @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_dgemm_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") int[] TransA_Array,
                       @Cast("const CBLAS_TRANSPOSE*") int[] TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                       @Const MKL_INT K_Array, @Const double[] alpha_Array, @Const @ByPtrPtr double[] A_Array,
                       @Const MKL_INT lda_Array, @Const @ByPtrPtr double[] B_Array, @Const MKL_INT ldb_Array,
                       @Const double[] beta_Array, @ByPtrPtr double[] C_Array, @Const MKL_INT ldc_Array,
                       @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_dgemmt(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_TRANSPOSE") int TransB,
		          @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                  double alpha, @Const DoublePointer A, @Const @ByVal MKL_INT lda,
                  @Const DoublePointer B, @Const @ByVal MKL_INT ldb, double beta,
                  DoublePointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_dgemmt(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_TRANSPOSE") int TransB,
		          @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                  double alpha, @Const DoubleBuffer A, @Const @ByVal MKL_INT lda,
                  @Const DoubleBuffer B, @Const @ByVal MKL_INT ldb, double beta,
                  DoubleBuffer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_dgemmt(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_TRANSPOSE") int TransB,
		          @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                  double alpha, @Const double[] A, @Const @ByVal MKL_INT lda,
                  @Const double[] B, @Const @ByVal MKL_INT ldb, double beta,
                  double[] C, @Const @ByVal MKL_INT ldc);
public static native void cblas_dsymm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 double alpha, @Const DoublePointer A, @Const @ByVal MKL_INT lda,
                 @Const DoublePointer B, @Const @ByVal MKL_INT ldb, double beta,
                 DoublePointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_dsymm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 double alpha, @Const DoubleBuffer A, @Const @ByVal MKL_INT lda,
                 @Const DoubleBuffer B, @Const @ByVal MKL_INT ldb, double beta,
                 DoubleBuffer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_dsymm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 double alpha, @Const double[] A, @Const @ByVal MKL_INT lda,
                 @Const double[] B, @Const @ByVal MKL_INT ldb, double beta,
                 double[] C, @Const @ByVal MKL_INT ldc);
public static native void cblas_dsyrk(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                 double alpha, @Const DoublePointer A, @Const @ByVal MKL_INT lda,
                 double beta, DoublePointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_dsyrk(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                 double alpha, @Const DoubleBuffer A, @Const @ByVal MKL_INT lda,
                 double beta, DoubleBuffer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_dsyrk(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                 double alpha, @Const double[] A, @Const @ByVal MKL_INT lda,
                 double beta, double[] C, @Const @ByVal MKL_INT ldc);
public static native void cblas_dsyr2k(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                  double alpha, @Const DoublePointer A, @Const @ByVal MKL_INT lda,
                  @Const DoublePointer B, @Const @ByVal MKL_INT ldb, double beta,
                  DoublePointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_dsyr2k(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                  double alpha, @Const DoubleBuffer A, @Const @ByVal MKL_INT lda,
                  @Const DoubleBuffer B, @Const @ByVal MKL_INT ldb, double beta,
                  DoubleBuffer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_dsyr2k(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                  double alpha, @Const double[] A, @Const @ByVal MKL_INT lda,
                  @Const double[] B, @Const @ByVal MKL_INT ldb, double beta,
                  double[] C, @Const @ByVal MKL_INT ldc);
public static native void cblas_dtrmm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_DIAG") int Diag, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 double alpha, @Const DoublePointer A, @Const @ByVal MKL_INT lda,
                 DoublePointer B, @Const @ByVal MKL_INT ldb);
public static native void cblas_dtrmm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_DIAG") int Diag, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 double alpha, @Const DoubleBuffer A, @Const @ByVal MKL_INT lda,
                 DoubleBuffer B, @Const @ByVal MKL_INT ldb);
public static native void cblas_dtrmm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_DIAG") int Diag, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 double alpha, @Const double[] A, @Const @ByVal MKL_INT lda,
                 double[] B, @Const @ByVal MKL_INT ldb);
public static native void cblas_dtrsm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_DIAG") int Diag, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 double alpha, @Const DoublePointer A, @Const @ByVal MKL_INT lda,
                 DoublePointer B, @Const @ByVal MKL_INT ldb);
public static native void cblas_dtrsm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_DIAG") int Diag, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 double alpha, @Const DoubleBuffer A, @Const @ByVal MKL_INT lda,
                 DoubleBuffer B, @Const @ByVal MKL_INT ldb);
public static native void cblas_dtrsm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_DIAG") int Diag, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 double alpha, @Const double[] A, @Const @ByVal MKL_INT lda,
                 double[] B, @Const @ByVal MKL_INT ldb);

public static native void cblas_cgemm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_TRANSPOSE") int TransB, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, @Const Pointer alpha, @Const Pointer A,
                 @Const @ByVal MKL_INT lda, @Const Pointer B, @Const @ByVal MKL_INT ldb,
                 @Const Pointer beta, Pointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_cgemm3m(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_TRANSPOSE") int TransB, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, @Const Pointer alpha, @Const Pointer A,
                 @Const @ByVal MKL_INT lda, @Const Pointer B, @Const @ByVal MKL_INT ldb,
                 @Const Pointer beta, Pointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_cgemm_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") IntPointer TransA_Array,
                       @Cast("const CBLAS_TRANSPOSE*") IntPointer TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                       @Const MKL_INT K_Array, @Const Pointer alpha_Array, @Cast("const void**") PointerPointer A_Array,
                       @Const MKL_INT lda_Array, @Cast("const void**") PointerPointer B_Array, @Const MKL_INT ldb_Array,
                       @Const Pointer beta_Array, @Cast("void**") PointerPointer C_Array, @Const MKL_INT ldc_Array,
                       @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_cgemm_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") IntPointer TransA_Array,
                       @Cast("const CBLAS_TRANSPOSE*") IntPointer TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                       @Const MKL_INT K_Array, @Const Pointer alpha_Array, @Cast("const void**") @ByPtrPtr Pointer A_Array,
                       @Const MKL_INT lda_Array, @Cast("const void**") @ByPtrPtr Pointer B_Array, @Const MKL_INT ldb_Array,
                       @Const Pointer beta_Array, @Cast("void**") @ByPtrPtr Pointer C_Array, @Const MKL_INT ldc_Array,
                       @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_cgemm_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") IntBuffer TransA_Array,
                       @Cast("const CBLAS_TRANSPOSE*") IntBuffer TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                       @Const MKL_INT K_Array, @Const Pointer alpha_Array, @Cast("const void**") @ByPtrPtr Pointer A_Array,
                       @Const MKL_INT lda_Array, @Cast("const void**") @ByPtrPtr Pointer B_Array, @Const MKL_INT ldb_Array,
                       @Const Pointer beta_Array, @Cast("void**") @ByPtrPtr Pointer C_Array, @Const MKL_INT ldc_Array,
                       @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_cgemm_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") int[] TransA_Array,
                       @Cast("const CBLAS_TRANSPOSE*") int[] TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                       @Const MKL_INT K_Array, @Const Pointer alpha_Array, @Cast("const void**") @ByPtrPtr Pointer A_Array,
                       @Const MKL_INT lda_Array, @Cast("const void**") @ByPtrPtr Pointer B_Array, @Const MKL_INT ldb_Array,
                       @Const Pointer beta_Array, @Cast("void**") @ByPtrPtr Pointer C_Array, @Const MKL_INT ldc_Array,
                       @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_cgemm3m_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") IntPointer TransA_Array,
                         @Cast("const CBLAS_TRANSPOSE*") IntPointer TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                         @Const MKL_INT K_Array, @Const Pointer alpha_Array, @Cast("const void**") PointerPointer A_Array,
                         @Const MKL_INT lda_Array, @Cast("const void**") PointerPointer B_Array, @Const MKL_INT ldb_Array,
                         @Const Pointer beta_Array, @Cast("void**") PointerPointer C_Array, @Const MKL_INT ldc_Array,
                         @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_cgemm3m_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") IntPointer TransA_Array,
                         @Cast("const CBLAS_TRANSPOSE*") IntPointer TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                         @Const MKL_INT K_Array, @Const Pointer alpha_Array, @Cast("const void**") @ByPtrPtr Pointer A_Array,
                         @Const MKL_INT lda_Array, @Cast("const void**") @ByPtrPtr Pointer B_Array, @Const MKL_INT ldb_Array,
                         @Const Pointer beta_Array, @Cast("void**") @ByPtrPtr Pointer C_Array, @Const MKL_INT ldc_Array,
                         @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_cgemm3m_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") IntBuffer TransA_Array,
                         @Cast("const CBLAS_TRANSPOSE*") IntBuffer TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                         @Const MKL_INT K_Array, @Const Pointer alpha_Array, @Cast("const void**") @ByPtrPtr Pointer A_Array,
                         @Const MKL_INT lda_Array, @Cast("const void**") @ByPtrPtr Pointer B_Array, @Const MKL_INT ldb_Array,
                         @Const Pointer beta_Array, @Cast("void**") @ByPtrPtr Pointer C_Array, @Const MKL_INT ldc_Array,
                         @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_cgemm3m_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") int[] TransA_Array,
                         @Cast("const CBLAS_TRANSPOSE*") int[] TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                         @Const MKL_INT K_Array, @Const Pointer alpha_Array, @Cast("const void**") @ByPtrPtr Pointer A_Array,
                         @Const MKL_INT lda_Array, @Cast("const void**") @ByPtrPtr Pointer B_Array, @Const MKL_INT ldb_Array,
                         @Const Pointer beta_Array, @Cast("void**") @ByPtrPtr Pointer C_Array, @Const MKL_INT ldc_Array,
                         @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_cgemmt(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_TRANSPOSE") int TransB,
		          @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                  @Const Pointer alpha, @Const Pointer A, @Const @ByVal MKL_INT lda,
                  @Const Pointer B, @Const @ByVal MKL_INT ldb, @Const Pointer beta,
                  Pointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_csymm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const Pointer alpha, @Const Pointer A, @Const @ByVal MKL_INT lda,
                 @Const Pointer B, @Const @ByVal MKL_INT ldb, @Const Pointer beta,
                 Pointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_csyrk(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                 @Const Pointer alpha, @Const Pointer A, @Const @ByVal MKL_INT lda,
                 @Const Pointer beta, Pointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_csyr2k(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                  @Const Pointer alpha, @Const Pointer A, @Const @ByVal MKL_INT lda,
                  @Const Pointer B, @Const @ByVal MKL_INT ldb, @Const Pointer beta,
                  Pointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_ctrmm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_DIAG") int Diag, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const Pointer alpha, @Const Pointer A, @Const @ByVal MKL_INT lda,
                 Pointer B, @Const @ByVal MKL_INT ldb);
public static native void cblas_ctrsm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_DIAG") int Diag, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const Pointer alpha, @Const Pointer A, @Const @ByVal MKL_INT lda,
                 Pointer B, @Const @ByVal MKL_INT ldb);

public static native void cblas_zgemm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_TRANSPOSE") int TransB, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, @Const Pointer alpha, @Const Pointer A,
                 @Const @ByVal MKL_INT lda, @Const Pointer B, @Const @ByVal MKL_INT ldb,
                 @Const Pointer beta, Pointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_zgemm3m(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_TRANSPOSE") int TransB, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, @Const Pointer alpha, @Const Pointer A,
                 @Const @ByVal MKL_INT lda, @Const Pointer B, @Const @ByVal MKL_INT ldb,
                 @Const Pointer beta, Pointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_zgemm_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") IntPointer TransA_Array,
                       @Cast("const CBLAS_TRANSPOSE*") IntPointer TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                       @Const MKL_INT K_Array, @Const Pointer alpha_Array, @Cast("const void**") PointerPointer A_Array,
                       @Const MKL_INT lda_Array, @Cast("const void**") PointerPointer B_Array, @Const MKL_INT ldb_Array,
                       @Const Pointer beta_Array, @Cast("void**") PointerPointer C_Array, @Const MKL_INT ldc_Array,
                       @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_zgemm_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") IntPointer TransA_Array,
                       @Cast("const CBLAS_TRANSPOSE*") IntPointer TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                       @Const MKL_INT K_Array, @Const Pointer alpha_Array, @Cast("const void**") @ByPtrPtr Pointer A_Array,
                       @Const MKL_INT lda_Array, @Cast("const void**") @ByPtrPtr Pointer B_Array, @Const MKL_INT ldb_Array,
                       @Const Pointer beta_Array, @Cast("void**") @ByPtrPtr Pointer C_Array, @Const MKL_INT ldc_Array,
                       @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_zgemm_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") IntBuffer TransA_Array,
                       @Cast("const CBLAS_TRANSPOSE*") IntBuffer TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                       @Const MKL_INT K_Array, @Const Pointer alpha_Array, @Cast("const void**") @ByPtrPtr Pointer A_Array,
                       @Const MKL_INT lda_Array, @Cast("const void**") @ByPtrPtr Pointer B_Array, @Const MKL_INT ldb_Array,
                       @Const Pointer beta_Array, @Cast("void**") @ByPtrPtr Pointer C_Array, @Const MKL_INT ldc_Array,
                       @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_zgemm_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") int[] TransA_Array,
                       @Cast("const CBLAS_TRANSPOSE*") int[] TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                       @Const MKL_INT K_Array, @Const Pointer alpha_Array, @Cast("const void**") @ByPtrPtr Pointer A_Array,
                       @Const MKL_INT lda_Array, @Cast("const void**") @ByPtrPtr Pointer B_Array, @Const MKL_INT ldb_Array,
                       @Const Pointer beta_Array, @Cast("void**") @ByPtrPtr Pointer C_Array, @Const MKL_INT ldc_Array,
                       @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_zgemm3m_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") IntPointer TransA_Array,
                         @Cast("const CBLAS_TRANSPOSE*") IntPointer TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                         @Const MKL_INT K_Array, @Const Pointer alpha_Array, @Cast("const void**") PointerPointer A_Array,
                         @Const MKL_INT lda_Array, @Cast("const void**") PointerPointer B_Array, @Const MKL_INT ldb_Array,
                         @Const Pointer beta_Array, @Cast("void**") PointerPointer C_Array, @Const MKL_INT ldc_Array,
                         @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_zgemm3m_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") IntPointer TransA_Array,
                         @Cast("const CBLAS_TRANSPOSE*") IntPointer TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                         @Const MKL_INT K_Array, @Const Pointer alpha_Array, @Cast("const void**") @ByPtrPtr Pointer A_Array,
                         @Const MKL_INT lda_Array, @Cast("const void**") @ByPtrPtr Pointer B_Array, @Const MKL_INT ldb_Array,
                         @Const Pointer beta_Array, @Cast("void**") @ByPtrPtr Pointer C_Array, @Const MKL_INT ldc_Array,
                         @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_zgemm3m_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") IntBuffer TransA_Array,
                         @Cast("const CBLAS_TRANSPOSE*") IntBuffer TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                         @Const MKL_INT K_Array, @Const Pointer alpha_Array, @Cast("const void**") @ByPtrPtr Pointer A_Array,
                         @Const MKL_INT lda_Array, @Cast("const void**") @ByPtrPtr Pointer B_Array, @Const MKL_INT ldb_Array,
                         @Const Pointer beta_Array, @Cast("void**") @ByPtrPtr Pointer C_Array, @Const MKL_INT ldc_Array,
                         @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_zgemm3m_batch(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_TRANSPOSE*") int[] TransA_Array,
                         @Cast("const CBLAS_TRANSPOSE*") int[] TransB_Array, @Const MKL_INT M_Array, @Const MKL_INT N_Array,
                         @Const MKL_INT K_Array, @Const Pointer alpha_Array, @Cast("const void**") @ByPtrPtr Pointer A_Array,
                         @Const MKL_INT lda_Array, @Cast("const void**") @ByPtrPtr Pointer B_Array, @Const MKL_INT ldb_Array,
                         @Const Pointer beta_Array, @Cast("void**") @ByPtrPtr Pointer C_Array, @Const MKL_INT ldc_Array,
                         @Const @ByVal MKL_INT group_count, @Const MKL_INT group_size);
public static native void cblas_zgemmt(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int TransA, @Cast("const CBLAS_TRANSPOSE") int TransB,
		          @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                  @Const Pointer alpha, @Const Pointer A, @Const @ByVal MKL_INT lda,
                  @Const Pointer B, @Const @ByVal MKL_INT ldb, @Const Pointer beta,
                  Pointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_zsymm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const Pointer alpha, @Const Pointer A, @Const @ByVal MKL_INT lda,
                 @Const Pointer B, @Const @ByVal MKL_INT ldb, @Const Pointer beta,
                 Pointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_zsyrk(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                 @Const Pointer alpha, @Const Pointer A, @Const @ByVal MKL_INT lda,
                 @Const Pointer beta, Pointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_zsyr2k(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                  @Const Pointer alpha, @Const Pointer A, @Const @ByVal MKL_INT lda,
                  @Const Pointer B, @Const @ByVal MKL_INT ldb, @Const Pointer beta,
                  Pointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_ztrmm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_DIAG") int Diag, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const Pointer alpha, @Const Pointer A, @Const @ByVal MKL_INT lda,
                 Pointer B, @Const @ByVal MKL_INT ldb);
public static native void cblas_ztrsm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Cast("const CBLAS_TRANSPOSE") int TransA,
                 @Cast("const CBLAS_DIAG") int Diag, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const Pointer alpha, @Const Pointer A, @Const @ByVal MKL_INT lda,
                 Pointer B, @Const @ByVal MKL_INT ldb);

/*
 * Routines with prefixes C and Z only
 */
public static native void cblas_chemm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const Pointer alpha, @Const Pointer A, @Const @ByVal MKL_INT lda,
                 @Const Pointer B, @Const @ByVal MKL_INT ldb, @Const Pointer beta,
                 Pointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_cherk(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                 float alpha, @Const Pointer A, @Const @ByVal MKL_INT lda,
                 float beta, Pointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_cher2k(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                  @Const Pointer alpha, @Const Pointer A, @Const @ByVal MKL_INT lda,
                  @Const Pointer B, @Const @ByVal MKL_INT ldb, float beta,
                  Pointer C, @Const @ByVal MKL_INT ldc);

public static native void cblas_zhemm(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_SIDE") int Side,
                 @Cast("const CBLAS_UPLO") int Uplo, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const Pointer alpha, @Const Pointer A, @Const @ByVal MKL_INT lda,
                 @Const Pointer B, @Const @ByVal MKL_INT ldb, @Const Pointer beta,
                 Pointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_zherk(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                 double alpha, @Const Pointer A, @Const @ByVal MKL_INT lda,
                 double beta, Pointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_zher2k(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_UPLO") int Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K,
                  @Const Pointer alpha, @Const Pointer A, @Const @ByVal MKL_INT lda,
                  @Const Pointer B, @Const @ByVal MKL_INT ldb, double beta,
                  Pointer C, @Const @ByVal MKL_INT ldc);

/*
 * Routines with prefixes S and D only
 */
public static native FloatPointer cblas_sgemm_alloc(@Cast("const CBLAS_IDENTIFIER") int identifier,
                 @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K);
public static native void cblas_sgemm_pack(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_IDENTIFIER") int identifier,
                 @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, float alpha, @Const FloatPointer src,
                 @Const @ByVal MKL_INT ld, FloatPointer dest);
public static native void cblas_sgemm_pack(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_IDENTIFIER") int identifier,
                 @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, float alpha, @Const FloatBuffer src,
                 @Const @ByVal MKL_INT ld, FloatBuffer dest);
public static native void cblas_sgemm_pack(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_IDENTIFIER") int identifier,
                 @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, float alpha, @Const float[] src,
                 @Const @ByVal MKL_INT ld, float[] dest);
public static native void cblas_sgemm_compute(@Cast("const CBLAS_LAYOUT") int Layout, @Const @ByVal MKL_INT TransA,
                 @Const @ByVal MKL_INT TransB, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, @Const FloatPointer A,
                 @Const @ByVal MKL_INT lda, @Const FloatPointer B, @Const @ByVal MKL_INT ldb,
                 float beta, FloatPointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_sgemm_compute(@Cast("const CBLAS_LAYOUT") int Layout, @Const @ByVal MKL_INT TransA,
                 @Const @ByVal MKL_INT TransB, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, @Const FloatBuffer A,
                 @Const @ByVal MKL_INT lda, @Const FloatBuffer B, @Const @ByVal MKL_INT ldb,
                 float beta, FloatBuffer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_sgemm_compute(@Cast("const CBLAS_LAYOUT") int Layout, @Const @ByVal MKL_INT TransA,
                 @Const @ByVal MKL_INT TransB, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, @Const float[] A,
                 @Const @ByVal MKL_INT lda, @Const float[] B, @Const @ByVal MKL_INT ldb,
                 float beta, float[] C, @Const @ByVal MKL_INT ldc);
public static native void cblas_sgemm_free(FloatPointer dest);
public static native void cblas_sgemm_free(FloatBuffer dest);
public static native void cblas_sgemm_free(float[] dest);
public static native DoublePointer cblas_dgemm_alloc(@Cast("const CBLAS_IDENTIFIER") int identifier,
                 @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N, @Const @ByVal MKL_INT K);
public static native void cblas_dgemm_pack(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_IDENTIFIER") int identifier,
                 @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, double alpha, @Const DoublePointer src,
                 @Const @ByVal MKL_INT ld, DoublePointer dest);
public static native void cblas_dgemm_pack(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_IDENTIFIER") int identifier,
                 @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, double alpha, @Const DoubleBuffer src,
                 @Const @ByVal MKL_INT ld, DoubleBuffer dest);
public static native void cblas_dgemm_pack(@Cast("const CBLAS_LAYOUT") int Layout, @Cast("const CBLAS_IDENTIFIER") int identifier,
                 @Cast("const CBLAS_TRANSPOSE") int Trans, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, double alpha, @Const double[] src,
                 @Const @ByVal MKL_INT ld, double[] dest);
public static native void cblas_dgemm_compute(@Cast("const CBLAS_LAYOUT") int Layout, @Const @ByVal MKL_INT TransA,
                 @Const @ByVal MKL_INT TransB, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, @Const DoublePointer A,
                 @Const @ByVal MKL_INT lda, @Const DoublePointer B, @Const @ByVal MKL_INT ldb,
                 double beta, DoublePointer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_dgemm_compute(@Cast("const CBLAS_LAYOUT") int Layout, @Const @ByVal MKL_INT TransA,
                 @Const @ByVal MKL_INT TransB, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, @Const DoubleBuffer A,
                 @Const @ByVal MKL_INT lda, @Const DoubleBuffer B, @Const @ByVal MKL_INT ldb,
                 double beta, DoubleBuffer C, @Const @ByVal MKL_INT ldc);
public static native void cblas_dgemm_compute(@Cast("const CBLAS_LAYOUT") int Layout, @Const @ByVal MKL_INT TransA,
                 @Const @ByVal MKL_INT TransB, @Const @ByVal MKL_INT M, @Const @ByVal MKL_INT N,
                 @Const @ByVal MKL_INT K, @Const double[] A,
                 @Const @ByVal MKL_INT lda, @Const double[] B, @Const @ByVal MKL_INT ldb,
                 double beta, double[] C, @Const @ByVal MKL_INT ldc);
public static native void cblas_dgemm_free(DoublePointer dest);
public static native void cblas_dgemm_free(DoubleBuffer dest);
public static native void cblas_dgemm_free(double[] dest);

// #ifdef __cplusplus
// #endif    /* __cplusplus */

// #endif    /* __MKL_CBLAS_H__ */


// Parsed from mkl_spblas.h

/*******************************************************************************
* Copyright 2005-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
! Content:
!  Intel(R) Math Kernel Library (Intel(R) MKL) interface for Sparse BLAS level 2,3 routines
!
!  Beta version of new inspector-executor SpBLAS API
!
!******************************************************************************/

// #ifndef _MKL_SPBLAS_H_
// #define _MKL_SPBLAS_H_

// #include "mkl_types.h"

// #ifdef __cplusplus
// #endif /* __cplusplus */

/* Float */
/* Sparse BLAS Level2 lower case */
public static native void mkl_scsrmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void mkl_scsrmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void mkl_scsrmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, @Const float[] beta, float[] y);
public static native void mkl_scsrmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void mkl_scsrmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void mkl_scsrmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, @Const float[] beta, float[] y);
public static native void mkl_scsrsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, FloatPointer y);
public static native void mkl_scsrsv(String transa, @Const MKL_INT m, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_scsrsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, float[] y);
public static native void mkl_scsrsv(String transa, @Const MKL_INT m, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, FloatPointer y);
public static native void mkl_scsrsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_scsrsv(String transa, @Const MKL_INT m, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, float[] y);
public static native void mkl_scsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_scsrgemv(String transa, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_scsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_scsrgemv(String transa, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_scsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_scsrgemv(String transa, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_cspblas_scsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_cspblas_scsrgemv(String transa, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_cspblas_scsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_cspblas_scsrgemv(String transa, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_cspblas_scsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_cspblas_scsrgemv(String transa, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_scsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_scsrsymv(String uplo, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_scsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_scsrsymv(String uplo, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_scsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_scsrsymv(String uplo, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_cspblas_scsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_cspblas_scsrsymv(String uplo, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_cspblas_scsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_cspblas_scsrsymv(String uplo, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_cspblas_scsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_cspblas_scsrsymv(String uplo, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_scsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_scsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_scsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_scsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_scsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_scsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_cspblas_scsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_cspblas_scsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_cspblas_scsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_cspblas_scsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_cspblas_scsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_cspblas_scsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);

public static native void mkl_scscmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void mkl_scscmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void mkl_scscmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, @Const float[] beta, float[] y);
public static native void mkl_scscmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void mkl_scscmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void mkl_scscmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, @Const float[] beta, float[] y);
public static native void mkl_scscsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, FloatPointer y);
public static native void mkl_scscsv(String transa, @Const MKL_INT m, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_scscsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, float[] y);
public static native void mkl_scscsv(String transa, @Const MKL_INT m, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, FloatPointer y);
public static native void mkl_scscsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_scscsv(String transa, @Const MKL_INT m, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, float[] y);

public static native void mkl_scoomv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void mkl_scoomv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void mkl_scoomv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, @Const float[] beta, float[] y);
public static native void mkl_scoomv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void mkl_scoomv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void mkl_scoomv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, @Const float[] beta, float[] y);
public static native void mkl_scoosv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void mkl_scoosv(String transa, @Const MKL_INT m, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_scoosv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void mkl_scoosv(String transa, @Const MKL_INT m, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void mkl_scoosv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_scoosv(String transa, @Const MKL_INT m, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void mkl_scoogemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void mkl_scoogemv(String transa, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_scoogemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void mkl_scoogemv(String transa, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void mkl_scoogemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_scoogemv(String transa, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void mkl_cspblas_scoogemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void mkl_cspblas_scoogemv(String transa, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_cspblas_scoogemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void mkl_cspblas_scoogemv(String transa, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void mkl_cspblas_scoogemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_cspblas_scoogemv(String transa, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void mkl_scoosymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void mkl_scoosymv(String uplo, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_scoosymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void mkl_scoosymv(String uplo, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void mkl_scoosymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_scoosymv(String uplo, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void mkl_cspblas_scoosymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void mkl_cspblas_scoosymv(String uplo, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_cspblas_scoosymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void mkl_cspblas_scoosymv(String uplo, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void mkl_cspblas_scoosymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_cspblas_scoosymv(String uplo, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void mkl_scootrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void mkl_scootrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_scootrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void mkl_scootrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void mkl_scootrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_scootrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void mkl_cspblas_scootrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void mkl_cspblas_scootrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_cspblas_scootrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void mkl_cspblas_scootrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void mkl_cspblas_scootrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_cspblas_scootrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);

public static native void mkl_sdiamv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void mkl_sdiamv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void mkl_sdiamv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] x, @Const float[] beta, float[] y);
public static native void mkl_sdiamv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void mkl_sdiamv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void mkl_sdiamv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] x, @Const float[] beta, float[] y);
public static native void mkl_sdiasv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer x, FloatPointer y);
public static native void mkl_sdiasv(String transa, @Const MKL_INT m, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_sdiasv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] x, float[] y);
public static native void mkl_sdiasv(String transa, @Const MKL_INT m, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer x, FloatPointer y);
public static native void mkl_sdiasv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_sdiasv(String transa, @Const MKL_INT m, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] x, float[] y);
public static native void mkl_sdiagemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer x, FloatPointer y);
public static native void mkl_sdiagemv(String transa, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_sdiagemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] x, float[] y);
public static native void mkl_sdiagemv(String transa, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer x, FloatPointer y);
public static native void mkl_sdiagemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_sdiagemv(String transa, @Const MKL_INT m, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] x, float[] y);
public static native void mkl_sdiasymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer x, FloatPointer y);
public static native void mkl_sdiasymv(String uplo, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_sdiasymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] x, float[] y);
public static native void mkl_sdiasymv(String uplo, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer x, FloatPointer y);
public static native void mkl_sdiasymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_sdiasymv(String uplo, @Const MKL_INT m, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] x, float[] y);
public static native void mkl_sdiatrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer x, FloatPointer y);
public static native void mkl_sdiatrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_sdiatrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] x, float[] y);
public static native void mkl_sdiatrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer x, FloatPointer y);
public static native void mkl_sdiatrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_sdiatrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] x, float[] y);

public static native void mkl_sskymv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT pntr, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void mkl_sskymv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT pntr, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void mkl_sskymv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT pntr, @Const float[] x, @Const float[] beta, float[] y);
public static native void mkl_sskymv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT pntr, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void mkl_sskymv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT pntr, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void mkl_sskymv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT pntr, @Const float[] x, @Const float[] beta, float[] y);
public static native void mkl_sskysv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT pntr, @Const FloatPointer x, FloatPointer y);
public static native void mkl_sskysv(String transa, @Const MKL_INT m, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT pntr, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_sskysv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT pntr, @Const float[] x, float[] y);
public static native void mkl_sskysv(String transa, @Const MKL_INT m, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT pntr, @Const FloatPointer x, FloatPointer y);
public static native void mkl_sskysv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT pntr, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_sskysv(String transa, @Const MKL_INT m, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT pntr, @Const float[] x, float[] y);

public static native void mkl_sbsrmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void mkl_sbsrmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void mkl_sbsrmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, @Const float[] beta, float[] y);
public static native void mkl_sbsrmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void mkl_sbsrmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void mkl_sbsrmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, @Const float[] beta, float[] y);
public static native void mkl_sbsrsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, FloatPointer y);
public static native void mkl_sbsrsv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_sbsrsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, float[] y);
public static native void mkl_sbsrsv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, FloatPointer y);
public static native void mkl_sbsrsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_sbsrsv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, float[] y);
public static native void mkl_sbsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_sbsrgemv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_sbsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_sbsrgemv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_sbsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_sbsrgemv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_cspblas_sbsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_cspblas_sbsrgemv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_cspblas_sbsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_cspblas_sbsrgemv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_cspblas_sbsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_cspblas_sbsrgemv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_sbsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_sbsrsymv(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_sbsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_sbsrsymv(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_sbsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_sbsrsymv(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_cspblas_sbsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_cspblas_sbsrsymv(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_cspblas_sbsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_cspblas_sbsrsymv(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_cspblas_sbsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_cspblas_sbsrsymv(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_sbsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_sbsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_sbsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_sbsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_sbsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_sbsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_cspblas_sbsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_cspblas_sbsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_cspblas_sbsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void mkl_cspblas_sbsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void mkl_cspblas_sbsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void mkl_cspblas_sbsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);

/* Sparse BLAS Level3 lower case */
public static native void mkl_scsrmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_scsrmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_scsrmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void mkl_scsrmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_scsrmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_scsrmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void mkl_scsrsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_scsrsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_scsrsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);
public static native void mkl_scsrsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_scsrsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_scsrsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);

public static native void mkl_scscmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_scscmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_scscmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void mkl_scscmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_scscmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_scscmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void mkl_scscsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_scscsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_scscsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);
public static native void mkl_scscsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_scscsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_scscsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);

public static native void mkl_scoomm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_scoomm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_scoomm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void mkl_scoomm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_scoomm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_scoomm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void mkl_scoosm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_scoosm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_scoosm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);
public static native void mkl_scoosm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_scoosm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_scoosm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);

public static native void mkl_sdiamm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_sdiamm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_sdiamm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void mkl_sdiamm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_sdiamm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_sdiamm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void mkl_sdiasm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_sdiasm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_sdiasm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);
public static native void mkl_sdiasm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_sdiasm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_sdiasm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);

public static native void mkl_sskysm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT pntr, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_sskysm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT pntr, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_sskysm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT pntr, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);
public static native void mkl_sskysm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT pntr, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_sskysm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT pntr, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_sskysm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT pntr, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);
public static native void mkl_sskymm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT pntr, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_sskymm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT pntr, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_sskymm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT pntr, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void mkl_sskymm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT pntr, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_sskymm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT pntr, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_sskymm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT pntr, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);

public static native void mkl_sbsrmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_sbsrmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_sbsrmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void mkl_sbsrmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_sbsrmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_sbsrmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void mkl_sbsrsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_sbsrsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_sbsrsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);
public static native void mkl_sbsrsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void mkl_sbsrsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void mkl_sbsrsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);

/* Upper case declaration */
/* Sparse BLAS Level2 upper case */
public static native void MKL_SCSRMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void MKL_SCSRMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void MKL_SCSRMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, @Const float[] beta, float[] y);
public static native void MKL_SCSRMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void MKL_SCSRMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void MKL_SCSRMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, @Const float[] beta, float[] y);
public static native void MKL_SCSRSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SCSRSV(String transa, @Const MKL_INT m, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SCSRSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, float[] y);
public static native void MKL_SCSRSV(String transa, @Const MKL_INT m, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SCSRSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SCSRSV(String transa, @Const MKL_INT m, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, float[] y);
public static native void MKL_SCSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SCSRGEMV(String transa, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SCSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_SCSRGEMV(String transa, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SCSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SCSRGEMV(String transa, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_CSPBLAS_SCSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_CSPBLAS_SCSRGEMV(String transa, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_CSPBLAS_SCSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_CSPBLAS_SCSRGEMV(String transa, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_CSPBLAS_SCSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_CSPBLAS_SCSRGEMV(String transa, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_SCSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SCSRSYMV(String uplo, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SCSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_SCSRSYMV(String uplo, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SCSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SCSRSYMV(String uplo, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_CSPBLAS_SCSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_CSPBLAS_SCSRSYMV(String uplo, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_CSPBLAS_SCSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_CSPBLAS_SCSRSYMV(String uplo, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_CSPBLAS_SCSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_CSPBLAS_SCSRSYMV(String uplo, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_SCSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SCSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SCSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_SCSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SCSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SCSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_CSPBLAS_SCSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_CSPBLAS_SCSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_CSPBLAS_SCSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_CSPBLAS_SCSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_CSPBLAS_SCSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_CSPBLAS_SCSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);

public static native void MKL_SCSCMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void MKL_SCSCMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void MKL_SCSCMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, @Const float[] beta, float[] y);
public static native void MKL_SCSCMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void MKL_SCSCMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void MKL_SCSCMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, @Const float[] beta, float[] y);
public static native void MKL_SCSCSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SCSCSV(String transa, @Const MKL_INT m, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SCSCSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, float[] y);
public static native void MKL_SCSCSV(String transa, @Const MKL_INT m, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SCSCSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SCSCSV(String transa, @Const MKL_INT m, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, float[] y);

public static native void MKL_SCOOMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void MKL_SCOOMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void MKL_SCOOMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, @Const float[] beta, float[] y);
public static native void MKL_SCOOMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void MKL_SCOOMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void MKL_SCOOMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, @Const float[] beta, float[] y);
public static native void MKL_SCOOSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SCOOSV(String transa, @Const MKL_INT m, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SCOOSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void MKL_SCOOSV(String transa, @Const MKL_INT m, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SCOOSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SCOOSV(String transa, @Const MKL_INT m, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void MKL_SCOOGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SCOOGEMV(String transa, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SCOOGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void MKL_SCOOGEMV(String transa, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SCOOGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SCOOGEMV(String transa, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void MKL_CSPBLAS_SCOOGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void MKL_CSPBLAS_SCOOGEMV(String transa, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_CSPBLAS_SCOOGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void MKL_CSPBLAS_SCOOGEMV(String transa, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void MKL_CSPBLAS_SCOOGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_CSPBLAS_SCOOGEMV(String transa, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void MKL_SCOOSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SCOOSYMV(String uplo, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SCOOSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void MKL_SCOOSYMV(String uplo, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SCOOSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SCOOSYMV(String uplo, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void MKL_CSPBLAS_SCOOSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void MKL_CSPBLAS_SCOOSYMV(String uplo, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_CSPBLAS_SCOOSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void MKL_CSPBLAS_SCOOSYMV(String uplo, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void MKL_CSPBLAS_SCOOSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_CSPBLAS_SCOOSYMV(String uplo, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void MKL_SCOOTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SCOOTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SCOOTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void MKL_SCOOTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SCOOTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SCOOTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void MKL_CSPBLAS_SCOOTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void MKL_CSPBLAS_SCOOTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_CSPBLAS_SCOOTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);
public static native void MKL_CSPBLAS_SCOOTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer x, FloatPointer y);
public static native void MKL_CSPBLAS_SCOOTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_CSPBLAS_SCOOTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] x, float[] y);

public static native void MKL_SDIAMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void MKL_SDIAMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void MKL_SDIAMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] x, @Const float[] beta, float[] y);
public static native void MKL_SDIAMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void MKL_SDIAMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void MKL_SDIAMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] x, @Const float[] beta, float[] y);
public static native void MKL_SDIASV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SDIASV(String transa, @Const MKL_INT m, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SDIASV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] x, float[] y);
public static native void MKL_SDIASV(String transa, @Const MKL_INT m, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SDIASV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SDIASV(String transa, @Const MKL_INT m, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] x, float[] y);
public static native void MKL_SDIAGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SDIAGEMV(String transa, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SDIAGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] x, float[] y);
public static native void MKL_SDIAGEMV(String transa, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SDIAGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SDIAGEMV(String transa, @Const MKL_INT m, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] x, float[] y);
public static native void MKL_SDIASYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SDIASYMV(String uplo, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SDIASYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] x, float[] y);
public static native void MKL_SDIASYMV(String uplo, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SDIASYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SDIASYMV(String uplo, @Const MKL_INT m, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] x, float[] y);
public static native void MKL_SDIATRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SDIATRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SDIATRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] x, float[] y);
public static native void MKL_SDIATRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SDIATRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SDIATRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] x, float[] y);

public static native void MKL_SSKYMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT pntr, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void MKL_SSKYMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT pntr, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void MKL_SSKYMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT pntr, @Const float[] x, @Const float[] beta, float[] y);
public static native void MKL_SSKYMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT pntr, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void MKL_SSKYMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT pntr, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void MKL_SSKYMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT pntr, @Const float[] x, @Const float[] beta, float[] y);
public static native void MKL_SSKYSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT pntr, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SSKYSV(String transa, @Const MKL_INT m, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT pntr, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SSKYSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT pntr, @Const float[] x, float[] y);
public static native void MKL_SSKYSV(String transa, @Const MKL_INT m, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT pntr, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SSKYSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT pntr, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SSKYSV(String transa, @Const MKL_INT m, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT pntr, @Const float[] x, float[] y);

public static native void MKL_SBSRMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void MKL_SBSRMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void MKL_SBSRMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, @Const float[] beta, float[] y);
public static native void MKL_SBSRMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, @Const FloatPointer beta, FloatPointer y);
public static native void MKL_SBSRMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, @Const FloatBuffer beta, FloatBuffer y);
public static native void MKL_SBSRMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, @Const float[] beta, float[] y);
public static native void MKL_SBSRSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SBSRSV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SBSRSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, float[] y);
public static native void MKL_SBSRSV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SBSRSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SBSRSV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] x, float[] y);
public static native void MKL_SBSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SBSRGEMV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SBSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_SBSRGEMV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SBSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SBSRGEMV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_CSPBLAS_SBSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_CSPBLAS_SBSRGEMV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_CSPBLAS_SBSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_CSPBLAS_SBSRGEMV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_CSPBLAS_SBSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_CSPBLAS_SBSRGEMV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_SBSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SBSRSYMV(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SBSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_SBSRSYMV(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SBSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SBSRSYMV(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_CSPBLAS_SBSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_CSPBLAS_SBSRSYMV(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_CSPBLAS_SBSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_CSPBLAS_SBSRSYMV(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_CSPBLAS_SBSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_CSPBLAS_SBSRSYMV(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_SBSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SBSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SBSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_SBSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_SBSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_SBSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_CSPBLAS_SBSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_CSPBLAS_SBSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_CSPBLAS_SBSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);
public static native void MKL_CSPBLAS_SBSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatPointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatPointer x, FloatPointer y);
public static native void MKL_CSPBLAS_SBSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const FloatBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const FloatBuffer x, FloatBuffer y);
public static native void MKL_CSPBLAS_SBSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const float[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const float[] x, float[] y);

/* Sparse BLAS Level3 upper case */
public static native void MKL_SCSRMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SCSRMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SCSRMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void MKL_SCSRMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SCSRMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SCSRMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void MKL_SCSRSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SCSRSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SCSRSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);
public static native void MKL_SCSRSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SCSRSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SCSRSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);

public static native void MKL_SCSCMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SCSCMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SCSCMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void MKL_SCSCMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SCSCMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SCSCMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void MKL_SCSCSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SCSCSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SCSCSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);
public static native void MKL_SCSCSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SCSCSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SCSCSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);

public static native void MKL_SCOOMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SCOOMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SCOOMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void MKL_SCOOMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SCOOMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SCOOMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void MKL_SCOOSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SCOOSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SCOOSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);
public static native void MKL_SCOOSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SCOOSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SCOOSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);

public static native void MKL_SDIAMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SDIAMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SDIAMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void MKL_SDIAMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SDIAMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SDIAMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void MKL_SDIASM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SDIASM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SDIASM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);
public static native void MKL_SDIASM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SDIASM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SDIASM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);

public static native void MKL_SSKYSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT pntr, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SSKYSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT pntr, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SSKYSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT pntr, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);
public static native void MKL_SSKYSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT pntr, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SSKYSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT pntr, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SSKYSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT pntr, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);
public static native void MKL_SSKYMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT pntr, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SSKYMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT pntr, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SSKYMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT pntr, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void MKL_SSKYMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT pntr, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SSKYMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT pntr, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SSKYMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT pntr, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);

public static native void MKL_SBSRMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SBSRMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SBSRMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void MKL_SBSRMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, @Const FloatPointer beta, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SBSRMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, @Const FloatBuffer beta, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SBSRMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, @Const float[] beta, float[] c, @Const MKL_INT ldc);
public static native void MKL_SBSRSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const FloatPointer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SBSRSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const FloatBuffer alpha, String matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SBSRSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const float[] alpha, @Cast("const char*") BytePointer matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);
public static native void MKL_SBSRSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const FloatPointer alpha, String matdescra, @Const FloatPointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatPointer b, @Const MKL_INT ldb, FloatPointer c, @Const MKL_INT ldc);
public static native void MKL_SBSRSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const FloatBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const FloatBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const FloatBuffer b, @Const MKL_INT ldb, FloatBuffer c, @Const MKL_INT ldc);
public static native void MKL_SBSRSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const float[] alpha, String matdescra, @Const float[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const float[] b, @Const MKL_INT ldb, float[] c, @Const MKL_INT ldc);

/* Double */
/* Sparse BLAS Level2 lower case */
public static native void mkl_dcsrmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void mkl_dcsrmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void mkl_dcsrmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, @Const double[] beta, double[] y);
public static native void mkl_dcsrmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void mkl_dcsrmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void mkl_dcsrmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, @Const double[] beta, double[] y);
public static native void mkl_dcsrsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dcsrsv(String transa, @Const MKL_INT m, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dcsrsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, double[] y);
public static native void mkl_dcsrsv(String transa, @Const MKL_INT m, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dcsrsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dcsrsv(String transa, @Const MKL_INT m, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, double[] y);
public static native void mkl_dcsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dcsrgemv(String transa, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dcsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_dcsrgemv(String transa, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dcsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dcsrgemv(String transa, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_cspblas_dcsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_cspblas_dcsrgemv(String transa, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_cspblas_dcsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_cspblas_dcsrgemv(String transa, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_cspblas_dcsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_cspblas_dcsrgemv(String transa, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_dcsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dcsrsymv(String uplo, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dcsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_dcsrsymv(String uplo, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dcsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dcsrsymv(String uplo, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_cspblas_dcsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_cspblas_dcsrsymv(String uplo, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_cspblas_dcsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_cspblas_dcsrsymv(String uplo, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_cspblas_dcsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_cspblas_dcsrsymv(String uplo, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_dcsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dcsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dcsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_dcsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dcsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dcsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_cspblas_dcsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_cspblas_dcsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_cspblas_dcsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_cspblas_dcsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_cspblas_dcsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_cspblas_dcsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);

public static native void mkl_dcscmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void mkl_dcscmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void mkl_dcscmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, @Const double[] beta, double[] y);
public static native void mkl_dcscmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void mkl_dcscmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void mkl_dcscmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, @Const double[] beta, double[] y);
public static native void mkl_dcscsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dcscsv(String transa, @Const MKL_INT m, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dcscsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, double[] y);
public static native void mkl_dcscsv(String transa, @Const MKL_INT m, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dcscsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dcscsv(String transa, @Const MKL_INT m, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, double[] y);

public static native void mkl_dcoomv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void mkl_dcoomv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void mkl_dcoomv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, @Const double[] beta, double[] y);
public static native void mkl_dcoomv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void mkl_dcoomv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void mkl_dcoomv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, @Const double[] beta, double[] y);
public static native void mkl_dcoosv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dcoosv(String transa, @Const MKL_INT m, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dcoosv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void mkl_dcoosv(String transa, @Const MKL_INT m, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dcoosv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dcoosv(String transa, @Const MKL_INT m, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void mkl_dcoogemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dcoogemv(String transa, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dcoogemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void mkl_dcoogemv(String transa, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dcoogemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dcoogemv(String transa, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void mkl_cspblas_dcoogemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void mkl_cspblas_dcoogemv(String transa, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_cspblas_dcoogemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void mkl_cspblas_dcoogemv(String transa, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void mkl_cspblas_dcoogemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_cspblas_dcoogemv(String transa, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void mkl_dcoosymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dcoosymv(String uplo, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dcoosymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void mkl_dcoosymv(String uplo, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dcoosymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dcoosymv(String uplo, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void mkl_cspblas_dcoosymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void mkl_cspblas_dcoosymv(String uplo, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_cspblas_dcoosymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void mkl_cspblas_dcoosymv(String uplo, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void mkl_cspblas_dcoosymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_cspblas_dcoosymv(String uplo, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void mkl_dcootrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dcootrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dcootrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void mkl_dcootrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dcootrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dcootrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void mkl_cspblas_dcootrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void mkl_cspblas_dcootrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_cspblas_dcootrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void mkl_cspblas_dcootrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void mkl_cspblas_dcootrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_cspblas_dcootrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);

public static native void mkl_ddiamv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void mkl_ddiamv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void mkl_ddiamv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] x, @Const double[] beta, double[] y);
public static native void mkl_ddiamv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void mkl_ddiamv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void mkl_ddiamv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] x, @Const double[] beta, double[] y);
public static native void mkl_ddiasv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer x, DoublePointer y);
public static native void mkl_ddiasv(String transa, @Const MKL_INT m, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_ddiasv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] x, double[] y);
public static native void mkl_ddiasv(String transa, @Const MKL_INT m, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer x, DoublePointer y);
public static native void mkl_ddiasv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_ddiasv(String transa, @Const MKL_INT m, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] x, double[] y);
public static native void mkl_ddiagemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer x, DoublePointer y);
public static native void mkl_ddiagemv(String transa, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_ddiagemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] x, double[] y);
public static native void mkl_ddiagemv(String transa, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer x, DoublePointer y);
public static native void mkl_ddiagemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_ddiagemv(String transa, @Const MKL_INT m, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] x, double[] y);
public static native void mkl_ddiasymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer x, DoublePointer y);
public static native void mkl_ddiasymv(String uplo, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_ddiasymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] x, double[] y);
public static native void mkl_ddiasymv(String uplo, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer x, DoublePointer y);
public static native void mkl_ddiasymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_ddiasymv(String uplo, @Const MKL_INT m, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] x, double[] y);
public static native void mkl_ddiatrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer x, DoublePointer y);
public static native void mkl_ddiatrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_ddiatrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] x, double[] y);
public static native void mkl_ddiatrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer x, DoublePointer y);
public static native void mkl_ddiatrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_ddiatrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] x, double[] y);

public static native void mkl_dskymv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT pntr, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void mkl_dskymv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT pntr, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void mkl_dskymv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT pntr, @Const double[] x, @Const double[] beta, double[] y);
public static native void mkl_dskymv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT pntr, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void mkl_dskymv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT pntr, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void mkl_dskymv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT pntr, @Const double[] x, @Const double[] beta, double[] y);
public static native void mkl_dskysv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT pntr, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dskysv(String transa, @Const MKL_INT m, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT pntr, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dskysv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT pntr, @Const double[] x, double[] y);
public static native void mkl_dskysv(String transa, @Const MKL_INT m, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT pntr, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dskysv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT pntr, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dskysv(String transa, @Const MKL_INT m, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT pntr, @Const double[] x, double[] y);

public static native void mkl_dbsrmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void mkl_dbsrmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void mkl_dbsrmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, @Const double[] beta, double[] y);
public static native void mkl_dbsrmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void mkl_dbsrmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void mkl_dbsrmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, @Const double[] beta, double[] y);
public static native void mkl_dbsrsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dbsrsv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dbsrsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, double[] y);
public static native void mkl_dbsrsv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dbsrsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dbsrsv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, double[] y);
public static native void mkl_dbsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dbsrgemv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dbsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_dbsrgemv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dbsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dbsrgemv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_cspblas_dbsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_cspblas_dbsrgemv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_cspblas_dbsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_cspblas_dbsrgemv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_cspblas_dbsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_cspblas_dbsrgemv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_dbsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dbsrsymv(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dbsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_dbsrsymv(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dbsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dbsrsymv(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_cspblas_dbsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_cspblas_dbsrsymv(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_cspblas_dbsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_cspblas_dbsrsymv(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_cspblas_dbsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_cspblas_dbsrsymv(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_dbsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dbsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dbsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_dbsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_dbsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_dbsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_cspblas_dbsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_cspblas_dbsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_cspblas_dbsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void mkl_cspblas_dbsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void mkl_cspblas_dbsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void mkl_cspblas_dbsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);

/* Sparse BLAS Level3 lower case */
public static native void mkl_dcsrmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_dcsrmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_dcsrmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void mkl_dcsrmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_dcsrmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_dcsrmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void mkl_dcsrsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_dcsrsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_dcsrsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);
public static native void mkl_dcsrsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_dcsrsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_dcsrsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);

public static native void mkl_dcscmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_dcscmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_dcscmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void mkl_dcscmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_dcscmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_dcscmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void mkl_dcscsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_dcscsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_dcscsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);
public static native void mkl_dcscsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_dcscsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_dcscsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);

public static native void mkl_dcoomm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_dcoomm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_dcoomm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void mkl_dcoomm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_dcoomm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_dcoomm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void mkl_dcoosm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_dcoosm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_dcoosm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);
public static native void mkl_dcoosm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_dcoosm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_dcoosm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);

public static native void mkl_ddiamm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_ddiamm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_ddiamm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void mkl_ddiamm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_ddiamm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_ddiamm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void mkl_ddiasm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_ddiasm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_ddiasm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);
public static native void mkl_ddiasm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_ddiasm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_ddiasm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);

public static native void mkl_dskysm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT pntr, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_dskysm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT pntr, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_dskysm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT pntr, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);
public static native void mkl_dskysm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT pntr, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_dskysm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT pntr, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_dskysm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT pntr, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);
public static native void mkl_dskymm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT pntr, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_dskymm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT pntr, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_dskymm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT pntr, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void mkl_dskymm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT pntr, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_dskymm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT pntr, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_dskymm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT pntr, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);

public static native void mkl_dbsrmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_dbsrmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_dbsrmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void mkl_dbsrmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_dbsrmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_dbsrmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void mkl_dbsrsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_dbsrsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_dbsrsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);
public static native void mkl_dbsrsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void mkl_dbsrsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void mkl_dbsrsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);

/* Upper case declaration */
/* Sparse BLAS Level2 upper case */
public static native void MKL_DCSRMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void MKL_DCSRMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void MKL_DCSRMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, @Const double[] beta, double[] y);
public static native void MKL_DCSRMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void MKL_DCSRMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void MKL_DCSRMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, @Const double[] beta, double[] y);
public static native void MKL_DCSRSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DCSRSV(String transa, @Const MKL_INT m, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DCSRSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, double[] y);
public static native void MKL_DCSRSV(String transa, @Const MKL_INT m, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DCSRSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DCSRSV(String transa, @Const MKL_INT m, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, double[] y);
public static native void MKL_DCSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DCSRGEMV(String transa, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DCSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_DCSRGEMV(String transa, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DCSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DCSRGEMV(String transa, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_CSPBLAS_DCSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_CSPBLAS_DCSRGEMV(String transa, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_CSPBLAS_DCSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_CSPBLAS_DCSRGEMV(String transa, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_CSPBLAS_DCSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_CSPBLAS_DCSRGEMV(String transa, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_DCSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DCSRSYMV(String uplo, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DCSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_DCSRSYMV(String uplo, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DCSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DCSRSYMV(String uplo, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_CSPBLAS_DCSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_CSPBLAS_DCSRSYMV(String uplo, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_CSPBLAS_DCSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_CSPBLAS_DCSRSYMV(String uplo, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_CSPBLAS_DCSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_CSPBLAS_DCSRSYMV(String uplo, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_DCSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DCSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DCSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_DCSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DCSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DCSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_CSPBLAS_DCSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_CSPBLAS_DCSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_CSPBLAS_DCSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_CSPBLAS_DCSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_CSPBLAS_DCSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_CSPBLAS_DCSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);

public static native void MKL_DCSCMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void MKL_DCSCMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void MKL_DCSCMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, @Const double[] beta, double[] y);
public static native void MKL_DCSCMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void MKL_DCSCMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void MKL_DCSCMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, @Const double[] beta, double[] y);
public static native void MKL_DCSCSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DCSCSV(String transa, @Const MKL_INT m, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DCSCSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, double[] y);
public static native void MKL_DCSCSV(String transa, @Const MKL_INT m, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DCSCSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DCSCSV(String transa, @Const MKL_INT m, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, double[] y);

public static native void MKL_DCOOMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void MKL_DCOOMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void MKL_DCOOMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, @Const double[] beta, double[] y);
public static native void MKL_DCOOMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void MKL_DCOOMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void MKL_DCOOMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, @Const double[] beta, double[] y);
public static native void MKL_DCOOSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DCOOSV(String transa, @Const MKL_INT m, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DCOOSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void MKL_DCOOSV(String transa, @Const MKL_INT m, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DCOOSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DCOOSV(String transa, @Const MKL_INT m, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void MKL_DCOOGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DCOOGEMV(String transa, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DCOOGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void MKL_DCOOGEMV(String transa, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DCOOGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DCOOGEMV(String transa, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void MKL_CSPBLAS_DCOOGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void MKL_CSPBLAS_DCOOGEMV(String transa, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_CSPBLAS_DCOOGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void MKL_CSPBLAS_DCOOGEMV(String transa, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void MKL_CSPBLAS_DCOOGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_CSPBLAS_DCOOGEMV(String transa, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void MKL_DCOOSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DCOOSYMV(String uplo, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DCOOSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void MKL_DCOOSYMV(String uplo, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DCOOSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DCOOSYMV(String uplo, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void MKL_CSPBLAS_DCOOSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void MKL_CSPBLAS_DCOOSYMV(String uplo, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_CSPBLAS_DCOOSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void MKL_CSPBLAS_DCOOSYMV(String uplo, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void MKL_CSPBLAS_DCOOSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_CSPBLAS_DCOOSYMV(String uplo, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void MKL_DCOOTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DCOOTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DCOOTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void MKL_DCOOTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DCOOTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DCOOTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void MKL_CSPBLAS_DCOOTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void MKL_CSPBLAS_DCOOTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_CSPBLAS_DCOOTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);
public static native void MKL_CSPBLAS_DCOOTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer x, DoublePointer y);
public static native void MKL_CSPBLAS_DCOOTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_CSPBLAS_DCOOTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] x, double[] y);

public static native void MKL_DDIAMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void MKL_DDIAMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void MKL_DDIAMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] x, @Const double[] beta, double[] y);
public static native void MKL_DDIAMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void MKL_DDIAMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void MKL_DDIAMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] x, @Const double[] beta, double[] y);
public static native void MKL_DDIASV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DDIASV(String transa, @Const MKL_INT m, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DDIASV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] x, double[] y);
public static native void MKL_DDIASV(String transa, @Const MKL_INT m, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DDIASV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DDIASV(String transa, @Const MKL_INT m, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] x, double[] y);
public static native void MKL_DDIAGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DDIAGEMV(String transa, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DDIAGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] x, double[] y);
public static native void MKL_DDIAGEMV(String transa, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DDIAGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DDIAGEMV(String transa, @Const MKL_INT m, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] x, double[] y);
public static native void MKL_DDIASYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DDIASYMV(String uplo, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DDIASYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] x, double[] y);
public static native void MKL_DDIASYMV(String uplo, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DDIASYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DDIASYMV(String uplo, @Const MKL_INT m, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] x, double[] y);
public static native void MKL_DDIATRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DDIATRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DDIATRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] x, double[] y);
public static native void MKL_DDIATRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DDIATRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DDIATRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] x, double[] y);

public static native void MKL_DSKYMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT pntr, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void MKL_DSKYMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT pntr, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void MKL_DSKYMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT pntr, @Const double[] x, @Const double[] beta, double[] y);
public static native void MKL_DSKYMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT pntr, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void MKL_DSKYMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT pntr, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void MKL_DSKYMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT pntr, @Const double[] x, @Const double[] beta, double[] y);
public static native void MKL_DSKYSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT pntr, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DSKYSV(String transa, @Const MKL_INT m, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT pntr, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DSKYSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT pntr, @Const double[] x, double[] y);
public static native void MKL_DSKYSV(String transa, @Const MKL_INT m, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT pntr, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DSKYSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT pntr, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DSKYSV(String transa, @Const MKL_INT m, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT pntr, @Const double[] x, double[] y);

public static native void MKL_DBSRMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void MKL_DBSRMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void MKL_DBSRMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, @Const double[] beta, double[] y);
public static native void MKL_DBSRMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, @Const DoublePointer beta, DoublePointer y);
public static native void MKL_DBSRMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, @Const DoubleBuffer beta, DoubleBuffer y);
public static native void MKL_DBSRMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, @Const double[] beta, double[] y);
public static native void MKL_DBSRSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DBSRSV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DBSRSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, double[] y);
public static native void MKL_DBSRSV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DBSRSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DBSRSV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] x, double[] y);
public static native void MKL_DBSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DBSRGEMV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DBSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_DBSRGEMV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DBSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DBSRGEMV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_CSPBLAS_DBSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_CSPBLAS_DBSRGEMV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_CSPBLAS_DBSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_CSPBLAS_DBSRGEMV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_CSPBLAS_DBSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_CSPBLAS_DBSRGEMV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_DBSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DBSRSYMV(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DBSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_DBSRSYMV(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DBSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DBSRSYMV(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_CSPBLAS_DBSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_CSPBLAS_DBSRSYMV(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_CSPBLAS_DBSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_CSPBLAS_DBSRSYMV(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_CSPBLAS_DBSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_CSPBLAS_DBSRSYMV(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_DBSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DBSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DBSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_DBSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_DBSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_DBSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_CSPBLAS_DBSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_CSPBLAS_DBSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_CSPBLAS_DBSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);
public static native void MKL_CSPBLAS_DBSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoublePointer x, DoublePointer y);
public static native void MKL_CSPBLAS_DBSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, @Const DoubleBuffer x, DoubleBuffer y);
public static native void MKL_CSPBLAS_DBSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, @Const double[] x, double[] y);

/* Sparse BLAS Level3 upper case */
public static native void MKL_DCSRMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DCSRMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DCSRMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void MKL_DCSRMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DCSRMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DCSRMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void MKL_DCSRSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DCSRSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DCSRSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);
public static native void MKL_DCSRSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DCSRSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DCSRSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);

public static native void MKL_DCSCMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DCSCMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DCSCMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void MKL_DCSCMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DCSCMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DCSCMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void MKL_DCSCSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DCSCSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DCSCSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);
public static native void MKL_DCSCSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DCSCSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DCSCSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);

public static native void MKL_DCOOMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DCOOMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DCOOMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void MKL_DCOOMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DCOOMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DCOOMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void MKL_DCOOSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DCOOSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DCOOSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);
public static native void MKL_DCOOSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DCOOSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DCOOSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);

public static native void MKL_DDIAMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DDIAMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DDIAMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void MKL_DDIAMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DDIAMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DDIAMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void MKL_DDIASM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DDIASM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DDIASM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);
public static native void MKL_DDIASM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DDIASM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DDIASM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);

public static native void MKL_DSKYSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT pntr, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DSKYSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT pntr, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DSKYSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT pntr, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);
public static native void MKL_DSKYSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT pntr, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DSKYSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT pntr, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DSKYSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT pntr, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);
public static native void MKL_DSKYMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT pntr, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DSKYMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT pntr, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DSKYMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT pntr, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void MKL_DSKYMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT pntr, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DSKYMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT pntr, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DSKYMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT pntr, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);

public static native void MKL_DBSRMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DBSRMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DBSRMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void MKL_DBSRMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, @Const DoublePointer beta, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DBSRMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, @Const DoubleBuffer beta, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DBSRMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, @Const double[] beta, double[] c, @Const MKL_INT ldc);
public static native void MKL_DBSRSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const DoublePointer alpha, @Cast("const char*") BytePointer matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DBSRSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const DoubleBuffer alpha, String matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DBSRSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const double[] alpha, @Cast("const char*") BytePointer matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);
public static native void MKL_DBSRSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const DoublePointer alpha, String matdescra, @Const DoublePointer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoublePointer b, @Const MKL_INT ldb, DoublePointer c, @Const MKL_INT ldc);
public static native void MKL_DBSRSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const DoubleBuffer alpha, @Cast("const char*") BytePointer matdescra, @Const DoubleBuffer val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const DoubleBuffer b, @Const MKL_INT ldb, DoubleBuffer c, @Const MKL_INT ldc);
public static native void MKL_DBSRSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const double[] alpha, String matdescra, @Const double[] val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const double[] b, @Const MKL_INT ldb, double[] c, @Const MKL_INT ldc);

/* MKL_Complex8 */
/* Sparse BLAS Level2 lower case */
public static native void mkl_ccsrmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void mkl_ccsrmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void mkl_ccsrsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_ccsrsv(String transa, @Const MKL_INT m, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_ccsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_ccsrgemv(String transa, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cspblas_ccsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cspblas_ccsrgemv(String transa, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_ccsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_ccsrsymv(String uplo, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cspblas_ccsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cspblas_ccsrsymv(String uplo, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_ccsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_ccsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cspblas_ccsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cspblas_ccsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);

public static native void mkl_ccscmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void mkl_ccscmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void mkl_ccscsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_ccscsv(String transa, @Const MKL_INT m, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, MKL_Complex8 y);

public static native void mkl_ccoomv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void mkl_ccoomv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void mkl_ccoosv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_ccoosv(String transa, @Const MKL_INT m, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_ccoogemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_ccoogemv(String transa, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cspblas_ccoogemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cspblas_ccoogemv(String transa, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_ccoosymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_ccoosymv(String uplo, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cspblas_ccoosymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cspblas_ccoosymv(String uplo, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_ccootrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_ccootrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cspblas_ccootrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cspblas_ccootrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);

public static native void mkl_cdiamv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void mkl_cdiamv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void mkl_cdiasv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cdiasv(String transa, @Const MKL_INT m, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cdiagemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cdiagemv(String transa, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cdiasymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cdiasymv(String uplo, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cdiatrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cdiatrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 x, MKL_Complex8 y);

public static native void mkl_cskymv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT pntr, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void mkl_cskymv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT pntr, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void mkl_cskysv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT pntr, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cskysv(String transa, @Const MKL_INT m, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT pntr, @Const MKL_Complex8 x, MKL_Complex8 y);

public static native void mkl_cbsrmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void mkl_cbsrmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void mkl_cbsrsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cbsrsv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cbsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cbsrgemv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cspblas_cbsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cspblas_cbsrgemv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cbsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cbsrsymv(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cspblas_cbsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cspblas_cbsrsymv(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cbsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cbsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cspblas_cbsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void mkl_cspblas_cbsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);

/* Sparse BLAS Level3 lower case */
public static native void mkl_ccsrmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void mkl_ccsrmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void mkl_ccsrsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void mkl_ccsrsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);

public static native void mkl_ccscmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void mkl_ccscmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void mkl_ccscsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void mkl_ccscsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);

public static native void mkl_ccoomm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void mkl_ccoomm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void mkl_ccoosm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void mkl_ccoosm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);

public static native void mkl_cdiamm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void mkl_cdiamm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void mkl_cdiasm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void mkl_cdiasm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);

public static native void mkl_cskysm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT pntr, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void mkl_cskysm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT pntr, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void mkl_cskymm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT pntr, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void mkl_cskymm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT pntr, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);

public static native void mkl_cbsrmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void mkl_cbsrmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void mkl_cbsrsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void mkl_cbsrsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);

/* Upper case declaration */
/* Sparse BLAS Level2 upper case */
public static native void MKL_CCSRMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void MKL_CCSRMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void MKL_CCSRSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CCSRSV(String transa, @Const MKL_INT m, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CCSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CCSRGEMV(String transa, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CSPBLAS_CCSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CSPBLAS_CCSRGEMV(String transa, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CCSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CCSRSYMV(String uplo, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CSPBLAS_CCSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CSPBLAS_CCSRSYMV(String uplo, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CCSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CCSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CSPBLAS_CCSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CSPBLAS_CCSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);

public static native void MKL_CCSCMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void MKL_CCSCMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void MKL_CCSCSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CCSCSV(String transa, @Const MKL_INT m, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, MKL_Complex8 y);

public static native void MKL_CCOOMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void MKL_CCOOMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void MKL_CCOOSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CCOOSV(String transa, @Const MKL_INT m, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CCOOGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CCOOGEMV(String transa, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CSPBLAS_CCOOGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CSPBLAS_CCOOGEMV(String transa, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CCOOSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CCOOSYMV(String uplo, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CSPBLAS_CCOOSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CSPBLAS_CCOOSYMV(String uplo, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CCOOTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CCOOTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CSPBLAS_CCOOTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CSPBLAS_CCOOTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 x, MKL_Complex8 y);

public static native void MKL_CDIAMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void MKL_CDIAMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void MKL_CDIASV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CDIASV(String transa, @Const MKL_INT m, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CDIAGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CDIAGEMV(String transa, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CDIASYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CDIASYMV(String uplo, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CDIATRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CDIATRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 x, MKL_Complex8 y);

public static native void MKL_CSKYMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT pntr, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void MKL_CSKYMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT pntr, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void MKL_CSKYSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT pntr, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CSKYSV(String transa, @Const MKL_INT m, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT pntr, @Const MKL_Complex8 x, MKL_Complex8 y);

public static native void MKL_CBSRMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void MKL_CBSRMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, @Const MKL_Complex8 beta, MKL_Complex8 y);
public static native void MKL_CBSRSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CBSRSV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CBSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CBSRGEMV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CSPBLAS_CBSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CSPBLAS_CBSRGEMV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CBSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CBSRSYMV(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CSPBLAS_CBSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CSPBLAS_CBSRSYMV(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CBSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CBSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CSPBLAS_CBSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);
public static native void MKL_CSPBLAS_CBSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex8 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex8 x, MKL_Complex8 y);

/* Sparse BLAS Level3 upper case */
public static native void MKL_CCSRMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void MKL_CCSRMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void MKL_CCSRSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void MKL_CCSRSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);

public static native void MKL_CCSCMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void MKL_CCSCMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void MKL_CCSCSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void MKL_CCSCSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);

public static native void MKL_CCOOMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void MKL_CCOOMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void MKL_CCOOSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void MKL_CCOOSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);

public static native void MKL_CDIAMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void MKL_CDIAMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void MKL_CDIASM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void MKL_CDIASM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);

public static native void MKL_CSKYSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT pntr, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void MKL_CSKYSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT pntr, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void MKL_CSKYMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT pntr, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void MKL_CSKYMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT pntr, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);

public static native void MKL_CBSRMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void MKL_CBSRMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, @Const MKL_Complex8 beta, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void MKL_CBSRSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const MKL_Complex8 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);
public static native void MKL_CBSRSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const MKL_Complex8 alpha, String matdescra, @Const MKL_Complex8 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_Complex8 c, @Const MKL_INT ldc);

/* MKL_Complex16 */
/* Sparse BLAS Level2 lower case */
public static native void mkl_zcsrmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void mkl_zcsrmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void mkl_zcsrsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zcsrsv(String transa, @Const MKL_INT m, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zcsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zcsrgemv(String transa, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_cspblas_zcsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_cspblas_zcsrgemv(String transa, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zcsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zcsrsymv(String uplo, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_cspblas_zcsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_cspblas_zcsrsymv(String uplo, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zcsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zcsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_cspblas_zcsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_cspblas_zcsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);

public static native void mkl_zcscmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void mkl_zcscmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void mkl_zcscsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zcscsv(String transa, @Const MKL_INT m, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, MKL_Complex16 y);

public static native void mkl_zcoomv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void mkl_zcoomv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void mkl_zcoosv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zcoosv(String transa, @Const MKL_INT m, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zcoogemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zcoogemv(String transa, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_cspblas_zcoogemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_cspblas_zcoogemv(String transa, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zcoosymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zcoosymv(String uplo, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_cspblas_zcoosymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_cspblas_zcoosymv(String uplo, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zcootrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zcootrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_cspblas_zcootrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_cspblas_zcootrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);

public static native void mkl_zdiamv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void mkl_zdiamv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void mkl_zdiasv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zdiasv(String transa, @Const MKL_INT m, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zdiagemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zdiagemv(String transa, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zdiasymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zdiasymv(String uplo, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zdiatrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zdiatrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 x, MKL_Complex16 y);

public static native void mkl_zskymv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT pntr, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void mkl_zskymv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT pntr, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void mkl_zskysv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT pntr, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zskysv(String transa, @Const MKL_INT m, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT pntr, @Const MKL_Complex16 x, MKL_Complex16 y);

public static native void mkl_zbsrmv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void mkl_zbsrmv(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void mkl_zbsrsv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zbsrsv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zbsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zbsrgemv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_cspblas_zbsrgemv(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_cspblas_zbsrgemv(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zbsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zbsrsymv(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_cspblas_zbsrsymv(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_cspblas_zbsrsymv(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zbsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_zbsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_cspblas_zbsrtrsv(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void mkl_cspblas_zbsrtrsv(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);

/* Sparse BLAS Level3 lower case */
public static native void mkl_zcsrmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void mkl_zcsrmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void mkl_zcsrsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void mkl_zcsrsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);

public static native void mkl_zcscmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void mkl_zcscmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void mkl_zcscsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void mkl_zcscsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);

public static native void mkl_zcoomm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void mkl_zcoomm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void mkl_zcoosm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void mkl_zcoosm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);

public static native void mkl_zdiamm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void mkl_zdiamm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void mkl_zdiasm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void mkl_zdiasm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);

public static native void mkl_zskysm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT pntr, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void mkl_zskysm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT pntr, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void mkl_zskymm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT pntr, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void mkl_zskymm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT pntr, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);

public static native void mkl_zbsrmm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void mkl_zbsrmm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void mkl_zbsrsm(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void mkl_zbsrsm(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);

/* Upper case declaration */
/* Sparse BLAS Level2 upper case */
public static native void MKL_ZCSRMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void MKL_ZCSRMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void MKL_ZCSRSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZCSRSV(String transa, @Const MKL_INT m, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZCSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZCSRGEMV(String transa, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_CSPBLAS_ZCSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_CSPBLAS_ZCSRGEMV(String transa, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZCSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZCSRSYMV(String uplo, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_CSPBLAS_ZCSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_CSPBLAS_ZCSRSYMV(String uplo, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZCSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZCSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_CSPBLAS_ZCSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_CSPBLAS_ZCSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);

public static native void MKL_ZCSCMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void MKL_ZCSCMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void MKL_ZCSCSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZCSCSV(String transa, @Const MKL_INT m, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, MKL_Complex16 y);

public static native void MKL_ZCOOMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void MKL_ZCOOMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void MKL_ZCOOSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZCOOSV(String transa, @Const MKL_INT m, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZCOOGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZCOOGEMV(String transa, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_CSPBLAS_ZCOOGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_CSPBLAS_ZCOOGEMV(String transa, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZCOOSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZCOOSYMV(String uplo, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_CSPBLAS_ZCOOSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_CSPBLAS_ZCOOSYMV(String uplo, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZCOOTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZCOOTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_CSPBLAS_ZCOOTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_CSPBLAS_ZCOOTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 x, MKL_Complex16 y);

public static native void MKL_ZDIAMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void MKL_ZDIAMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void MKL_ZDIASV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZDIASV(String transa, @Const MKL_INT m, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZDIAGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZDIAGEMV(String transa, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZDIASYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZDIASYMV(String uplo, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZDIATRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZDIATRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 x, MKL_Complex16 y);

public static native void MKL_ZSKYMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT pntr, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void MKL_ZSKYMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT pntr, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void MKL_ZSKYSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT pntr, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZSKYSV(String transa, @Const MKL_INT m, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT pntr, @Const MKL_Complex16 x, MKL_Complex16 y);

public static native void MKL_ZBSRMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void MKL_ZBSRMV(String transa, @Const MKL_INT m, @Const MKL_INT k, @Const MKL_INT lb, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, @Const MKL_Complex16 beta, MKL_Complex16 y);
public static native void MKL_ZBSRSV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZBSRSV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZBSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZBSRGEMV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_CSPBLAS_ZBSRGEMV(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_CSPBLAS_ZBSRGEMV(String transa, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZBSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZBSRSYMV(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_CSPBLAS_ZBSRSYMV(@Cast("const char*") BytePointer uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_CSPBLAS_ZBSRSYMV(String uplo, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZBSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_ZBSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_CSPBLAS_ZBSRTRSV(@Cast("const char*") BytePointer uplo, @Cast("const char*") BytePointer transa, @Cast("const char*") BytePointer diag, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);
public static native void MKL_CSPBLAS_ZBSRTRSV(String uplo, String transa, String diag, @Const MKL_INT m, @Const MKL_INT lb, @Const MKL_Complex16 a, @Const MKL_INT ia, @Const MKL_INT ja, @Const MKL_Complex16 x, MKL_Complex16 y);

/* Sparse BLAS Level3 upper case */
public static native void MKL_ZCSRMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void MKL_ZCSRMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void MKL_ZCSRSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void MKL_ZCSRSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);

public static native void MKL_ZCSCMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void MKL_ZCSCMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void MKL_ZCSCSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void MKL_ZCSCSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);

public static native void MKL_ZCOOMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void MKL_ZCOOMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void MKL_ZCOOSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void MKL_ZCOOSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT rowind, @Const MKL_INT colind, @Const MKL_INT nnz, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);

public static native void MKL_ZDIAMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void MKL_ZDIAMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void MKL_ZDIASM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void MKL_ZDIASM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT lval, @Const MKL_INT idiag, @Const MKL_INT ndiag, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);

public static native void MKL_ZSKYSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT pntr, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void MKL_ZSKYSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT pntr, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void MKL_ZSKYMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT pntr, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void MKL_ZSKYMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT pntr, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);

public static native void MKL_ZBSRMM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void MKL_ZBSRMM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT k, @Const MKL_INT lb, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, @Const MKL_Complex16 beta, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void MKL_ZBSRSM(@Cast("const char*") BytePointer transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const MKL_Complex16 alpha, @Cast("const char*") BytePointer matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);
public static native void MKL_ZBSRSM(String transa, @Const MKL_INT m, @Const MKL_INT n, @Const MKL_INT lb, @Const MKL_Complex16 alpha, String matdescra, @Const MKL_Complex16 val, @Const MKL_INT indx, @Const MKL_INT pntrb, @Const MKL_INT pntre, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_Complex16 c, @Const MKL_INT ldc);

/*Converters lower case*/
public static native void mkl_dcsrbsr(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT mblk, @Const MKL_INT ldAbsr, DoublePointer Acsr, MKL_INT AJ, MKL_INT AI, DoublePointer Absr,  MKL_INT AJB,  MKL_INT AIB,  MKL_INT info);
public static native void mkl_dcsrbsr(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT mblk, @Const MKL_INT ldAbsr, DoubleBuffer Acsr, MKL_INT AJ, MKL_INT AI, DoubleBuffer Absr,  MKL_INT AJB,  MKL_INT AIB,  MKL_INT info);
public static native void mkl_dcsrbsr(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT mblk, @Const MKL_INT ldAbsr, double[] Acsr, MKL_INT AJ, MKL_INT AI, double[] Absr,  MKL_INT AJB,  MKL_INT AIB,  MKL_INT info);
public static native void mkl_dcsrcoo(@Const MKL_INT job, @Const MKL_INT n, DoublePointer Acsr, MKL_INT AJR, MKL_INT AIR, MKL_INT nnz, DoublePointer Acoo,  MKL_INT ir,  MKL_INT jc,  MKL_INT info);
public static native void mkl_dcsrcoo(@Const MKL_INT job, @Const MKL_INT n, DoubleBuffer Acsr, MKL_INT AJR, MKL_INT AIR, MKL_INT nnz, DoubleBuffer Acoo,  MKL_INT ir,  MKL_INT jc,  MKL_INT info);
public static native void mkl_dcsrcoo(@Const MKL_INT job, @Const MKL_INT n, double[] Acsr, MKL_INT AJR, MKL_INT AIR, MKL_INT nnz, double[] Acoo,  MKL_INT ir,  MKL_INT jc,  MKL_INT info);
public static native void mkl_ddnscsr(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT n, DoublePointer Adns, @Const MKL_INT lda, DoublePointer Acsr, MKL_INT AJ, MKL_INT AI, MKL_INT info);
public static native void mkl_ddnscsr(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT n, DoubleBuffer Adns, @Const MKL_INT lda, DoubleBuffer Acsr, MKL_INT AJ, MKL_INT AI, MKL_INT info);
public static native void mkl_ddnscsr(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT n, double[] Adns, @Const MKL_INT lda, double[] Acsr, MKL_INT AJ, MKL_INT AI, MKL_INT info);
public static native void mkl_dcsrcsc(@Const MKL_INT job, @Const MKL_INT n, DoublePointer Acsr, MKL_INT AJ0, MKL_INT AI0, DoublePointer Acsc, MKL_INT AJ1, MKL_INT AI1, MKL_INT info);
public static native void mkl_dcsrcsc(@Const MKL_INT job, @Const MKL_INT n, DoubleBuffer Acsr, MKL_INT AJ0, MKL_INT AI0, DoubleBuffer Acsc, MKL_INT AJ1, MKL_INT AI1, MKL_INT info);
public static native void mkl_dcsrcsc(@Const MKL_INT job, @Const MKL_INT n, double[] Acsr, MKL_INT AJ0, MKL_INT AI0, double[] Acsc, MKL_INT AJ1, MKL_INT AI1, MKL_INT info);
public static native void mkl_dcsrdia(@Const MKL_INT job, @Const MKL_INT n, DoublePointer Acsr, MKL_INT AJ0, MKL_INT AI0, DoublePointer Adia, @Const MKL_INT ndiag, MKL_INT distance, MKL_INT idiag, DoublePointer Acsr_rem, MKL_INT AJ0_rem, MKL_INT AI0_rem, MKL_INT info);
public static native void mkl_dcsrdia(@Const MKL_INT job, @Const MKL_INT n, DoubleBuffer Acsr, MKL_INT AJ0, MKL_INT AI0, DoubleBuffer Adia, @Const MKL_INT ndiag, MKL_INT distance, MKL_INT idiag, DoubleBuffer Acsr_rem, MKL_INT AJ0_rem, MKL_INT AI0_rem, MKL_INT info);
public static native void mkl_dcsrdia(@Const MKL_INT job, @Const MKL_INT n, double[] Acsr, MKL_INT AJ0, MKL_INT AI0, double[] Adia, @Const MKL_INT ndiag, MKL_INT distance, MKL_INT idiag, double[] Acsr_rem, MKL_INT AJ0_rem, MKL_INT AI0_rem, MKL_INT info);
public static native void mkl_dcsrsky(@Const MKL_INT job, @Const MKL_INT n, DoublePointer Acsr, MKL_INT AJ0, MKL_INT AI0,  DoublePointer Asky, MKL_INT pointers, MKL_INT info);
public static native void mkl_dcsrsky(@Const MKL_INT job, @Const MKL_INT n, DoubleBuffer Acsr, MKL_INT AJ0, MKL_INT AI0,  DoubleBuffer Asky, MKL_INT pointers, MKL_INT info);
public static native void mkl_dcsrsky(@Const MKL_INT job, @Const MKL_INT n, double[] Acsr, MKL_INT AJ0, MKL_INT AI0,  double[] Asky, MKL_INT pointers, MKL_INT info);

public static native void mkl_scsrbsr(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT mblk, @Const MKL_INT ldAbsr, FloatPointer Acsr, MKL_INT AJ, MKL_INT AI, FloatPointer Absr,  MKL_INT AJB,  MKL_INT AIB,  MKL_INT info);
public static native void mkl_scsrbsr(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT mblk, @Const MKL_INT ldAbsr, FloatBuffer Acsr, MKL_INT AJ, MKL_INT AI, FloatBuffer Absr,  MKL_INT AJB,  MKL_INT AIB,  MKL_INT info);
public static native void mkl_scsrbsr(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT mblk, @Const MKL_INT ldAbsr, float[] Acsr, MKL_INT AJ, MKL_INT AI, float[] Absr,  MKL_INT AJB,  MKL_INT AIB,  MKL_INT info);
public static native void mkl_scsrcoo(@Const MKL_INT job, @Const MKL_INT n, FloatPointer Acsr, MKL_INT AJR, MKL_INT AIR, MKL_INT nnz, FloatPointer Acoo,  MKL_INT ir,  MKL_INT jc,  MKL_INT info);
public static native void mkl_scsrcoo(@Const MKL_INT job, @Const MKL_INT n, FloatBuffer Acsr, MKL_INT AJR, MKL_INT AIR, MKL_INT nnz, FloatBuffer Acoo,  MKL_INT ir,  MKL_INT jc,  MKL_INT info);
public static native void mkl_scsrcoo(@Const MKL_INT job, @Const MKL_INT n, float[] Acsr, MKL_INT AJR, MKL_INT AIR, MKL_INT nnz, float[] Acoo,  MKL_INT ir,  MKL_INT jc,  MKL_INT info);
public static native void mkl_sdnscsr(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT n, FloatPointer Adns, @Const MKL_INT lda, FloatPointer Acsr, MKL_INT AJ, MKL_INT AI, MKL_INT info);
public static native void mkl_sdnscsr(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT n, FloatBuffer Adns, @Const MKL_INT lda, FloatBuffer Acsr, MKL_INT AJ, MKL_INT AI, MKL_INT info);
public static native void mkl_sdnscsr(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT n, float[] Adns, @Const MKL_INT lda, float[] Acsr, MKL_INT AJ, MKL_INT AI, MKL_INT info);
public static native void mkl_scsrcsc(@Const MKL_INT job, @Const MKL_INT n, FloatPointer Acsr, MKL_INT AJ0, MKL_INT AI0, FloatPointer Acsc, MKL_INT AJ1, MKL_INT AI1, MKL_INT info);
public static native void mkl_scsrcsc(@Const MKL_INT job, @Const MKL_INT n, FloatBuffer Acsr, MKL_INT AJ0, MKL_INT AI0, FloatBuffer Acsc, MKL_INT AJ1, MKL_INT AI1, MKL_INT info);
public static native void mkl_scsrcsc(@Const MKL_INT job, @Const MKL_INT n, float[] Acsr, MKL_INT AJ0, MKL_INT AI0, float[] Acsc, MKL_INT AJ1, MKL_INT AI1, MKL_INT info);
public static native void mkl_scsrdia(@Const MKL_INT job, @Const MKL_INT n, FloatPointer Acsr, MKL_INT AJ0, MKL_INT AI0, FloatPointer Adia, @Const MKL_INT ndiag, MKL_INT distance, MKL_INT idiag, FloatPointer Acsr_rem, MKL_INT AJ0_rem, MKL_INT AI0_rem, MKL_INT info);
public static native void mkl_scsrdia(@Const MKL_INT job, @Const MKL_INT n, FloatBuffer Acsr, MKL_INT AJ0, MKL_INT AI0, FloatBuffer Adia, @Const MKL_INT ndiag, MKL_INT distance, MKL_INT idiag, FloatBuffer Acsr_rem, MKL_INT AJ0_rem, MKL_INT AI0_rem, MKL_INT info);
public static native void mkl_scsrdia(@Const MKL_INT job, @Const MKL_INT n, float[] Acsr, MKL_INT AJ0, MKL_INT AI0, float[] Adia, @Const MKL_INT ndiag, MKL_INT distance, MKL_INT idiag, float[] Acsr_rem, MKL_INT AJ0_rem, MKL_INT AI0_rem, MKL_INT info);
public static native void mkl_scsrsky(@Const MKL_INT job, @Const MKL_INT n, FloatPointer Acsr, MKL_INT AJ0, MKL_INT AI0,  FloatPointer Asky, MKL_INT pointers, MKL_INT info);
public static native void mkl_scsrsky(@Const MKL_INT job, @Const MKL_INT n, FloatBuffer Acsr, MKL_INT AJ0, MKL_INT AI0,  FloatBuffer Asky, MKL_INT pointers, MKL_INT info);
public static native void mkl_scsrsky(@Const MKL_INT job, @Const MKL_INT n, float[] Acsr, MKL_INT AJ0, MKL_INT AI0,  float[] Asky, MKL_INT pointers, MKL_INT info);

public static native void mkl_ccsrbsr(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT mblk, @Const MKL_INT ldAbsr, MKL_Complex8 Acsr, MKL_INT AJ, MKL_INT AI, MKL_Complex8 Absr,  MKL_INT AJB,  MKL_INT AIB,  MKL_INT info);
public static native void mkl_ccsrcoo(@Const MKL_INT job, @Const MKL_INT n, MKL_Complex8 Acsr, MKL_INT AJR, MKL_INT AIR, MKL_INT nnz, MKL_Complex8 Acoo,  MKL_INT ir,  MKL_INT jc,  MKL_INT info);
public static native void mkl_cdnscsr(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT n, MKL_Complex8 Adns, @Const MKL_INT lda, MKL_Complex8 Acsr, MKL_INT AJ, MKL_INT AI, MKL_INT info);
public static native void mkl_ccsrcsc(@Const MKL_INT job, @Const MKL_INT n, MKL_Complex8 Acsr, MKL_INT AJ0, MKL_INT AI0, MKL_Complex8 Acsc, MKL_INT AJ1, MKL_INT AI1, MKL_INT info);
public static native void mkl_ccsrdia(@Const MKL_INT job, @Const MKL_INT n, MKL_Complex8 Acsr, MKL_INT AJ0, MKL_INT AI0, MKL_Complex8 Adia, @Const MKL_INT ndiag, MKL_INT distance, MKL_INT idiag, MKL_Complex8 Acsr_rem, MKL_INT AJ0_rem, MKL_INT AI0_rem, MKL_INT info);
public static native void mkl_ccsrsky(@Const MKL_INT job, @Const MKL_INT n, MKL_Complex8 Acsr, MKL_INT AJ0, MKL_INT AI0,  MKL_Complex8 Asky, MKL_INT pointers, MKL_INT info);

public static native void mkl_zcsrbsr(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT mblk, @Const MKL_INT ldAbsr, MKL_Complex16 Acsr, MKL_INT AJ, MKL_INT AI, MKL_Complex16 Absr,  MKL_INT AJB,  MKL_INT AIB,  MKL_INT info);
public static native void mkl_zcsrcoo(@Const MKL_INT job, @Const MKL_INT n, MKL_Complex16 Acsr, MKL_INT AJR, MKL_INT AIR, MKL_INT nnz, MKL_Complex16 Acoo,  MKL_INT ir,  MKL_INT jc,  MKL_INT info);
public static native void mkl_zdnscsr(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT n, MKL_Complex16 Adns, @Const MKL_INT lda, MKL_Complex16 Acsr, MKL_INT AJ, MKL_INT AI, MKL_INT info);
public static native void mkl_zcsrcsc(@Const MKL_INT job, @Const MKL_INT n, MKL_Complex16 Acsr, MKL_INT AJ0, MKL_INT AI0, MKL_Complex16 Acsc, MKL_INT AJ1, MKL_INT AI1, MKL_INT info);
public static native void mkl_zcsrdia(@Const MKL_INT job, @Const MKL_INT n, MKL_Complex16 Acsr, MKL_INT AJ0, MKL_INT AI0, MKL_Complex16 Adia, @Const MKL_INT ndiag, MKL_INT distance, MKL_INT idiag, MKL_Complex16 Acsr_rem, MKL_INT AJ0_rem, MKL_INT AI0_rem, MKL_INT info);
public static native void mkl_zcsrsky(@Const MKL_INT job, @Const MKL_INT n, MKL_Complex16 Acsr, MKL_INT AJ0, MKL_INT AI0,  MKL_Complex16 Asky, MKL_INT pointers, MKL_INT info);

/*Converters upper case*/
public static native void MKL_DCSRBSR(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT mblk, @Const MKL_INT ldAbsr, DoublePointer Acsr, MKL_INT AJ, MKL_INT AI, DoublePointer Absr,  MKL_INT AJB,  MKL_INT AIB,  MKL_INT info);
public static native void MKL_DCSRBSR(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT mblk, @Const MKL_INT ldAbsr, DoubleBuffer Acsr, MKL_INT AJ, MKL_INT AI, DoubleBuffer Absr,  MKL_INT AJB,  MKL_INT AIB,  MKL_INT info);
public static native void MKL_DCSRBSR(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT mblk, @Const MKL_INT ldAbsr, double[] Acsr, MKL_INT AJ, MKL_INT AI, double[] Absr,  MKL_INT AJB,  MKL_INT AIB,  MKL_INT info);
public static native void MKL_DCSRCOO(@Const MKL_INT job, @Const MKL_INT n, DoublePointer Acsr, MKL_INT AJR, MKL_INT AIR, MKL_INT nnz, DoublePointer Acoo,  MKL_INT ir,  MKL_INT jc,  MKL_INT info);
public static native void MKL_DCSRCOO(@Const MKL_INT job, @Const MKL_INT n, DoubleBuffer Acsr, MKL_INT AJR, MKL_INT AIR, MKL_INT nnz, DoubleBuffer Acoo,  MKL_INT ir,  MKL_INT jc,  MKL_INT info);
public static native void MKL_DCSRCOO(@Const MKL_INT job, @Const MKL_INT n, double[] Acsr, MKL_INT AJR, MKL_INT AIR, MKL_INT nnz, double[] Acoo,  MKL_INT ir,  MKL_INT jc,  MKL_INT info);
public static native void MKL_DDNSCSR(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT n, DoublePointer Adns, @Const MKL_INT lda, DoublePointer Acsr, MKL_INT AJ, MKL_INT AI, MKL_INT info);
public static native void MKL_DDNSCSR(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT n, DoubleBuffer Adns, @Const MKL_INT lda, DoubleBuffer Acsr, MKL_INT AJ, MKL_INT AI, MKL_INT info);
public static native void MKL_DDNSCSR(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT n, double[] Adns, @Const MKL_INT lda, double[] Acsr, MKL_INT AJ, MKL_INT AI, MKL_INT info);
public static native void MKL_DCSRCSC(@Const MKL_INT job, @Const MKL_INT n, DoublePointer Acsr, MKL_INT AJ0, MKL_INT AI0, DoublePointer Acsc, MKL_INT AJ1, MKL_INT AI1, MKL_INT info);
public static native void MKL_DCSRCSC(@Const MKL_INT job, @Const MKL_INT n, DoubleBuffer Acsr, MKL_INT AJ0, MKL_INT AI0, DoubleBuffer Acsc, MKL_INT AJ1, MKL_INT AI1, MKL_INT info);
public static native void MKL_DCSRCSC(@Const MKL_INT job, @Const MKL_INT n, double[] Acsr, MKL_INT AJ0, MKL_INT AI0, double[] Acsc, MKL_INT AJ1, MKL_INT AI1, MKL_INT info);
public static native void MKL_DCSRDIA(@Const MKL_INT job, @Const MKL_INT n, DoublePointer Acsr, MKL_INT AJ0, MKL_INT AI0, DoublePointer Adia, @Const MKL_INT ndiag, MKL_INT distance, MKL_INT idiag, DoublePointer Acsr_rem, MKL_INT AJ0_rem, MKL_INT AI0_rem, MKL_INT info);
public static native void MKL_DCSRDIA(@Const MKL_INT job, @Const MKL_INT n, DoubleBuffer Acsr, MKL_INT AJ0, MKL_INT AI0, DoubleBuffer Adia, @Const MKL_INT ndiag, MKL_INT distance, MKL_INT idiag, DoubleBuffer Acsr_rem, MKL_INT AJ0_rem, MKL_INT AI0_rem, MKL_INT info);
public static native void MKL_DCSRDIA(@Const MKL_INT job, @Const MKL_INT n, double[] Acsr, MKL_INT AJ0, MKL_INT AI0, double[] Adia, @Const MKL_INT ndiag, MKL_INT distance, MKL_INT idiag, double[] Acsr_rem, MKL_INT AJ0_rem, MKL_INT AI0_rem, MKL_INT info);
public static native void MKL_DCSRSKY(@Const MKL_INT job, @Const MKL_INT n, DoublePointer Acsr, MKL_INT AJ0, MKL_INT AI0,  DoublePointer Asky, MKL_INT pointers, MKL_INT info);
public static native void MKL_DCSRSKY(@Const MKL_INT job, @Const MKL_INT n, DoubleBuffer Acsr, MKL_INT AJ0, MKL_INT AI0,  DoubleBuffer Asky, MKL_INT pointers, MKL_INT info);
public static native void MKL_DCSRSKY(@Const MKL_INT job, @Const MKL_INT n, double[] Acsr, MKL_INT AJ0, MKL_INT AI0,  double[] Asky, MKL_INT pointers, MKL_INT info);

public static native void MKL_SCSRBSR(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT mblk, @Const MKL_INT ldAbsr, FloatPointer Acsr, MKL_INT AJ, MKL_INT AI, FloatPointer Absr,  MKL_INT AJB,  MKL_INT AIB,  MKL_INT info);
public static native void MKL_SCSRBSR(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT mblk, @Const MKL_INT ldAbsr, FloatBuffer Acsr, MKL_INT AJ, MKL_INT AI, FloatBuffer Absr,  MKL_INT AJB,  MKL_INT AIB,  MKL_INT info);
public static native void MKL_SCSRBSR(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT mblk, @Const MKL_INT ldAbsr, float[] Acsr, MKL_INT AJ, MKL_INT AI, float[] Absr,  MKL_INT AJB,  MKL_INT AIB,  MKL_INT info);
public static native void MKL_SCSRCOO(@Const MKL_INT job, @Const MKL_INT n, FloatPointer Acsr, MKL_INT AJR, MKL_INT AIR, MKL_INT nnz, FloatPointer Acoo,  MKL_INT ir,  MKL_INT jc,  MKL_INT info);
public static native void MKL_SCSRCOO(@Const MKL_INT job, @Const MKL_INT n, FloatBuffer Acsr, MKL_INT AJR, MKL_INT AIR, MKL_INT nnz, FloatBuffer Acoo,  MKL_INT ir,  MKL_INT jc,  MKL_INT info);
public static native void MKL_SCSRCOO(@Const MKL_INT job, @Const MKL_INT n, float[] Acsr, MKL_INT AJR, MKL_INT AIR, MKL_INT nnz, float[] Acoo,  MKL_INT ir,  MKL_INT jc,  MKL_INT info);
public static native void MKL_SDNSCSR(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT n, FloatPointer Adns, @Const MKL_INT lda, FloatPointer Acsr, MKL_INT AJ, MKL_INT AI, MKL_INT info);
public static native void MKL_SDNSCSR(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT n, FloatBuffer Adns, @Const MKL_INT lda, FloatBuffer Acsr, MKL_INT AJ, MKL_INT AI, MKL_INT info);
public static native void MKL_SDNSCSR(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT n, float[] Adns, @Const MKL_INT lda, float[] Acsr, MKL_INT AJ, MKL_INT AI, MKL_INT info);
public static native void MKL_SCSRCSC(@Const MKL_INT job, @Const MKL_INT n, FloatPointer Acsr, MKL_INT AJ0, MKL_INT AI0, FloatPointer Acsc, MKL_INT AJ1, MKL_INT AI1, MKL_INT info);
public static native void MKL_SCSRCSC(@Const MKL_INT job, @Const MKL_INT n, FloatBuffer Acsr, MKL_INT AJ0, MKL_INT AI0, FloatBuffer Acsc, MKL_INT AJ1, MKL_INT AI1, MKL_INT info);
public static native void MKL_SCSRCSC(@Const MKL_INT job, @Const MKL_INT n, float[] Acsr, MKL_INT AJ0, MKL_INT AI0, float[] Acsc, MKL_INT AJ1, MKL_INT AI1, MKL_INT info);
public static native void MKL_SCSRDIA(@Const MKL_INT job, @Const MKL_INT n, FloatPointer Acsr, MKL_INT AJ0, MKL_INT AI0, FloatPointer Adia, @Const MKL_INT ndiag, MKL_INT distance, MKL_INT idiag, FloatPointer Acsr_rem, MKL_INT AJ0_rem, MKL_INT AI0_rem, MKL_INT info);
public static native void MKL_SCSRDIA(@Const MKL_INT job, @Const MKL_INT n, FloatBuffer Acsr, MKL_INT AJ0, MKL_INT AI0, FloatBuffer Adia, @Const MKL_INT ndiag, MKL_INT distance, MKL_INT idiag, FloatBuffer Acsr_rem, MKL_INT AJ0_rem, MKL_INT AI0_rem, MKL_INT info);
public static native void MKL_SCSRDIA(@Const MKL_INT job, @Const MKL_INT n, float[] Acsr, MKL_INT AJ0, MKL_INT AI0, float[] Adia, @Const MKL_INT ndiag, MKL_INT distance, MKL_INT idiag, float[] Acsr_rem, MKL_INT AJ0_rem, MKL_INT AI0_rem, MKL_INT info);
public static native void MKL_SCSRSKY(@Const MKL_INT job, @Const MKL_INT n, FloatPointer Acsr, MKL_INT AJ0, MKL_INT AI0,  FloatPointer Asky, MKL_INT pointers, MKL_INT info);
public static native void MKL_SCSRSKY(@Const MKL_INT job, @Const MKL_INT n, FloatBuffer Acsr, MKL_INT AJ0, MKL_INT AI0,  FloatBuffer Asky, MKL_INT pointers, MKL_INT info);
public static native void MKL_SCSRSKY(@Const MKL_INT job, @Const MKL_INT n, float[] Acsr, MKL_INT AJ0, MKL_INT AI0,  float[] Asky, MKL_INT pointers, MKL_INT info);

public static native void MKL_CCSRBSR(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT mblk, @Const MKL_INT ldAbsr, MKL_Complex8 Acsr, MKL_INT AJ, MKL_INT AI, MKL_Complex8 Absr,  MKL_INT AJB,  MKL_INT AIB,  MKL_INT info);
public static native void MKL_CCSRCOO(@Const MKL_INT job, @Const MKL_INT n, MKL_Complex8 Acsr, MKL_INT AJR, MKL_INT AIR, MKL_INT nnz, MKL_Complex8 Acoo,  MKL_INT ir,  MKL_INT jc,  MKL_INT info);
public static native void MKL_CDNSCSR(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT n, MKL_Complex8 Adns, @Const MKL_INT lda, MKL_Complex8 Acsr, MKL_INT AJ, MKL_INT AI, MKL_INT info);
public static native void MKL_CCSRCSC(@Const MKL_INT job, @Const MKL_INT n, MKL_Complex8 Acsr, MKL_INT AJ0, MKL_INT AI0, MKL_Complex8 Acsc, MKL_INT AJ1, MKL_INT AI1, MKL_INT info);
public static native void MKL_CCSRDIA(@Const MKL_INT job, @Const MKL_INT n, MKL_Complex8 Acsr, MKL_INT AJ0, MKL_INT AI0, MKL_Complex8 Adia, @Const MKL_INT ndiag, MKL_INT distance, MKL_INT idiag, MKL_Complex8 Acsr_rem, MKL_INT AJ0_rem, MKL_INT AI0_rem, MKL_INT info);
public static native void MKL_CCSRSKY(@Const MKL_INT job, @Const MKL_INT n, MKL_Complex8 Acsr, MKL_INT AJ0, MKL_INT AI0,  MKL_Complex8 Asky, MKL_INT pointers, MKL_INT info);

public static native void MKL_ZCSRBSR(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT mblk, @Const MKL_INT ldAbsr, MKL_Complex16 Acsr, MKL_INT AJ, MKL_INT AI, MKL_Complex16 Absr,  MKL_INT AJB,  MKL_INT AIB,  MKL_INT info);
public static native void MKL_ZCSRCOO(@Const MKL_INT job, @Const MKL_INT n, MKL_Complex16 Acsr, MKL_INT AJR, MKL_INT AIR, MKL_INT nnz, MKL_Complex16 Acoo,  MKL_INT ir,  MKL_INT jc,  MKL_INT info);
public static native void MKL_ZDNSCSR(@Const MKL_INT job, @Const MKL_INT m, @Const MKL_INT n, MKL_Complex16 Adns, @Const MKL_INT lda, MKL_Complex16 Acsr, MKL_INT AJ, MKL_INT AI, MKL_INT info);
public static native void MKL_ZCSRCSC(@Const MKL_INT job, @Const MKL_INT n, MKL_Complex16 Acsr, MKL_INT AJ0, MKL_INT AI0, MKL_Complex16 Acsc, MKL_INT AJ1, MKL_INT AI1, MKL_INT info);
public static native void MKL_ZCSRDIA(@Const MKL_INT job, @Const MKL_INT n, MKL_Complex16 Acsr, MKL_INT AJ0, MKL_INT AI0, MKL_Complex16 Adia, @Const MKL_INT ndiag, MKL_INT distance, MKL_INT idiag, MKL_Complex16 Acsr_rem, MKL_INT AJ0_rem, MKL_INT AI0_rem, MKL_INT info);
public static native void MKL_ZCSRSKY(@Const MKL_INT job, @Const MKL_INT n, MKL_Complex16 Acsr, MKL_INT AJ0, MKL_INT AI0,  MKL_Complex16 Asky, MKL_INT pointers, MKL_INT info);


/*Sparse BLAS Level2 (CSR-CSR or CSR-DNS) lower case */
public static native void mkl_dcsrmultcsr(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, DoublePointer a,  MKL_INT ja, MKL_INT ia, DoublePointer b, MKL_INT jb, MKL_INT ib,  DoublePointer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_dcsrmultcsr(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, DoubleBuffer a,  MKL_INT ja, MKL_INT ia, DoubleBuffer b, MKL_INT jb, MKL_INT ib,  DoubleBuffer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_dcsrmultcsr(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, double[] a,  MKL_INT ja, MKL_INT ia, double[] b, MKL_INT jb, MKL_INT ib,  double[] c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_dcsrmultcsr(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, DoublePointer a,  MKL_INT ja, MKL_INT ia, DoublePointer b, MKL_INT jb, MKL_INT ib,  DoublePointer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_dcsrmultcsr(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, DoubleBuffer a,  MKL_INT ja, MKL_INT ia, DoubleBuffer b, MKL_INT jb, MKL_INT ib,  DoubleBuffer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_dcsrmultcsr(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, double[] a,  MKL_INT ja, MKL_INT ia, double[] b, MKL_INT jb, MKL_INT ib,  double[] c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_dcsrmultd(@Cast("const char*") BytePointer transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, DoublePointer a, MKL_INT ja, MKL_INT ia, DoublePointer b, MKL_INT jb, MKL_INT ib,  DoublePointer c,  MKL_INT ldc);
public static native void mkl_dcsrmultd(String transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, DoubleBuffer a, MKL_INT ja, MKL_INT ia, DoubleBuffer b, MKL_INT jb, MKL_INT ib,  DoubleBuffer c,  MKL_INT ldc);
public static native void mkl_dcsrmultd(@Cast("const char*") BytePointer transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, double[] a, MKL_INT ja, MKL_INT ia, double[] b, MKL_INT jb, MKL_INT ib,  double[] c,  MKL_INT ldc);
public static native void mkl_dcsrmultd(String transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, DoublePointer a, MKL_INT ja, MKL_INT ia, DoublePointer b, MKL_INT jb, MKL_INT ib,  DoublePointer c,  MKL_INT ldc);
public static native void mkl_dcsrmultd(@Cast("const char*") BytePointer transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, DoubleBuffer a, MKL_INT ja, MKL_INT ia, DoubleBuffer b, MKL_INT jb, MKL_INT ib,  DoubleBuffer c,  MKL_INT ldc);
public static native void mkl_dcsrmultd(String transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, double[] a, MKL_INT ja, MKL_INT ia, double[] b, MKL_INT jb, MKL_INT ib,  double[] c,  MKL_INT ldc);
public static native void mkl_dcsradd(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, DoublePointer a, MKL_INT ja, MKL_INT ia,  @Const DoublePointer beta, DoublePointer b, MKL_INT jb, MKL_INT ib,  DoublePointer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_dcsradd(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, DoubleBuffer a, MKL_INT ja, MKL_INT ia,  @Const DoubleBuffer beta, DoubleBuffer b, MKL_INT jb, MKL_INT ib,  DoubleBuffer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_dcsradd(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, double[] a, MKL_INT ja, MKL_INT ia,  @Const double[] beta, double[] b, MKL_INT jb, MKL_INT ib,  double[] c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_dcsradd(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, DoublePointer a, MKL_INT ja, MKL_INT ia,  @Const DoublePointer beta, DoublePointer b, MKL_INT jb, MKL_INT ib,  DoublePointer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_dcsradd(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, DoubleBuffer a, MKL_INT ja, MKL_INT ia,  @Const DoubleBuffer beta, DoubleBuffer b, MKL_INT jb, MKL_INT ib,  DoubleBuffer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_dcsradd(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, double[] a, MKL_INT ja, MKL_INT ia,  @Const double[] beta, double[] b, MKL_INT jb, MKL_INT ib,  double[] c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);

public static native void mkl_scsrmultcsr(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, FloatPointer a, MKL_INT ja, MKL_INT ia, FloatPointer b, MKL_INT jb, MKL_INT ib,  FloatPointer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_scsrmultcsr(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, FloatBuffer a, MKL_INT ja, MKL_INT ia, FloatBuffer b, MKL_INT jb, MKL_INT ib,  FloatBuffer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_scsrmultcsr(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, float[] a, MKL_INT ja, MKL_INT ia, float[] b, MKL_INT jb, MKL_INT ib,  float[] c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_scsrmultcsr(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, FloatPointer a, MKL_INT ja, MKL_INT ia, FloatPointer b, MKL_INT jb, MKL_INT ib,  FloatPointer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_scsrmultcsr(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, FloatBuffer a, MKL_INT ja, MKL_INT ia, FloatBuffer b, MKL_INT jb, MKL_INT ib,  FloatBuffer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_scsrmultcsr(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, float[] a, MKL_INT ja, MKL_INT ia, float[] b, MKL_INT jb, MKL_INT ib,  float[] c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_scsrmultd(@Cast("const char*") BytePointer transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, FloatPointer a, MKL_INT ja, MKL_INT ia, FloatPointer b, MKL_INT jb,  MKL_INT ib, FloatPointer c,  MKL_INT ldc);
public static native void mkl_scsrmultd(String transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, FloatBuffer a, MKL_INT ja, MKL_INT ia, FloatBuffer b, MKL_INT jb,  MKL_INT ib, FloatBuffer c,  MKL_INT ldc);
public static native void mkl_scsrmultd(@Cast("const char*") BytePointer transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, float[] a, MKL_INT ja, MKL_INT ia, float[] b, MKL_INT jb,  MKL_INT ib, float[] c,  MKL_INT ldc);
public static native void mkl_scsrmultd(String transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, FloatPointer a, MKL_INT ja, MKL_INT ia, FloatPointer b, MKL_INT jb,  MKL_INT ib, FloatPointer c,  MKL_INT ldc);
public static native void mkl_scsrmultd(@Cast("const char*") BytePointer transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, FloatBuffer a, MKL_INT ja, MKL_INT ia, FloatBuffer b, MKL_INT jb,  MKL_INT ib, FloatBuffer c,  MKL_INT ldc);
public static native void mkl_scsrmultd(String transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, float[] a, MKL_INT ja, MKL_INT ia, float[] b, MKL_INT jb,  MKL_INT ib, float[] c,  MKL_INT ldc);
public static native void mkl_scsradd(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, FloatPointer a, MKL_INT ja, MKL_INT ia,  @Const FloatPointer beta, FloatPointer b, MKL_INT jb, MKL_INT ib, FloatPointer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_scsradd(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, FloatBuffer a, MKL_INT ja, MKL_INT ia,  @Const FloatBuffer beta, FloatBuffer b, MKL_INT jb, MKL_INT ib, FloatBuffer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_scsradd(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, float[] a, MKL_INT ja, MKL_INT ia,  @Const float[] beta, float[] b, MKL_INT jb, MKL_INT ib, float[] c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_scsradd(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, FloatPointer a, MKL_INT ja, MKL_INT ia,  @Const FloatPointer beta, FloatPointer b, MKL_INT jb, MKL_INT ib, FloatPointer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_scsradd(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, FloatBuffer a, MKL_INT ja, MKL_INT ia,  @Const FloatBuffer beta, FloatBuffer b, MKL_INT jb, MKL_INT ib, FloatBuffer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_scsradd(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, float[] a, MKL_INT ja, MKL_INT ia,  @Const float[] beta, float[] b, MKL_INT jb, MKL_INT ib, float[] c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);

public static native void mkl_ccsrmultcsr(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, @Const MKL_INT k, MKL_Complex8 a, MKL_INT ja, MKL_INT ia, MKL_Complex8 b, MKL_INT jb, MKL_INT ib, MKL_Complex8 c, MKL_INT jc, MKL_INT ic, @Const MKL_INT nnzmax, MKL_INT ierr);
public static native void mkl_ccsrmultcsr(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, @Const MKL_INT k, MKL_Complex8 a, MKL_INT ja, MKL_INT ia, MKL_Complex8 b, MKL_INT jb, MKL_INT ib, MKL_Complex8 c, MKL_INT jc, MKL_INT ic, @Const MKL_INT nnzmax, MKL_INT ierr);
public static native void mkl_ccsrmultd(@Cast("const char*") BytePointer transa,   @Const MKL_INT m, @Const MKL_INT n,  @Const MKL_INT k, MKL_Complex8 a, MKL_INT ja, MKL_INT ia, MKL_Complex8 b, MKL_INT jb, MKL_INT ib, MKL_Complex8 c, MKL_INT ldc);
public static native void mkl_ccsrmultd(String transa,   @Const MKL_INT m, @Const MKL_INT n,  @Const MKL_INT k, MKL_Complex8 a, MKL_INT ja, MKL_INT ia, MKL_Complex8 b, MKL_INT jb, MKL_INT ib, MKL_Complex8 c, MKL_INT ldc);
public static native void mkl_ccsradd(@Cast("const char*") BytePointer transa,  @Const MKL_INT job, @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, MKL_Complex8 a, MKL_INT ja, MKL_INT ia, @Const MKL_Complex8 beta, MKL_Complex8 b, MKL_INT jb, MKL_INT ib,  MKL_Complex8 c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_ccsradd(String transa,  @Const MKL_INT job, @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, MKL_Complex8 a, MKL_INT ja, MKL_INT ia, @Const MKL_Complex8 beta, MKL_Complex8 b, MKL_INT jb, MKL_INT ib,  MKL_Complex8 c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);

public static native void mkl_zcsrmultcsr(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, MKL_Complex16 a, MKL_INT ja,  MKL_INT ia, MKL_Complex16 b, MKL_INT jb, MKL_INT ib,  MKL_Complex16 c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_zcsrmultcsr(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, MKL_Complex16 a, MKL_INT ja,  MKL_INT ia, MKL_Complex16 b, MKL_INT jb, MKL_INT ib,  MKL_Complex16 c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_zcsrmultd(@Cast("const char*") BytePointer transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, MKL_Complex16 a, MKL_INT ja, MKL_INT ia, MKL_Complex16 b, MKL_INT jb, MKL_INT ib,  MKL_Complex16 c,  MKL_INT ldc);
public static native void mkl_zcsrmultd(String transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, MKL_Complex16 a, MKL_INT ja, MKL_INT ia, MKL_Complex16 b, MKL_INT jb, MKL_INT ib,  MKL_Complex16 c,  MKL_INT ldc);
public static native void mkl_zcsradd(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, MKL_Complex16 a, MKL_INT ja, MKL_INT ia,  @Const MKL_Complex16 beta, MKL_Complex16 b, MKL_INT jb, MKL_INT ib,  MKL_Complex16 c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void mkl_zcsradd(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, MKL_Complex16 a, MKL_INT ja, MKL_INT ia,  @Const MKL_Complex16 beta, MKL_Complex16 b, MKL_INT jb, MKL_INT ib,  MKL_Complex16 c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);


/*Sparse BLAS Level2 (CSR-CSR or CSR-DNS) upper case */
public static native void MKL_DCSRMULTCSR(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, DoublePointer a, MKL_INT ja, MKL_INT ia, DoublePointer b, MKL_INT jb, MKL_INT ib,  DoublePointer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_DCSRMULTCSR(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, DoubleBuffer a, MKL_INT ja, MKL_INT ia, DoubleBuffer b, MKL_INT jb, MKL_INT ib,  DoubleBuffer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_DCSRMULTCSR(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, double[] a, MKL_INT ja, MKL_INT ia, double[] b, MKL_INT jb, MKL_INT ib,  double[] c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_DCSRMULTCSR(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, DoublePointer a, MKL_INT ja, MKL_INT ia, DoublePointer b, MKL_INT jb, MKL_INT ib,  DoublePointer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_DCSRMULTCSR(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, DoubleBuffer a, MKL_INT ja, MKL_INT ia, DoubleBuffer b, MKL_INT jb, MKL_INT ib,  DoubleBuffer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_DCSRMULTCSR(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, double[] a, MKL_INT ja, MKL_INT ia, double[] b, MKL_INT jb, MKL_INT ib,  double[] c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_DCSRMULTD(@Cast("const char*") BytePointer transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, DoublePointer a, MKL_INT ja, MKL_INT ia, DoublePointer b, MKL_INT jb, MKL_INT ib,  DoublePointer c,  MKL_INT ldc);
public static native void MKL_DCSRMULTD(String transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, DoubleBuffer a, MKL_INT ja, MKL_INT ia, DoubleBuffer b, MKL_INT jb, MKL_INT ib,  DoubleBuffer c,  MKL_INT ldc);
public static native void MKL_DCSRMULTD(@Cast("const char*") BytePointer transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, double[] a, MKL_INT ja, MKL_INT ia, double[] b, MKL_INT jb, MKL_INT ib,  double[] c,  MKL_INT ldc);
public static native void MKL_DCSRMULTD(String transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, DoublePointer a, MKL_INT ja, MKL_INT ia, DoublePointer b, MKL_INT jb, MKL_INT ib,  DoublePointer c,  MKL_INT ldc);
public static native void MKL_DCSRMULTD(@Cast("const char*") BytePointer transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, DoubleBuffer a, MKL_INT ja, MKL_INT ia, DoubleBuffer b, MKL_INT jb, MKL_INT ib,  DoubleBuffer c,  MKL_INT ldc);
public static native void MKL_DCSRMULTD(String transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, double[] a, MKL_INT ja, MKL_INT ia, double[] b, MKL_INT jb, MKL_INT ib,  double[] c,  MKL_INT ldc);
public static native void MKL_DCSRADD(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, DoublePointer a, MKL_INT ja, MKL_INT ia, @Const DoublePointer beta, DoublePointer b, MKL_INT jb, MKL_INT ib,  DoublePointer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_DCSRADD(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, DoubleBuffer a, MKL_INT ja, MKL_INT ia, @Const DoubleBuffer beta, DoubleBuffer b, MKL_INT jb, MKL_INT ib,  DoubleBuffer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_DCSRADD(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, double[] a, MKL_INT ja, MKL_INT ia, @Const double[] beta, double[] b, MKL_INT jb, MKL_INT ib,  double[] c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_DCSRADD(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, DoublePointer a, MKL_INT ja, MKL_INT ia, @Const DoublePointer beta, DoublePointer b, MKL_INT jb, MKL_INT ib,  DoublePointer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_DCSRADD(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, DoubleBuffer a, MKL_INT ja, MKL_INT ia, @Const DoubleBuffer beta, DoubleBuffer b, MKL_INT jb, MKL_INT ib,  DoubleBuffer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_DCSRADD(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, double[] a, MKL_INT ja, MKL_INT ia, @Const double[] beta, double[] b, MKL_INT jb, MKL_INT ib,  double[] c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);

public static native void MKL_SCSRMULTCSR(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, FloatPointer a, MKL_INT ja, MKL_INT ia, FloatPointer b, MKL_INT jb, MKL_INT ib,  FloatPointer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_SCSRMULTCSR(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, FloatBuffer a, MKL_INT ja, MKL_INT ia, FloatBuffer b, MKL_INT jb, MKL_INT ib,  FloatBuffer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_SCSRMULTCSR(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, float[] a, MKL_INT ja, MKL_INT ia, float[] b, MKL_INT jb, MKL_INT ib,  float[] c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_SCSRMULTCSR(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, FloatPointer a, MKL_INT ja, MKL_INT ia, FloatPointer b, MKL_INT jb, MKL_INT ib,  FloatPointer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_SCSRMULTCSR(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, FloatBuffer a, MKL_INT ja, MKL_INT ia, FloatBuffer b, MKL_INT jb, MKL_INT ib,  FloatBuffer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_SCSRMULTCSR(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, float[] a, MKL_INT ja, MKL_INT ia, float[] b, MKL_INT jb, MKL_INT ib,  float[] c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_SCSRMULTD(@Cast("const char*") BytePointer transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, FloatPointer a, MKL_INT ja, MKL_INT ia, FloatPointer b, MKL_INT jb, MKL_INT ib,  FloatPointer c,  MKL_INT ldc);
public static native void MKL_SCSRMULTD(String transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, FloatBuffer a, MKL_INT ja, MKL_INT ia, FloatBuffer b, MKL_INT jb, MKL_INT ib,  FloatBuffer c,  MKL_INT ldc);
public static native void MKL_SCSRMULTD(@Cast("const char*") BytePointer transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, float[] a, MKL_INT ja, MKL_INT ia, float[] b, MKL_INT jb, MKL_INT ib,  float[] c,  MKL_INT ldc);
public static native void MKL_SCSRMULTD(String transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, FloatPointer a, MKL_INT ja, MKL_INT ia, FloatPointer b, MKL_INT jb, MKL_INT ib,  FloatPointer c,  MKL_INT ldc);
public static native void MKL_SCSRMULTD(@Cast("const char*") BytePointer transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, FloatBuffer a, MKL_INT ja, MKL_INT ia, FloatBuffer b, MKL_INT jb, MKL_INT ib,  FloatBuffer c,  MKL_INT ldc);
public static native void MKL_SCSRMULTD(String transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, float[] a, MKL_INT ja, MKL_INT ia, float[] b, MKL_INT jb, MKL_INT ib,  float[] c,  MKL_INT ldc);
public static native void MKL_SCSRADD(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, FloatPointer a, MKL_INT ja, MKL_INT ia,  @Const FloatPointer beta, FloatPointer b, MKL_INT jb, MKL_INT ib,  FloatPointer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_SCSRADD(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, FloatBuffer a, MKL_INT ja, MKL_INT ia,  @Const FloatBuffer beta, FloatBuffer b, MKL_INT jb, MKL_INT ib,  FloatBuffer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_SCSRADD(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, float[] a, MKL_INT ja, MKL_INT ia,  @Const float[] beta, float[] b, MKL_INT jb, MKL_INT ib,  float[] c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_SCSRADD(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, FloatPointer a, MKL_INT ja, MKL_INT ia,  @Const FloatPointer beta, FloatPointer b, MKL_INT jb, MKL_INT ib,  FloatPointer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_SCSRADD(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, FloatBuffer a, MKL_INT ja, MKL_INT ia,  @Const FloatBuffer beta, FloatBuffer b, MKL_INT jb, MKL_INT ib,  FloatBuffer c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_SCSRADD(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, float[] a, MKL_INT ja, MKL_INT ia,  @Const float[] beta, float[] b, MKL_INT jb, MKL_INT ib,  float[] c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);

public static native void MKL_CCSRMULTCSR(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, MKL_Complex8 a, MKL_INT ja, MKL_INT ia, MKL_Complex8 b, MKL_INT jb, MKL_INT ib,  MKL_Complex8 c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_CCSRMULTCSR(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, MKL_Complex8 a, MKL_INT ja, MKL_INT ia, MKL_Complex8 b, MKL_INT jb, MKL_INT ib,  MKL_Complex8 c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_CCSRMULTD(@Cast("const char*") BytePointer transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, MKL_Complex8 a, MKL_INT ja, MKL_INT ia, MKL_Complex8 b, MKL_INT jb, MKL_INT ib,  MKL_Complex8 c,  MKL_INT ldc);
public static native void MKL_CCSRMULTD(String transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, MKL_Complex8 a, MKL_INT ja, MKL_INT ia, MKL_Complex8 b, MKL_INT jb, MKL_INT ib,  MKL_Complex8 c,  MKL_INT ldc);
public static native void MKL_CCSRADD(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, MKL_Complex8 a, MKL_INT ja, MKL_INT ia,  @Const MKL_Complex8 beta, MKL_Complex8 b, MKL_INT jb, MKL_INT ib,  MKL_Complex8 c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_CCSRADD(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, MKL_Complex8 a, MKL_INT ja, MKL_INT ia,  @Const MKL_Complex8 beta, MKL_Complex8 b, MKL_INT jb, MKL_INT ib,  MKL_Complex8 c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);

public static native void MKL_ZCSRMULTCSR(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, MKL_Complex16 a, MKL_INT ja, MKL_INT ia, MKL_Complex16 b, MKL_INT jb, MKL_INT ib,  MKL_Complex16 c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_ZCSRMULTCSR(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, MKL_Complex16 a, MKL_INT ja, MKL_INT ia, MKL_Complex16 b, MKL_INT jb, MKL_INT ib,  MKL_Complex16 c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_ZCSRMULTD(@Cast("const char*") BytePointer transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, MKL_Complex16 a, MKL_INT ja, MKL_INT ia, MKL_Complex16 b, MKL_INT jb, MKL_INT ib,  MKL_Complex16 c,  MKL_INT ldc);
public static native void MKL_ZCSRMULTD(String transa,   @Const MKL_INT m,  @Const MKL_INT n,  @Const MKL_INT k, MKL_Complex16 a, MKL_INT ja, MKL_INT ia, MKL_Complex16 b, MKL_INT jb, MKL_INT ib,  MKL_Complex16 c,  MKL_INT ldc);
public static native void MKL_ZCSRADD(@Cast("const char*") BytePointer transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, MKL_Complex16 a, MKL_INT ja, MKL_INT ia,  @Const MKL_Complex16 beta, MKL_Complex16 b, MKL_INT jb, MKL_INT ib,  MKL_Complex16 c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);
public static native void MKL_ZCSRADD(String transa,  @Const MKL_INT job,  @Const MKL_INT sort,  @Const MKL_INT m,  @Const MKL_INT n, MKL_Complex16 a, MKL_INT ja, MKL_INT ia,  @Const MKL_Complex16 beta, MKL_Complex16 b, MKL_INT jb, MKL_INT ib,  MKL_Complex16 c,  MKL_INT jc,  MKL_INT ic,  @Const MKL_INT nnzmax,  MKL_INT ierr);




/*****************************************************************************************/
/************** Basic types and constants for inspector-executor SpBLAS API **************/
/*****************************************************************************************/

    /* status of the routines */
    /** enum sparse_status_t */
    public static final int
        SPARSE_STATUS_SUCCESS           = 0,    /* the operation was successful */
        SPARSE_STATUS_NOT_INITIALIZED   = 1,    /* empty handle or matrix arrays */
        SPARSE_STATUS_ALLOC_FAILED      = 2,    /* internal error: memory allocation failed */
        SPARSE_STATUS_INVALID_VALUE     = 3,    /* invalid input value */
        SPARSE_STATUS_EXECUTION_FAILED  = 4,    /* e.g. 0-diagonal element for triangular solver, etc. */
        SPARSE_STATUS_INTERNAL_ERROR    = 5,    /* internal error */
        SPARSE_STATUS_NOT_SUPPORTED     = 6;     /* e.g. operation for double precision doesn't support other types */

    /* sparse matrix operations */
    /** enum sparse_operation_t */
    public static final int
        SPARSE_OPERATION_NON_TRANSPOSE       = 10,
        SPARSE_OPERATION_TRANSPOSE           = 11,
        SPARSE_OPERATION_CONJUGATE_TRANSPOSE = 12;

    /* supported matrix types */
    /** enum sparse_matrix_type_t */
    public static final int
        SPARSE_MATRIX_TYPE_GENERAL            = 20,   /*    General case                    */
        SPARSE_MATRIX_TYPE_SYMMETRIC          = 21,   /*    Triangular part of              */
        SPARSE_MATRIX_TYPE_HERMITIAN          = 22,   /*    the matrix is to be processed   */
        SPARSE_MATRIX_TYPE_TRIANGULAR         = 23,
        SPARSE_MATRIX_TYPE_DIAGONAL           = 24,   /* diagonal matrix; only diagonal elements will be processed */
        SPARSE_MATRIX_TYPE_BLOCK_TRIANGULAR   = 25,
        SPARSE_MATRIX_TYPE_BLOCK_DIAGONAL     = 26;    /* block-diagonal matrix; only diagonal blocks will be processed */

    /* sparse matrix indexing: C-style or Fortran-style */
    /** enum sparse_index_base_t */
    public static final int
        SPARSE_INDEX_BASE_ZERO  = 0,           /* C-style */
        SPARSE_INDEX_BASE_ONE   = 1;            /* Fortran-style */

    /* applies to triangular matrices only ( SPARSE_MATRIX_TYPE_SYMMETRIC, SPARSE_MATRIX_TYPE_HERMITIAN, SPARSE_MATRIX_TYPE_TRIANGULAR ) */
    /** enum sparse_fill_mode_t */
    public static final int
        SPARSE_FILL_MODE_LOWER  = 40,           /* lower triangular part of the matrix is stored */
        SPARSE_FILL_MODE_UPPER  = 41;            /* upper triangular part of the matrix is stored */

    /* applies to triangular matrices only ( SPARSE_MATRIX_TYPE_SYMMETRIC, SPARSE_MATRIX_TYPE_HERMITIAN, SPARSE_MATRIX_TYPE_TRIANGULAR ) */
    /** enum sparse_diag_type_t */
    public static final int
        SPARSE_DIAG_NON_UNIT    = 50,           /* triangular matrix with non-unit diagonal */
        SPARSE_DIAG_UNIT        = 51;            /* triangular matrix with unit diagonal */

    /* applicable for Level 3 operations with dense matrices; describes storage scheme for dense matrix (row major or column major) */
    /** enum sparse_layout_t */
    public static final int
        SPARSE_LAYOUT_ROW_MAJOR    = 60,        /* C-style */
        SPARSE_LAYOUT_COLUMN_MAJOR = 61;         /* Fortran-style */

    /* verbose mode; if verbose mode activated, handle should collect and report profiling / optimization info */
    /** enum verbose_mode_t */
    public static final int
        SPARSE_VERBOSE_OFF      = 70,
        SPARSE_VERBOSE_BASIC    = 71,           /* output contains high-level information about optimization algorithms, issues, etc. */
        SPARSE_VERBOSE_EXTENDED = 72;            /* provide detailed output information */

    /* memory optimization hints from user: describe how much memory could be used on optimization stage */
    /** enum sparse_memory_usage_t */
    public static final int
        SPARSE_MEMORY_NONE          = 80,       /* no memory should be allocated for matrix values and structures; auxiliary structures could be created only for workload balancing, parallelization, etc. */
        SPARSE_MEMORY_AGGRESSIVE    = 81;        /* matrix could be converted to any internal format */

/*************************************************************************************************/
/*** Opaque structure for sparse matrix in internal format, further D - means double precision ***/
/*************************************************************************************************/

    @Opaque public static class sparse_matrix extends Pointer {
        /** Empty constructor. Calls {@code super((Pointer)null)}. */
        public sparse_matrix() { super((Pointer)null); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public sparse_matrix(Pointer p) { super(p); }
    }

    /* descriptor of main sparse matrix properties */
    public static class matrix_descr extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public matrix_descr() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public matrix_descr(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public matrix_descr(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public matrix_descr position(long position) {
            return (matrix_descr)super.position(position);
        }
    
        public native @Cast("sparse_matrix_type_t") int type(); public native matrix_descr type(int type);       /* matrix type: general, diagonal or triangular / symmetric / hermitian */
        public native @Cast("sparse_fill_mode_t") int mode(); public native matrix_descr mode(int mode);       /* upper or lower triangular part of the matrix ( for triangular / symmetric / hermitian case) */
        public native @Cast("sparse_diag_type_t") int diag(); public native matrix_descr diag(int diag);       /* unit or non-unit diagonal ( for triangular / symmetric / hermitian case) */
    }

/*****************************************************************************************/
/*************************************** Creation routines *******************************/
/*****************************************************************************************/

/*
    Matrix handle is used for storing information about the matrix and matrix values

    Create matrix from one of the existing sparse formats by creating the handle with matrix info and copy matrix values if requested.
    Collect high-level info about the matrix. Need to use this interface for the case with several calls in program for performance reasons,
    where optimizations are not required.

    coordinate format,
    SPARSE_MATRIX_TYPE_GENERAL by default, pointers to input arrays are stored in the handle
*/
    public static native @Cast("sparse_status_t") int mkl_sparse_s_create_coo( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 @ByVal MKL_INT nnz,
                                                 MKL_INT row_indx,
                                                 MKL_INT col_indx,
                                                 FloatPointer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_create_coo( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 @ByVal MKL_INT nnz,
                                                 MKL_INT row_indx,
                                                 MKL_INT col_indx,
                                                 FloatBuffer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_create_coo( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 @ByVal MKL_INT nnz,
                                                 MKL_INT row_indx,
                                                 MKL_INT col_indx,
                                                 float[] values );

    public static native @Cast("sparse_status_t") int mkl_sparse_d_create_coo( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 @ByVal MKL_INT nnz,
                                                 MKL_INT row_indx,
                                                 MKL_INT col_indx,
                                                 DoublePointer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_create_coo( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 @ByVal MKL_INT nnz,
                                                 MKL_INT row_indx,
                                                 MKL_INT col_indx,
                                                 DoubleBuffer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_create_coo( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 @ByVal MKL_INT nnz,
                                                 MKL_INT row_indx,
                                                 MKL_INT col_indx,
                                                 double[] values );

    public static native @Cast("sparse_status_t") int mkl_sparse_c_create_coo( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 @ByVal MKL_INT nnz,
                                                 MKL_INT row_indx,
                                                 MKL_INT col_indx,
                                                 MKL_Complex8 values );

    public static native @Cast("sparse_status_t") int mkl_sparse_z_create_coo( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 @ByVal MKL_INT nnz,
                                                 MKL_INT row_indx,
                                                 MKL_INT col_indx,
                                                 MKL_Complex16 values );


/*
    compressed sparse row format (4-arrays version),
    SPARSE_MATRIX_TYPE_GENERAL by default, pointers to input arrays are stored in the handle
*/
    public static native @Cast("sparse_status_t") int mkl_sparse_s_create_csr( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 FloatPointer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_create_csr( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 FloatBuffer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_create_csr( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 float[] values );

    public static native @Cast("sparse_status_t") int mkl_sparse_d_create_csr( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 DoublePointer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_create_csr( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 DoubleBuffer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_create_csr( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 double[] values );

    public static native @Cast("sparse_status_t") int mkl_sparse_c_create_csr( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 MKL_Complex8 values );

    public static native @Cast("sparse_status_t") int mkl_sparse_z_create_csr( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 MKL_Complex16 values );

/*
    compressed sparse column format (4-arrays version),
    SPARSE_MATRIX_TYPE_GENERAL by default, pointers to input arrays are stored in the handle
*/
    public static native @Cast("sparse_status_t") int mkl_sparse_s_create_csc( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 FloatPointer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_create_csc( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 FloatBuffer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_create_csc( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 float[] values );

    public static native @Cast("sparse_status_t") int mkl_sparse_d_create_csc( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 DoublePointer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_create_csc( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 DoubleBuffer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_create_csc( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 double[] values );

    public static native @Cast("sparse_status_t") int mkl_sparse_c_create_csc( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 MKL_Complex8 values );

    public static native @Cast("sparse_status_t") int mkl_sparse_z_create_csc( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 MKL_Complex16 values );

/*
    compressed block sparse row format (4-arrays version, square blocks),
    SPARSE_MATRIX_TYPE_GENERAL by default, pointers to input arrays are stored in the handle
*/
    public static native @Cast("sparse_status_t") int mkl_sparse_s_create_bsr( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @Cast("sparse_layout_t") int block_layout,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 @ByVal MKL_INT block_size,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 FloatPointer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_create_bsr( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @Cast("sparse_layout_t") int block_layout,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 @ByVal MKL_INT block_size,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 FloatBuffer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_create_bsr( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @Cast("sparse_layout_t") int block_layout,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 @ByVal MKL_INT block_size,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 float[] values );

    public static native @Cast("sparse_status_t") int mkl_sparse_d_create_bsr( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @Cast("sparse_layout_t") int block_layout,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 @ByVal MKL_INT block_size,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 DoublePointer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_create_bsr( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @Cast("sparse_layout_t") int block_layout,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 @ByVal MKL_INT block_size,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 DoubleBuffer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_create_bsr( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @Cast("sparse_layout_t") int block_layout,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 @ByVal MKL_INT block_size,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 double[] values );

    public static native @Cast("sparse_status_t") int mkl_sparse_c_create_bsr( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @Cast("sparse_layout_t") int block_layout,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 @ByVal MKL_INT block_size,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 MKL_Complex8 values );

    public static native @Cast("sparse_status_t") int mkl_sparse_z_create_bsr( sparse_matrix_t A,
                                                 @Cast("sparse_index_base_t") int indexing,
                                                 @Cast("sparse_layout_t") int block_layout,
                                                 @ByVal MKL_INT rows,
                                                 @ByVal MKL_INT cols,
                                                 @ByVal MKL_INT block_size,
                                                 MKL_INT rows_start,
                                                 MKL_INT rows_end,
                                                 MKL_INT col_indx,
                                                 MKL_Complex16 values );

/*
    Create copy of the existing handle; matrix properties could be changed.
    For example it could be used for extracting triangular or diagonal parts from existing matrix.
*/
    public static native @Cast("sparse_status_t") int mkl_sparse_copy( @Const @ByVal sparse_matrix_t source,
                                         @ByVal matrix_descr descr,
                                         sparse_matrix_t dest );

/*
    destroy matrix handle; if sparse matrix was stored inside the handle it also deallocates the matrix
    It is user's responsibility not to delete the handle with the matrix, if this matrix is shared with other handles
*/
    public static native @Cast("sparse_status_t") int mkl_sparse_destroy( @ByVal sparse_matrix_t A );
/*
    return extended error information from last operation;
    e.g. info about wrong input parameter, memory sizes that couldn't be allocated
*/
    public static native @Cast("sparse_status_t") int mkl_sparse_get_error_info( @ByVal sparse_matrix_t A, MKL_INT info ); /* unsupported currently */


/*****************************************************************************************/
/************************ Converters of internal representation  *************************/
/*****************************************************************************************/

    /* converters from current format to another */
    public static native @Cast("sparse_status_t") int mkl_sparse_convert_csr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_operation_t") int operation,
                                                 sparse_matrix_t dest );

    public static native @Cast("sparse_status_t") int mkl_sparse_convert_bsr( @Const @ByVal sparse_matrix_t source,
                                                 @ByVal MKL_INT block_size,
                                                 @Cast("sparse_layout_t") int block_layout,
                                                 @Cast("sparse_operation_t") int operation,
                                                 sparse_matrix_t dest );

    public static native @Cast("sparse_status_t") int mkl_sparse_s_export_bsr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntPointer indexing,
                                                 @Cast("sparse_layout_t*") IntPointer block_layout,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 MKL_INT block_size,
                                                 @Cast("MKL_INT**") PointerPointer rows_start,
                                                 @Cast("MKL_INT**") PointerPointer rows_end,
                                                 @Cast("MKL_INT**") PointerPointer col_indx,
                                                 @Cast("float**") PointerPointer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_export_bsr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntPointer indexing,
                                                 @Cast("sparse_layout_t*") IntPointer block_layout,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 MKL_INT block_size,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr FloatPointer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_export_bsr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntBuffer indexing,
                                                 @Cast("sparse_layout_t*") IntBuffer block_layout,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 MKL_INT block_size,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr FloatBuffer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_export_bsr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") int[] indexing,
                                                 @Cast("sparse_layout_t*") int[] block_layout,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 MKL_INT block_size,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr float[] values );

    public static native @Cast("sparse_status_t") int mkl_sparse_d_export_bsr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntPointer indexing,
                                                 @Cast("sparse_layout_t*") IntPointer block_layout,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 MKL_INT block_size,
                                                 @Cast("MKL_INT**") PointerPointer rows_start,
                                                 @Cast("MKL_INT**") PointerPointer rows_end,
                                                 @Cast("MKL_INT**") PointerPointer col_indx,
                                                 @Cast("double**") PointerPointer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_export_bsr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntPointer indexing,
                                                 @Cast("sparse_layout_t*") IntPointer block_layout,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 MKL_INT block_size,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr DoublePointer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_export_bsr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntBuffer indexing,
                                                 @Cast("sparse_layout_t*") IntBuffer block_layout,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 MKL_INT block_size,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr DoubleBuffer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_export_bsr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") int[] indexing,
                                                 @Cast("sparse_layout_t*") int[] block_layout,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 MKL_INT block_size,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr double[] values );

    public static native @Cast("sparse_status_t") int mkl_sparse_c_export_bsr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntPointer indexing,
                                                 @Cast("sparse_layout_t*") IntPointer block_layout,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 MKL_INT block_size,
                                                 @Cast("MKL_INT**") PointerPointer rows_start,
                                                 @Cast("MKL_INT**") PointerPointer rows_end,
                                                 @Cast("MKL_INT**") PointerPointer col_indx,
                                                 @Cast("MKL_Complex8**") PointerPointer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_c_export_bsr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntPointer indexing,
                                                 @Cast("sparse_layout_t*") IntPointer block_layout,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 MKL_INT block_size,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr MKL_Complex8 values );
    public static native @Cast("sparse_status_t") int mkl_sparse_c_export_bsr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntBuffer indexing,
                                                 @Cast("sparse_layout_t*") IntBuffer block_layout,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 MKL_INT block_size,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr MKL_Complex8 values );
    public static native @Cast("sparse_status_t") int mkl_sparse_c_export_bsr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") int[] indexing,
                                                 @Cast("sparse_layout_t*") int[] block_layout,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 MKL_INT block_size,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr MKL_Complex8 values );

    public static native @Cast("sparse_status_t") int mkl_sparse_z_export_bsr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntPointer indexing,
                                                 @Cast("sparse_layout_t*") IntPointer block_layout,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 MKL_INT block_size,
                                                 @Cast("MKL_INT**") PointerPointer rows_start,
                                                 @Cast("MKL_INT**") PointerPointer rows_end,
                                                 @Cast("MKL_INT**") PointerPointer col_indx,
                                                 @Cast("MKL_Complex16**") PointerPointer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_z_export_bsr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntPointer indexing,
                                                 @Cast("sparse_layout_t*") IntPointer block_layout,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 MKL_INT block_size,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr MKL_Complex16 values );
    public static native @Cast("sparse_status_t") int mkl_sparse_z_export_bsr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntBuffer indexing,
                                                 @Cast("sparse_layout_t*") IntBuffer block_layout,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 MKL_INT block_size,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr MKL_Complex16 values );
    public static native @Cast("sparse_status_t") int mkl_sparse_z_export_bsr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") int[] indexing,
                                                 @Cast("sparse_layout_t*") int[] block_layout,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 MKL_INT block_size,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr MKL_Complex16 values );

    public static native @Cast("sparse_status_t") int mkl_sparse_s_export_csr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntPointer indexing,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 @Cast("MKL_INT**") PointerPointer rows_start,
                                                 @Cast("MKL_INT**") PointerPointer rows_end,
                                                 @Cast("MKL_INT**") PointerPointer col_indx,
                                                 @Cast("float**") PointerPointer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_export_csr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntPointer indexing,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr FloatPointer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_export_csr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntBuffer indexing,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr FloatBuffer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_export_csr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") int[] indexing,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr float[] values );

    public static native @Cast("sparse_status_t") int mkl_sparse_d_export_csr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntPointer indexing,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 @Cast("MKL_INT**") PointerPointer rows_start,
                                                 @Cast("MKL_INT**") PointerPointer rows_end,
                                                 @Cast("MKL_INT**") PointerPointer col_indx,
                                                 @Cast("double**") PointerPointer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_export_csr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntPointer indexing,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr DoublePointer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_export_csr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntBuffer indexing,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr DoubleBuffer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_export_csr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") int[] indexing,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr double[] values );

    public static native @Cast("sparse_status_t") int mkl_sparse_c_export_csr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntPointer indexing,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 @Cast("MKL_INT**") PointerPointer rows_start,
                                                 @Cast("MKL_INT**") PointerPointer rows_end,
                                                 @Cast("MKL_INT**") PointerPointer col_indx,
                                                 @Cast("MKL_Complex8**") PointerPointer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_c_export_csr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntPointer indexing,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr MKL_Complex8 values );
    public static native @Cast("sparse_status_t") int mkl_sparse_c_export_csr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntBuffer indexing,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr MKL_Complex8 values );
    public static native @Cast("sparse_status_t") int mkl_sparse_c_export_csr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") int[] indexing,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr MKL_Complex8 values );

    public static native @Cast("sparse_status_t") int mkl_sparse_z_export_csr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntPointer indexing,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 @Cast("MKL_INT**") PointerPointer rows_start,
                                                 @Cast("MKL_INT**") PointerPointer rows_end,
                                                 @Cast("MKL_INT**") PointerPointer col_indx,
                                                 @Cast("MKL_Complex16**") PointerPointer values );
    public static native @Cast("sparse_status_t") int mkl_sparse_z_export_csr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntPointer indexing,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr MKL_Complex16 values );
    public static native @Cast("sparse_status_t") int mkl_sparse_z_export_csr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") IntBuffer indexing,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr MKL_Complex16 values );
    public static native @Cast("sparse_status_t") int mkl_sparse_z_export_csr( @Const @ByVal sparse_matrix_t source,
                                                 @Cast("sparse_index_base_t*") int[] indexing,
                                                 MKL_INT rows,
                                                 MKL_INT cols,
                                                 @ByPtrPtr MKL_INT rows_start,
                                                 @ByPtrPtr MKL_INT rows_end,
                                                 @ByPtrPtr MKL_INT col_indx,
                                                 @ByPtrPtr MKL_Complex16 values );

/*****************************************************************************************/
/************************** Step-by-step modification routines ***************************/
/*****************************************************************************************/


    /* update existing value in the matrix ( for internal storage only, should not work with user-allocated matrices) */
    public static native @Cast("sparse_status_t") int mkl_sparse_s_set_value( @ByVal sparse_matrix_t A,
                                                @ByVal MKL_INT row,
                                                @ByVal MKL_INT col,
                                                float value );

    public static native @Cast("sparse_status_t") int mkl_sparse_d_set_value( @ByVal sparse_matrix_t A,
                                                @ByVal MKL_INT row,
                                                @ByVal MKL_INT col,
                                                double value );

    public static native @Cast("sparse_status_t") int mkl_sparse_c_set_value( @ByVal sparse_matrix_t A,
                                                @ByVal MKL_INT row,
                                                @ByVal MKL_INT col,
                                                @ByVal MKL_Complex8 value );

    public static native @Cast("sparse_status_t") int mkl_sparse_z_set_value( @ByVal sparse_matrix_t A,
                                                @ByVal MKL_INT row,
                                                @ByVal MKL_INT col,
                                                @ByVal MKL_Complex16 value );

/*****************************************************************************************/
/****************************** Verbose mode routine *************************************/
/*****************************************************************************************/

    /* allow to switch on/off verbose mode */
    public static native @Cast("sparse_status_t") int mkl_sparse_set_verbose_mode( @Cast("verbose_mode_t") int verbose ); /* unsupported currently */

/*****************************************************************************************/
/****************************** Optimization routines ************************************/
/*****************************************************************************************/

    /* Describe expected operations with amount of iterations */
    public static native @Cast("sparse_status_t") int mkl_sparse_set_mv_hint( @ByVal sparse_matrix_t A,
                                                  @Cast("sparse_operation_t") int operation,
                                                  @ByVal matrix_descr descr,
                                                  @ByVal MKL_INT expected_calls );

    public static native @Cast("sparse_status_t") int mkl_sparse_set_mm_hint( @ByVal sparse_matrix_t A,
                                                  @Cast("sparse_operation_t") int operation,
                                                  @ByVal matrix_descr descr,
                                                  @Cast("sparse_layout_t") int layout,
                                                  @ByVal MKL_INT dense_matrix_size,
                                                  @ByVal MKL_INT expected_calls );

    public static native @Cast("sparse_status_t") int mkl_sparse_set_sv_hint( @ByVal sparse_matrix_t A,
                                                  @Cast("sparse_operation_t") int operation,
                                                  @ByVal matrix_descr descr,
                                                  @ByVal MKL_INT expected_calls );

    public static native @Cast("sparse_status_t") int mkl_sparse_set_sm_hint( @ByVal sparse_matrix_t A,
                                                  @Cast("sparse_operation_t") int operation,
                                                  @ByVal matrix_descr descr,
                                                  @Cast("sparse_layout_t") int layout,
                                                  @ByVal MKL_INT dense_matrix_size,
                                                  @ByVal MKL_INT expected_calls );

    /* Describe memory usage model */
    public static native @Cast("sparse_status_t") int mkl_sparse_set_memory_hint( @ByVal sparse_matrix_t A,
                                                     @Cast("sparse_memory_usage_t") int policy );    /* SPARSE_MEMORY_AGGRESSIVE is default value */

/*
    Optimize matrix described by the handle. It uses hints (optimization and memory) that should be set up before this call.
    If hints were not explicitly defined, default vales are:
    SPARSE_OPERATION_NON_TRANSPOSE for matrix-vector multiply with infinite number of expected iterations.
*/
    public static native @Cast("sparse_status_t") int mkl_sparse_optimize( @ByVal sparse_matrix_t A );

/*****************************************************************************************/
/****************************** Computational routines ***********************************/
/*****************************************************************************************/

/*
    Perform computations based on created matrix handle

    Level 2
*/
    /*   Computes y = alpha * A * x + beta * y   */
    public static native @Cast("sparse_status_t") int mkl_sparse_s_mv( @Cast("sparse_operation_t") int operation,
                                          float alpha,
                                          @Const @ByVal sparse_matrix_t A,
                                          @ByVal matrix_descr descr,
                                          @Const FloatPointer x,
                                          float beta,
                                          FloatPointer y );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_mv( @Cast("sparse_operation_t") int operation,
                                          float alpha,
                                          @Const @ByVal sparse_matrix_t A,
                                          @ByVal matrix_descr descr,
                                          @Const FloatBuffer x,
                                          float beta,
                                          FloatBuffer y );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_mv( @Cast("sparse_operation_t") int operation,
                                          float alpha,
                                          @Const @ByVal sparse_matrix_t A,
                                          @ByVal matrix_descr descr,
                                          @Const float[] x,
                                          float beta,
                                          float[] y );

    public static native @Cast("sparse_status_t") int mkl_sparse_d_mv( @Cast("sparse_operation_t") int operation,
                                          double alpha,
                                          @Const @ByVal sparse_matrix_t A,
                                          @ByVal matrix_descr descr,
                                          @Const DoublePointer x,
                                          double beta,
                                          DoublePointer y );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_mv( @Cast("sparse_operation_t") int operation,
                                          double alpha,
                                          @Const @ByVal sparse_matrix_t A,
                                          @ByVal matrix_descr descr,
                                          @Const DoubleBuffer x,
                                          double beta,
                                          DoubleBuffer y );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_mv( @Cast("sparse_operation_t") int operation,
                                          double alpha,
                                          @Const @ByVal sparse_matrix_t A,
                                          @ByVal matrix_descr descr,
                                          @Const double[] x,
                                          double beta,
                                          double[] y );

    public static native @Cast("sparse_status_t") int mkl_sparse_c_mv( @Cast("sparse_operation_t") int operation,
                                          @ByVal MKL_Complex8 alpha,
                                          @Const @ByVal sparse_matrix_t A,
                                          @ByVal matrix_descr descr,
                                          @Const MKL_Complex8 x,
                                          @ByVal MKL_Complex8 beta,
                                          MKL_Complex8 y );

    public static native @Cast("sparse_status_t") int mkl_sparse_z_mv( @Cast("sparse_operation_t") int operation,
                                          @ByVal MKL_Complex16 alpha,
                                          @Const @ByVal sparse_matrix_t A,
                                          @ByVal matrix_descr descr,
                                          @Const MKL_Complex16 x,
                                          @ByVal MKL_Complex16 beta,
                                          MKL_Complex16 y );

    /*   Solves triangular system y = alpha * A^{-1} * x   */
    public static native @Cast("sparse_status_t") int mkl_sparse_s_trsv( @Cast("sparse_operation_t") int operation,
                                            float alpha,
                                            @Const @ByVal sparse_matrix_t A,
                                            @ByVal matrix_descr descr,
                                            @Const FloatPointer x,
                                            FloatPointer y );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_trsv( @Cast("sparse_operation_t") int operation,
                                            float alpha,
                                            @Const @ByVal sparse_matrix_t A,
                                            @ByVal matrix_descr descr,
                                            @Const FloatBuffer x,
                                            FloatBuffer y );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_trsv( @Cast("sparse_operation_t") int operation,
                                            float alpha,
                                            @Const @ByVal sparse_matrix_t A,
                                            @ByVal matrix_descr descr,
                                            @Const float[] x,
                                            float[] y );

    public static native @Cast("sparse_status_t") int mkl_sparse_d_trsv( @Cast("sparse_operation_t") int operation,
                                            double alpha,
                                            @Const @ByVal sparse_matrix_t A,
                                            @ByVal matrix_descr descr,
                                            @Const DoublePointer x,
                                            DoublePointer y );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_trsv( @Cast("sparse_operation_t") int operation,
                                            double alpha,
                                            @Const @ByVal sparse_matrix_t A,
                                            @ByVal matrix_descr descr,
                                            @Const DoubleBuffer x,
                                            DoubleBuffer y );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_trsv( @Cast("sparse_operation_t") int operation,
                                            double alpha,
                                            @Const @ByVal sparse_matrix_t A,
                                            @ByVal matrix_descr descr,
                                            @Const double[] x,
                                            double[] y );

    public static native @Cast("sparse_status_t") int mkl_sparse_c_trsv( @Cast("sparse_operation_t") int operation,
                                            @ByVal MKL_Complex8 alpha,
                                            @Const @ByVal sparse_matrix_t A,
                                            @ByVal matrix_descr descr,
                                            @Const MKL_Complex8 x,
                                            MKL_Complex8 y );

    public static native @Cast("sparse_status_t") int mkl_sparse_z_trsv( @Cast("sparse_operation_t") int operation,
                                            @ByVal MKL_Complex16 alpha,
                                            @Const @ByVal sparse_matrix_t A,
                                            @ByVal matrix_descr descr,
                                            @Const MKL_Complex16 x,
                                            MKL_Complex16 y );

    /* Level 3 */

    /*   Computes y = alpha * A * x + beta * y   */
    public static native @Cast("sparse_status_t") int mkl_sparse_s_mm( @Cast("sparse_operation_t") int operation,
                                         float alpha,
                                         @Const @ByVal sparse_matrix_t A,
                                         @ByVal matrix_descr descr,
                                         @Cast("sparse_layout_t") int layout,
                                         @Const FloatPointer x,
                                         @ByVal MKL_INT columns,
                                         @ByVal MKL_INT ldx,
                                         float beta,
                                         FloatPointer y,
                                         @ByVal MKL_INT ldy );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_mm( @Cast("sparse_operation_t") int operation,
                                         float alpha,
                                         @Const @ByVal sparse_matrix_t A,
                                         @ByVal matrix_descr descr,
                                         @Cast("sparse_layout_t") int layout,
                                         @Const FloatBuffer x,
                                         @ByVal MKL_INT columns,
                                         @ByVal MKL_INT ldx,
                                         float beta,
                                         FloatBuffer y,
                                         @ByVal MKL_INT ldy );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_mm( @Cast("sparse_operation_t") int operation,
                                         float alpha,
                                         @Const @ByVal sparse_matrix_t A,
                                         @ByVal matrix_descr descr,
                                         @Cast("sparse_layout_t") int layout,
                                         @Const float[] x,
                                         @ByVal MKL_INT columns,
                                         @ByVal MKL_INT ldx,
                                         float beta,
                                         float[] y,
                                         @ByVal MKL_INT ldy );

    public static native @Cast("sparse_status_t") int mkl_sparse_d_mm( @Cast("sparse_operation_t") int operation,
                                         double alpha,
                                         @Const @ByVal sparse_matrix_t A,
                                         @ByVal matrix_descr descr,
                                         @Cast("sparse_layout_t") int layout,
                                         @Const DoublePointer x,
                                         @ByVal MKL_INT columns,
                                         @ByVal MKL_INT ldx,
                                         double beta,
                                         DoublePointer y,
                                         @ByVal MKL_INT ldy );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_mm( @Cast("sparse_operation_t") int operation,
                                         double alpha,
                                         @Const @ByVal sparse_matrix_t A,
                                         @ByVal matrix_descr descr,
                                         @Cast("sparse_layout_t") int layout,
                                         @Const DoubleBuffer x,
                                         @ByVal MKL_INT columns,
                                         @ByVal MKL_INT ldx,
                                         double beta,
                                         DoubleBuffer y,
                                         @ByVal MKL_INT ldy );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_mm( @Cast("sparse_operation_t") int operation,
                                         double alpha,
                                         @Const @ByVal sparse_matrix_t A,
                                         @ByVal matrix_descr descr,
                                         @Cast("sparse_layout_t") int layout,
                                         @Const double[] x,
                                         @ByVal MKL_INT columns,
                                         @ByVal MKL_INT ldx,
                                         double beta,
                                         double[] y,
                                         @ByVal MKL_INT ldy );

    public static native @Cast("sparse_status_t") int mkl_sparse_c_mm( @Cast("sparse_operation_t") int operation,
                                         @ByVal MKL_Complex8 alpha,
                                         @Const @ByVal sparse_matrix_t A,
                                         @ByVal matrix_descr descr,
                                         @Cast("sparse_layout_t") int layout,
                                         @Const MKL_Complex8 x,
                                         @ByVal MKL_INT columns,
                                         @ByVal MKL_INT ldx,
                                         @ByVal MKL_Complex8 beta,
                                         MKL_Complex8 y,
                                         @ByVal MKL_INT ldy );

    public static native @Cast("sparse_status_t") int mkl_sparse_z_mm( @Cast("sparse_operation_t") int operation,
                                         @ByVal MKL_Complex16 alpha,
                                         @Const @ByVal sparse_matrix_t A,
                                         @ByVal matrix_descr descr,
                                         @Cast("sparse_layout_t") int layout,
                                         @Const MKL_Complex16 x,
                                         @ByVal MKL_INT columns,
                                         @ByVal MKL_INT ldx,
                                         @ByVal MKL_Complex16 beta,
                                         MKL_Complex16 y,
                                         @ByVal MKL_INT ldy );

    /*   Solves triangular system y = alpha * A^{-1} * x   */
    public static native @Cast("sparse_status_t") int mkl_sparse_s_trsm( @Cast("sparse_operation_t") int operation,
                                            float alpha,
                                            @Const @ByVal sparse_matrix_t A,
                                            @ByVal matrix_descr descr,
                                            @Cast("sparse_layout_t") int layout,
                                            @Const FloatPointer x,
                                            @ByVal MKL_INT columns,
                                            @ByVal MKL_INT ldx,
                                            FloatPointer y,
                                            @ByVal MKL_INT ldy );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_trsm( @Cast("sparse_operation_t") int operation,
                                            float alpha,
                                            @Const @ByVal sparse_matrix_t A,
                                            @ByVal matrix_descr descr,
                                            @Cast("sparse_layout_t") int layout,
                                            @Const FloatBuffer x,
                                            @ByVal MKL_INT columns,
                                            @ByVal MKL_INT ldx,
                                            FloatBuffer y,
                                            @ByVal MKL_INT ldy );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_trsm( @Cast("sparse_operation_t") int operation,
                                            float alpha,
                                            @Const @ByVal sparse_matrix_t A,
                                            @ByVal matrix_descr descr,
                                            @Cast("sparse_layout_t") int layout,
                                            @Const float[] x,
                                            @ByVal MKL_INT columns,
                                            @ByVal MKL_INT ldx,
                                            float[] y,
                                            @ByVal MKL_INT ldy );

    public static native @Cast("sparse_status_t") int mkl_sparse_d_trsm( @Cast("sparse_operation_t") int operation,
                                            double alpha,
                                            @Const @ByVal sparse_matrix_t A,
                                            @ByVal matrix_descr descr,
                                            @Cast("sparse_layout_t") int layout,
                                            @Const DoublePointer x,
                                            @ByVal MKL_INT columns,
                                            @ByVal MKL_INT ldx,
                                            DoublePointer y,
                                            @ByVal MKL_INT ldy );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_trsm( @Cast("sparse_operation_t") int operation,
                                            double alpha,
                                            @Const @ByVal sparse_matrix_t A,
                                            @ByVal matrix_descr descr,
                                            @Cast("sparse_layout_t") int layout,
                                            @Const DoubleBuffer x,
                                            @ByVal MKL_INT columns,
                                            @ByVal MKL_INT ldx,
                                            DoubleBuffer y,
                                            @ByVal MKL_INT ldy );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_trsm( @Cast("sparse_operation_t") int operation,
                                            double alpha,
                                            @Const @ByVal sparse_matrix_t A,
                                            @ByVal matrix_descr descr,
                                            @Cast("sparse_layout_t") int layout,
                                            @Const double[] x,
                                            @ByVal MKL_INT columns,
                                            @ByVal MKL_INT ldx,
                                            double[] y,
                                            @ByVal MKL_INT ldy );

    public static native @Cast("sparse_status_t") int mkl_sparse_c_trsm( @Cast("sparse_operation_t") int operation,
                                            @ByVal MKL_Complex8 alpha,
                                            @Const @ByVal sparse_matrix_t A,
                                            @ByVal matrix_descr descr,
                                            @Cast("sparse_layout_t") int layout,
                                            @Const MKL_Complex8 x,
                                            @ByVal MKL_INT columns,
                                            @ByVal MKL_INT ldx,
                                            MKL_Complex8 y,
                                            @ByVal MKL_INT ldy );

    public static native @Cast("sparse_status_t") int mkl_sparse_z_trsm( @Cast("sparse_operation_t") int operation,
                                            @ByVal MKL_Complex16 alpha,
                                            @Const @ByVal sparse_matrix_t A,
                                            @ByVal matrix_descr descr,
                                            @Cast("sparse_layout_t") int layout,
                                            @Const MKL_Complex16 x,
                                            @ByVal MKL_INT columns,
                                            @ByVal MKL_INT ldx,
                                            MKL_Complex16 y,
                                            @ByVal MKL_INT ldy );

    /* Sparse-sparse functionality */

    /*   Computes sum of sparse matrices: C = alpha * op(A) + B, result is sparse   */
    public static native @Cast("sparse_status_t") int mkl_sparse_s_add( @Cast("sparse_operation_t") int operation,
                                          @Const @ByVal sparse_matrix_t A,
                                          float alpha,
                                          @Const @ByVal sparse_matrix_t B,
                                          sparse_matrix_t C );

    public static native @Cast("sparse_status_t") int mkl_sparse_d_add( @Cast("sparse_operation_t") int operation,
                                          @Const @ByVal sparse_matrix_t A,
                                          double alpha,
                                          @Const @ByVal sparse_matrix_t B,
                                          sparse_matrix_t C );

    public static native @Cast("sparse_status_t") int mkl_sparse_c_add( @Cast("sparse_operation_t") int operation,
                                          @Const @ByVal sparse_matrix_t A,
                                          @ByVal MKL_Complex8 alpha,
                                          @Const @ByVal sparse_matrix_t B,
                                          sparse_matrix_t C );

    public static native @Cast("sparse_status_t") int mkl_sparse_z_add( @Cast("sparse_operation_t") int operation,
                                          @Const @ByVal sparse_matrix_t A,
                                          @ByVal MKL_Complex16 alpha,
                                          @Const @ByVal sparse_matrix_t B,
                                          sparse_matrix_t C );

    /*   Computes product of sparse matrices: C = op(A) * B, result is sparse   */
    public static native @Cast("sparse_status_t") int mkl_sparse_spmm( @Cast("sparse_operation_t") int operation,
                                          @Const @ByVal sparse_matrix_t A,
                                          @Const @ByVal sparse_matrix_t B,
                                          sparse_matrix_t C );

    /*   Computes product of sparse matrices: C = op(A) * B, result is dense   */
    public static native @Cast("sparse_status_t") int mkl_sparse_s_spmmd( @Cast("sparse_operation_t") int operation,
                                            @Const @ByVal sparse_matrix_t A,
                                            @Const @ByVal sparse_matrix_t B,
                                            @Cast("sparse_layout_t") int layout,
                                            FloatPointer C,
                                            @ByVal MKL_INT ldc );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_spmmd( @Cast("sparse_operation_t") int operation,
                                            @Const @ByVal sparse_matrix_t A,
                                            @Const @ByVal sparse_matrix_t B,
                                            @Cast("sparse_layout_t") int layout,
                                            FloatBuffer C,
                                            @ByVal MKL_INT ldc );
    public static native @Cast("sparse_status_t") int mkl_sparse_s_spmmd( @Cast("sparse_operation_t") int operation,
                                            @Const @ByVal sparse_matrix_t A,
                                            @Const @ByVal sparse_matrix_t B,
                                            @Cast("sparse_layout_t") int layout,
                                            float[] C,
                                            @ByVal MKL_INT ldc );

    public static native @Cast("sparse_status_t") int mkl_sparse_d_spmmd( @Cast("sparse_operation_t") int operation,
                                            @Const @ByVal sparse_matrix_t A,
                                            @Const @ByVal sparse_matrix_t B,
                                            @Cast("sparse_layout_t") int layout,
                                            DoublePointer C,
                                            @ByVal MKL_INT ldc );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_spmmd( @Cast("sparse_operation_t") int operation,
                                            @Const @ByVal sparse_matrix_t A,
                                            @Const @ByVal sparse_matrix_t B,
                                            @Cast("sparse_layout_t") int layout,
                                            DoubleBuffer C,
                                            @ByVal MKL_INT ldc );
    public static native @Cast("sparse_status_t") int mkl_sparse_d_spmmd( @Cast("sparse_operation_t") int operation,
                                            @Const @ByVal sparse_matrix_t A,
                                            @Const @ByVal sparse_matrix_t B,
                                            @Cast("sparse_layout_t") int layout,
                                            double[] C,
                                            @ByVal MKL_INT ldc );

    public static native @Cast("sparse_status_t") int mkl_sparse_c_spmmd( @Cast("sparse_operation_t") int operation,
                                            @Const @ByVal sparse_matrix_t A,
                                            @Const @ByVal sparse_matrix_t B,
                                            @Cast("sparse_layout_t") int layout,
                                            MKL_Complex8 C,
                                            @ByVal MKL_INT ldc );

    public static native @Cast("sparse_status_t") int mkl_sparse_z_spmmd( @Cast("sparse_operation_t") int operation,
                                            @Const @ByVal sparse_matrix_t A,
                                            @Const @ByVal sparse_matrix_t B,
                                            @Cast("sparse_layout_t") int layout,
                                            MKL_Complex16 C,
                                            @ByVal MKL_INT ldc );

// #ifdef __cplusplus
// #endif /*__cplusplus */

// #endif /*_MKL_SPBLAS_H_ */


// Parsed from mkl_lapacke.h

/*******************************************************************************
* Copyright 2010-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
* Contents: Native C interface to LAPACK
* Author: Intel Corporation
* Generated January, 2010
*****************************************************************************/

// #ifndef _MKL_LAPACKE_H_
// #define _MKL_LAPACKE_H_

// #include "mkl_types.h"

// #ifdef __cplusplus
// #endif /* __cplusplus */

public static final int LAPACK_ROW_MAJOR =               101;
public static final int LAPACK_COL_MAJOR =               102;

public static final int LAPACK_WORK_MEMORY_ERROR =       -1010;
public static final int LAPACK_TRANSPOSE_MEMORY_ERROR =  -1011;

// #ifndef lapack_int
public static final int lapack_int =              MKL_INT;
// #endif

// #ifndef lapack_logical
public static final int lapack_logical =          lapack_int;
// #endif

/* Complex types are structures equivalent to the
* Fortran complex types COMPLEX(4) and COMPLEX(8).
*
* One can also redefine the types with his own types
* for example by including in the code definitions like
*
* #define lapack_complex_float std::complex<float>
* #define lapack_complex_double std::complex<double>
*
* or define these types in the command line:
*
* -Dlapack_complex_float="std::complex<float>"
* -Dlapack_complex_double="std::complex<double>"
*/

// #ifndef lapack_complex_float
public static final int lapack_complex_float =    MKL_Complex8;
// #endif

// #ifndef lapack_complex_double
public static final int lapack_complex_double =   MKL_Complex16;
// #endif

/* Callback logical functions of one, two, or three arguments are used
*  to select eigenvalues to sort to the top left of the Schur form.
*  The value is selected if function returns non-zero. */

public static class LAPACK_S_SELECT2 extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    LAPACK_S_SELECT2(Pointer p) { super(p); }
    protected LAPACK_S_SELECT2() { allocate(); }
    private native void allocate();
    public native @ByVal lapack_logical call( @Const FloatPointer arg0, @Const FloatPointer arg1 );
}
public static class LAPACK_S_SELECT3 extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    LAPACK_S_SELECT3(Pointer p) { super(p); }
    protected LAPACK_S_SELECT3() { allocate(); }
    private native void allocate();
    public native @ByVal lapack_logical call( @Const FloatPointer arg0, @Const FloatPointer arg1, @Const FloatPointer arg2 );
}
public static class LAPACK_D_SELECT2 extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    LAPACK_D_SELECT2(Pointer p) { super(p); }
    protected LAPACK_D_SELECT2() { allocate(); }
    private native void allocate();
    public native @ByVal lapack_logical call( @Const DoublePointer arg0, @Const DoublePointer arg1 );
}
public static class LAPACK_D_SELECT3 extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    LAPACK_D_SELECT3(Pointer p) { super(p); }
    protected LAPACK_D_SELECT3() { allocate(); }
    private native void allocate();
    public native @ByVal lapack_logical call( @Const DoublePointer arg0, @Const DoublePointer arg1, @Const DoublePointer arg2 );
}

public static class LAPACK_C_SELECT1 extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    LAPACK_C_SELECT1(Pointer p) { super(p); }
    protected LAPACK_C_SELECT1() { allocate(); }
    private native void allocate();
    public native @ByVal lapack_logical call( @Const lapack_complex_float arg0 );
}
public static class LAPACK_C_SELECT2 extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    LAPACK_C_SELECT2(Pointer p) { super(p); }
    protected LAPACK_C_SELECT2() { allocate(); }
    private native void allocate();
    public native @ByVal lapack_logical call( @Const lapack_complex_float arg0, @Const lapack_complex_float arg1 );
}
public static class LAPACK_Z_SELECT1 extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    LAPACK_Z_SELECT1(Pointer p) { super(p); }
    protected LAPACK_Z_SELECT1() { allocate(); }
    private native void allocate();
    public native @ByVal lapack_logical call( @Const lapack_complex_double arg0 );
}
public static class LAPACK_Z_SELECT2 extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    LAPACK_Z_SELECT2(Pointer p) { super(p); }
    protected LAPACK_Z_SELECT2() { allocate(); }
    private native void allocate();
    public native @ByVal lapack_logical call( @Const lapack_complex_double arg0, @Const lapack_complex_double arg1 );
}

// #ifndef LAPACK_DECL
// #define LAPACK_DECL
// #endif

public static native double LAPACKE_dlamch( @Cast("char") byte cmach );

public static native double LAPACKE_dlamch_work( @Cast("char") byte cmach );

public static native double LAPACKE_dlange( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const DoublePointer a, @ByVal lapack_int lda );
public static native double LAPACKE_dlange( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const DoubleBuffer a, @ByVal lapack_int lda );
public static native double LAPACKE_dlange( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const double[] a, @ByVal lapack_int lda );

public static native double LAPACKE_dlange_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const DoublePointer a, @ByVal lapack_int lda,
                                DoublePointer work );
public static native double LAPACKE_dlange_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const DoubleBuffer a, @ByVal lapack_int lda,
                                DoubleBuffer work );
public static native double LAPACKE_dlange_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const double[] a, @ByVal lapack_int lda,
                                double[] work );

public static native double LAPACKE_dlansy( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const DoublePointer a, @ByVal lapack_int lda );
public static native double LAPACKE_dlansy( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const DoubleBuffer a, @ByVal lapack_int lda );
public static native double LAPACKE_dlansy( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const double[] a, @ByVal lapack_int lda );

public static native double LAPACKE_dlansy_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const DoublePointer a, @ByVal lapack_int lda,
                                DoublePointer work );
public static native double LAPACKE_dlansy_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const DoubleBuffer a, @ByVal lapack_int lda,
                                DoubleBuffer work );
public static native double LAPACKE_dlansy_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const double[] a, @ByVal lapack_int lda,
                                double[] work );

public static native double LAPACKE_dlantr( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const DoublePointer a,
                           @ByVal lapack_int lda );
public static native double LAPACKE_dlantr( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const DoubleBuffer a,
                           @ByVal lapack_int lda );
public static native double LAPACKE_dlantr( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const double[] a,
                           @ByVal lapack_int lda );

public static native double LAPACKE_dlantr_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const DoublePointer a, @ByVal lapack_int lda, DoublePointer work );
public static native double LAPACKE_dlantr_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer work );
public static native double LAPACKE_dlantr_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const double[] a, @ByVal lapack_int lda, double[] work );

public static native double LAPACKE_dlapy2( double x, double y );

public static native double LAPACKE_dlapy2_work( double x, double y );

public static native double LAPACKE_dlapy3( double x, double y, double z );

public static native double LAPACKE_dlapy3_work( double x, double y, double z );

public static native double LAPACKE_zlange( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const lapack_complex_double a,
                           @ByVal lapack_int lda );

public static native double LAPACKE_zlange_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, DoublePointer work );
public static native double LAPACKE_zlange_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, DoubleBuffer work );
public static native double LAPACKE_zlange_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, double[] work );

public static native double LAPACKE_zlanhe( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda );

public static native double LAPACKE_zlanhe_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, DoublePointer work );
public static native double LAPACKE_zlanhe_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, DoubleBuffer work );
public static native double LAPACKE_zlanhe_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, double[] work );

public static native double LAPACKE_zlansy( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda );

public static native double LAPACKE_zlansy_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, DoublePointer work );
public static native double LAPACKE_zlansy_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, DoubleBuffer work );
public static native double LAPACKE_zlansy_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, double[] work );

public static native double LAPACKE_zlantr( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda );

public static native double LAPACKE_zlantr_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                DoublePointer work );
public static native double LAPACKE_zlantr_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                DoubleBuffer work );
public static native double LAPACKE_zlantr_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                double[] work );

public static native float LAPACKE_clange( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const lapack_complex_float a,
                           @ByVal lapack_int lda );

public static native float LAPACKE_clange_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, FloatPointer work );
public static native float LAPACKE_clange_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, FloatBuffer work );
public static native float LAPACKE_clange_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, float[] work );

public static native float LAPACKE_clanhe( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @ByVal lapack_int n,
                      @Const lapack_complex_float a, @ByVal lapack_int lda );

public static native float LAPACKE_clanhe_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, FloatPointer work );
public static native float LAPACKE_clanhe_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, FloatBuffer work );
public static native float LAPACKE_clanhe_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, float[] work );

public static native float LAPACKE_clansy( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @ByVal lapack_int n,
                      @Const lapack_complex_float a, @ByVal lapack_int lda );

public static native float LAPACKE_clansy_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, FloatPointer work );
public static native float LAPACKE_clansy_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, FloatBuffer work );
public static native float LAPACKE_clansy_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, float[] work );

public static native float LAPACKE_clantr( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const lapack_complex_float a,
                           @ByVal lapack_int lda );

public static native float LAPACKE_clantr_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                FloatPointer work );
public static native float LAPACKE_clantr_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                FloatBuffer work );
public static native float LAPACKE_clantr_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                float[] work );

public static native float LAPACKE_slamch( @Cast("char") byte cmach );

public static native float LAPACKE_slamch_work( @Cast("char") byte cmach );

public static native float LAPACKE_slange( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const FloatPointer a, @ByVal lapack_int lda );
public static native float LAPACKE_slange( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const FloatBuffer a, @ByVal lapack_int lda );
public static native float LAPACKE_slange( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const float[] a, @ByVal lapack_int lda );

public static native float LAPACKE_slange_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const FloatPointer a, @ByVal lapack_int lda,
                                FloatPointer work );
public static native float LAPACKE_slange_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const FloatBuffer a, @ByVal lapack_int lda,
                                FloatBuffer work );
public static native float LAPACKE_slange_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const float[] a, @ByVal lapack_int lda,
                                float[] work );

public static native float LAPACKE_slansy( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const FloatPointer a, @ByVal lapack_int lda );
public static native float LAPACKE_slansy( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const FloatBuffer a, @ByVal lapack_int lda );
public static native float LAPACKE_slansy( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const float[] a, @ByVal lapack_int lda );

public static native float LAPACKE_slansy_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const FloatPointer a, @ByVal lapack_int lda,
                                FloatPointer work );
public static native float LAPACKE_slansy_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const FloatBuffer a, @ByVal lapack_int lda,
                                FloatBuffer work );
public static native float LAPACKE_slansy_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const float[] a, @ByVal lapack_int lda,
                                float[] work );

public static native float LAPACKE_slantr( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const FloatPointer a,
                           @ByVal lapack_int lda );
public static native float LAPACKE_slantr( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const FloatBuffer a,
                           @ByVal lapack_int lda );
public static native float LAPACKE_slantr( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const float[] a,
                           @ByVal lapack_int lda );

public static native float LAPACKE_slantr_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const FloatPointer a, @ByVal lapack_int lda, FloatPointer work );
public static native float LAPACKE_slantr_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const FloatBuffer a, @ByVal lapack_int lda, FloatBuffer work );
public static native float LAPACKE_slantr_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const float[] a, @ByVal lapack_int lda, float[] work );

public static native float LAPACKE_slapy2( float x, float y );

public static native float LAPACKE_slapy2_work( float x, float y );

public static native float LAPACKE_slapy3( float x, float y, float z );

public static native float LAPACKE_slapy3_work( float x, float y, float z );

public static native @ByVal lapack_int LAPACKE_cbbcsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @ByVal lapack_int m,
                           @ByVal lapack_int p, @ByVal lapack_int q, FloatPointer theta, FloatPointer phi,
                           lapack_complex_float u1, @ByVal lapack_int ldu1,
                           lapack_complex_float u2, @ByVal lapack_int ldu2,
                           lapack_complex_float v1t, @ByVal lapack_int ldv1t,
                           lapack_complex_float v2t, @ByVal lapack_int ldv2t,
                           FloatPointer b11d, FloatPointer b11e, FloatPointer b12d, FloatPointer b12e,
                           FloatPointer b21d, FloatPointer b21e, FloatPointer b22d, FloatPointer b22e );
public static native @ByVal lapack_int LAPACKE_cbbcsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @ByVal lapack_int m,
                           @ByVal lapack_int p, @ByVal lapack_int q, FloatBuffer theta, FloatBuffer phi,
                           lapack_complex_float u1, @ByVal lapack_int ldu1,
                           lapack_complex_float u2, @ByVal lapack_int ldu2,
                           lapack_complex_float v1t, @ByVal lapack_int ldv1t,
                           lapack_complex_float v2t, @ByVal lapack_int ldv2t,
                           FloatBuffer b11d, FloatBuffer b11e, FloatBuffer b12d, FloatBuffer b12e,
                           FloatBuffer b21d, FloatBuffer b21e, FloatBuffer b22d, FloatBuffer b22e );
public static native @ByVal lapack_int LAPACKE_cbbcsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @ByVal lapack_int m,
                           @ByVal lapack_int p, @ByVal lapack_int q, float[] theta, float[] phi,
                           lapack_complex_float u1, @ByVal lapack_int ldu1,
                           lapack_complex_float u2, @ByVal lapack_int ldu2,
                           lapack_complex_float v1t, @ByVal lapack_int ldv1t,
                           lapack_complex_float v2t, @ByVal lapack_int ldv2t,
                           float[] b11d, float[] b11e, float[] b12d, float[] b12e,
                           float[] b21d, float[] b21e, float[] b22d, float[] b22e );

public static native @ByVal lapack_int LAPACKE_cbbcsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                FloatPointer theta, FloatPointer phi,
                                lapack_complex_float u1, @ByVal lapack_int ldu1,
                                lapack_complex_float u2, @ByVal lapack_int ldu2,
                                lapack_complex_float v1t, @ByVal lapack_int ldv1t,
                                lapack_complex_float v2t, @ByVal lapack_int ldv2t,
                                FloatPointer b11d, FloatPointer b11e, FloatPointer b12d,
                                FloatPointer b12e, FloatPointer b21d, FloatPointer b21e,
                                FloatPointer b22d, FloatPointer b22e, FloatPointer rwork,
                                @ByVal lapack_int lrwork );
public static native @ByVal lapack_int LAPACKE_cbbcsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                FloatBuffer theta, FloatBuffer phi,
                                lapack_complex_float u1, @ByVal lapack_int ldu1,
                                lapack_complex_float u2, @ByVal lapack_int ldu2,
                                lapack_complex_float v1t, @ByVal lapack_int ldv1t,
                                lapack_complex_float v2t, @ByVal lapack_int ldv2t,
                                FloatBuffer b11d, FloatBuffer b11e, FloatBuffer b12d,
                                FloatBuffer b12e, FloatBuffer b21d, FloatBuffer b21e,
                                FloatBuffer b22d, FloatBuffer b22e, FloatBuffer rwork,
                                @ByVal lapack_int lrwork );
public static native @ByVal lapack_int LAPACKE_cbbcsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                float[] theta, float[] phi,
                                lapack_complex_float u1, @ByVal lapack_int ldu1,
                                lapack_complex_float u2, @ByVal lapack_int ldu2,
                                lapack_complex_float v1t, @ByVal lapack_int ldv1t,
                                lapack_complex_float v2t, @ByVal lapack_int ldv2t,
                                float[] b11d, float[] b11e, float[] b12d,
                                float[] b12e, float[] b21d, float[] b21e,
                                float[] b22d, float[] b22e, float[] rwork,
                                @ByVal lapack_int lrwork );

public static native @ByVal lapack_int LAPACKE_cbdsqr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                           FloatPointer d, FloatPointer e, lapack_complex_float vt,
                           @ByVal lapack_int ldvt, lapack_complex_float u,
                           @ByVal lapack_int ldu, lapack_complex_float c,
                           @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_cbdsqr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                           FloatBuffer d, FloatBuffer e, lapack_complex_float vt,
                           @ByVal lapack_int ldvt, lapack_complex_float u,
                           @ByVal lapack_int ldu, lapack_complex_float c,
                           @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_cbdsqr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                           float[] d, float[] e, lapack_complex_float vt,
                           @ByVal lapack_int ldvt, lapack_complex_float u,
                           @ByVal lapack_int ldu, lapack_complex_float c,
                           @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_cbdsqr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                                FloatPointer d, FloatPointer e, lapack_complex_float vt,
                                @ByVal lapack_int ldvt, lapack_complex_float u,
                                @ByVal lapack_int ldu, lapack_complex_float c,
                                @ByVal lapack_int ldc, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_cbdsqr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                                FloatBuffer d, FloatBuffer e, lapack_complex_float vt,
                                @ByVal lapack_int ldvt, lapack_complex_float u,
                                @ByVal lapack_int ldu, lapack_complex_float c,
                                @ByVal lapack_int ldc, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_cbdsqr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                                float[] d, float[] e, lapack_complex_float vt,
                                @ByVal lapack_int ldvt, lapack_complex_float u,
                                @ByVal lapack_int ldu, lapack_complex_float c,
                                @ByVal lapack_int ldc, float[] work );

public static native @ByVal lapack_int LAPACKE_cgbbrd( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, lapack_complex_float ab,
                           @ByVal lapack_int ldab, FloatPointer d, FloatPointer e,
                           lapack_complex_float q, @ByVal lapack_int ldq,
                           lapack_complex_float pt, @ByVal lapack_int ldpt,
                           lapack_complex_float c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_cgbbrd( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, lapack_complex_float ab,
                           @ByVal lapack_int ldab, FloatBuffer d, FloatBuffer e,
                           lapack_complex_float q, @ByVal lapack_int ldq,
                           lapack_complex_float pt, @ByVal lapack_int ldpt,
                           lapack_complex_float c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_cgbbrd( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, lapack_complex_float ab,
                           @ByVal lapack_int ldab, float[] d, float[] e,
                           lapack_complex_float q, @ByVal lapack_int ldq,
                           lapack_complex_float pt, @ByVal lapack_int ldpt,
                           lapack_complex_float c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_cgbbrd_work( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                                @ByVal lapack_int ku, lapack_complex_float ab,
                                @ByVal lapack_int ldab, FloatPointer d, FloatPointer e,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_complex_float pt, @ByVal lapack_int ldpt,
                                lapack_complex_float c, @ByVal lapack_int ldc,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cgbbrd_work( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                                @ByVal lapack_int ku, lapack_complex_float ab,
                                @ByVal lapack_int ldab, FloatBuffer d, FloatBuffer e,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_complex_float pt, @ByVal lapack_int ldpt,
                                lapack_complex_float c, @ByVal lapack_int ldc,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cgbbrd_work( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                                @ByVal lapack_int ku, lapack_complex_float ab,
                                @ByVal lapack_int ldab, float[] d, float[] e,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_complex_float pt, @ByVal lapack_int ldpt,
                                lapack_complex_float c, @ByVal lapack_int ldc,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_cgbcon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                           @Const lapack_int ipiv, float anorm, FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_cgbcon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                           @Const lapack_int ipiv, float anorm, FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_cgbcon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                           @Const lapack_int ipiv, float anorm, float[] rcond );

public static native @ByVal lapack_int LAPACKE_cgbcon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                                @Const lapack_int ipiv, float anorm,
                                FloatPointer rcond, lapack_complex_float work,
                                FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cgbcon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                                @Const lapack_int ipiv, float anorm,
                                FloatBuffer rcond, lapack_complex_float work,
                                FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cgbcon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                                @Const lapack_int ipiv, float anorm,
                                float[] rcond, lapack_complex_float work,
                                float[] rwork );

public static native @ByVal lapack_int LAPACKE_cgbequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                           FloatPointer r, FloatPointer c, FloatPointer rowcnd, FloatPointer colcnd,
                           FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_cgbequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                           FloatBuffer r, FloatBuffer c, FloatBuffer rowcnd, FloatBuffer colcnd,
                           FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_cgbequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                           float[] r, float[] c, float[] rowcnd, float[] colcnd,
                           float[] amax );

public static native @ByVal lapack_int LAPACKE_cgbequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                                FloatPointer r, FloatPointer c, FloatPointer rowcnd,
                                FloatPointer colcnd, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_cgbequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                                FloatBuffer r, FloatBuffer c, FloatBuffer rowcnd,
                                FloatBuffer colcnd, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_cgbequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                                float[] r, float[] c, float[] rowcnd,
                                float[] colcnd, float[] amax );

public static native @ByVal lapack_int LAPACKE_cgbequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                            FloatPointer r, FloatPointer c, FloatPointer rowcnd, FloatPointer colcnd,
                            FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_cgbequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                            FloatBuffer r, FloatBuffer c, FloatBuffer rowcnd, FloatBuffer colcnd,
                            FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_cgbequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                            float[] r, float[] c, float[] rowcnd, float[] colcnd,
                            float[] amax );

public static native @ByVal lapack_int LAPACKE_cgbequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @Const lapack_complex_float ab,
                                 @ByVal lapack_int ldab, FloatPointer r, FloatPointer c,
                                 FloatPointer rowcnd, FloatPointer colcnd, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_cgbequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @Const lapack_complex_float ab,
                                 @ByVal lapack_int ldab, FloatBuffer r, FloatBuffer c,
                                 FloatBuffer rowcnd, FloatBuffer colcnd, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_cgbequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @Const lapack_complex_float ab,
                                 @ByVal lapack_int ldab, float[] r, float[] c,
                                 float[] rowcnd, float[] colcnd, float[] amax );

public static native @ByVal lapack_int LAPACKE_cgbrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                           @Const lapack_complex_float afb, @ByVal lapack_int ldafb,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, FloatPointer ferr,
                           FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_cgbrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                           @Const lapack_complex_float afb, @ByVal lapack_int ldafb,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, FloatBuffer ferr,
                           FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_cgbrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                           @Const lapack_complex_float afb, @ByVal lapack_int ldafb,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, float[] ferr,
                           float[] berr );

public static native @ByVal lapack_int LAPACKE_cgbrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                                @Const lapack_complex_float afb,
                                @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatPointer ferr, FloatPointer berr,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cgbrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                                @Const lapack_complex_float afb,
                                @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatBuffer ferr, FloatBuffer berr,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cgbrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                                @Const lapack_complex_float afb,
                                @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                float[] ferr, float[] berr,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_cgbrfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, @Const lapack_complex_float ab,
                            @ByVal lapack_int ldab, @Const lapack_complex_float afb,
                            @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                            @Const FloatPointer r, @Const FloatPointer c,
                            @Const lapack_complex_float b, @ByVal lapack_int ldb,
                            lapack_complex_float x, @ByVal lapack_int ldx,
                            FloatPointer rcond, FloatPointer berr, @ByVal lapack_int n_err_bnds,
                            FloatPointer err_bnds_norm, FloatPointer err_bnds_comp,
                            @ByVal lapack_int nparams, FloatPointer params );
public static native @ByVal lapack_int LAPACKE_cgbrfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, @Const lapack_complex_float ab,
                            @ByVal lapack_int ldab, @Const lapack_complex_float afb,
                            @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                            @Const FloatBuffer r, @Const FloatBuffer c,
                            @Const lapack_complex_float b, @ByVal lapack_int ldb,
                            lapack_complex_float x, @ByVal lapack_int ldx,
                            FloatBuffer rcond, FloatBuffer berr, @ByVal lapack_int n_err_bnds,
                            FloatBuffer err_bnds_norm, FloatBuffer err_bnds_comp,
                            @ByVal lapack_int nparams, FloatBuffer params );
public static native @ByVal lapack_int LAPACKE_cgbrfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, @Const lapack_complex_float ab,
                            @ByVal lapack_int ldab, @Const lapack_complex_float afb,
                            @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                            @Const float[] r, @Const float[] c,
                            @Const lapack_complex_float b, @ByVal lapack_int ldb,
                            lapack_complex_float x, @ByVal lapack_int ldx,
                            float[] rcond, float[] berr, @ByVal lapack_int n_err_bnds,
                            float[] err_bnds_norm, float[] err_bnds_comp,
                            @ByVal lapack_int nparams, float[] params );

public static native @ByVal lapack_int LAPACKE_cgbrfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs,
                                 @Const lapack_complex_float ab,
                                 @ByVal lapack_int ldab,
                                 @Const lapack_complex_float afb,
                                 @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                                 @Const FloatPointer r, @Const FloatPointer c,
                                 @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float x, @ByVal lapack_int ldx,
                                 FloatPointer rcond, FloatPointer berr,
                                 @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                                 FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatPointer params, lapack_complex_float work,
                                 FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cgbrfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs,
                                 @Const lapack_complex_float ab,
                                 @ByVal lapack_int ldab,
                                 @Const lapack_complex_float afb,
                                 @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                                 @Const FloatBuffer r, @Const FloatBuffer c,
                                 @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float x, @ByVal lapack_int ldx,
                                 FloatBuffer rcond, FloatBuffer berr,
                                 @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                                 FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatBuffer params, lapack_complex_float work,
                                 FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cgbrfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs,
                                 @Const lapack_complex_float ab,
                                 @ByVal lapack_int ldab,
                                 @Const lapack_complex_float afb,
                                 @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                                 @Const float[] r, @Const float[] c,
                                 @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float x, @ByVal lapack_int ldx,
                                 float[] rcond, float[] berr,
                                 @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                                 float[] err_bnds_comp, @ByVal lapack_int nparams,
                                 float[] params, lapack_complex_float work,
                                 float[] rwork );

public static native @ByVal lapack_int LAPACKE_cgbsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int kl,
                          @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                          lapack_complex_float ab, @ByVal lapack_int ldab,
                          lapack_int ipiv, lapack_complex_float b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cgbsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int kl,
                               @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                               lapack_complex_float ab, @ByVal lapack_int ldab,
                               lapack_int ipiv, lapack_complex_float b,
                               @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cgbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @ByVal lapack_int nrhs, lapack_complex_float ab,
                           @ByVal lapack_int ldab, lapack_complex_float afb,
                           @ByVal lapack_int ldafb, lapack_int ipiv, @Cast("char*") BytePointer equed,
                           FloatPointer r, FloatPointer c, lapack_complex_float b,
                           @ByVal lapack_int ldb, lapack_complex_float x,
                           @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer ferr,
                           FloatPointer berr, FloatPointer rpivot );
public static native @ByVal lapack_int LAPACKE_cgbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @ByVal lapack_int nrhs, lapack_complex_float ab,
                           @ByVal lapack_int ldab, lapack_complex_float afb,
                           @ByVal lapack_int ldafb, lapack_int ipiv, @Cast("char*") ByteBuffer equed,
                           FloatBuffer r, FloatBuffer c, lapack_complex_float b,
                           @ByVal lapack_int ldb, lapack_complex_float x,
                           @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer ferr,
                           FloatBuffer berr, FloatBuffer rpivot );
public static native @ByVal lapack_int LAPACKE_cgbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @ByVal lapack_int nrhs, lapack_complex_float ab,
                           @ByVal lapack_int ldab, lapack_complex_float afb,
                           @ByVal lapack_int ldafb, lapack_int ipiv, @Cast("char*") byte[] equed,
                           float[] r, float[] c, lapack_complex_float b,
                           @ByVal lapack_int ldb, lapack_complex_float x,
                           @ByVal lapack_int ldx, float[] rcond, float[] ferr,
                           float[] berr, float[] rpivot );

public static native @ByVal lapack_int LAPACKE_cgbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @ByVal lapack_int nrhs, lapack_complex_float ab,
                                @ByVal lapack_int ldab, lapack_complex_float afb,
                                @ByVal lapack_int ldafb, lapack_int ipiv, @Cast("char*") BytePointer equed,
                                FloatPointer r, FloatPointer c, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer ferr,
                                FloatPointer berr, lapack_complex_float work,
                                FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cgbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @ByVal lapack_int nrhs, lapack_complex_float ab,
                                @ByVal lapack_int ldab, lapack_complex_float afb,
                                @ByVal lapack_int ldafb, lapack_int ipiv, @Cast("char*") ByteBuffer equed,
                                FloatBuffer r, FloatBuffer c, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer ferr,
                                FloatBuffer berr, lapack_complex_float work,
                                FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cgbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @ByVal lapack_int nrhs, lapack_complex_float ab,
                                @ByVal lapack_int ldab, lapack_complex_float afb,
                                @ByVal lapack_int ldafb, lapack_int ipiv, @Cast("char*") byte[] equed,
                                float[] r, float[] c, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, float[] rcond, float[] ferr,
                                float[] berr, lapack_complex_float work,
                                float[] rwork );

public static native @ByVal lapack_int LAPACKE_cgbsvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, lapack_complex_float ab,
                            @ByVal lapack_int ldab, lapack_complex_float afb,
                            @ByVal lapack_int ldafb, lapack_int ipiv, @Cast("char*") BytePointer equed,
                            FloatPointer r, FloatPointer c, lapack_complex_float b,
                            @ByVal lapack_int ldb, lapack_complex_float x,
                            @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer rpvgrw,
                            FloatPointer berr, @ByVal lapack_int n_err_bnds,
                            FloatPointer err_bnds_norm, FloatPointer err_bnds_comp,
                            @ByVal lapack_int nparams, FloatPointer params );
public static native @ByVal lapack_int LAPACKE_cgbsvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, lapack_complex_float ab,
                            @ByVal lapack_int ldab, lapack_complex_float afb,
                            @ByVal lapack_int ldafb, lapack_int ipiv, @Cast("char*") ByteBuffer equed,
                            FloatBuffer r, FloatBuffer c, lapack_complex_float b,
                            @ByVal lapack_int ldb, lapack_complex_float x,
                            @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer rpvgrw,
                            FloatBuffer berr, @ByVal lapack_int n_err_bnds,
                            FloatBuffer err_bnds_norm, FloatBuffer err_bnds_comp,
                            @ByVal lapack_int nparams, FloatBuffer params );
public static native @ByVal lapack_int LAPACKE_cgbsvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, lapack_complex_float ab,
                            @ByVal lapack_int ldab, lapack_complex_float afb,
                            @ByVal lapack_int ldafb, lapack_int ipiv, @Cast("char*") byte[] equed,
                            float[] r, float[] c, lapack_complex_float b,
                            @ByVal lapack_int ldb, lapack_complex_float x,
                            @ByVal lapack_int ldx, float[] rcond, float[] rpvgrw,
                            float[] berr, @ByVal lapack_int n_err_bnds,
                            float[] err_bnds_norm, float[] err_bnds_comp,
                            @ByVal lapack_int nparams, float[] params );

public static native @ByVal lapack_int LAPACKE_cgbsvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs, lapack_complex_float ab,
                                 @ByVal lapack_int ldab, lapack_complex_float afb,
                                 @ByVal lapack_int ldafb, lapack_int ipiv,
                                 @Cast("char*") BytePointer equed, FloatPointer r, FloatPointer c,
                                 lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float x, @ByVal lapack_int ldx,
                                 FloatPointer rcond, FloatPointer rpvgrw, FloatPointer berr,
                                 @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                                 FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatPointer params, lapack_complex_float work,
                                 FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cgbsvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs, lapack_complex_float ab,
                                 @ByVal lapack_int ldab, lapack_complex_float afb,
                                 @ByVal lapack_int ldafb, lapack_int ipiv,
                                 @Cast("char*") ByteBuffer equed, FloatBuffer r, FloatBuffer c,
                                 lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float x, @ByVal lapack_int ldx,
                                 FloatBuffer rcond, FloatBuffer rpvgrw, FloatBuffer berr,
                                 @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                                 FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatBuffer params, lapack_complex_float work,
                                 FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cgbsvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs, lapack_complex_float ab,
                                 @ByVal lapack_int ldab, lapack_complex_float afb,
                                 @ByVal lapack_int ldafb, lapack_int ipiv,
                                 @Cast("char*") byte[] equed, float[] r, float[] c,
                                 lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float x, @ByVal lapack_int ldx,
                                 float[] rcond, float[] rpvgrw, float[] berr,
                                 @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                                 float[] err_bnds_comp, @ByVal lapack_int nparams,
                                 float[] params, lapack_complex_float work,
                                 float[] rwork );

public static native @ByVal lapack_int LAPACKE_cgbtrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku,
                           lapack_complex_float ab, @ByVal lapack_int ldab,
                           lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_cgbtrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku,
                                lapack_complex_float ab, @ByVal lapack_int ldab,
                                lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_cgbtrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                           @Const lapack_int ipiv, lapack_complex_float b,
                           @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cgbtrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                                @Const lapack_int ipiv, lapack_complex_float b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cgebak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const FloatPointer scale,
                           @ByVal lapack_int m, lapack_complex_float v,
                           @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_cgebak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const FloatBuffer scale,
                           @ByVal lapack_int m, lapack_complex_float v,
                           @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_cgebak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const float[] scale,
                           @ByVal lapack_int m, lapack_complex_float v,
                           @ByVal lapack_int ldv );

public static native @ByVal lapack_int LAPACKE_cgebak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const FloatPointer scale, @ByVal lapack_int m,
                                lapack_complex_float v, @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_cgebak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const FloatBuffer scale, @ByVal lapack_int m,
                                lapack_complex_float v, @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_cgebak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const float[] scale, @ByVal lapack_int m,
                                lapack_complex_float v, @ByVal lapack_int ldv );

public static native @ByVal lapack_int LAPACKE_cgebal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_int ilo, lapack_int ihi, FloatPointer scale );
public static native @ByVal lapack_int LAPACKE_cgebal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_int ilo, lapack_int ihi, FloatBuffer scale );
public static native @ByVal lapack_int LAPACKE_cgebal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_int ilo, lapack_int ihi, float[] scale );

public static native @ByVal lapack_int LAPACKE_cgebal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int ilo, lapack_int ihi, FloatPointer scale );
public static native @ByVal lapack_int LAPACKE_cgebal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int ilo, lapack_int ihi, FloatBuffer scale );
public static native @ByVal lapack_int LAPACKE_cgebal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int ilo, lapack_int ihi, float[] scale );

public static native @ByVal lapack_int LAPACKE_cgebrd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda, FloatPointer d,
                           FloatPointer e, lapack_complex_float tauq,
                           lapack_complex_float taup );
public static native @ByVal lapack_int LAPACKE_cgebrd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda, FloatBuffer d,
                           FloatBuffer e, lapack_complex_float tauq,
                           lapack_complex_float taup );
public static native @ByVal lapack_int LAPACKE_cgebrd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda, float[] d,
                           float[] e, lapack_complex_float tauq,
                           lapack_complex_float taup );

public static native @ByVal lapack_int LAPACKE_cgebrd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                FloatPointer d, FloatPointer e, lapack_complex_float tauq,
                                lapack_complex_float taup,
                                lapack_complex_float work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_cgebrd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                FloatBuffer d, FloatBuffer e, lapack_complex_float tauq,
                                lapack_complex_float taup,
                                lapack_complex_float work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_cgebrd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                float[] d, float[] e, lapack_complex_float tauq,
                                lapack_complex_float taup,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cgecon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           float anorm, FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_cgecon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           float anorm, FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_cgecon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           float anorm, float[] rcond );

public static native @ByVal lapack_int LAPACKE_cgecon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                float anorm, FloatPointer rcond,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cgecon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                float anorm, FloatBuffer rcond,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cgecon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                float anorm, float[] rcond,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_cgeequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           FloatPointer r, FloatPointer c, FloatPointer rowcnd, FloatPointer colcnd,
                           FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_cgeequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           FloatBuffer r, FloatBuffer c, FloatBuffer rowcnd, FloatBuffer colcnd,
                           FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_cgeequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           float[] r, float[] c, float[] rowcnd, float[] colcnd,
                           float[] amax );

public static native @ByVal lapack_int LAPACKE_cgeequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                FloatPointer r, FloatPointer c, FloatPointer rowcnd,
                                FloatPointer colcnd, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_cgeequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                FloatBuffer r, FloatBuffer c, FloatBuffer rowcnd,
                                FloatBuffer colcnd, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_cgeequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                float[] r, float[] c, float[] rowcnd,
                                float[] colcnd, float[] amax );

public static native @ByVal lapack_int LAPACKE_cgeequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            FloatPointer r, FloatPointer c, FloatPointer rowcnd, FloatPointer colcnd,
                            FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_cgeequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            FloatBuffer r, FloatBuffer c, FloatBuffer rowcnd, FloatBuffer colcnd,
                            FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_cgeequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            float[] r, float[] c, float[] rowcnd, float[] colcnd,
                            float[] amax );

public static native @ByVal lapack_int LAPACKE_cgeequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 FloatPointer r, FloatPointer c, FloatPointer rowcnd,
                                 FloatPointer colcnd, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_cgeequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 FloatBuffer r, FloatBuffer c, FloatBuffer rowcnd,
                                 FloatBuffer colcnd, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_cgeequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 float[] r, float[] c, float[] rowcnd,
                                 float[] colcnd, float[] amax );

public static native @ByVal lapack_int LAPACKE_cgees( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                          LAPACK_C_SELECT1 select, @ByVal lapack_int n,
                          lapack_complex_float a, @ByVal lapack_int lda,
                          lapack_int sdim, lapack_complex_float w,
                          lapack_complex_float vs, @ByVal lapack_int ldvs );

public static native @ByVal lapack_int LAPACKE_cgees_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                               LAPACK_C_SELECT1 select, @ByVal lapack_int n,
                               lapack_complex_float a, @ByVal lapack_int lda,
                               lapack_int sdim, lapack_complex_float w,
                               lapack_complex_float vs, @ByVal lapack_int ldvs,
                               lapack_complex_float work, @ByVal lapack_int lwork,
                               FloatPointer rwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_cgees_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                               LAPACK_C_SELECT1 select, @ByVal lapack_int n,
                               lapack_complex_float a, @ByVal lapack_int lda,
                               lapack_int sdim, lapack_complex_float w,
                               lapack_complex_float vs, @ByVal lapack_int ldvs,
                               lapack_complex_float work, @ByVal lapack_int lwork,
                               FloatBuffer rwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_cgees_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                               LAPACK_C_SELECT1 select, @ByVal lapack_int n,
                               lapack_complex_float a, @ByVal lapack_int lda,
                               lapack_int sdim, lapack_complex_float w,
                               lapack_complex_float vs, @ByVal lapack_int ldvs,
                               lapack_complex_float work, @ByVal lapack_int lwork,
                               float[] rwork, lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_cgeesx( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                           LAPACK_C_SELECT1 select, @Cast("char") byte sense, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_int sdim, lapack_complex_float w,
                           lapack_complex_float vs, @ByVal lapack_int ldvs,
                           FloatPointer rconde, FloatPointer rcondv );
public static native @ByVal lapack_int LAPACKE_cgeesx( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                           LAPACK_C_SELECT1 select, @Cast("char") byte sense, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_int sdim, lapack_complex_float w,
                           lapack_complex_float vs, @ByVal lapack_int ldvs,
                           FloatBuffer rconde, FloatBuffer rcondv );
public static native @ByVal lapack_int LAPACKE_cgeesx( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                           LAPACK_C_SELECT1 select, @Cast("char") byte sense, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_int sdim, lapack_complex_float w,
                           lapack_complex_float vs, @ByVal lapack_int ldvs,
                           float[] rconde, float[] rcondv );

public static native @ByVal lapack_int LAPACKE_cgeesx_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                                LAPACK_C_SELECT1 select, @Cast("char") byte sense,
                                @ByVal lapack_int n, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_int sdim,
                                lapack_complex_float w,
                                lapack_complex_float vs, @ByVal lapack_int ldvs,
                                FloatPointer rconde, FloatPointer rcondv,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatPointer rwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_cgeesx_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                                LAPACK_C_SELECT1 select, @Cast("char") byte sense,
                                @ByVal lapack_int n, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_int sdim,
                                lapack_complex_float w,
                                lapack_complex_float vs, @ByVal lapack_int ldvs,
                                FloatBuffer rconde, FloatBuffer rcondv,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatBuffer rwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_cgeesx_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                                LAPACK_C_SELECT1 select, @Cast("char") byte sense,
                                @ByVal lapack_int n, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_int sdim,
                                lapack_complex_float w,
                                lapack_complex_float vs, @ByVal lapack_int ldvs,
                                float[] rconde, float[] rcondv,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                float[] rwork, lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_cgeev( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                          @ByVal lapack_int n, lapack_complex_float a, @ByVal lapack_int lda,
                          lapack_complex_float w, lapack_complex_float vl,
                          @ByVal lapack_int ldvl, lapack_complex_float vr,
                          @ByVal lapack_int ldvr );

public static native @ByVal lapack_int LAPACKE_cgeev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, lapack_complex_float a,
                               @ByVal lapack_int lda, lapack_complex_float w,
                               lapack_complex_float vl, @ByVal lapack_int ldvl,
                               lapack_complex_float vr, @ByVal lapack_int ldvr,
                               lapack_complex_float work, @ByVal lapack_int lwork,
                               FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cgeev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, lapack_complex_float a,
                               @ByVal lapack_int lda, lapack_complex_float w,
                               lapack_complex_float vl, @ByVal lapack_int ldvl,
                               lapack_complex_float vr, @ByVal lapack_int ldvr,
                               lapack_complex_float work, @ByVal lapack_int lwork,
                               FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cgeev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, lapack_complex_float a,
                               @ByVal lapack_int lda, lapack_complex_float w,
                               lapack_complex_float vl, @ByVal lapack_int ldvl,
                               lapack_complex_float vr, @ByVal lapack_int ldvr,
                               lapack_complex_float work, @ByVal lapack_int lwork,
                               float[] rwork );

public static native @ByVal lapack_int LAPACKE_cgeevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float w, lapack_complex_float vl,
                           @ByVal lapack_int ldvl, lapack_complex_float vr,
                           @ByVal lapack_int ldvr, lapack_int ilo, lapack_int ihi,
                           FloatPointer scale, FloatPointer abnrm, FloatPointer rconde,
                           FloatPointer rcondv );
public static native @ByVal lapack_int LAPACKE_cgeevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float w, lapack_complex_float vl,
                           @ByVal lapack_int ldvl, lapack_complex_float vr,
                           @ByVal lapack_int ldvr, lapack_int ilo, lapack_int ihi,
                           FloatBuffer scale, FloatBuffer abnrm, FloatBuffer rconde,
                           FloatBuffer rcondv );
public static native @ByVal lapack_int LAPACKE_cgeevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float w, lapack_complex_float vl,
                           @ByVal lapack_int ldvl, lapack_complex_float vr,
                           @ByVal lapack_int ldvr, lapack_int ilo, lapack_int ihi,
                           float[] scale, float[] abnrm, float[] rconde,
                           float[] rcondv );

public static native @ByVal lapack_int LAPACKE_cgeevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float w,
                                lapack_complex_float vl, @ByVal lapack_int ldvl,
                                lapack_complex_float vr, @ByVal lapack_int ldvr,
                                lapack_int ilo, lapack_int ihi, FloatPointer scale,
                                FloatPointer abnrm, FloatPointer rconde, FloatPointer rcondv,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cgeevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float w,
                                lapack_complex_float vl, @ByVal lapack_int ldvl,
                                lapack_complex_float vr, @ByVal lapack_int ldvr,
                                lapack_int ilo, lapack_int ihi, FloatBuffer scale,
                                FloatBuffer abnrm, FloatBuffer rconde, FloatBuffer rcondv,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cgeevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float w,
                                lapack_complex_float vl, @ByVal lapack_int ldvl,
                                lapack_complex_float vr, @ByVal lapack_int ldvr,
                                lapack_int ilo, lapack_int ihi, float[] scale,
                                float[] abnrm, float[] rconde, float[] rcondv,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                float[] rwork );

public static native @ByVal lapack_int LAPACKE_cgehrd( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_cgehrd_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float tau,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cgejsv( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp, @ByVal lapack_int m,
                           @ByVal lapack_int n, lapack_complex_float a, @ByVal lapack_int lda, FloatPointer sva,
                           lapack_complex_float u, @ByVal lapack_int ldu, lapack_complex_float v, @ByVal lapack_int ldv,
                           FloatPointer stat, lapack_int istat );
public static native @ByVal lapack_int LAPACKE_cgejsv( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp, @ByVal lapack_int m,
                           @ByVal lapack_int n, lapack_complex_float a, @ByVal lapack_int lda, FloatBuffer sva,
                           lapack_complex_float u, @ByVal lapack_int ldu, lapack_complex_float v, @ByVal lapack_int ldv,
                           FloatBuffer stat, lapack_int istat );
public static native @ByVal lapack_int LAPACKE_cgejsv( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp, @ByVal lapack_int m,
                           @ByVal lapack_int n, lapack_complex_float a, @ByVal lapack_int lda, float[] sva,
                           lapack_complex_float u, @ByVal lapack_int ldu, lapack_complex_float v, @ByVal lapack_int ldv,
                           float[] stat, lapack_int istat );

public static native @ByVal lapack_int LAPACKE_cgejsv_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp,
                                @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_float a,
                                @ByVal lapack_int lda, FloatPointer sva, lapack_complex_float u,
                                @ByVal lapack_int ldu, lapack_complex_float v, @ByVal lapack_int ldv,
                                lapack_complex_float cwork, @ByVal lapack_int lwork,
                                FloatPointer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_cgejsv_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp,
                                @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_float a,
                                @ByVal lapack_int lda, FloatBuffer sva, lapack_complex_float u,
                                @ByVal lapack_int ldu, lapack_complex_float v, @ByVal lapack_int ldv,
                                lapack_complex_float cwork, @ByVal lapack_int lwork,
                                FloatBuffer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_cgejsv_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp,
                                @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_float a,
                                @ByVal lapack_int lda, float[] sva, lapack_complex_float u,
                                @ByVal lapack_int ldu, lapack_complex_float v, @ByVal lapack_int ldv,
                                lapack_complex_float cwork, @ByVal lapack_int lwork,
                                float[] rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_cgelq2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_cgelq2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float tau,
                                lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_cgelqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_cgelqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float tau,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cgels( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                          @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          lapack_complex_float a, @ByVal lapack_int lda,
                          lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cgels_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                               @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               lapack_complex_float a, @ByVal lapack_int lda,
                               lapack_complex_float b, @ByVal lapack_int ldb,
                               lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cgelsd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float b,
                           @ByVal lapack_int ldb, FloatPointer s, float rcond,
                           lapack_int rank );
public static native @ByVal lapack_int LAPACKE_cgelsd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float b,
                           @ByVal lapack_int ldb, FloatBuffer s, float rcond,
                           lapack_int rank );
public static native @ByVal lapack_int LAPACKE_cgelsd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float b,
                           @ByVal lapack_int ldb, float[] s, float rcond,
                           lapack_int rank );

public static native @ByVal lapack_int LAPACKE_cgelsd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float b,
                                @ByVal lapack_int ldb, FloatPointer s, float rcond,
                                lapack_int rank, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatPointer rwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_cgelsd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float b,
                                @ByVal lapack_int ldb, FloatBuffer s, float rcond,
                                lapack_int rank, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatBuffer rwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_cgelsd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float b,
                                @ByVal lapack_int ldb, float[] s, float rcond,
                                lapack_int rank, lapack_complex_float work,
                                @ByVal lapack_int lwork, float[] rwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_cgelss( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float b,
                           @ByVal lapack_int ldb, FloatPointer s, float rcond,
                           lapack_int rank );
public static native @ByVal lapack_int LAPACKE_cgelss( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float b,
                           @ByVal lapack_int ldb, FloatBuffer s, float rcond,
                           lapack_int rank );
public static native @ByVal lapack_int LAPACKE_cgelss( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float b,
                           @ByVal lapack_int ldb, float[] s, float rcond,
                           lapack_int rank );

public static native @ByVal lapack_int LAPACKE_cgelss_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float b,
                                @ByVal lapack_int ldb, FloatPointer s, float rcond,
                                lapack_int rank, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cgelss_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float b,
                                @ByVal lapack_int ldb, FloatBuffer s, float rcond,
                                lapack_int rank, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cgelss_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float b,
                                @ByVal lapack_int ldb, float[] s, float rcond,
                                lapack_int rank, lapack_complex_float work,
                                @ByVal lapack_int lwork, float[] rwork );

public static native @ByVal lapack_int LAPACKE_cgelsy( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float b,
                           @ByVal lapack_int ldb, lapack_int jpvt, float rcond,
                           lapack_int rank );

public static native @ByVal lapack_int LAPACKE_cgelsy_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_int jpvt, float rcond,
                                lapack_int rank, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cgelsy_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_int jpvt, float rcond,
                                lapack_int rank, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cgelsy_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_int jpvt, float rcond,
                                lapack_int rank, lapack_complex_float work,
                                @ByVal lapack_int lwork, float[] rwork );

public static native @ByVal lapack_int LAPACKE_cgemqrt( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                            @ByVal lapack_int nb, @Const lapack_complex_float v,
                            @ByVal lapack_int ldv, @Const lapack_complex_float t,
                            @ByVal lapack_int ldt, lapack_complex_float c,
                            @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_cgemqrt_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                 @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                 @ByVal lapack_int nb, @Const lapack_complex_float v,
                                 @ByVal lapack_int ldv, @Const lapack_complex_float t,
                                 @ByVal lapack_int ldt, lapack_complex_float c,
                                 @ByVal lapack_int ldc, lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_cgeqlf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_cgeqlf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float tau,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cgeqp3( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_int jpvt, lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_cgeqp3_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int jpvt, lapack_complex_float tau,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cgeqp3_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int jpvt, lapack_complex_float tau,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cgeqp3_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int jpvt, lapack_complex_float tau,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                float[] rwork );

public static native @ByVal lapack_int LAPACKE_cgeqpf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_int jpvt, lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_cgeqpf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int jpvt, lapack_complex_float tau,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cgeqpf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int jpvt, lapack_complex_float tau,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cgeqpf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int jpvt, lapack_complex_float tau,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_cgeqr2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_cgeqr2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float tau,
                                lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_cgeqrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_cgeqrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float tau,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cgeqrfp( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_cgeqrfp_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 lapack_complex_float a, @ByVal lapack_int lda,
                                 lapack_complex_float tau,
                                 lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cgeqrt( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nb, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float t,
                           @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_cgeqrt2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_cgeqrt2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 lapack_complex_float a, @ByVal lapack_int lda,
                                 lapack_complex_float t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_cgeqrt3( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_cgeqrt3_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 lapack_complex_float a, @ByVal lapack_int lda,
                                 lapack_complex_float t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_cgeqrt_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nb, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float t,
                                @ByVal lapack_int ldt, lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_cgerfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_complex_float af,
                           @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, FloatPointer ferr,
                           FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_cgerfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_complex_float af,
                           @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, FloatBuffer ferr,
                           FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_cgerfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_complex_float af,
                           @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, float[] ferr,
                           float[] berr );

public static native @ByVal lapack_int LAPACKE_cgerfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_complex_float af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatPointer ferr, FloatPointer berr,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cgerfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_complex_float af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatBuffer ferr, FloatBuffer berr,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cgerfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_complex_float af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                float[] ferr, float[] berr,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_cgerfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            @Const lapack_complex_float af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const FloatPointer r,
                            @Const FloatPointer c, @Const lapack_complex_float b,
                            @ByVal lapack_int ldb, lapack_complex_float x,
                            @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer berr,
                            @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                            FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatPointer params );
public static native @ByVal lapack_int LAPACKE_cgerfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            @Const lapack_complex_float af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const FloatBuffer r,
                            @Const FloatBuffer c, @Const lapack_complex_float b,
                            @ByVal lapack_int ldb, lapack_complex_float x,
                            @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer berr,
                            @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                            FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatBuffer params );
public static native @ByVal lapack_int LAPACKE_cgerfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            @Const lapack_complex_float af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const float[] r,
                            @Const float[] c, @Const lapack_complex_float b,
                            @ByVal lapack_int ldb, lapack_complex_float x,
                            @ByVal lapack_int ldx, float[] rcond, float[] berr,
                            @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                            float[] err_bnds_comp, @ByVal lapack_int nparams,
                            float[] params );

public static native @ByVal lapack_int LAPACKE_cgerfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 @Const lapack_complex_float af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const FloatPointer r, @Const FloatPointer c,
                                 @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float x, @ByVal lapack_int ldx,
                                 FloatPointer rcond, FloatPointer berr,
                                 @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                                 FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatPointer params, lapack_complex_float work,
                                 FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cgerfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 @Const lapack_complex_float af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const FloatBuffer r, @Const FloatBuffer c,
                                 @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float x, @ByVal lapack_int ldx,
                                 FloatBuffer rcond, FloatBuffer berr,
                                 @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                                 FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatBuffer params, lapack_complex_float work,
                                 FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cgerfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 @Const lapack_complex_float af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const float[] r, @Const float[] c,
                                 @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float x, @ByVal lapack_int ldx,
                                 float[] rcond, float[] berr,
                                 @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                                 float[] err_bnds_comp, @ByVal lapack_int nparams,
                                 float[] params, lapack_complex_float work,
                                 float[] rwork );

public static native @ByVal lapack_int LAPACKE_cgerqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_cgerqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float tau,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cgesdd( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                           @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, FloatPointer s, lapack_complex_float u,
                           @ByVal lapack_int ldu, lapack_complex_float vt,
                           @ByVal lapack_int ldvt );
public static native @ByVal lapack_int LAPACKE_cgesdd( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                           @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, FloatBuffer s, lapack_complex_float u,
                           @ByVal lapack_int ldu, lapack_complex_float vt,
                           @ByVal lapack_int ldvt );
public static native @ByVal lapack_int LAPACKE_cgesdd( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                           @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, float[] s, lapack_complex_float u,
                           @ByVal lapack_int ldu, lapack_complex_float vt,
                           @ByVal lapack_int ldvt );

public static native @ByVal lapack_int LAPACKE_cgesdd_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                                @ByVal lapack_int n, lapack_complex_float a,
                                @ByVal lapack_int lda, FloatPointer s,
                                lapack_complex_float u, @ByVal lapack_int ldu,
                                lapack_complex_float vt, @ByVal lapack_int ldvt,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatPointer rwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_cgesdd_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                                @ByVal lapack_int n, lapack_complex_float a,
                                @ByVal lapack_int lda, FloatBuffer s,
                                lapack_complex_float u, @ByVal lapack_int ldu,
                                lapack_complex_float vt, @ByVal lapack_int ldvt,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatBuffer rwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_cgesdd_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                                @ByVal lapack_int n, lapack_complex_float a,
                                @ByVal lapack_int lda, float[] s,
                                lapack_complex_float u, @ByVal lapack_int ldu,
                                lapack_complex_float vt, @ByVal lapack_int ldvt,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                float[] rwork, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_cgesv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          lapack_complex_float a, @ByVal lapack_int lda,
                          lapack_int ipiv, lapack_complex_float b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cgesv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               lapack_complex_float a, @ByVal lapack_int lda,
                               lapack_int ipiv, lapack_complex_float b,
                               @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cgesvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                           @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, FloatPointer s, lapack_complex_float u,
                           @ByVal lapack_int ldu, lapack_complex_float vt,
                           @ByVal lapack_int ldvt, FloatPointer superb );
public static native @ByVal lapack_int LAPACKE_cgesvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                           @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, FloatBuffer s, lapack_complex_float u,
                           @ByVal lapack_int ldu, lapack_complex_float vt,
                           @ByVal lapack_int ldvt, FloatBuffer superb );
public static native @ByVal lapack_int LAPACKE_cgesvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                           @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, float[] s, lapack_complex_float u,
                           @ByVal lapack_int ldu, lapack_complex_float vt,
                           @ByVal lapack_int ldvt, float[] superb );

public static native @ByVal lapack_int LAPACKE_cgesvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                                @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                FloatPointer s, lapack_complex_float u,
                                @ByVal lapack_int ldu, lapack_complex_float vt,
                                @ByVal lapack_int ldvt, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cgesvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                                @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                FloatBuffer s, lapack_complex_float u,
                                @ByVal lapack_int ldu, lapack_complex_float vt,
                                @ByVal lapack_int ldvt, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cgesvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                                @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                float[] s, lapack_complex_float u,
                                @ByVal lapack_int ldu, lapack_complex_float vt,
                                @ByVal lapack_int ldvt, lapack_complex_float work,
                                @ByVal lapack_int lwork, float[] rwork );

public static native @ByVal lapack_int LAPACKE_cgesvdx( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                           @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                           FloatPointer s, lapack_complex_float u, @ByVal lapack_int ldu,
                           lapack_complex_float vt, @ByVal lapack_int ldvt,
                           lapack_int superb );
public static native @ByVal lapack_int LAPACKE_cgesvdx( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                           @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                           FloatBuffer s, lapack_complex_float u, @ByVal lapack_int ldu,
                           lapack_complex_float vt, @ByVal lapack_int ldvt,
                           lapack_int superb );
public static native @ByVal lapack_int LAPACKE_cgesvdx( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                           @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                           float[] s, lapack_complex_float u, @ByVal lapack_int ldu,
                           lapack_complex_float vt, @ByVal lapack_int ldvt,
                           lapack_int superb );

public static native @ByVal lapack_int LAPACKE_cgesvdx_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                              @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_float a,
                              @ByVal lapack_int lda, float vl, float vu,
                              @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                              FloatPointer s, lapack_complex_float u, @ByVal lapack_int ldu,
                              lapack_complex_float vt, @ByVal lapack_int ldvt,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatPointer rwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_cgesvdx_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                              @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_float a,
                              @ByVal lapack_int lda, float vl, float vu,
                              @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                              FloatBuffer s, lapack_complex_float u, @ByVal lapack_int ldu,
                              lapack_complex_float vt, @ByVal lapack_int ldvt,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatBuffer rwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_cgesvdx_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                              @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_float a,
                              @ByVal lapack_int lda, float vl, float vu,
                              @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                              float[] s, lapack_complex_float u, @ByVal lapack_int ldu,
                              lapack_complex_float vt, @ByVal lapack_int ldvt,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                float[] rwork, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_cgesvj( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           FloatPointer sva, @ByVal lapack_int mv,
                           lapack_complex_float v, @ByVal lapack_int ldv, FloatPointer stat );
public static native @ByVal lapack_int LAPACKE_cgesvj( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           FloatBuffer sva, @ByVal lapack_int mv,
                           lapack_complex_float v, @ByVal lapack_int ldv, FloatBuffer stat );
public static native @ByVal lapack_int LAPACKE_cgesvj( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           float[] sva, @ByVal lapack_int mv,
                           lapack_complex_float v, @ByVal lapack_int ldv, float[] stat );

public static native @ByVal lapack_int LAPACKE_cgesvj_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                FloatPointer sva, @ByVal lapack_int mv,
                                lapack_complex_float v, @ByVal lapack_int ldv,
                                lapack_complex_float cwork, @ByVal lapack_int lwork,
                                FloatPointer rwork, @ByVal lapack_int lrwork );
public static native @ByVal lapack_int LAPACKE_cgesvj_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                FloatBuffer sva, @ByVal lapack_int mv,
                                lapack_complex_float v, @ByVal lapack_int ldv,
                                lapack_complex_float cwork, @ByVal lapack_int lwork,
                                FloatBuffer rwork, @ByVal lapack_int lrwork );
public static native @ByVal lapack_int LAPACKE_cgesvj_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                float[] sva, @ByVal lapack_int mv,
                                lapack_complex_float v, @ByVal lapack_int ldv,
                                lapack_complex_float cwork, @ByVal lapack_int lwork,
                                float[] rwork, @ByVal lapack_int lrwork );

public static native @ByVal lapack_int LAPACKE_cgesvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float af, @ByVal lapack_int ldaf,
                           lapack_int ipiv, @Cast("char*") BytePointer equed, FloatPointer r, FloatPointer c,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatPointer rcond, FloatPointer ferr, FloatPointer berr,
                           FloatPointer rpivot );
public static native @ByVal lapack_int LAPACKE_cgesvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float af, @ByVal lapack_int ldaf,
                           lapack_int ipiv, @Cast("char*") ByteBuffer equed, FloatBuffer r, FloatBuffer c,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr,
                           FloatBuffer rpivot );
public static native @ByVal lapack_int LAPACKE_cgesvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float af, @ByVal lapack_int ldaf,
                           lapack_int ipiv, @Cast("char*") byte[] equed, float[] r, float[] c,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           float[] rcond, float[] ferr, float[] berr,
                           float[] rpivot );

public static native @ByVal lapack_int LAPACKE_cgesvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Cast("char*") BytePointer equed, FloatPointer r,
                                FloatPointer c, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer ferr,
                                FloatPointer berr, lapack_complex_float work,
                                FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cgesvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Cast("char*") ByteBuffer equed, FloatBuffer r,
                                FloatBuffer c, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer ferr,
                                FloatBuffer berr, lapack_complex_float work,
                                FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cgesvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Cast("char*") byte[] equed, float[] r,
                                float[] c, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, float[] rcond, float[] ferr,
                                float[] berr, lapack_complex_float work,
                                float[] rwork );

public static native @ByVal lapack_int LAPACKE_cgesvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") BytePointer equed, FloatPointer r, FloatPointer c,
                            lapack_complex_float b, @ByVal lapack_int ldb,
                            lapack_complex_float x, @ByVal lapack_int ldx,
                            FloatPointer rcond, FloatPointer rpvgrw, FloatPointer berr,
                            @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                            FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatPointer params );
public static native @ByVal lapack_int LAPACKE_cgesvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") ByteBuffer equed, FloatBuffer r, FloatBuffer c,
                            lapack_complex_float b, @ByVal lapack_int ldb,
                            lapack_complex_float x, @ByVal lapack_int ldx,
                            FloatBuffer rcond, FloatBuffer rpvgrw, FloatBuffer berr,
                            @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                            FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatBuffer params );
public static native @ByVal lapack_int LAPACKE_cgesvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") byte[] equed, float[] r, float[] c,
                            lapack_complex_float b, @ByVal lapack_int ldb,
                            lapack_complex_float x, @ByVal lapack_int ldx,
                            float[] rcond, float[] rpvgrw, float[] berr,
                            @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                            float[] err_bnds_comp, @ByVal lapack_int nparams,
                            float[] params );

public static native @ByVal lapack_int LAPACKE_cgesvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_float a, @ByVal lapack_int lda,
                                 lapack_complex_float af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") BytePointer equed, FloatPointer r,
                                 FloatPointer c, lapack_complex_float b,
                                 @ByVal lapack_int ldb, lapack_complex_float x,
                                 @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer rpvgrw,
                                 FloatPointer berr, @ByVal lapack_int n_err_bnds,
                                 FloatPointer err_bnds_norm, FloatPointer err_bnds_comp,
                                 @ByVal lapack_int nparams, FloatPointer params,
                                 lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cgesvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_float a, @ByVal lapack_int lda,
                                 lapack_complex_float af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") ByteBuffer equed, FloatBuffer r,
                                 FloatBuffer c, lapack_complex_float b,
                                 @ByVal lapack_int ldb, lapack_complex_float x,
                                 @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer rpvgrw,
                                 FloatBuffer berr, @ByVal lapack_int n_err_bnds,
                                 FloatBuffer err_bnds_norm, FloatBuffer err_bnds_comp,
                                 @ByVal lapack_int nparams, FloatBuffer params,
                                 lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cgesvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_float a, @ByVal lapack_int lda,
                                 lapack_complex_float af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") byte[] equed, float[] r,
                                 float[] c, lapack_complex_float b,
                                 @ByVal lapack_int ldb, lapack_complex_float x,
                                 @ByVal lapack_int ldx, float[] rcond, float[] rpvgrw,
                                 float[] berr, @ByVal lapack_int n_err_bnds,
                                 float[] err_bnds_norm, float[] err_bnds_comp,
                                 @ByVal lapack_int nparams, float[] params,
                                 lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_cgetf2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_cgetf2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_cgetrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_cgetrf2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_cgetrf2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_cgetrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_cgetri( int matrix_layout, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_cgetri_work( int matrix_layout, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cgetrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv,
                           lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cgetrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cggbak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const FloatPointer lscale,
                           @Const FloatPointer rscale, @ByVal lapack_int m,
                           lapack_complex_float v, @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_cggbak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const FloatBuffer lscale,
                           @Const FloatBuffer rscale, @ByVal lapack_int m,
                           lapack_complex_float v, @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_cggbak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const float[] lscale,
                           @Const float[] rscale, @ByVal lapack_int m,
                           lapack_complex_float v, @ByVal lapack_int ldv );

public static native @ByVal lapack_int LAPACKE_cggbak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const FloatPointer lscale, @Const FloatPointer rscale,
                                @ByVal lapack_int m, lapack_complex_float v,
                                @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_cggbak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const FloatBuffer lscale, @Const FloatBuffer rscale,
                                @ByVal lapack_int m, lapack_complex_float v,
                                @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_cggbak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const float[] lscale, @Const float[] rscale,
                                @ByVal lapack_int m, lapack_complex_float v,
                                @ByVal lapack_int ldv );

public static native @ByVal lapack_int LAPACKE_cggbal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_int ilo, lapack_int ihi, FloatPointer lscale,
                           FloatPointer rscale );
public static native @ByVal lapack_int LAPACKE_cggbal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_int ilo, lapack_int ihi, FloatBuffer lscale,
                           FloatBuffer rscale );
public static native @ByVal lapack_int LAPACKE_cggbal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_int ilo, lapack_int ihi, float[] lscale,
                           float[] rscale );

public static native @ByVal lapack_int LAPACKE_cggbal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_int ilo, lapack_int ihi, FloatPointer lscale,
                                FloatPointer rscale, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_cggbal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_int ilo, lapack_int ihi, FloatBuffer lscale,
                                FloatBuffer rscale, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_cggbal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_int ilo, lapack_int ihi, float[] lscale,
                                float[] rscale, float[] work );

public static native @ByVal lapack_int LAPACKE_cgges( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr, @Cast("char") byte sort,
                          LAPACK_C_SELECT2 selctg, @ByVal lapack_int n,
                          lapack_complex_float a, @ByVal lapack_int lda,
                          lapack_complex_float b, @ByVal lapack_int ldb,
                          lapack_int sdim, lapack_complex_float alpha,
                          lapack_complex_float beta, lapack_complex_float vsl,
                          @ByVal lapack_int ldvsl, lapack_complex_float vsr,
                          @ByVal lapack_int ldvsr );

public static native @ByVal lapack_int LAPACKE_cgges3( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr, @Cast("char") byte sort,
                           LAPACK_C_SELECT2 selctg, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_int sdim, lapack_complex_float alpha,
                           lapack_complex_float beta, lapack_complex_float vsl,
                           @ByVal lapack_int ldvsl, lapack_complex_float vsr,
                           @ByVal lapack_int ldvsr );

public static native @ByVal lapack_int LAPACKE_cgges3_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                               @Cast("char") byte sort, LAPACK_C_SELECT2 selctg, @ByVal lapack_int n,
                               lapack_complex_float a, @ByVal lapack_int lda,
                               lapack_complex_float b, @ByVal lapack_int ldb,
                               lapack_int sdim, lapack_complex_float alpha,
                               lapack_complex_float beta,
                               lapack_complex_float vsl, @ByVal lapack_int ldvsl,
                               lapack_complex_float vsr, @ByVal lapack_int ldvsr,
                               lapack_complex_float work, @ByVal lapack_int lwork,
                               FloatPointer rwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_cgges3_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                               @Cast("char") byte sort, LAPACK_C_SELECT2 selctg, @ByVal lapack_int n,
                               lapack_complex_float a, @ByVal lapack_int lda,
                               lapack_complex_float b, @ByVal lapack_int ldb,
                               lapack_int sdim, lapack_complex_float alpha,
                               lapack_complex_float beta,
                               lapack_complex_float vsl, @ByVal lapack_int ldvsl,
                               lapack_complex_float vsr, @ByVal lapack_int ldvsr,
                               lapack_complex_float work, @ByVal lapack_int lwork,
                               FloatBuffer rwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_cgges3_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                               @Cast("char") byte sort, LAPACK_C_SELECT2 selctg, @ByVal lapack_int n,
                               lapack_complex_float a, @ByVal lapack_int lda,
                               lapack_complex_float b, @ByVal lapack_int ldb,
                               lapack_int sdim, lapack_complex_float alpha,
                               lapack_complex_float beta,
                               lapack_complex_float vsl, @ByVal lapack_int ldvsl,
                               lapack_complex_float vsr, @ByVal lapack_int ldvsr,
                               lapack_complex_float work, @ByVal lapack_int lwork,
                               float[] rwork, lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_cgges_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                               @Cast("char") byte sort, LAPACK_C_SELECT2 selctg, @ByVal lapack_int n,
                               lapack_complex_float a, @ByVal lapack_int lda,
                               lapack_complex_float b, @ByVal lapack_int ldb,
                               lapack_int sdim, lapack_complex_float alpha,
                               lapack_complex_float beta,
                               lapack_complex_float vsl, @ByVal lapack_int ldvsl,
                               lapack_complex_float vsr, @ByVal lapack_int ldvsr,
                               lapack_complex_float work, @ByVal lapack_int lwork,
                               FloatPointer rwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_cgges_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                               @Cast("char") byte sort, LAPACK_C_SELECT2 selctg, @ByVal lapack_int n,
                               lapack_complex_float a, @ByVal lapack_int lda,
                               lapack_complex_float b, @ByVal lapack_int ldb,
                               lapack_int sdim, lapack_complex_float alpha,
                               lapack_complex_float beta,
                               lapack_complex_float vsl, @ByVal lapack_int ldvsl,
                               lapack_complex_float vsr, @ByVal lapack_int ldvsr,
                               lapack_complex_float work, @ByVal lapack_int lwork,
                               FloatBuffer rwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_cgges_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                               @Cast("char") byte sort, LAPACK_C_SELECT2 selctg, @ByVal lapack_int n,
                               lapack_complex_float a, @ByVal lapack_int lda,
                               lapack_complex_float b, @ByVal lapack_int ldb,
                               lapack_int sdim, lapack_complex_float alpha,
                               lapack_complex_float beta,
                               lapack_complex_float vsl, @ByVal lapack_int ldvsl,
                               lapack_complex_float vsr, @ByVal lapack_int ldvsr,
                               lapack_complex_float work, @ByVal lapack_int lwork,
                               float[] rwork, lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_cggesx( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                           @Cast("char") byte sort, LAPACK_C_SELECT2 selctg, @Cast("char") byte sense,
                           @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float b,
                           @ByVal lapack_int ldb, lapack_int sdim,
                           lapack_complex_float alpha,
                           lapack_complex_float beta,
                           lapack_complex_float vsl, @ByVal lapack_int ldvsl,
                           lapack_complex_float vsr, @ByVal lapack_int ldvsr,
                           FloatPointer rconde, FloatPointer rcondv );
public static native @ByVal lapack_int LAPACKE_cggesx( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                           @Cast("char") byte sort, LAPACK_C_SELECT2 selctg, @Cast("char") byte sense,
                           @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float b,
                           @ByVal lapack_int ldb, lapack_int sdim,
                           lapack_complex_float alpha,
                           lapack_complex_float beta,
                           lapack_complex_float vsl, @ByVal lapack_int ldvsl,
                           lapack_complex_float vsr, @ByVal lapack_int ldvsr,
                           FloatBuffer rconde, FloatBuffer rcondv );
public static native @ByVal lapack_int LAPACKE_cggesx( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                           @Cast("char") byte sort, LAPACK_C_SELECT2 selctg, @Cast("char") byte sense,
                           @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float b,
                           @ByVal lapack_int ldb, lapack_int sdim,
                           lapack_complex_float alpha,
                           lapack_complex_float beta,
                           lapack_complex_float vsl, @ByVal lapack_int ldvsl,
                           lapack_complex_float vsr, @ByVal lapack_int ldvsr,
                           float[] rconde, float[] rcondv );

public static native @ByVal lapack_int LAPACKE_cggesx_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                                @Cast("char") byte sort, LAPACK_C_SELECT2 selctg, @Cast("char") byte sense,
                                @ByVal lapack_int n, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_int sdim,
                                lapack_complex_float alpha,
                                lapack_complex_float beta,
                                lapack_complex_float vsl, @ByVal lapack_int ldvsl,
                                lapack_complex_float vsr, @ByVal lapack_int ldvsr,
                                FloatPointer rconde, FloatPointer rcondv,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatPointer rwork, lapack_int iwork,
                                @ByVal lapack_int liwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_cggesx_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                                @Cast("char") byte sort, LAPACK_C_SELECT2 selctg, @Cast("char") byte sense,
                                @ByVal lapack_int n, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_int sdim,
                                lapack_complex_float alpha,
                                lapack_complex_float beta,
                                lapack_complex_float vsl, @ByVal lapack_int ldvsl,
                                lapack_complex_float vsr, @ByVal lapack_int ldvsr,
                                FloatBuffer rconde, FloatBuffer rcondv,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatBuffer rwork, lapack_int iwork,
                                @ByVal lapack_int liwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_cggesx_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                                @Cast("char") byte sort, LAPACK_C_SELECT2 selctg, @Cast("char") byte sense,
                                @ByVal lapack_int n, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_int sdim,
                                lapack_complex_float alpha,
                                lapack_complex_float beta,
                                lapack_complex_float vsl, @ByVal lapack_int ldvsl,
                                lapack_complex_float vsr, @ByVal lapack_int ldvsr,
                                float[] rconde, float[] rcondv,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                float[] rwork, lapack_int iwork,
                                @ByVal lapack_int liwork, lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_cggev( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                          @ByVal lapack_int n, lapack_complex_float a, @ByVal lapack_int lda,
                          lapack_complex_float b, @ByVal lapack_int ldb,
                          lapack_complex_float alpha,
                          lapack_complex_float beta, lapack_complex_float vl,
                          @ByVal lapack_int ldvl, lapack_complex_float vr,
                          @ByVal lapack_int ldvr );

public static native @ByVal lapack_int LAPACKE_cggev3( int matrix_layout,
                           @Cast("char") byte jobvl, @Cast("char") byte jobvr, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float alpha,
                           lapack_complex_float beta,
                           lapack_complex_float vl, @ByVal lapack_int ldvl,
                           lapack_complex_float vr, @ByVal lapack_int ldvr );

public static native @ByVal lapack_int LAPACKE_cggev3_work( int matrix_layout,
                                @Cast("char") byte jobvl, @Cast("char") byte jobvr, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float alpha,
                                lapack_complex_float beta,
                                lapack_complex_float vl, @ByVal lapack_int ldvl,
                                lapack_complex_float vr, @ByVal lapack_int ldvr,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cggev3_work( int matrix_layout,
                                @Cast("char") byte jobvl, @Cast("char") byte jobvr, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float alpha,
                                lapack_complex_float beta,
                                lapack_complex_float vl, @ByVal lapack_int ldvl,
                                lapack_complex_float vr, @ByVal lapack_int ldvr,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cggev3_work( int matrix_layout,
                                @Cast("char") byte jobvl, @Cast("char") byte jobvr, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float alpha,
                                lapack_complex_float beta,
                                lapack_complex_float vl, @ByVal lapack_int ldvl,
                                lapack_complex_float vr, @ByVal lapack_int ldvr,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                float[] rwork );

public static native @ByVal lapack_int LAPACKE_cggev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, lapack_complex_float a,
                               @ByVal lapack_int lda, lapack_complex_float b,
                               @ByVal lapack_int ldb, lapack_complex_float alpha,
                               lapack_complex_float beta,
                               lapack_complex_float vl, @ByVal lapack_int ldvl,
                               lapack_complex_float vr, @ByVal lapack_int ldvr,
                               lapack_complex_float work, @ByVal lapack_int lwork,
                               FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cggev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, lapack_complex_float a,
                               @ByVal lapack_int lda, lapack_complex_float b,
                               @ByVal lapack_int ldb, lapack_complex_float alpha,
                               lapack_complex_float beta,
                               lapack_complex_float vl, @ByVal lapack_int ldvl,
                               lapack_complex_float vr, @ByVal lapack_int ldvr,
                               lapack_complex_float work, @ByVal lapack_int lwork,
                               FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cggev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, lapack_complex_float a,
                               @ByVal lapack_int lda, lapack_complex_float b,
                               @ByVal lapack_int ldb, lapack_complex_float alpha,
                               lapack_complex_float beta,
                               lapack_complex_float vl, @ByVal lapack_int ldvl,
                               lapack_complex_float vr, @ByVal lapack_int ldvr,
                               lapack_complex_float work, @ByVal lapack_int lwork,
                               float[] rwork );

public static native @ByVal lapack_int LAPACKE_cggevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float alpha,
                           lapack_complex_float beta, lapack_complex_float vl,
                           @ByVal lapack_int ldvl, lapack_complex_float vr,
                           @ByVal lapack_int ldvr, lapack_int ilo, lapack_int ihi,
                           FloatPointer lscale, FloatPointer rscale, FloatPointer abnrm,
                           FloatPointer bbnrm, FloatPointer rconde, FloatPointer rcondv );
public static native @ByVal lapack_int LAPACKE_cggevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float alpha,
                           lapack_complex_float beta, lapack_complex_float vl,
                           @ByVal lapack_int ldvl, lapack_complex_float vr,
                           @ByVal lapack_int ldvr, lapack_int ilo, lapack_int ihi,
                           FloatBuffer lscale, FloatBuffer rscale, FloatBuffer abnrm,
                           FloatBuffer bbnrm, FloatBuffer rconde, FloatBuffer rcondv );
public static native @ByVal lapack_int LAPACKE_cggevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float alpha,
                           lapack_complex_float beta, lapack_complex_float vl,
                           @ByVal lapack_int ldvl, lapack_complex_float vr,
                           @ByVal lapack_int ldvr, lapack_int ilo, lapack_int ihi,
                           float[] lscale, float[] rscale, float[] abnrm,
                           float[] bbnrm, float[] rconde, float[] rcondv );

public static native @ByVal lapack_int LAPACKE_cggevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float alpha,
                                lapack_complex_float beta,
                                lapack_complex_float vl, @ByVal lapack_int ldvl,
                                lapack_complex_float vr, @ByVal lapack_int ldvr,
                                lapack_int ilo, lapack_int ihi, FloatPointer lscale,
                                FloatPointer rscale, FloatPointer abnrm, FloatPointer bbnrm,
                                FloatPointer rconde, FloatPointer rcondv,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatPointer rwork, lapack_int iwork,
                                lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_cggevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float alpha,
                                lapack_complex_float beta,
                                lapack_complex_float vl, @ByVal lapack_int ldvl,
                                lapack_complex_float vr, @ByVal lapack_int ldvr,
                                lapack_int ilo, lapack_int ihi, FloatBuffer lscale,
                                FloatBuffer rscale, FloatBuffer abnrm, FloatBuffer bbnrm,
                                FloatBuffer rconde, FloatBuffer rcondv,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatBuffer rwork, lapack_int iwork,
                                lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_cggevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float alpha,
                                lapack_complex_float beta,
                                lapack_complex_float vl, @ByVal lapack_int ldvl,
                                lapack_complex_float vr, @ByVal lapack_int ldvr,
                                lapack_int ilo, lapack_int ihi, float[] lscale,
                                float[] rscale, float[] abnrm, float[] bbnrm,
                                float[] rconde, float[] rcondv,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                float[] rwork, lapack_int iwork,
                                lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_cggglm( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                           @ByVal lapack_int p, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float b,
                           @ByVal lapack_int ldb, lapack_complex_float d,
                           lapack_complex_float x, lapack_complex_float y );

public static native @ByVal lapack_int LAPACKE_cggglm_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                                @ByVal lapack_int p, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float d,
                                lapack_complex_float x,
                                lapack_complex_float y,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cgghd3( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float q, @ByVal lapack_int ldq,
                           lapack_complex_float z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_cgghd3_work( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cgghrd( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float q, @ByVal lapack_int ldq,
                           lapack_complex_float z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_cgghrd_work( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_complex_float z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_cgglse( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int p, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float b,
                           @ByVal lapack_int ldb, lapack_complex_float c,
                           lapack_complex_float d, lapack_complex_float x );

public static native @ByVal lapack_int LAPACKE_cgglse_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int p, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float c,
                                lapack_complex_float d,
                                lapack_complex_float x,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cggqrf( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                           @ByVal lapack_int p, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float taua,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float taub );

public static native @ByVal lapack_int LAPACKE_cggqrf_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                                @ByVal lapack_int p, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float taua,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float taub,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cggrqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int p,
                           @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float taua,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float taub );

public static native @ByVal lapack_int LAPACKE_cggrqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float taua,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float taub,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cggsvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                           lapack_int k, lapack_int l,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           FloatPointer alpha, FloatPointer beta, lapack_complex_float u,
                           @ByVal lapack_int ldu, lapack_complex_float v,
                           @ByVal lapack_int ldv, lapack_complex_float q,
                           @ByVal lapack_int ldq, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_cggsvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                           lapack_int k, lapack_int l,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           FloatBuffer alpha, FloatBuffer beta, lapack_complex_float u,
                           @ByVal lapack_int ldu, lapack_complex_float v,
                           @ByVal lapack_int ldv, lapack_complex_float q,
                           @ByVal lapack_int ldq, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_cggsvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                           lapack_int k, lapack_int l,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           float[] alpha, float[] beta, lapack_complex_float u,
                           @ByVal lapack_int ldu, lapack_complex_float v,
                           @ByVal lapack_int ldv, lapack_complex_float q,
                           @ByVal lapack_int ldq, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_cggsvd3( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                            lapack_int k, lapack_int l,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float b, @ByVal lapack_int ldb,
                            FloatPointer alpha, FloatPointer beta, lapack_complex_float u,
                            @ByVal lapack_int ldu, lapack_complex_float v,
                            @ByVal lapack_int ldv, lapack_complex_float q,
                            @ByVal lapack_int ldq, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_cggsvd3( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                            lapack_int k, lapack_int l,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float b, @ByVal lapack_int ldb,
                            FloatBuffer alpha, FloatBuffer beta, lapack_complex_float u,
                            @ByVal lapack_int ldu, lapack_complex_float v,
                            @ByVal lapack_int ldv, lapack_complex_float q,
                            @ByVal lapack_int ldq, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_cggsvd3( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                            lapack_int k, lapack_int l,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float b, @ByVal lapack_int ldb,
                            float[] alpha, float[] beta, lapack_complex_float u,
                            @ByVal lapack_int ldu, lapack_complex_float v,
                            @ByVal lapack_int ldv, lapack_complex_float q,
                            @ByVal lapack_int ldq, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_cggsvd3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                  @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                  @ByVal lapack_int p, lapack_int k, lapack_int l,
                                  lapack_complex_float a, @ByVal lapack_int lda,
                                  lapack_complex_float b, @ByVal lapack_int ldb,
                                  FloatPointer alpha, FloatPointer beta,
                                  lapack_complex_float u, @ByVal lapack_int ldu,
                                  lapack_complex_float v, @ByVal lapack_int ldv,
                                  lapack_complex_float q, @ByVal lapack_int ldq,
                                  lapack_complex_float work, @ByVal lapack_int lwork,
                                  FloatPointer rwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_cggsvd3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                  @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                  @ByVal lapack_int p, lapack_int k, lapack_int l,
                                  lapack_complex_float a, @ByVal lapack_int lda,
                                  lapack_complex_float b, @ByVal lapack_int ldb,
                                  FloatBuffer alpha, FloatBuffer beta,
                                  lapack_complex_float u, @ByVal lapack_int ldu,
                                  lapack_complex_float v, @ByVal lapack_int ldv,
                                  lapack_complex_float q, @ByVal lapack_int ldq,
                                  lapack_complex_float work, @ByVal lapack_int lwork,
                                  FloatBuffer rwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_cggsvd3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                  @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                  @ByVal lapack_int p, lapack_int k, lapack_int l,
                                  lapack_complex_float a, @ByVal lapack_int lda,
                                  lapack_complex_float b, @ByVal lapack_int ldb,
                                  float[] alpha, float[] beta,
                                  lapack_complex_float u, @ByVal lapack_int ldu,
                                  lapack_complex_float v, @ByVal lapack_int ldv,
                                  lapack_complex_float q, @ByVal lapack_int ldq,
                                  lapack_complex_float work, @ByVal lapack_int lwork,
                                  float[] rwork, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_cggsvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int p, lapack_int k, lapack_int l,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                FloatPointer alpha, FloatPointer beta,
                                lapack_complex_float u, @ByVal lapack_int ldu,
                                lapack_complex_float v, @ByVal lapack_int ldv,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_complex_float work, FloatPointer rwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_cggsvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int p, lapack_int k, lapack_int l,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                FloatBuffer alpha, FloatBuffer beta,
                                lapack_complex_float u, @ByVal lapack_int ldu,
                                lapack_complex_float v, @ByVal lapack_int ldv,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_complex_float work, FloatBuffer rwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_cggsvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int p, lapack_int k, lapack_int l,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                float[] alpha, float[] beta,
                                lapack_complex_float u, @ByVal lapack_int ldu,
                                lapack_complex_float v, @ByVal lapack_int ldv,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_complex_float work, float[] rwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_cggsvp( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb, float tola,
                           float tolb, lapack_int k, lapack_int l,
                           lapack_complex_float u, @ByVal lapack_int ldu,
                           lapack_complex_float v, @ByVal lapack_int ldv,
                           lapack_complex_float q, @ByVal lapack_int ldq );

public static native @ByVal lapack_int LAPACKE_cggsvp3( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                            @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float b, @ByVal lapack_int ldb, float tola,
                            float tolb, lapack_int k, lapack_int l,
                            lapack_complex_float u, @ByVal lapack_int ldu,
                            lapack_complex_float v, @ByVal lapack_int ldv,
                            lapack_complex_float q, @ByVal lapack_int ldq );

public static native @ByVal lapack_int LAPACKE_cggsvp3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                 @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                 @ByVal lapack_int n, lapack_complex_float a,
                                 @ByVal lapack_int lda, lapack_complex_float b,
                                 @ByVal lapack_int ldb, float tola, float tolb,
                                 lapack_int k, lapack_int l,
                                 lapack_complex_float u, @ByVal lapack_int ldu,
                                 lapack_complex_float v, @ByVal lapack_int ldv,
                                 lapack_complex_float q, @ByVal lapack_int ldq,
                                 lapack_int iwork, FloatPointer rwork,
                                 lapack_complex_float tau,
                                 lapack_complex_float work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_cggsvp3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                 @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                 @ByVal lapack_int n, lapack_complex_float a,
                                 @ByVal lapack_int lda, lapack_complex_float b,
                                 @ByVal lapack_int ldb, float tola, float tolb,
                                 lapack_int k, lapack_int l,
                                 lapack_complex_float u, @ByVal lapack_int ldu,
                                 lapack_complex_float v, @ByVal lapack_int ldv,
                                 lapack_complex_float q, @ByVal lapack_int ldq,
                                 lapack_int iwork, FloatBuffer rwork,
                                 lapack_complex_float tau,
                                 lapack_complex_float work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_cggsvp3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                 @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                 @ByVal lapack_int n, lapack_complex_float a,
                                 @ByVal lapack_int lda, lapack_complex_float b,
                                 @ByVal lapack_int ldb, float tola, float tolb,
                                 lapack_int k, lapack_int l,
                                 lapack_complex_float u, @ByVal lapack_int ldu,
                                 lapack_complex_float v, @ByVal lapack_int ldv,
                                 lapack_complex_float q, @ByVal lapack_int ldq,
                                 lapack_int iwork, float[] rwork,
                                 lapack_complex_float tau,
                                 lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cggsvp_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float b,
                                @ByVal lapack_int ldb, float tola, float tolb,
                                lapack_int k, lapack_int l,
                                lapack_complex_float u, @ByVal lapack_int ldu,
                                lapack_complex_float v, @ByVal lapack_int ldv,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_int iwork, FloatPointer rwork,
                                lapack_complex_float tau,
                                lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_cggsvp_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float b,
                                @ByVal lapack_int ldb, float tola, float tolb,
                                lapack_int k, lapack_int l,
                                lapack_complex_float u, @ByVal lapack_int ldu,
                                lapack_complex_float v, @ByVal lapack_int ldv,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_int iwork, FloatBuffer rwork,
                                lapack_complex_float tau,
                                lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_cggsvp_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float b,
                                @ByVal lapack_int ldb, float tola, float tolb,
                                lapack_int k, lapack_int l,
                                lapack_complex_float u, @ByVal lapack_int ldu,
                                lapack_complex_float v, @ByVal lapack_int ldv,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_int iwork, float[] rwork,
                                lapack_complex_float tau,
                                lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_cgtcon( @Cast("char") byte norm, @ByVal lapack_int n,
                           @Const lapack_complex_float dl,
                           @Const lapack_complex_float d,
                           @Const lapack_complex_float du,
                           @Const lapack_complex_float du2,
                           @Const lapack_int ipiv, float anorm, FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_cgtcon( @Cast("char") byte norm, @ByVal lapack_int n,
                           @Const lapack_complex_float dl,
                           @Const lapack_complex_float d,
                           @Const lapack_complex_float du,
                           @Const lapack_complex_float du2,
                           @Const lapack_int ipiv, float anorm, FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_cgtcon( @Cast("char") byte norm, @ByVal lapack_int n,
                           @Const lapack_complex_float dl,
                           @Const lapack_complex_float d,
                           @Const lapack_complex_float du,
                           @Const lapack_complex_float du2,
                           @Const lapack_int ipiv, float anorm, float[] rcond );

public static native @ByVal lapack_int LAPACKE_cgtcon_work( @Cast("char") byte norm, @ByVal lapack_int n,
                                @Const lapack_complex_float dl,
                                @Const lapack_complex_float d,
                                @Const lapack_complex_float du,
                                @Const lapack_complex_float du2,
                                @Const lapack_int ipiv, float anorm,
                                FloatPointer rcond, lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_cgtcon_work( @Cast("char") byte norm, @ByVal lapack_int n,
                                @Const lapack_complex_float dl,
                                @Const lapack_complex_float d,
                                @Const lapack_complex_float du,
                                @Const lapack_complex_float du2,
                                @Const lapack_int ipiv, float anorm,
                                FloatBuffer rcond, lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_cgtcon_work( @Cast("char") byte norm, @ByVal lapack_int n,
                                @Const lapack_complex_float dl,
                                @Const lapack_complex_float d,
                                @Const lapack_complex_float du,
                                @Const lapack_complex_float du2,
                                @Const lapack_int ipiv, float anorm,
                                float[] rcond, lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_cgtrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float dl,
                           @Const lapack_complex_float d,
                           @Const lapack_complex_float du,
                           @Const lapack_complex_float dlf,
                           @Const lapack_complex_float df,
                           @Const lapack_complex_float duf,
                           @Const lapack_complex_float du2,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, FloatPointer ferr,
                           FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_cgtrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float dl,
                           @Const lapack_complex_float d,
                           @Const lapack_complex_float du,
                           @Const lapack_complex_float dlf,
                           @Const lapack_complex_float df,
                           @Const lapack_complex_float duf,
                           @Const lapack_complex_float du2,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, FloatBuffer ferr,
                           FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_cgtrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float dl,
                           @Const lapack_complex_float d,
                           @Const lapack_complex_float du,
                           @Const lapack_complex_float dlf,
                           @Const lapack_complex_float df,
                           @Const lapack_complex_float duf,
                           @Const lapack_complex_float du2,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, float[] ferr,
                           float[] berr );

public static native @ByVal lapack_int LAPACKE_cgtrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float dl,
                                @Const lapack_complex_float d,
                                @Const lapack_complex_float du,
                                @Const lapack_complex_float dlf,
                                @Const lapack_complex_float df,
                                @Const lapack_complex_float duf,
                                @Const lapack_complex_float du2,
                                @Const lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatPointer ferr, FloatPointer berr,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cgtrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float dl,
                                @Const lapack_complex_float d,
                                @Const lapack_complex_float du,
                                @Const lapack_complex_float dlf,
                                @Const lapack_complex_float df,
                                @Const lapack_complex_float duf,
                                @Const lapack_complex_float du2,
                                @Const lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatBuffer ferr, FloatBuffer berr,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cgtrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float dl,
                                @Const lapack_complex_float d,
                                @Const lapack_complex_float du,
                                @Const lapack_complex_float dlf,
                                @Const lapack_complex_float df,
                                @Const lapack_complex_float duf,
                                @Const lapack_complex_float du2,
                                @Const lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                float[] ferr, float[] berr,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_cgtsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          lapack_complex_float dl, lapack_complex_float d,
                          lapack_complex_float du, lapack_complex_float b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cgtsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               lapack_complex_float dl,
                               lapack_complex_float d,
                               lapack_complex_float du,
                               lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cgtsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float dl,
                           @Const lapack_complex_float d,
                           @Const lapack_complex_float du,
                           lapack_complex_float dlf, lapack_complex_float df,
                           lapack_complex_float duf, lapack_complex_float du2,
                           lapack_int ipiv, @Const lapack_complex_float b,
                           @ByVal lapack_int ldb, lapack_complex_float x,
                           @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer ferr,
                           FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_cgtsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float dl,
                           @Const lapack_complex_float d,
                           @Const lapack_complex_float du,
                           lapack_complex_float dlf, lapack_complex_float df,
                           lapack_complex_float duf, lapack_complex_float du2,
                           lapack_int ipiv, @Const lapack_complex_float b,
                           @ByVal lapack_int ldb, lapack_complex_float x,
                           @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer ferr,
                           FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_cgtsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float dl,
                           @Const lapack_complex_float d,
                           @Const lapack_complex_float du,
                           lapack_complex_float dlf, lapack_complex_float df,
                           lapack_complex_float duf, lapack_complex_float du2,
                           lapack_int ipiv, @Const lapack_complex_float b,
                           @ByVal lapack_int ldb, lapack_complex_float x,
                           @ByVal lapack_int ldx, float[] rcond, float[] ferr,
                           float[] berr );

public static native @ByVal lapack_int LAPACKE_cgtsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float dl,
                                @Const lapack_complex_float d,
                                @Const lapack_complex_float du,
                                lapack_complex_float dlf,
                                lapack_complex_float df,
                                lapack_complex_float duf,
                                lapack_complex_float du2, lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatPointer rcond, FloatPointer ferr, FloatPointer berr,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cgtsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float dl,
                                @Const lapack_complex_float d,
                                @Const lapack_complex_float du,
                                lapack_complex_float dlf,
                                lapack_complex_float df,
                                lapack_complex_float duf,
                                lapack_complex_float du2, lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cgtsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float dl,
                                @Const lapack_complex_float d,
                                @Const lapack_complex_float du,
                                lapack_complex_float dlf,
                                lapack_complex_float df,
                                lapack_complex_float duf,
                                lapack_complex_float du2, lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                float[] rcond, float[] ferr, float[] berr,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_cgttrf( @ByVal lapack_int n, lapack_complex_float dl,
                           lapack_complex_float d, lapack_complex_float du,
                           lapack_complex_float du2, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_cgttrf_work( @ByVal lapack_int n, lapack_complex_float dl,
                                lapack_complex_float d,
                                lapack_complex_float du,
                                lapack_complex_float du2, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_cgttrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float dl,
                           @Const lapack_complex_float d,
                           @Const lapack_complex_float du,
                           @Const lapack_complex_float du2,
                           @Const lapack_int ipiv, lapack_complex_float b,
                           @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cgttrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float dl,
                                @Const lapack_complex_float d,
                                @Const lapack_complex_float du,
                                @Const lapack_complex_float du2,
                                @Const lapack_int ipiv, lapack_complex_float b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_chbev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int kd, lapack_complex_float ab,
                          @ByVal lapack_int ldab, FloatPointer w, lapack_complex_float z,
                          @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_chbev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int kd, lapack_complex_float ab,
                          @ByVal lapack_int ldab, FloatBuffer w, lapack_complex_float z,
                          @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_chbev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int kd, lapack_complex_float ab,
                          @ByVal lapack_int ldab, float[] w, lapack_complex_float z,
                          @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_chbev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int kd,
                               lapack_complex_float ab, @ByVal lapack_int ldab,
                               FloatPointer w, lapack_complex_float z,
                               @ByVal lapack_int ldz, lapack_complex_float work,
                               FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_chbev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int kd,
                               lapack_complex_float ab, @ByVal lapack_int ldab,
                               FloatBuffer w, lapack_complex_float z,
                               @ByVal lapack_int ldz, lapack_complex_float work,
                               FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_chbev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int kd,
                               lapack_complex_float ab, @ByVal lapack_int ldab,
                               float[] w, lapack_complex_float z,
                               @ByVal lapack_int ldz, lapack_complex_float work,
                               float[] rwork );

public static native @ByVal lapack_int LAPACKE_chbevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, lapack_complex_float ab,
                           @ByVal lapack_int ldab, FloatPointer w, lapack_complex_float z,
                           @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_chbevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, lapack_complex_float ab,
                           @ByVal lapack_int ldab, FloatBuffer w, lapack_complex_float z,
                           @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_chbevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, lapack_complex_float ab,
                           @ByVal lapack_int ldab, float[] w, lapack_complex_float z,
                           @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_chbevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd,
                                lapack_complex_float ab, @ByVal lapack_int ldab,
                                FloatPointer w, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatPointer rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_chbevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd,
                                lapack_complex_float ab, @ByVal lapack_int ldab,
                                FloatBuffer w, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatBuffer rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_chbevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd,
                                lapack_complex_float ab, @ByVal lapack_int ldab,
                                float[] w, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_complex_float work,
                                @ByVal lapack_int lwork, float[] rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_chbevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int kd,
                           lapack_complex_float ab, @ByVal lapack_int ldab,
                           lapack_complex_float q, @ByVal lapack_int ldq, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatPointer w, lapack_complex_float z,
                           @ByVal lapack_int ldz, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_chbevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int kd,
                           lapack_complex_float ab, @ByVal lapack_int ldab,
                           lapack_complex_float q, @ByVal lapack_int ldq, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatBuffer w, lapack_complex_float z,
                           @ByVal lapack_int ldz, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_chbevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int kd,
                           lapack_complex_float ab, @ByVal lapack_int ldab,
                           lapack_complex_float q, @ByVal lapack_int ldq, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, float[] w, lapack_complex_float z,
                           @ByVal lapack_int ldz, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_chbevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int kd,
                                lapack_complex_float ab, @ByVal lapack_int ldab,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                float vl, float vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, float abstol, lapack_int m,
                                FloatPointer w, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_complex_float work,
                                FloatPointer rwork, lapack_int iwork,
                                lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_chbevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int kd,
                                lapack_complex_float ab, @ByVal lapack_int ldab,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                float vl, float vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, float abstol, lapack_int m,
                                FloatBuffer w, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_complex_float work,
                                FloatBuffer rwork, lapack_int iwork,
                                lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_chbevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int kd,
                                lapack_complex_float ab, @ByVal lapack_int ldab,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                float vl, float vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, float abstol, lapack_int m,
                                float[] w, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_complex_float work,
                                float[] rwork, lapack_int iwork,
                                lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_chbgst( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ka, @ByVal lapack_int kb,
                           lapack_complex_float ab, @ByVal lapack_int ldab,
                           @Const lapack_complex_float bb, @ByVal lapack_int ldbb,
                           lapack_complex_float x, @ByVal lapack_int ldx );

public static native @ByVal lapack_int LAPACKE_chbgst_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                lapack_complex_float ab, @ByVal lapack_int ldab,
                                @Const lapack_complex_float bb, @ByVal lapack_int ldbb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_chbgst_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                lapack_complex_float ab, @ByVal lapack_int ldab,
                                @Const lapack_complex_float bb, @ByVal lapack_int ldbb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_chbgst_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                lapack_complex_float ab, @ByVal lapack_int ldab,
                                @Const lapack_complex_float bb, @ByVal lapack_int ldbb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_chbgv( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int ka, @ByVal lapack_int kb,
                          lapack_complex_float ab, @ByVal lapack_int ldab,
                          lapack_complex_float bb, @ByVal lapack_int ldbb, FloatPointer w,
                          lapack_complex_float z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_chbgv( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int ka, @ByVal lapack_int kb,
                          lapack_complex_float ab, @ByVal lapack_int ldab,
                          lapack_complex_float bb, @ByVal lapack_int ldbb, FloatBuffer w,
                          lapack_complex_float z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_chbgv( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int ka, @ByVal lapack_int kb,
                          lapack_complex_float ab, @ByVal lapack_int ldab,
                          lapack_complex_float bb, @ByVal lapack_int ldbb, float[] w,
                          lapack_complex_float z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_chbgv_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                               lapack_complex_float ab, @ByVal lapack_int ldab,
                               lapack_complex_float bb, @ByVal lapack_int ldbb,
                               FloatPointer w, lapack_complex_float z,
                               @ByVal lapack_int ldz, lapack_complex_float work,
                               FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_chbgv_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                               lapack_complex_float ab, @ByVal lapack_int ldab,
                               lapack_complex_float bb, @ByVal lapack_int ldbb,
                               FloatBuffer w, lapack_complex_float z,
                               @ByVal lapack_int ldz, lapack_complex_float work,
                               FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_chbgv_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                               lapack_complex_float ab, @ByVal lapack_int ldab,
                               lapack_complex_float bb, @ByVal lapack_int ldbb,
                               float[] w, lapack_complex_float z,
                               @ByVal lapack_int ldz, lapack_complex_float work,
                               float[] rwork );

public static native @ByVal lapack_int LAPACKE_chbgvd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ka, @ByVal lapack_int kb,
                           lapack_complex_float ab, @ByVal lapack_int ldab,
                           lapack_complex_float bb, @ByVal lapack_int ldbb, FloatPointer w,
                           lapack_complex_float z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_chbgvd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ka, @ByVal lapack_int kb,
                           lapack_complex_float ab, @ByVal lapack_int ldab,
                           lapack_complex_float bb, @ByVal lapack_int ldbb, FloatBuffer w,
                           lapack_complex_float z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_chbgvd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ka, @ByVal lapack_int kb,
                           lapack_complex_float ab, @ByVal lapack_int ldab,
                           lapack_complex_float bb, @ByVal lapack_int ldbb, float[] w,
                           lapack_complex_float z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_chbgvd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                lapack_complex_float ab, @ByVal lapack_int ldab,
                                lapack_complex_float bb, @ByVal lapack_int ldbb,
                                FloatPointer w, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatPointer rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_chbgvd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                lapack_complex_float ab, @ByVal lapack_int ldab,
                                lapack_complex_float bb, @ByVal lapack_int ldbb,
                                FloatBuffer w, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatBuffer rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_chbgvd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                lapack_complex_float ab, @ByVal lapack_int ldab,
                                lapack_complex_float bb, @ByVal lapack_int ldbb,
                                float[] w, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_complex_float work,
                                @ByVal lapack_int lwork, float[] rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_chbgvx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                           lapack_complex_float ab, @ByVal lapack_int ldab,
                           lapack_complex_float bb, @ByVal lapack_int ldbb,
                           lapack_complex_float q, @ByVal lapack_int ldq, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatPointer w, lapack_complex_float z,
                           @ByVal lapack_int ldz, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_chbgvx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                           lapack_complex_float ab, @ByVal lapack_int ldab,
                           lapack_complex_float bb, @ByVal lapack_int ldbb,
                           lapack_complex_float q, @ByVal lapack_int ldq, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatBuffer w, lapack_complex_float z,
                           @ByVal lapack_int ldz, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_chbgvx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                           lapack_complex_float ab, @ByVal lapack_int ldab,
                           lapack_complex_float bb, @ByVal lapack_int ldbb,
                           lapack_complex_float q, @ByVal lapack_int ldq, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, float[] w, lapack_complex_float z,
                           @ByVal lapack_int ldz, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_chbgvx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int ka,
                                @ByVal lapack_int kb, lapack_complex_float ab,
                                @ByVal lapack_int ldab, lapack_complex_float bb,
                                @ByVal lapack_int ldbb, lapack_complex_float q,
                                @ByVal lapack_int ldq, float vl, float vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                                lapack_int m, FloatPointer w,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_complex_float work, FloatPointer rwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_chbgvx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int ka,
                                @ByVal lapack_int kb, lapack_complex_float ab,
                                @ByVal lapack_int ldab, lapack_complex_float bb,
                                @ByVal lapack_int ldbb, lapack_complex_float q,
                                @ByVal lapack_int ldq, float vl, float vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                                lapack_int m, FloatBuffer w,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_complex_float work, FloatBuffer rwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_chbgvx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int ka,
                                @ByVal lapack_int kb, lapack_complex_float ab,
                                @ByVal lapack_int ldab, lapack_complex_float bb,
                                @ByVal lapack_int ldbb, lapack_complex_float q,
                                @ByVal lapack_int ldq, float vl, float vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                                lapack_int m, float[] w,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_complex_float work, float[] rwork,
                                lapack_int iwork, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_chbtrd( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, lapack_complex_float ab,
                           @ByVal lapack_int ldab, FloatPointer d, FloatPointer e,
                           lapack_complex_float q, @ByVal lapack_int ldq );
public static native @ByVal lapack_int LAPACKE_chbtrd( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, lapack_complex_float ab,
                           @ByVal lapack_int ldab, FloatBuffer d, FloatBuffer e,
                           lapack_complex_float q, @ByVal lapack_int ldq );
public static native @ByVal lapack_int LAPACKE_chbtrd( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, lapack_complex_float ab,
                           @ByVal lapack_int ldab, float[] d, float[] e,
                           lapack_complex_float q, @ByVal lapack_int ldq );

public static native @ByVal lapack_int LAPACKE_chbtrd_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd,
                                lapack_complex_float ab, @ByVal lapack_int ldab,
                                FloatPointer d, FloatPointer e, lapack_complex_float q,
                                @ByVal lapack_int ldq, lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_chbtrd_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd,
                                lapack_complex_float ab, @ByVal lapack_int ldab,
                                FloatBuffer d, FloatBuffer e, lapack_complex_float q,
                                @ByVal lapack_int ldq, lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_chbtrd_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd,
                                lapack_complex_float ab, @ByVal lapack_int ldab,
                                float[] d, float[] e, lapack_complex_float q,
                                @ByVal lapack_int ldq, lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_checon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, float anorm, FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_checon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, float anorm, FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_checon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, float anorm, float[] rcond );

public static native @ByVal lapack_int LAPACKE_checon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, float anorm,
                                FloatPointer rcond, lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_checon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, float anorm,
                                FloatBuffer rcond, lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_checon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, float anorm,
                                float[] rcond, lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_cheequb( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            FloatPointer s, FloatPointer scond, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_cheequb( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            FloatBuffer s, FloatBuffer scond, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_cheequb( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            float[] s, float[] scond, float[] amax );

public static native @ByVal lapack_int LAPACKE_cheequb_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 FloatPointer s, FloatPointer scond, FloatPointer amax,
                                 lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_cheequb_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 FloatBuffer s, FloatBuffer scond, FloatBuffer amax,
                                 lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_cheequb_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 float[] s, float[] scond, float[] amax,
                                 lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_cheev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          lapack_complex_float a, @ByVal lapack_int lda, FloatPointer w );
public static native @ByVal lapack_int LAPACKE_cheev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          lapack_complex_float a, @ByVal lapack_int lda, FloatBuffer w );
public static native @ByVal lapack_int LAPACKE_cheev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          lapack_complex_float a, @ByVal lapack_int lda, float[] w );

public static native @ByVal lapack_int LAPACKE_cheev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, lapack_complex_float a,
                               @ByVal lapack_int lda, FloatPointer w,
                               lapack_complex_float work, @ByVal lapack_int lwork,
                               FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cheev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, lapack_complex_float a,
                               @ByVal lapack_int lda, FloatBuffer w,
                               lapack_complex_float work, @ByVal lapack_int lwork,
                               FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cheev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, lapack_complex_float a,
                               @ByVal lapack_int lda, float[] w,
                               lapack_complex_float work, @ByVal lapack_int lwork,
                               float[] rwork );

public static native @ByVal lapack_int LAPACKE_cheevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda, FloatPointer w );
public static native @ByVal lapack_int LAPACKE_cheevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda, FloatBuffer w );
public static native @ByVal lapack_int LAPACKE_cheevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda, float[] w );

public static native @ByVal lapack_int LAPACKE_cheevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, lapack_complex_float a,
                                @ByVal lapack_int lda, FloatPointer w,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatPointer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_cheevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, lapack_complex_float a,
                                @ByVal lapack_int lda, FloatBuffer w,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatBuffer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_cheevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, lapack_complex_float a,
                                @ByVal lapack_int lda, float[] w,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                float[] rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_cheevr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, float vl, float vu, @ByVal lapack_int il,
                           @ByVal lapack_int iu, float abstol, lapack_int m, FloatPointer w,
                           lapack_complex_float z, @ByVal lapack_int ldz,
                           lapack_int isuppz );
public static native @ByVal lapack_int LAPACKE_cheevr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, float vl, float vu, @ByVal lapack_int il,
                           @ByVal lapack_int iu, float abstol, lapack_int m, FloatBuffer w,
                           lapack_complex_float z, @ByVal lapack_int ldz,
                           lapack_int isuppz );
public static native @ByVal lapack_int LAPACKE_cheevr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, float vl, float vu, @ByVal lapack_int il,
                           @ByVal lapack_int iu, float abstol, lapack_int m, float[] w,
                           lapack_complex_float z, @ByVal lapack_int ldz,
                           lapack_int isuppz );

public static native @ByVal lapack_int LAPACKE_cheevr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                float vl, float vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, float abstol, lapack_int m,
                                FloatPointer w, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_int isuppz,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatPointer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_cheevr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                float vl, float vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, float abstol, lapack_int m,
                                FloatBuffer w, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_int isuppz,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatBuffer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_cheevr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                float vl, float vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, float abstol, lapack_int m,
                                float[] w, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_int isuppz,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                float[] rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_cheevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, float vl, float vu, @ByVal lapack_int il,
                           @ByVal lapack_int iu, float abstol, lapack_int m, FloatPointer w,
                           lapack_complex_float z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_cheevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, float vl, float vu, @ByVal lapack_int il,
                           @ByVal lapack_int iu, float abstol, lapack_int m, FloatBuffer w,
                           lapack_complex_float z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_cheevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, float vl, float vu, @ByVal lapack_int il,
                           @ByVal lapack_int iu, float abstol, lapack_int m, float[] w,
                           lapack_complex_float z, @ByVal lapack_int ldz,
                           lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_cheevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                float vl, float vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, float abstol, lapack_int m,
                                FloatPointer w, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatPointer rwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_cheevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                float vl, float vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, float abstol, lapack_int m,
                                FloatBuffer w, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatBuffer rwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_cheevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                float vl, float vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, float abstol, lapack_int m,
                                float[] w, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_complex_float work,
                                @ByVal lapack_int lwork, float[] rwork,
                                lapack_int iwork, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_chegst( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_complex_float b,
                           @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_chegst_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                                @ByVal lapack_int n, lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_complex_float b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_chegv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_float a,
                          @ByVal lapack_int lda, lapack_complex_float b,
                          @ByVal lapack_int ldb, FloatPointer w );
public static native @ByVal lapack_int LAPACKE_chegv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_float a,
                          @ByVal lapack_int lda, lapack_complex_float b,
                          @ByVal lapack_int ldb, FloatBuffer w );
public static native @ByVal lapack_int LAPACKE_chegv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_float a,
                          @ByVal lapack_int lda, lapack_complex_float b,
                          @ByVal lapack_int ldb, float[] w );

public static native @ByVal lapack_int LAPACKE_chegv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_float a,
                               @ByVal lapack_int lda, lapack_complex_float b,
                               @ByVal lapack_int ldb, FloatPointer w,
                               lapack_complex_float work, @ByVal lapack_int lwork,
                               FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_chegv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_float a,
                               @ByVal lapack_int lda, lapack_complex_float b,
                               @ByVal lapack_int ldb, FloatBuffer w,
                               lapack_complex_float work, @ByVal lapack_int lwork,
                               FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_chegv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_float a,
                               @ByVal lapack_int lda, lapack_complex_float b,
                               @ByVal lapack_int ldb, float[] w,
                               lapack_complex_float work, @ByVal lapack_int lwork,
                               float[] rwork );

public static native @ByVal lapack_int LAPACKE_chegvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float b,
                           @ByVal lapack_int ldb, FloatPointer w );
public static native @ByVal lapack_int LAPACKE_chegvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float b,
                           @ByVal lapack_int ldb, FloatBuffer w );
public static native @ByVal lapack_int LAPACKE_chegvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float b,
                           @ByVal lapack_int ldb, float[] w );

public static native @ByVal lapack_int LAPACKE_chegvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                FloatPointer w, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatPointer rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_chegvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                FloatBuffer w, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatBuffer rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_chegvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                float[] w, lapack_complex_float work,
                                @ByVal lapack_int lwork, float[] rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_chegvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatPointer w, lapack_complex_float z,
                           @ByVal lapack_int ldz, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_chegvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatBuffer w, lapack_complex_float z,
                           @ByVal lapack_int ldz, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_chegvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, float[] w, lapack_complex_float z,
                           @ByVal lapack_int ldz, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_chegvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                float vl, float vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, float abstol, lapack_int m,
                                FloatPointer w, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatPointer rwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_chegvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                float vl, float vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, float abstol, lapack_int m,
                                FloatBuffer w, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatBuffer rwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_chegvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                float vl, float vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, float abstol, lapack_int m,
                                float[] w, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_complex_float work,
                                @ByVal lapack_int lwork, float[] rwork,
                                lapack_int iwork, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_cherfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_complex_float af,
                           @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, FloatPointer ferr,
                           FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_cherfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_complex_float af,
                           @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, FloatBuffer ferr,
                           FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_cherfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_complex_float af,
                           @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, float[] ferr,
                           float[] berr );

public static native @ByVal lapack_int LAPACKE_cherfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_complex_float af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatPointer ferr, FloatPointer berr,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cherfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_complex_float af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatBuffer ferr, FloatBuffer berr,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cherfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_complex_float af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                float[] ferr, float[] berr,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_cherfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            @Const lapack_complex_float af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const FloatPointer s,
                            @Const lapack_complex_float b, @ByVal lapack_int ldb,
                            lapack_complex_float x, @ByVal lapack_int ldx,
                            FloatPointer rcond, FloatPointer berr, @ByVal lapack_int n_err_bnds,
                            FloatPointer err_bnds_norm, FloatPointer err_bnds_comp,
                            @ByVal lapack_int nparams, FloatPointer params );
public static native @ByVal lapack_int LAPACKE_cherfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            @Const lapack_complex_float af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const FloatBuffer s,
                            @Const lapack_complex_float b, @ByVal lapack_int ldb,
                            lapack_complex_float x, @ByVal lapack_int ldx,
                            FloatBuffer rcond, FloatBuffer berr, @ByVal lapack_int n_err_bnds,
                            FloatBuffer err_bnds_norm, FloatBuffer err_bnds_comp,
                            @ByVal lapack_int nparams, FloatBuffer params );
public static native @ByVal lapack_int LAPACKE_cherfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            @Const lapack_complex_float af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const float[] s,
                            @Const lapack_complex_float b, @ByVal lapack_int ldb,
                            lapack_complex_float x, @ByVal lapack_int ldx,
                            float[] rcond, float[] berr, @ByVal lapack_int n_err_bnds,
                            float[] err_bnds_norm, float[] err_bnds_comp,
                            @ByVal lapack_int nparams, float[] params );

public static native @ByVal lapack_int LAPACKE_cherfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 @Const lapack_complex_float af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const FloatPointer s, @Const lapack_complex_float b,
                                 @ByVal lapack_int ldb, lapack_complex_float x,
                                 @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer berr,
                                 @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                                 FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatPointer params, lapack_complex_float work,
                                 FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cherfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 @Const lapack_complex_float af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const FloatBuffer s, @Const lapack_complex_float b,
                                 @ByVal lapack_int ldb, lapack_complex_float x,
                                 @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer berr,
                                 @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                                 FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatBuffer params, lapack_complex_float work,
                                 FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cherfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 @Const lapack_complex_float af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const float[] s, @Const lapack_complex_float b,
                                 @ByVal lapack_int ldb, lapack_complex_float x,
                                 @ByVal lapack_int ldx, float[] rcond, float[] berr,
                                 @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                                 float[] err_bnds_comp, @ByVal lapack_int nparams,
                                 float[] params, lapack_complex_float work,
                                 float[] rwork );

public static native @ByVal lapack_int LAPACKE_chesv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, lapack_complex_float a,
                          @ByVal lapack_int lda, lapack_int ipiv,
                          lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_chesv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, lapack_complex_float a,
                               @ByVal lapack_int lda, lapack_int ipiv,
                               lapack_complex_float b, @ByVal lapack_int ldb,
                               lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_chesvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float af,
                           @ByVal lapack_int ldaf, lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatPointer rcond, FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_chesvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float af,
                           @ByVal lapack_int ldaf, lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_chesvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float af,
                           @ByVal lapack_int ldaf, lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           float[] rcond, float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_chesvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Const lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer ferr,
                                FloatPointer berr, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_chesvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Const lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer ferr,
                                FloatBuffer berr, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_chesvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Const lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, float[] rcond, float[] ferr,
                                float[] berr, lapack_complex_float work,
                                @ByVal lapack_int lwork, float[] rwork );

public static native @ByVal lapack_int LAPACKE_chesvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") BytePointer equed, FloatPointer s,
                            lapack_complex_float b, @ByVal lapack_int ldb,
                            lapack_complex_float x, @ByVal lapack_int ldx,
                            FloatPointer rcond, FloatPointer rpvgrw, FloatPointer berr,
                            @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                            FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatPointer params );
public static native @ByVal lapack_int LAPACKE_chesvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") ByteBuffer equed, FloatBuffer s,
                            lapack_complex_float b, @ByVal lapack_int ldb,
                            lapack_complex_float x, @ByVal lapack_int ldx,
                            FloatBuffer rcond, FloatBuffer rpvgrw, FloatBuffer berr,
                            @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                            FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatBuffer params );
public static native @ByVal lapack_int LAPACKE_chesvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") byte[] equed, float[] s,
                            lapack_complex_float b, @ByVal lapack_int ldb,
                            lapack_complex_float x, @ByVal lapack_int ldx,
                            float[] rcond, float[] rpvgrw, float[] berr,
                            @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                            float[] err_bnds_comp, @ByVal lapack_int nparams,
                            float[] params );

public static native @ByVal lapack_int LAPACKE_chesvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_float a, @ByVal lapack_int lda,
                                 lapack_complex_float af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") BytePointer equed, FloatPointer s,
                                 lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float x, @ByVal lapack_int ldx,
                                 FloatPointer rcond, FloatPointer rpvgrw, FloatPointer berr,
                                 @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                                 FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatPointer params, lapack_complex_float work,
                                 FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_chesvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_float a, @ByVal lapack_int lda,
                                 lapack_complex_float af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") ByteBuffer equed, FloatBuffer s,
                                 lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float x, @ByVal lapack_int ldx,
                                 FloatBuffer rcond, FloatBuffer rpvgrw, FloatBuffer berr,
                                 @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                                 FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatBuffer params, lapack_complex_float work,
                                 FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_chesvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_float a, @ByVal lapack_int lda,
                                 lapack_complex_float af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") byte[] equed, float[] s,
                                 lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float x, @ByVal lapack_int ldx,
                                 float[] rcond, float[] rpvgrw, float[] berr,
                                 @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                                 float[] err_bnds_comp, @ByVal lapack_int nparams,
                                 float[] params, lapack_complex_float work,
                                 float[] rwork );

public static native @ByVal lapack_int LAPACKE_cheswapr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             lapack_complex_float a, @ByVal lapack_int lda,
                             @ByVal lapack_int i1, @ByVal lapack_int i2 );

public static native @ByVal lapack_int LAPACKE_cheswapr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  lapack_complex_float a, @ByVal lapack_int lda,
                                  @ByVal lapack_int i1, @ByVal lapack_int i2 );

public static native @ByVal lapack_int LAPACKE_chetrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda, FloatPointer d,
                           FloatPointer e, lapack_complex_float tau );
public static native @ByVal lapack_int LAPACKE_chetrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda, FloatBuffer d,
                           FloatBuffer e, lapack_complex_float tau );
public static native @ByVal lapack_int LAPACKE_chetrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda, float[] d,
                           float[] e, lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_chetrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                FloatPointer d, FloatPointer e, lapack_complex_float tau,
                                lapack_complex_float work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_chetrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                FloatBuffer d, FloatBuffer e, lapack_complex_float tau,
                                lapack_complex_float work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_chetrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                float[] d, float[] e, lapack_complex_float tau,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_chetrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_chetrf_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_chetrf_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int ipiv, lapack_complex_float work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_chetrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int ipiv, lapack_complex_float work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_chetri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_chetri2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_chetri2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 lapack_complex_float a, @ByVal lapack_int lda,
                                 @Const lapack_int ipiv,
                                 lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_chetri2x( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             lapack_complex_float a, @ByVal lapack_int lda,
                             @Const lapack_int ipiv, @ByVal lapack_int nb );

public static native @ByVal lapack_int LAPACKE_chetri2x_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  lapack_complex_float a, @ByVal lapack_int lda,
                                  @Const lapack_int ipiv,
                                  lapack_complex_float work, @ByVal lapack_int nb );

public static native @ByVal lapack_int LAPACKE_chetri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv,
                                lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_chetrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv,
                           lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_chetrs2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                            @ByVal lapack_int lda, @Const lapack_int ipiv,
                            lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_chetrs2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                                 @ByVal lapack_int lda, @Const lapack_int ipiv,
                                 lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_chetrs_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv,
                           lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_chetrs_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_chetrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_chfrk( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo, @Cast("char") byte trans,
                          @ByVal lapack_int n, @ByVal lapack_int k, float alpha,
                          @Const lapack_complex_float a, @ByVal lapack_int lda,
                          float beta, lapack_complex_float c );

public static native @ByVal lapack_int LAPACKE_chfrk_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                               @Cast("char") byte trans, @ByVal lapack_int n, @ByVal lapack_int k,
                               float alpha, @Const lapack_complex_float a,
                               @ByVal lapack_int lda, float beta,
                               lapack_complex_float c );

public static native @ByVal lapack_int LAPACKE_chgeqz( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           lapack_complex_float h, @ByVal lapack_int ldh,
                           lapack_complex_float t, @ByVal lapack_int ldt,
                           lapack_complex_float alpha,
                           lapack_complex_float beta, lapack_complex_float q,
                           @ByVal lapack_int ldq, lapack_complex_float z,
                           @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_chgeqz_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Cast("char") byte compz, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, lapack_complex_float h,
                                @ByVal lapack_int ldh, lapack_complex_float t,
                                @ByVal lapack_int ldt, lapack_complex_float alpha,
                                lapack_complex_float beta,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_chgeqz_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Cast("char") byte compz, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, lapack_complex_float h,
                                @ByVal lapack_int ldh, lapack_complex_float t,
                                @ByVal lapack_int ldt, lapack_complex_float alpha,
                                lapack_complex_float beta,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_chgeqz_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Cast("char") byte compz, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, lapack_complex_float h,
                                @ByVal lapack_int ldh, lapack_complex_float t,
                                @ByVal lapack_int ldt, lapack_complex_float alpha,
                                lapack_complex_float beta,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                float[] rwork );

public static native @ByVal lapack_int LAPACKE_chpcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float ap,
                           @Const lapack_int ipiv, float anorm, FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_chpcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float ap,
                           @Const lapack_int ipiv, float anorm, FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_chpcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float ap,
                           @Const lapack_int ipiv, float anorm, float[] rcond );

public static native @ByVal lapack_int LAPACKE_chpcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float ap,
                                @Const lapack_int ipiv, float anorm,
                                FloatPointer rcond, lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_chpcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float ap,
                                @Const lapack_int ipiv, float anorm,
                                FloatBuffer rcond, lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_chpcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float ap,
                                @Const lapack_int ipiv, float anorm,
                                float[] rcond, lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_chpev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          lapack_complex_float ap, FloatPointer w,
                          lapack_complex_float z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_chpev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          lapack_complex_float ap, FloatBuffer w,
                          lapack_complex_float z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_chpev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          lapack_complex_float ap, float[] w,
                          lapack_complex_float z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_chpev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, lapack_complex_float ap, FloatPointer w,
                               lapack_complex_float z, @ByVal lapack_int ldz,
                               lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_chpev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, lapack_complex_float ap, FloatBuffer w,
                               lapack_complex_float z, @ByVal lapack_int ldz,
                               lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_chpev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, lapack_complex_float ap, float[] w,
                               lapack_complex_float z, @ByVal lapack_int ldz,
                               lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_chpevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float ap, FloatPointer w,
                           lapack_complex_float z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_chpevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float ap, FloatBuffer w,
                           lapack_complex_float z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_chpevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float ap, float[] w,
                           lapack_complex_float z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_chpevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, lapack_complex_float ap,
                                FloatPointer w, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatPointer rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_chpevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, lapack_complex_float ap,
                                FloatBuffer w, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatBuffer rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_chpevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, lapack_complex_float ap,
                                float[] w, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_complex_float work,
                                @ByVal lapack_int lwork, float[] rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_chpevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_float ap, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatPointer w, lapack_complex_float z,
                           @ByVal lapack_int ldz, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_chpevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_float ap, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatBuffer w, lapack_complex_float z,
                           @ByVal lapack_int ldz, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_chpevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_float ap, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, float[] w, lapack_complex_float z,
                           @ByVal lapack_int ldz, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_chpevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float ap, float vl, float vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                                lapack_int m, FloatPointer w,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_complex_float work, FloatPointer rwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_chpevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float ap, float vl, float vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                                lapack_int m, FloatBuffer w,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_complex_float work, FloatBuffer rwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_chpevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float ap, float vl, float vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                                lapack_int m, float[] w,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_complex_float work, float[] rwork,
                                lapack_int iwork, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_chpgst( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_float ap,
                           @Const lapack_complex_float bp );

public static native @ByVal lapack_int LAPACKE_chpgst_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                                @ByVal lapack_int n, lapack_complex_float ap,
                                @Const lapack_complex_float bp );

public static native @ByVal lapack_int LAPACKE_chpgv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_float ap,
                          lapack_complex_float bp, FloatPointer w,
                          lapack_complex_float z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_chpgv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_float ap,
                          lapack_complex_float bp, FloatBuffer w,
                          lapack_complex_float z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_chpgv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_float ap,
                          lapack_complex_float bp, float[] w,
                          lapack_complex_float z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_chpgv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n,
                               lapack_complex_float ap,
                               lapack_complex_float bp, FloatPointer w,
                               lapack_complex_float z, @ByVal lapack_int ldz,
                               lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_chpgv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n,
                               lapack_complex_float ap,
                               lapack_complex_float bp, FloatBuffer w,
                               lapack_complex_float z, @ByVal lapack_int ldz,
                               lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_chpgv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n,
                               lapack_complex_float ap,
                               lapack_complex_float bp, float[] w,
                               lapack_complex_float z, @ByVal lapack_int ldz,
                               lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_chpgvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_float ap,
                           lapack_complex_float bp, FloatPointer w,
                           lapack_complex_float z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_chpgvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_float ap,
                           lapack_complex_float bp, FloatBuffer w,
                           lapack_complex_float z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_chpgvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_float ap,
                           lapack_complex_float bp, float[] w,
                           lapack_complex_float z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_chpgvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float ap,
                                lapack_complex_float bp, FloatPointer w,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatPointer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_chpgvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float ap,
                                lapack_complex_float bp, FloatBuffer w,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatBuffer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_chpgvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float ap,
                                lapack_complex_float bp, float[] w,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                float[] rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_chpgvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float ap, lapack_complex_float bp,
                           float vl, float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           float abstol, lapack_int m, FloatPointer w,
                           lapack_complex_float z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_chpgvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float ap, lapack_complex_float bp,
                           float vl, float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           float abstol, lapack_int m, FloatBuffer w,
                           lapack_complex_float z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_chpgvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float ap, lapack_complex_float bp,
                           float vl, float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           float abstol, lapack_int m, float[] w,
                           lapack_complex_float z, @ByVal lapack_int ldz,
                           lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_chpgvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float ap,
                                lapack_complex_float bp, float vl, float vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                                lapack_int m, FloatPointer w,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_complex_float work, FloatPointer rwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_chpgvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float ap,
                                lapack_complex_float bp, float vl, float vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                                lapack_int m, FloatBuffer w,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_complex_float work, FloatBuffer rwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_chpgvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float ap,
                                lapack_complex_float bp, float vl, float vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                                lapack_int m, float[] w,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_complex_float work, float[] rwork,
                                lapack_int iwork, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_chprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                           @Const lapack_complex_float afp,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, FloatPointer ferr,
                           FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_chprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                           @Const lapack_complex_float afp,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, FloatBuffer ferr,
                           FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_chprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                           @Const lapack_complex_float afp,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, float[] ferr,
                           float[] berr );

public static native @ByVal lapack_int LAPACKE_chprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                                @Const lapack_complex_float afp,
                                @Const lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatPointer ferr, FloatPointer berr,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_chprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                                @Const lapack_complex_float afp,
                                @Const lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatBuffer ferr, FloatBuffer berr,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_chprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                                @Const lapack_complex_float afp,
                                @Const lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                float[] ferr, float[] berr,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_chpsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, lapack_complex_float ap,
                          lapack_int ipiv, lapack_complex_float b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_chpsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, lapack_complex_float ap,
                               lapack_int ipiv, lapack_complex_float b,
                               @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_chpsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                           lapack_complex_float afp, lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatPointer rcond, FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_chpsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                           lapack_complex_float afp, lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_chpsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                           lapack_complex_float afp, lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           float[] rcond, float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_chpsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float ap,
                                lapack_complex_float afp, lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatPointer rcond, FloatPointer ferr, FloatPointer berr,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_chpsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float ap,
                                lapack_complex_float afp, lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_chpsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float ap,
                                lapack_complex_float afp, lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                float[] rcond, float[] ferr, float[] berr,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_chptrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float ap, FloatPointer d, FloatPointer e,
                           lapack_complex_float tau );
public static native @ByVal lapack_int LAPACKE_chptrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float ap, FloatBuffer d, FloatBuffer e,
                           lapack_complex_float tau );
public static native @ByVal lapack_int LAPACKE_chptrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float ap, float[] d, float[] e,
                           lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_chptrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float ap, FloatPointer d, FloatPointer e,
                                lapack_complex_float tau );
public static native @ByVal lapack_int LAPACKE_chptrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float ap, FloatBuffer d, FloatBuffer e,
                                lapack_complex_float tau );
public static native @ByVal lapack_int LAPACKE_chptrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float ap, float[] d, float[] e,
                                lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_chptrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float ap, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_chptrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float ap, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_chptri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float ap, @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_chptri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float ap,
                                @Const lapack_int ipiv,
                                lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_chptrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                           @Const lapack_int ipiv, lapack_complex_float b,
                           @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_chptrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                                @Const lapack_int ipiv, lapack_complex_float b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_chsein( int matrix_layout, @Cast("char") byte job, @Cast("char") byte eigsrc, @Cast("char") byte initv,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const lapack_complex_float h, @ByVal lapack_int ldh,
                           lapack_complex_float w, lapack_complex_float vl,
                           @ByVal lapack_int ldvl, lapack_complex_float vr,
                           @ByVal lapack_int ldvr, @ByVal lapack_int mm, lapack_int m,
                           lapack_int ifaill, lapack_int ifailr );

public static native @ByVal lapack_int LAPACKE_chsein_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte eigsrc,
                                @Cast("char") byte initv, @Const lapack_logical select,
                                @ByVal lapack_int n, @Const lapack_complex_float h,
                                @ByVal lapack_int ldh, lapack_complex_float w,
                                lapack_complex_float vl, @ByVal lapack_int ldvl,
                                lapack_complex_float vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_float work, FloatPointer rwork,
                                lapack_int ifaill, lapack_int ifailr );
public static native @ByVal lapack_int LAPACKE_chsein_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte eigsrc,
                                @Cast("char") byte initv, @Const lapack_logical select,
                                @ByVal lapack_int n, @Const lapack_complex_float h,
                                @ByVal lapack_int ldh, lapack_complex_float w,
                                lapack_complex_float vl, @ByVal lapack_int ldvl,
                                lapack_complex_float vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_float work, FloatBuffer rwork,
                                lapack_int ifaill, lapack_int ifailr );
public static native @ByVal lapack_int LAPACKE_chsein_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte eigsrc,
                                @Cast("char") byte initv, @Const lapack_logical select,
                                @ByVal lapack_int n, @Const lapack_complex_float h,
                                @ByVal lapack_int ldh, lapack_complex_float w,
                                lapack_complex_float vl, @ByVal lapack_int ldvl,
                                lapack_complex_float vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_float work, float[] rwork,
                                lapack_int ifaill, lapack_int ifailr );

public static native @ByVal lapack_int LAPACKE_chseqr( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compz, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           lapack_complex_float h, @ByVal lapack_int ldh,
                           lapack_complex_float w, lapack_complex_float z,
                           @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_chseqr_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                lapack_complex_float h, @ByVal lapack_int ldh,
                                lapack_complex_float w,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_clacgv( @ByVal lapack_int n, lapack_complex_float x,
                           @ByVal lapack_int incx );

public static native @ByVal lapack_int LAPACKE_clacgv_work( @ByVal lapack_int n, lapack_complex_float x,
                                @ByVal lapack_int incx );

public static native @ByVal lapack_int LAPACKE_clacn2( @ByVal lapack_int n, lapack_complex_float v,
                           lapack_complex_float x,
                           FloatPointer est, lapack_int kase, lapack_int isave );
public static native @ByVal lapack_int LAPACKE_clacn2( @ByVal lapack_int n, lapack_complex_float v,
                           lapack_complex_float x,
                           FloatBuffer est, lapack_int kase, lapack_int isave );
public static native @ByVal lapack_int LAPACKE_clacn2( @ByVal lapack_int n, lapack_complex_float v,
                           lapack_complex_float x,
                           float[] est, lapack_int kase, lapack_int isave );

public static native @ByVal lapack_int LAPACKE_clacn2_work( @ByVal lapack_int n, lapack_complex_float v,
                                lapack_complex_float x,
                                FloatPointer est, lapack_int kase,
                                lapack_int isave );
public static native @ByVal lapack_int LAPACKE_clacn2_work( @ByVal lapack_int n, lapack_complex_float v,
                                lapack_complex_float x,
                                FloatBuffer est, lapack_int kase,
                                lapack_int isave );
public static native @ByVal lapack_int LAPACKE_clacn2_work( @ByVal lapack_int n, lapack_complex_float v,
                                lapack_complex_float x,
                                float[] est, lapack_int kase,
                                lapack_int isave );

public static native @ByVal lapack_int LAPACKE_clacp2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const FloatPointer a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_clacp2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const FloatBuffer a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_clacp2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const float[] a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_clacp2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const FloatPointer a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_clacp2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const FloatBuffer a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_clacp2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const float[] a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_clacpy( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float b,
                           @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_clacpy_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_clag2z( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_float sa, @ByVal lapack_int ldsa,
                           lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_clag2z_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_float sa, @ByVal lapack_int ldsa,
                                lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_clagge( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const FloatPointer d,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_int iseed );
public static native @ByVal lapack_int LAPACKE_clagge( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const FloatBuffer d,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_int iseed );
public static native @ByVal lapack_int LAPACKE_clagge( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const float[] d,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_int iseed );

public static native @ByVal lapack_int LAPACKE_clagge_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const FloatPointer d,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int iseed, lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_clagge_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const FloatBuffer d,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int iseed, lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_clagge_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const float[] d,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int iseed, lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_claghe( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const FloatPointer d, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_int iseed );
public static native @ByVal lapack_int LAPACKE_claghe( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const FloatBuffer d, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_int iseed );
public static native @ByVal lapack_int LAPACKE_claghe( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const float[] d, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_int iseed );

public static native @ByVal lapack_int LAPACKE_claghe_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const FloatPointer d, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_int iseed,
                                lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_claghe_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const FloatBuffer d, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_int iseed,
                                lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_claghe_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const float[] d, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_int iseed,
                                lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_clagsy( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const FloatPointer d, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_int iseed );
public static native @ByVal lapack_int LAPACKE_clagsy( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const FloatBuffer d, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_int iseed );
public static native @ByVal lapack_int LAPACKE_clagsy( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const float[] d, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_int iseed );

public static native @ByVal lapack_int LAPACKE_clagsy_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const FloatPointer d, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_int iseed,
                                lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_clagsy_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const FloatBuffer d, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_int iseed,
                                lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_clagsy_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const float[] d, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_int iseed,
                                lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_clapmr( int matrix_layout, @ByVal lapack_logical forwrd,
                           @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_float x,
                           @ByVal lapack_int ldx, lapack_int k );

public static native @ByVal lapack_int LAPACKE_clapmr_work( int matrix_layout, @ByVal lapack_logical forwrd,
                                @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                lapack_int k );

public static native @ByVal lapack_int LAPACKE_clapmt( int matrix_layout, @ByVal lapack_logical forwrd,
                           @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_float x,
                           @ByVal lapack_int ldx, lapack_int k );

public static native @ByVal lapack_int LAPACKE_clapmt_work( int matrix_layout, @ByVal lapack_logical forwrd,
                                @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                lapack_int k );

public static native @ByVal lapack_int LAPACKE_clarfb( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans, @Cast("char") byte direct,
                           @Cast("char") byte storev, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, @Const lapack_complex_float v,
                           @ByVal lapack_int ldv, @Const lapack_complex_float t,
                           @ByVal lapack_int ldt, lapack_complex_float c,
                           @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_clarfb_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @Cast("char") byte direct, @Cast("char") byte storev, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const lapack_complex_float v, @ByVal lapack_int ldv,
                                @Const lapack_complex_float t, @ByVal lapack_int ldt,
                                lapack_complex_float c, @ByVal lapack_int ldc,
                                lapack_complex_float work, @ByVal lapack_int ldwork );

public static native @ByVal lapack_int LAPACKE_clarfg( @ByVal lapack_int n, lapack_complex_float alpha,
                           lapack_complex_float x, @ByVal lapack_int incx,
                           lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_clarfg_work( @ByVal lapack_int n, lapack_complex_float alpha,
                                lapack_complex_float x, @ByVal lapack_int incx,
                                lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_clarft( int matrix_layout, @Cast("char") byte direct, @Cast("char") byte storev,
                           @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const lapack_complex_float v, @ByVal lapack_int ldv,
                           @Const lapack_complex_float tau,
                           lapack_complex_float t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_clarft_work( int matrix_layout, @Cast("char") byte direct, @Cast("char") byte storev,
                                @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const lapack_complex_float v, @ByVal lapack_int ldv,
                                @Const lapack_complex_float tau,
                                lapack_complex_float t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_clarfx( int matrix_layout, @Cast("char") byte side, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const lapack_complex_float v,
                           @ByVal lapack_complex_float tau, lapack_complex_float c,
                           @ByVal lapack_int ldc, lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_clarfx_work( int matrix_layout, @Cast("char") byte side, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const lapack_complex_float v,
                                @ByVal lapack_complex_float tau,
                                lapack_complex_float c, @ByVal lapack_int ldc,
                                lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_clarnv( @ByVal lapack_int idist, lapack_int iseed, @ByVal lapack_int n,
                           lapack_complex_float x );

public static native @ByVal lapack_int LAPACKE_clarnv_work( @ByVal lapack_int idist, lapack_int iseed,
                                @ByVal lapack_int n, lapack_complex_float x );

public static native @ByVal lapack_int LAPACKE_clascl( int matrix_layout, @Cast("char") byte type, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, float cfrom, float cto,
                           @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_clascl_work( int matrix_layout, @Cast("char") byte type, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, float cfrom, float cto,
                           @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_float a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_claset( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_complex_float alpha,
                           @ByVal lapack_complex_float beta, lapack_complex_float a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_claset_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_complex_float alpha,
                                @ByVal lapack_complex_float beta,
                                lapack_complex_float a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_claswp( int matrix_layout, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           @ByVal lapack_int k1, @ByVal lapack_int k2, @Const lapack_int ipiv,
                           @ByVal lapack_int incx );

public static native @ByVal lapack_int LAPACKE_claswp_work( int matrix_layout, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                @ByVal lapack_int k1, @ByVal lapack_int k2,
                                @Const lapack_int ipiv, @ByVal lapack_int incx );

public static native @ByVal lapack_int LAPACKE_clatms( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym, FloatPointer d,
                           @ByVal lapack_int mode, float cond, float dmax,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Cast("char") byte pack,
                           lapack_complex_float a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_clatms( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym, FloatBuffer d,
                           @ByVal lapack_int mode, float cond, float dmax,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Cast("char") byte pack,
                           lapack_complex_float a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_clatms( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym, float[] d,
                           @ByVal lapack_int mode, float cond, float dmax,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Cast("char") byte pack,
                           lapack_complex_float a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_clatms_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym,
                                FloatPointer d, @ByVal lapack_int mode, float cond,
                                float dmax, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Cast("char") byte pack, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_clatms_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym,
                                FloatBuffer d, @ByVal lapack_int mode, float cond,
                                float dmax, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Cast("char") byte pack, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_clatms_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym,
                                float[] d, @ByVal lapack_int mode, float cond,
                                float dmax, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Cast("char") byte pack, lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_clauum( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_clauum_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_cpbcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const lapack_complex_float ab,
                           @ByVal lapack_int ldab, float anorm, FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_cpbcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const lapack_complex_float ab,
                           @ByVal lapack_int ldab, float anorm, FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_cpbcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const lapack_complex_float ab,
                           @ByVal lapack_int ldab, float anorm, float[] rcond );

public static native @ByVal lapack_int LAPACKE_cpbcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const lapack_complex_float ab,
                                @ByVal lapack_int ldab, float anorm, FloatPointer rcond,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cpbcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const lapack_complex_float ab,
                                @ByVal lapack_int ldab, float anorm, FloatBuffer rcond,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cpbcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const lapack_complex_float ab,
                                @ByVal lapack_int ldab, float anorm, float[] rcond,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_cpbequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const lapack_complex_float ab,
                           @ByVal lapack_int ldab, FloatPointer s, FloatPointer scond,
                           FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_cpbequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const lapack_complex_float ab,
                           @ByVal lapack_int ldab, FloatBuffer s, FloatBuffer scond,
                           FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_cpbequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const lapack_complex_float ab,
                           @ByVal lapack_int ldab, float[] s, float[] scond,
                           float[] amax );

public static native @ByVal lapack_int LAPACKE_cpbequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const lapack_complex_float ab,
                                @ByVal lapack_int ldab, FloatPointer s, FloatPointer scond,
                                FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_cpbequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const lapack_complex_float ab,
                                @ByVal lapack_int ldab, FloatBuffer s, FloatBuffer scond,
                                FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_cpbequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const lapack_complex_float ab,
                                @ByVal lapack_int ldab, float[] s, float[] scond,
                                float[] amax );

public static native @ByVal lapack_int LAPACKE_cpbrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                           @Const lapack_complex_float afb, @ByVal lapack_int ldafb,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, FloatPointer ferr,
                           FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_cpbrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                           @Const lapack_complex_float afb, @ByVal lapack_int ldafb,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, FloatBuffer ferr,
                           FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_cpbrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                           @Const lapack_complex_float afb, @ByVal lapack_int ldafb,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, float[] ferr,
                           float[] berr );

public static native @ByVal lapack_int LAPACKE_cpbrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                                @Const lapack_complex_float afb,
                                @ByVal lapack_int ldafb, @Const lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, FloatPointer ferr, FloatPointer berr,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cpbrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                                @Const lapack_complex_float afb,
                                @ByVal lapack_int ldafb, @Const lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, FloatBuffer ferr, FloatBuffer berr,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cpbrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                                @Const lapack_complex_float afb,
                                @ByVal lapack_int ldafb, @Const lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, float[] ferr, float[] berr,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_cpbstf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kb, lapack_complex_float bb,
                           @ByVal lapack_int ldbb );

public static native @ByVal lapack_int LAPACKE_cpbstf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kb, lapack_complex_float bb,
                                @ByVal lapack_int ldbb );

public static native @ByVal lapack_int LAPACKE_cpbsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                          lapack_complex_float ab, @ByVal lapack_int ldab,
                          lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cpbsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                               lapack_complex_float ab, @ByVal lapack_int ldab,
                               lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cpbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           lapack_complex_float ab, @ByVal lapack_int ldab,
                           lapack_complex_float afb, @ByVal lapack_int ldafb,
                           @Cast("char*") BytePointer equed, FloatPointer s, lapack_complex_float b,
                           @ByVal lapack_int ldb, lapack_complex_float x,
                           @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer ferr,
                           FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_cpbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           lapack_complex_float ab, @ByVal lapack_int ldab,
                           lapack_complex_float afb, @ByVal lapack_int ldafb,
                           @Cast("char*") ByteBuffer equed, FloatBuffer s, lapack_complex_float b,
                           @ByVal lapack_int ldb, lapack_complex_float x,
                           @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer ferr,
                           FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_cpbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           lapack_complex_float ab, @ByVal lapack_int ldab,
                           lapack_complex_float afb, @ByVal lapack_int ldafb,
                           @Cast("char*") byte[] equed, float[] s, lapack_complex_float b,
                           @ByVal lapack_int ldb, lapack_complex_float x,
                           @ByVal lapack_int ldx, float[] rcond, float[] ferr,
                           float[] berr );

public static native @ByVal lapack_int LAPACKE_cpbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                lapack_complex_float ab, @ByVal lapack_int ldab,
                                lapack_complex_float afb, @ByVal lapack_int ldafb,
                                @Cast("char*") BytePointer equed, FloatPointer s, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer ferr,
                                FloatPointer berr, lapack_complex_float work,
                                FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cpbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                lapack_complex_float ab, @ByVal lapack_int ldab,
                                lapack_complex_float afb, @ByVal lapack_int ldafb,
                                @Cast("char*") ByteBuffer equed, FloatBuffer s, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer ferr,
                                FloatBuffer berr, lapack_complex_float work,
                                FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cpbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                lapack_complex_float ab, @ByVal lapack_int ldab,
                                lapack_complex_float afb, @ByVal lapack_int ldafb,
                                @Cast("char*") byte[] equed, float[] s, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, float[] rcond, float[] ferr,
                                float[] berr, lapack_complex_float work,
                                float[] rwork );

public static native @ByVal lapack_int LAPACKE_cpbtrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, lapack_complex_float ab,
                           @ByVal lapack_int ldab );

public static native @ByVal lapack_int LAPACKE_cpbtrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, lapack_complex_float ab,
                                @ByVal lapack_int ldab );

public static native @ByVal lapack_int LAPACKE_cpbtrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                           lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cpbtrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                                lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cpftrf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_float a );

public static native @ByVal lapack_int LAPACKE_cpftrf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, lapack_complex_float a );

public static native @ByVal lapack_int LAPACKE_cpftri( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_float a );

public static native @ByVal lapack_int LAPACKE_cpftri_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, lapack_complex_float a );

public static native @ByVal lapack_int LAPACKE_cpftrs( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float a,
                           lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cpftrs_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float a,
                                lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cpocon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           float anorm, FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_cpocon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           float anorm, FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_cpocon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           float anorm, float[] rcond );

public static native @ByVal lapack_int LAPACKE_cpocon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                float anorm, FloatPointer rcond,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cpocon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                float anorm, FloatBuffer rcond,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cpocon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                float anorm, float[] rcond,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_cpoequ( int matrix_layout, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           FloatPointer s, FloatPointer scond, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_cpoequ( int matrix_layout, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           FloatBuffer s, FloatBuffer scond, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_cpoequ( int matrix_layout, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           float[] s, float[] scond, float[] amax );

public static native @ByVal lapack_int LAPACKE_cpoequ_work( int matrix_layout, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                FloatPointer s, FloatPointer scond, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_cpoequ_work( int matrix_layout, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                FloatBuffer s, FloatBuffer scond, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_cpoequ_work( int matrix_layout, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                float[] s, float[] scond, float[] amax );

public static native @ByVal lapack_int LAPACKE_cpoequb( int matrix_layout, @ByVal lapack_int n,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            FloatPointer s, FloatPointer scond, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_cpoequb( int matrix_layout, @ByVal lapack_int n,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            FloatBuffer s, FloatBuffer scond, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_cpoequb( int matrix_layout, @ByVal lapack_int n,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            float[] s, float[] scond, float[] amax );

public static native @ByVal lapack_int LAPACKE_cpoequb_work( int matrix_layout, @ByVal lapack_int n,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 FloatPointer s, FloatPointer scond, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_cpoequb_work( int matrix_layout, @ByVal lapack_int n,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 FloatBuffer s, FloatBuffer scond, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_cpoequb_work( int matrix_layout, @ByVal lapack_int n,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 float[] s, float[] scond, float[] amax );

public static native @ByVal lapack_int LAPACKE_cporfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_complex_float af,
                           @ByVal lapack_int ldaf, @Const lapack_complex_float b,
                           @ByVal lapack_int ldb, lapack_complex_float x,
                           @ByVal lapack_int ldx, FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_cporfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_complex_float af,
                           @ByVal lapack_int ldaf, @Const lapack_complex_float b,
                           @ByVal lapack_int ldb, lapack_complex_float x,
                           @ByVal lapack_int ldx, FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_cporfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_complex_float af,
                           @ByVal lapack_int ldaf, @Const lapack_complex_float b,
                           @ByVal lapack_int ldb, lapack_complex_float x,
                           @ByVal lapack_int ldx, float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_cporfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_complex_float af,
                                @ByVal lapack_int ldaf, @Const lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, FloatPointer ferr, FloatPointer berr,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cporfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_complex_float af,
                                @ByVal lapack_int ldaf, @Const lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, FloatBuffer ferr, FloatBuffer berr,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cporfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_complex_float af,
                                @ByVal lapack_int ldaf, @Const lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, float[] ferr, float[] berr,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_cporfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            @Const lapack_complex_float af, @ByVal lapack_int ldaf,
                            @Const FloatPointer s, @Const lapack_complex_float b,
                            @ByVal lapack_int ldb, lapack_complex_float x,
                            @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer berr,
                            @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                            FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatPointer params );
public static native @ByVal lapack_int LAPACKE_cporfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            @Const lapack_complex_float af, @ByVal lapack_int ldaf,
                            @Const FloatBuffer s, @Const lapack_complex_float b,
                            @ByVal lapack_int ldb, lapack_complex_float x,
                            @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer berr,
                            @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                            FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatBuffer params );
public static native @ByVal lapack_int LAPACKE_cporfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            @Const lapack_complex_float af, @ByVal lapack_int ldaf,
                            @Const float[] s, @Const lapack_complex_float b,
                            @ByVal lapack_int ldb, lapack_complex_float x,
                            @ByVal lapack_int ldx, float[] rcond, float[] berr,
                            @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                            float[] err_bnds_comp, @ByVal lapack_int nparams,
                            float[] params );

public static native @ByVal lapack_int LAPACKE_cporfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 @Const lapack_complex_float af,
                                 @ByVal lapack_int ldaf, @Const FloatPointer s,
                                 @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float x, @ByVal lapack_int ldx,
                                 FloatPointer rcond, FloatPointer berr,
                                 @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                                 FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatPointer params, lapack_complex_float work,
                                 FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cporfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 @Const lapack_complex_float af,
                                 @ByVal lapack_int ldaf, @Const FloatBuffer s,
                                 @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float x, @ByVal lapack_int ldx,
                                 FloatBuffer rcond, FloatBuffer berr,
                                 @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                                 FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatBuffer params, lapack_complex_float work,
                                 FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cporfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 @Const lapack_complex_float af,
                                 @ByVal lapack_int ldaf, @Const float[] s,
                                 @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float x, @ByVal lapack_int ldx,
                                 float[] rcond, float[] berr,
                                 @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                                 float[] err_bnds_comp, @ByVal lapack_int nparams,
                                 float[] params, lapack_complex_float work,
                                 float[] rwork );

public static native @ByVal lapack_int LAPACKE_cposv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, lapack_complex_float a,
                          @ByVal lapack_int lda, lapack_complex_float b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cposv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, lapack_complex_float a,
                               @ByVal lapack_int lda, lapack_complex_float b,
                               @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cposvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float af,
                           @ByVal lapack_int ldaf, @Cast("char*") BytePointer equed, FloatPointer s,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatPointer rcond, FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_cposvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float af,
                           @ByVal lapack_int ldaf, @Cast("char*") ByteBuffer equed, FloatBuffer s,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_cposvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float af,
                           @ByVal lapack_int ldaf, @Cast("char*") byte[] equed, float[] s,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           float[] rcond, float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_cposvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float af, @ByVal lapack_int ldaf,
                                @Cast("char*") BytePointer equed, FloatPointer s, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer ferr,
                                FloatPointer berr, lapack_complex_float work,
                                FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cposvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float af, @ByVal lapack_int ldaf,
                                @Cast("char*") ByteBuffer equed, FloatBuffer s, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer ferr,
                                FloatBuffer berr, lapack_complex_float work,
                                FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cposvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float af, @ByVal lapack_int ldaf,
                                @Cast("char*") byte[] equed, float[] s, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, float[] rcond, float[] ferr,
                                float[] berr, lapack_complex_float work,
                                float[] rwork );

public static native @ByVal lapack_int LAPACKE_cposvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float af, @ByVal lapack_int ldaf,
                            @Cast("char*") BytePointer equed, FloatPointer s, lapack_complex_float b,
                            @ByVal lapack_int ldb, lapack_complex_float x,
                            @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer rpvgrw,
                            FloatPointer berr, @ByVal lapack_int n_err_bnds,
                            FloatPointer err_bnds_norm, FloatPointer err_bnds_comp,
                            @ByVal lapack_int nparams, FloatPointer params );
public static native @ByVal lapack_int LAPACKE_cposvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float af, @ByVal lapack_int ldaf,
                            @Cast("char*") ByteBuffer equed, FloatBuffer s, lapack_complex_float b,
                            @ByVal lapack_int ldb, lapack_complex_float x,
                            @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer rpvgrw,
                            FloatBuffer berr, @ByVal lapack_int n_err_bnds,
                            FloatBuffer err_bnds_norm, FloatBuffer err_bnds_comp,
                            @ByVal lapack_int nparams, FloatBuffer params );
public static native @ByVal lapack_int LAPACKE_cposvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float af, @ByVal lapack_int ldaf,
                            @Cast("char*") byte[] equed, float[] s, lapack_complex_float b,
                            @ByVal lapack_int ldb, lapack_complex_float x,
                            @ByVal lapack_int ldx, float[] rcond, float[] rpvgrw,
                            float[] berr, @ByVal lapack_int n_err_bnds,
                            float[] err_bnds_norm, float[] err_bnds_comp,
                            @ByVal lapack_int nparams, float[] params );

public static native @ByVal lapack_int LAPACKE_cposvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_float a, @ByVal lapack_int lda,
                                 lapack_complex_float af, @ByVal lapack_int ldaf,
                                 @Cast("char*") BytePointer equed, FloatPointer s, lapack_complex_float b,
                                 @ByVal lapack_int ldb, lapack_complex_float x,
                                 @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer rpvgrw,
                                 FloatPointer berr, @ByVal lapack_int n_err_bnds,
                                 FloatPointer err_bnds_norm, FloatPointer err_bnds_comp,
                                 @ByVal lapack_int nparams, FloatPointer params,
                                 lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cposvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_float a, @ByVal lapack_int lda,
                                 lapack_complex_float af, @ByVal lapack_int ldaf,
                                 @Cast("char*") ByteBuffer equed, FloatBuffer s, lapack_complex_float b,
                                 @ByVal lapack_int ldb, lapack_complex_float x,
                                 @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer rpvgrw,
                                 FloatBuffer berr, @ByVal lapack_int n_err_bnds,
                                 FloatBuffer err_bnds_norm, FloatBuffer err_bnds_comp,
                                 @ByVal lapack_int nparams, FloatBuffer params,
                                 lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cposvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_float a, @ByVal lapack_int lda,
                                 lapack_complex_float af, @ByVal lapack_int ldaf,
                                 @Cast("char*") byte[] equed, float[] s, lapack_complex_float b,
                                 @ByVal lapack_int ldb, lapack_complex_float x,
                                 @ByVal lapack_int ldx, float[] rcond, float[] rpvgrw,
                                 float[] berr, @ByVal lapack_int n_err_bnds,
                                 float[] err_bnds_norm, float[] err_bnds_comp,
                                 @ByVal lapack_int nparams, float[] params,
                                 lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_cpotrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_cpotrf2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_cpotrf2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_cpotrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_cpotri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_cpotri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_cpotrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float b,
                           @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cpotrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cppcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float ap, float anorm,
                           FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_cppcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float ap, float anorm,
                           FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_cppcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float ap, float anorm,
                           float[] rcond );

public static native @ByVal lapack_int LAPACKE_cppcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float ap, float anorm,
                                FloatPointer rcond, lapack_complex_float work,
                                FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cppcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float ap, float anorm,
                                FloatBuffer rcond, lapack_complex_float work,
                                FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cppcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float ap, float anorm,
                                float[] rcond, lapack_complex_float work,
                                float[] rwork );

public static native @ByVal lapack_int LAPACKE_cppequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float ap, FloatPointer s,
                           FloatPointer scond, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_cppequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float ap, FloatBuffer s,
                           FloatBuffer scond, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_cppequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float ap, float[] s,
                           float[] scond, float[] amax );

public static native @ByVal lapack_int LAPACKE_cppequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float ap, FloatPointer s,
                                FloatPointer scond, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_cppequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float ap, FloatBuffer s,
                                FloatBuffer scond, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_cppequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float ap, float[] s,
                                float[] scond, float[] amax );

public static native @ByVal lapack_int LAPACKE_cpprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                           @Const lapack_complex_float afp,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, FloatPointer ferr,
                           FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_cpprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                           @Const lapack_complex_float afp,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, FloatBuffer ferr,
                           FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_cpprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                           @Const lapack_complex_float afp,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, float[] ferr,
                           float[] berr );

public static native @ByVal lapack_int LAPACKE_cpprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                                @Const lapack_complex_float afp,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatPointer ferr, FloatPointer berr,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cpprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                                @Const lapack_complex_float afp,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatBuffer ferr, FloatBuffer berr,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cpprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                                @Const lapack_complex_float afp,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                float[] ferr, float[] berr,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_cppsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, lapack_complex_float ap,
                          lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cppsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, lapack_complex_float ap,
                               lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cppsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_float ap,
                           lapack_complex_float afp, @Cast("char*") BytePointer equed, FloatPointer s,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatPointer rcond, FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_cppsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_float ap,
                           lapack_complex_float afp, @Cast("char*") ByteBuffer equed, FloatBuffer s,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_cppsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_float ap,
                           lapack_complex_float afp, @Cast("char*") byte[] equed, float[] s,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           float[] rcond, float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_cppsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                lapack_complex_float ap,
                                lapack_complex_float afp, @Cast("char*") BytePointer equed,
                                FloatPointer s, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer ferr,
                                FloatPointer berr, lapack_complex_float work,
                                FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cppsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                lapack_complex_float ap,
                                lapack_complex_float afp, @Cast("char*") ByteBuffer equed,
                                FloatBuffer s, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer ferr,
                                FloatBuffer berr, lapack_complex_float work,
                                FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cppsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                lapack_complex_float ap,
                                lapack_complex_float afp, @Cast("char*") byte[] equed,
                                float[] s, lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, float[] rcond, float[] ferr,
                                float[] berr, lapack_complex_float work,
                                float[] rwork );

public static native @ByVal lapack_int LAPACKE_cpptrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float ap );

public static native @ByVal lapack_int LAPACKE_cpptrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float ap );

public static native @ByVal lapack_int LAPACKE_cpptri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float ap );

public static native @ByVal lapack_int LAPACKE_cpptri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float ap );

public static native @ByVal lapack_int LAPACKE_cpptrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                           lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cpptrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                                lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cpstrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_int piv, lapack_int rank, float tol );

public static native @ByVal lapack_int LAPACKE_cpstrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int piv, lapack_int rank, float tol,
                                FloatPointer work );
public static native @ByVal lapack_int LAPACKE_cpstrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int piv, lapack_int rank, float tol,
                                FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_cpstrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int piv, lapack_int rank, float tol,
                                float[] work );

public static native @ByVal lapack_int LAPACKE_cptcon( @ByVal lapack_int n, @Const FloatPointer d,
                           @Const lapack_complex_float e, float anorm,
                           FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_cptcon( @ByVal lapack_int n, @Const FloatBuffer d,
                           @Const lapack_complex_float e, float anorm,
                           FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_cptcon( @ByVal lapack_int n, @Const float[] d,
                           @Const lapack_complex_float e, float anorm,
                           float[] rcond );

public static native @ByVal lapack_int LAPACKE_cptcon_work( @ByVal lapack_int n, @Const FloatPointer d,
                                @Const lapack_complex_float e, float anorm,
                                FloatPointer rcond, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_cptcon_work( @ByVal lapack_int n, @Const FloatBuffer d,
                                @Const lapack_complex_float e, float anorm,
                                FloatBuffer rcond, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_cptcon_work( @ByVal lapack_int n, @Const float[] d,
                                @Const lapack_complex_float e, float anorm,
                                float[] rcond, float[] work );

public static native @ByVal lapack_int LAPACKE_cpteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n, FloatPointer d,
                           FloatPointer e, lapack_complex_float z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_cpteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n, FloatBuffer d,
                           FloatBuffer e, lapack_complex_float z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_cpteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n, float[] d,
                           float[] e, lapack_complex_float z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_cpteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                FloatPointer d, FloatPointer e, lapack_complex_float z,
                                @ByVal lapack_int ldz, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_cpteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                FloatBuffer d, FloatBuffer e, lapack_complex_float z,
                                @ByVal lapack_int ldz, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_cpteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                float[] d, float[] e, lapack_complex_float z,
                                @ByVal lapack_int ldz, float[] work );

public static native @ByVal lapack_int LAPACKE_cptrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatPointer d,
                           @Const lapack_complex_float e, @Const FloatPointer df,
                           @Const lapack_complex_float ef,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, FloatPointer ferr,
                           FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_cptrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatBuffer d,
                           @Const lapack_complex_float e, @Const FloatBuffer df,
                           @Const lapack_complex_float ef,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, FloatBuffer ferr,
                           FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_cptrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const float[] d,
                           @Const lapack_complex_float e, @Const float[] df,
                           @Const lapack_complex_float ef,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, float[] ferr,
                           float[] berr );

public static native @ByVal lapack_int LAPACKE_cptrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatPointer d,
                                @Const lapack_complex_float e, @Const FloatPointer df,
                                @Const lapack_complex_float ef,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatPointer ferr, FloatPointer berr,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cptrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatBuffer d,
                                @Const lapack_complex_float e, @Const FloatBuffer df,
                                @Const lapack_complex_float ef,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatBuffer ferr, FloatBuffer berr,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cptrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const float[] d,
                                @Const lapack_complex_float e, @Const float[] df,
                                @Const lapack_complex_float ef,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                float[] ferr, float[] berr,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_cptsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          FloatPointer d, lapack_complex_float e,
                          lapack_complex_float b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_cptsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          FloatBuffer d, lapack_complex_float e,
                          lapack_complex_float b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_cptsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          float[] d, lapack_complex_float e,
                          lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cptsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               FloatPointer d, lapack_complex_float e,
                               lapack_complex_float b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_cptsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               FloatBuffer d, lapack_complex_float e,
                               lapack_complex_float b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_cptsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               float[] d, lapack_complex_float e,
                               lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cptsvx( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatPointer d,
                           @Const lapack_complex_float e, FloatPointer df,
                           lapack_complex_float ef,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatPointer rcond, FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_cptsvx( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatBuffer d,
                           @Const lapack_complex_float e, FloatBuffer df,
                           lapack_complex_float ef,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_cptsvx( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const float[] d,
                           @Const lapack_complex_float e, float[] df,
                           lapack_complex_float ef,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           float[] rcond, float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_cptsvx_work( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatPointer d,
                                @Const lapack_complex_float e, FloatPointer df,
                                lapack_complex_float ef,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatPointer rcond, FloatPointer ferr, FloatPointer berr,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cptsvx_work( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatBuffer d,
                                @Const lapack_complex_float e, FloatBuffer df,
                                lapack_complex_float ef,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cptsvx_work( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const float[] d,
                                @Const lapack_complex_float e, float[] df,
                                lapack_complex_float ef,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                float[] rcond, float[] ferr, float[] berr,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_cpttrf( @ByVal lapack_int n, FloatPointer d, lapack_complex_float e );
public static native @ByVal lapack_int LAPACKE_cpttrf( @ByVal lapack_int n, FloatBuffer d, lapack_complex_float e );
public static native @ByVal lapack_int LAPACKE_cpttrf( @ByVal lapack_int n, float[] d, lapack_complex_float e );

public static native @ByVal lapack_int LAPACKE_cpttrf_work( @ByVal lapack_int n, FloatPointer d,
                                lapack_complex_float e );
public static native @ByVal lapack_int LAPACKE_cpttrf_work( @ByVal lapack_int n, FloatBuffer d,
                                lapack_complex_float e );
public static native @ByVal lapack_int LAPACKE_cpttrf_work( @ByVal lapack_int n, float[] d,
                                lapack_complex_float e );

public static native @ByVal lapack_int LAPACKE_cpttrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatPointer d,
                           @Const lapack_complex_float e,
                           lapack_complex_float b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_cpttrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatBuffer d,
                           @Const lapack_complex_float e,
                           lapack_complex_float b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_cpttrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const float[] d,
                           @Const lapack_complex_float e,
                           lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cpttrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatPointer d,
                                @Const lapack_complex_float e,
                                lapack_complex_float b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_cpttrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatBuffer d,
                                @Const lapack_complex_float e,
                                lapack_complex_float b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_cpttrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const float[] d,
                                @Const lapack_complex_float e,
                                lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cspcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float ap,
                           @Const lapack_int ipiv, float anorm, FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_cspcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float ap,
                           @Const lapack_int ipiv, float anorm, FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_cspcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float ap,
                           @Const lapack_int ipiv, float anorm, float[] rcond );

public static native @ByVal lapack_int LAPACKE_cspcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float ap,
                                @Const lapack_int ipiv, float anorm,
                                FloatPointer rcond, lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_cspcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float ap,
                                @Const lapack_int ipiv, float anorm,
                                FloatBuffer rcond, lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_cspcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float ap,
                                @Const lapack_int ipiv, float anorm,
                                float[] rcond, lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_csprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                           @Const lapack_complex_float afp,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, FloatPointer ferr,
                           FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_csprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                           @Const lapack_complex_float afp,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, FloatBuffer ferr,
                           FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_csprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                           @Const lapack_complex_float afp,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, float[] ferr,
                           float[] berr );

public static native @ByVal lapack_int LAPACKE_csprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                                @Const lapack_complex_float afp,
                                @Const lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatPointer ferr, FloatPointer berr,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_csprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                                @Const lapack_complex_float afp,
                                @Const lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatBuffer ferr, FloatBuffer berr,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_csprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                                @Const lapack_complex_float afp,
                                @Const lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                float[] ferr, float[] berr,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_cspsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, lapack_complex_float ap,
                          lapack_int ipiv, lapack_complex_float b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cspsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, lapack_complex_float ap,
                               lapack_int ipiv, lapack_complex_float b,
                               @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cspsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                           lapack_complex_float afp, lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatPointer rcond, FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_cspsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                           lapack_complex_float afp, lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_cspsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                           lapack_complex_float afp, lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           float[] rcond, float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_cspsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float ap,
                                lapack_complex_float afp, lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatPointer rcond, FloatPointer ferr, FloatPointer berr,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_cspsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float ap,
                                lapack_complex_float afp, lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_cspsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float ap,
                                lapack_complex_float afp, lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                float[] rcond, float[] ferr, float[] berr,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_csptrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float ap, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_csptrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float ap, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_csptri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float ap, @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_csptri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float ap,
                                @Const lapack_int ipiv,
                                lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_csptrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                           @Const lapack_int ipiv, lapack_complex_float b,
                           @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_csptrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float ap,
                                @Const lapack_int ipiv, lapack_complex_float b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_cstedc( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n, FloatPointer d,
                           FloatPointer e, lapack_complex_float z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_cstedc( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n, FloatBuffer d,
                           FloatBuffer e, lapack_complex_float z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_cstedc( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n, float[] d,
                           float[] e, lapack_complex_float z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_cstedc_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                FloatPointer d, FloatPointer e, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatPointer rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_cstedc_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                FloatBuffer d, FloatBuffer e, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatBuffer rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_cstedc_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                float[] d, float[] e, lapack_complex_float z,
                                @ByVal lapack_int ldz, lapack_complex_float work,
                                @ByVal lapack_int lwork, float[] rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_cstegr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, FloatPointer d, FloatPointer e, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatPointer w, lapack_complex_float z,
                           @ByVal lapack_int ldz, lapack_int isuppz );
public static native @ByVal lapack_int LAPACKE_cstegr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, FloatBuffer d, FloatBuffer e, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatBuffer w, lapack_complex_float z,
                           @ByVal lapack_int ldz, lapack_int isuppz );
public static native @ByVal lapack_int LAPACKE_cstegr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, float[] d, float[] e, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, float[] w, lapack_complex_float z,
                           @ByVal lapack_int ldz, lapack_int isuppz );

public static native @ByVal lapack_int LAPACKE_cstegr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, FloatPointer d, FloatPointer e, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                float abstol, lapack_int m, FloatPointer w,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_int isuppz, FloatPointer work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_cstegr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, FloatBuffer d, FloatBuffer e, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                float abstol, lapack_int m, FloatBuffer w,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_int isuppz, FloatBuffer work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_cstegr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, float[] d, float[] e, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                float abstol, lapack_int m, float[] w,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_int isuppz, float[] work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_cstein( int matrix_layout, @ByVal lapack_int n, @Const FloatPointer d,
                           @Const FloatPointer e, @ByVal lapack_int m, @Const FloatPointer w,
                           @Const lapack_int iblock, @Const lapack_int isplit,
                           lapack_complex_float z, @ByVal lapack_int ldz,
                           lapack_int ifailv );
public static native @ByVal lapack_int LAPACKE_cstein( int matrix_layout, @ByVal lapack_int n, @Const FloatBuffer d,
                           @Const FloatBuffer e, @ByVal lapack_int m, @Const FloatBuffer w,
                           @Const lapack_int iblock, @Const lapack_int isplit,
                           lapack_complex_float z, @ByVal lapack_int ldz,
                           lapack_int ifailv );
public static native @ByVal lapack_int LAPACKE_cstein( int matrix_layout, @ByVal lapack_int n, @Const float[] d,
                           @Const float[] e, @ByVal lapack_int m, @Const float[] w,
                           @Const lapack_int iblock, @Const lapack_int isplit,
                           lapack_complex_float z, @ByVal lapack_int ldz,
                           lapack_int ifailv );

public static native @ByVal lapack_int LAPACKE_cstein_work( int matrix_layout, @ByVal lapack_int n, @Const FloatPointer d,
                                @Const FloatPointer e, @ByVal lapack_int m, @Const FloatPointer w,
                                @Const lapack_int iblock,
                                @Const lapack_int isplit,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                FloatPointer work, lapack_int iwork,
                                lapack_int ifailv );
public static native @ByVal lapack_int LAPACKE_cstein_work( int matrix_layout, @ByVal lapack_int n, @Const FloatBuffer d,
                                @Const FloatBuffer e, @ByVal lapack_int m, @Const FloatBuffer w,
                                @Const lapack_int iblock,
                                @Const lapack_int isplit,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                FloatBuffer work, lapack_int iwork,
                                lapack_int ifailv );
public static native @ByVal lapack_int LAPACKE_cstein_work( int matrix_layout, @ByVal lapack_int n, @Const float[] d,
                                @Const float[] e, @ByVal lapack_int m, @Const float[] w,
                                @Const lapack_int iblock,
                                @Const lapack_int isplit,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                float[] work, lapack_int iwork,
                                lapack_int ifailv );

public static native @ByVal lapack_int LAPACKE_cstemr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, FloatPointer d, FloatPointer e, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int m,
                           FloatPointer w, lapack_complex_float z, @ByVal lapack_int ldz,
                           @ByVal lapack_int nzc, lapack_int isuppz,
                           lapack_logical tryrac );
public static native @ByVal lapack_int LAPACKE_cstemr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, FloatBuffer d, FloatBuffer e, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int m,
                           FloatBuffer w, lapack_complex_float z, @ByVal lapack_int ldz,
                           @ByVal lapack_int nzc, lapack_int isuppz,
                           lapack_logical tryrac );
public static native @ByVal lapack_int LAPACKE_cstemr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, float[] d, float[] e, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int m,
                           float[] w, lapack_complex_float z, @ByVal lapack_int ldz,
                           @ByVal lapack_int nzc, lapack_int isuppz,
                           lapack_logical tryrac );

public static native @ByVal lapack_int LAPACKE_cstemr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, FloatPointer d, FloatPointer e, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                lapack_int m, FloatPointer w,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                @ByVal lapack_int nzc, lapack_int isuppz,
                                lapack_logical tryrac, FloatPointer work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_cstemr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, FloatBuffer d, FloatBuffer e, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                lapack_int m, FloatBuffer w,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                @ByVal lapack_int nzc, lapack_int isuppz,
                                lapack_logical tryrac, FloatBuffer work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_cstemr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, float[] d, float[] e, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                lapack_int m, float[] w,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                @ByVal lapack_int nzc, lapack_int isuppz,
                                lapack_logical tryrac, float[] work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_csteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n, FloatPointer d,
                           FloatPointer e, lapack_complex_float z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_csteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n, FloatBuffer d,
                           FloatBuffer e, lapack_complex_float z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_csteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n, float[] d,
                           float[] e, lapack_complex_float z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_csteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                FloatPointer d, FloatPointer e, lapack_complex_float z,
                                @ByVal lapack_int ldz, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_csteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                FloatBuffer d, FloatBuffer e, lapack_complex_float z,
                                @ByVal lapack_int ldz, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_csteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                float[] d, float[] e, lapack_complex_float z,
                                @ByVal lapack_int ldz, float[] work );

public static native @ByVal lapack_int LAPACKE_csycon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, float anorm, FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_csycon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, float anorm, FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_csycon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, float anorm, float[] rcond );

public static native @ByVal lapack_int LAPACKE_csycon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, float anorm,
                                FloatPointer rcond, lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_csycon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, float anorm,
                                FloatBuffer rcond, lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_csycon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, float anorm,
                                float[] rcond, lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_csyconv( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte way, @ByVal lapack_int n,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            @Const lapack_int ipiv, lapack_complex_float e );

public static native @ByVal lapack_int LAPACKE_csyconv_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte way,
                                 @ByVal lapack_int n, lapack_complex_float a,
                                 @ByVal lapack_int lda, @Const lapack_int ipiv,
                                 lapack_complex_float e );

public static native @ByVal lapack_int LAPACKE_csyequb( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            FloatPointer s, FloatPointer scond, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_csyequb( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            FloatBuffer s, FloatBuffer scond, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_csyequb( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            float[] s, float[] scond, float[] amax );

public static native @ByVal lapack_int LAPACKE_csyequb_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 FloatPointer s, FloatPointer scond, FloatPointer amax,
                                 lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_csyequb_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 FloatBuffer s, FloatBuffer scond, FloatBuffer amax,
                                 lapack_complex_float work );
public static native @ByVal lapack_int LAPACKE_csyequb_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 float[] s, float[] scond, float[] amax,
                                 lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_csyr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             @ByVal lapack_complex_float alpha,
                             @Const lapack_complex_float x, @ByVal lapack_int incx,
                             lapack_complex_float a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_csyr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  @ByVal lapack_complex_float alpha,
                                  @Const lapack_complex_float x,
                                  @ByVal lapack_int incx, lapack_complex_float a,
                                  @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_csyrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_complex_float af,
                           @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, FloatPointer ferr,
                           FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_csyrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_complex_float af,
                           @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, FloatBuffer ferr,
                           FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_csyrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_complex_float af,
                           @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx, float[] ferr,
                           float[] berr );

public static native @ByVal lapack_int LAPACKE_csyrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_complex_float af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatPointer ferr, FloatPointer berr,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_csyrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_complex_float af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatBuffer ferr, FloatBuffer berr,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_csyrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_complex_float af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float x, @ByVal lapack_int ldx,
                                float[] ferr, float[] berr,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_csyrfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            @Const lapack_complex_float af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const FloatPointer s,
                            @Const lapack_complex_float b, @ByVal lapack_int ldb,
                            lapack_complex_float x, @ByVal lapack_int ldx,
                            FloatPointer rcond, FloatPointer berr, @ByVal lapack_int n_err_bnds,
                            FloatPointer err_bnds_norm, FloatPointer err_bnds_comp,
                            @ByVal lapack_int nparams, FloatPointer params );
public static native @ByVal lapack_int LAPACKE_csyrfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            @Const lapack_complex_float af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const FloatBuffer s,
                            @Const lapack_complex_float b, @ByVal lapack_int ldb,
                            lapack_complex_float x, @ByVal lapack_int ldx,
                            FloatBuffer rcond, FloatBuffer berr, @ByVal lapack_int n_err_bnds,
                            FloatBuffer err_bnds_norm, FloatBuffer err_bnds_comp,
                            @ByVal lapack_int nparams, FloatBuffer params );
public static native @ByVal lapack_int LAPACKE_csyrfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_float a, @ByVal lapack_int lda,
                            @Const lapack_complex_float af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const float[] s,
                            @Const lapack_complex_float b, @ByVal lapack_int ldb,
                            lapack_complex_float x, @ByVal lapack_int ldx,
                            float[] rcond, float[] berr, @ByVal lapack_int n_err_bnds,
                            float[] err_bnds_norm, float[] err_bnds_comp,
                            @ByVal lapack_int nparams, float[] params );

public static native @ByVal lapack_int LAPACKE_csyrfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 @Const lapack_complex_float af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const FloatPointer s, @Const lapack_complex_float b,
                                 @ByVal lapack_int ldb, lapack_complex_float x,
                                 @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer berr,
                                 @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                                 FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatPointer params, lapack_complex_float work,
                                 FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_csyrfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 @Const lapack_complex_float af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const FloatBuffer s, @Const lapack_complex_float b,
                                 @ByVal lapack_int ldb, lapack_complex_float x,
                                 @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer berr,
                                 @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                                 FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatBuffer params, lapack_complex_float work,
                                 FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_csyrfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_float a, @ByVal lapack_int lda,
                                 @Const lapack_complex_float af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const float[] s, @Const lapack_complex_float b,
                                 @ByVal lapack_int ldb, lapack_complex_float x,
                                 @ByVal lapack_int ldx, float[] rcond, float[] berr,
                                 @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                                 float[] err_bnds_comp, @ByVal lapack_int nparams,
                                 float[] params, lapack_complex_float work,
                                 float[] rwork );

public static native @ByVal lapack_int LAPACKE_csysv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, lapack_complex_float a,
                          @ByVal lapack_int lda, lapack_int ipiv,
                          lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_csysv_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, lapack_complex_float a,
                               @ByVal lapack_int lda, lapack_int ipiv,
                               lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_csysv_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                    @ByVal lapack_int nrhs, lapack_complex_float a,
                                    @ByVal lapack_int lda, lapack_int ipiv,
                                    lapack_complex_float b, @ByVal lapack_int ldb,
                                    lapack_complex_float work,
                                    @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_csysv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, lapack_complex_float a,
                               @ByVal lapack_int lda, lapack_int ipiv,
                               lapack_complex_float b, @ByVal lapack_int ldb,
                               lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_csysvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float af,
                           @ByVal lapack_int ldaf, lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatPointer rcond, FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_csysvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float af,
                           @ByVal lapack_int ldaf, lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_csysvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float af,
                           @ByVal lapack_int ldaf, lapack_int ipiv,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float x, @ByVal lapack_int ldx,
                           float[] rcond, float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_csysvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Const lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer ferr,
                                FloatPointer berr, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_csysvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Const lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer ferr,
                                FloatBuffer berr, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_csysvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Const lapack_complex_float b,
                                @ByVal lapack_int ldb, lapack_complex_float x,
                                @ByVal lapack_int ldx, float[] rcond, float[] ferr,
                                float[] berr, lapack_complex_float work,
                                @ByVal lapack_int lwork, float[] rwork );

public static native @ByVal lapack_int LAPACKE_csysvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") BytePointer equed, FloatPointer s,
                            lapack_complex_float b, @ByVal lapack_int ldb,
                            lapack_complex_float x, @ByVal lapack_int ldx,
                            FloatPointer rcond, FloatPointer rpvgrw, FloatPointer berr,
                            @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                            FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatPointer params );
public static native @ByVal lapack_int LAPACKE_csysvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") ByteBuffer equed, FloatBuffer s,
                            lapack_complex_float b, @ByVal lapack_int ldb,
                            lapack_complex_float x, @ByVal lapack_int ldx,
                            FloatBuffer rcond, FloatBuffer rpvgrw, FloatBuffer berr,
                            @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                            FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatBuffer params );
public static native @ByVal lapack_int LAPACKE_csysvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") byte[] equed, float[] s,
                            lapack_complex_float b, @ByVal lapack_int ldb,
                            lapack_complex_float x, @ByVal lapack_int ldx,
                            float[] rcond, float[] rpvgrw, float[] berr,
                            @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                            float[] err_bnds_comp, @ByVal lapack_int nparams,
                            float[] params );

public static native @ByVal lapack_int LAPACKE_csysvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_float a, @ByVal lapack_int lda,
                                 lapack_complex_float af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") BytePointer equed, FloatPointer s,
                                 lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float x, @ByVal lapack_int ldx,
                                 FloatPointer rcond, FloatPointer rpvgrw, FloatPointer berr,
                                 @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                                 FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatPointer params, lapack_complex_float work,
                                 FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_csysvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_float a, @ByVal lapack_int lda,
                                 lapack_complex_float af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") ByteBuffer equed, FloatBuffer s,
                                 lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float x, @ByVal lapack_int ldx,
                                 FloatBuffer rcond, FloatBuffer rpvgrw, FloatBuffer berr,
                                 @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                                 FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatBuffer params, lapack_complex_float work,
                                 FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_csysvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_float a, @ByVal lapack_int lda,
                                 lapack_complex_float af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") byte[] equed, float[] s,
                                 lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float x, @ByVal lapack_int ldx,
                                 float[] rcond, float[] rpvgrw, float[] berr,
                                 @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                                 float[] err_bnds_comp, @ByVal lapack_int nparams,
                                 float[] params, lapack_complex_float work,
                                 float[] rwork );

public static native @ByVal lapack_int LAPACKE_csyswapr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             lapack_complex_float a, @ByVal lapack_int lda,
                             @ByVal lapack_int i1, @ByVal lapack_int i2 );

public static native @ByVal lapack_int LAPACKE_csyswapr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  lapack_complex_float a, @ByVal lapack_int lda,
                                  @ByVal lapack_int i1, @ByVal lapack_int i2 );

public static native @ByVal lapack_int LAPACKE_csytrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_csytrf_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_csytrf_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int ipiv, lapack_complex_float work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_csytrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_int ipiv, lapack_complex_float work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_csytri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_csytri2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_csytri2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 lapack_complex_float a, @ByVal lapack_int lda,
                                 @Const lapack_int ipiv,
                                 lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_csytri2x( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             lapack_complex_float a, @ByVal lapack_int lda,
                             @Const lapack_int ipiv, @ByVal lapack_int nb );

public static native @ByVal lapack_int LAPACKE_csytri2x_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  lapack_complex_float a, @ByVal lapack_int lda,
                                  @Const lapack_int ipiv,
                                  lapack_complex_float work, @ByVal lapack_int nb );

public static native @ByVal lapack_int LAPACKE_csytri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv,
                                lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_csytrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv,
                           lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_csytrs2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                            @ByVal lapack_int lda, @Const lapack_int ipiv,
                            lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_csytrs2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                                 @ByVal lapack_int lda, @Const lapack_int ipiv,
                                 lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_csytrs_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv,
                           lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_csytrs_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_csytrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ctbcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd,
                           @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                           FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_ctbcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd,
                           @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                           FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_ctbcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd,
                           @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                           float[] rcond );

public static native @ByVal lapack_int LAPACKE_ctbcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                                FloatPointer rcond, lapack_complex_float work,
                                FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_ctbcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                                FloatBuffer rcond, lapack_complex_float work,
                                FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_ctbcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                                float[] rcond, lapack_complex_float work,
                                float[] rwork );

public static native @ByVal lapack_int LAPACKE_ctbrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           @Const lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_ctbrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           @Const lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_ctbrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           @Const lapack_complex_float x, @ByVal lapack_int ldx,
                           float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_ctbrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float ab,
                                @ByVal lapack_int ldab, @Const lapack_complex_float b,
                                @ByVal lapack_int ldb, @Const lapack_complex_float x,
                                @ByVal lapack_int ldx, FloatPointer ferr, FloatPointer berr,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_ctbrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float ab,
                                @ByVal lapack_int ldab, @Const lapack_complex_float b,
                                @ByVal lapack_int ldb, @Const lapack_complex_float x,
                                @ByVal lapack_int ldx, FloatBuffer ferr, FloatBuffer berr,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_ctbrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float ab,
                                @ByVal lapack_int ldab, @Const lapack_complex_float b,
                                @ByVal lapack_int ldb, @Const lapack_complex_float x,
                                @ByVal lapack_int ldx, float[] ferr, float[] berr,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_ctbtrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float ab, @ByVal lapack_int ldab,
                           lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ctbtrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @ByVal lapack_int nrhs, @Const lapack_complex_float ab,
                                @ByVal lapack_int ldab, lapack_complex_float b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ctfsm( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte side, @Cast("char") byte uplo,
                          @Cast("char") byte trans, @Cast("char") byte diag, @ByVal lapack_int m, @ByVal lapack_int n,
                          @ByVal lapack_complex_float alpha,
                          @Const lapack_complex_float a,
                          lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ctfsm_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte side,
                               @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag, @ByVal lapack_int m,
                               @ByVal lapack_int n, @ByVal lapack_complex_float alpha,
                               @Const lapack_complex_float a,
                               lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ctftri( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, lapack_complex_float a );

public static native @ByVal lapack_int LAPACKE_ctftri_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n,
                                lapack_complex_float a );

public static native @ByVal lapack_int LAPACKE_ctfttp( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const lapack_complex_float arf,
                           lapack_complex_float ap );

public static native @ByVal lapack_int LAPACKE_ctfttp_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const lapack_complex_float arf,
                                lapack_complex_float ap );

public static native @ByVal lapack_int LAPACKE_ctfttr( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const lapack_complex_float arf,
                           lapack_complex_float a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_ctfttr_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const lapack_complex_float arf,
                                lapack_complex_float a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_ctgevc( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const lapack_complex_float s, @ByVal lapack_int lds,
                           @Const lapack_complex_float p, @ByVal lapack_int ldp,
                           lapack_complex_float vl, @ByVal lapack_int ldvl,
                           lapack_complex_float vr, @ByVal lapack_int ldvr,
                           @ByVal lapack_int mm, lapack_int m );

public static native @ByVal lapack_int LAPACKE_ctgevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const lapack_complex_float s, @ByVal lapack_int lds,
                                @Const lapack_complex_float p, @ByVal lapack_int ldp,
                                lapack_complex_float vl, @ByVal lapack_int ldvl,
                                lapack_complex_float vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_ctgevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const lapack_complex_float s, @ByVal lapack_int lds,
                                @Const lapack_complex_float p, @ByVal lapack_int ldp,
                                lapack_complex_float vl, @ByVal lapack_int ldvl,
                                lapack_complex_float vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_ctgevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const lapack_complex_float s, @ByVal lapack_int lds,
                                @Const lapack_complex_float p, @ByVal lapack_int ldp,
                                lapack_complex_float vl, @ByVal lapack_int ldvl,
                                lapack_complex_float vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_ctgexc( int matrix_layout, @ByVal lapack_logical wantq,
                           @ByVal lapack_logical wantz, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float q, @ByVal lapack_int ldq,
                           lapack_complex_float z, @ByVal lapack_int ldz,
                           @ByVal lapack_int ifst, @ByVal lapack_int ilst );

public static native @ByVal lapack_int LAPACKE_ctgexc_work( int matrix_layout, @ByVal lapack_logical wantq,
                                @ByVal lapack_logical wantz, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                @ByVal lapack_int ifst, @ByVal lapack_int ilst );

public static native @ByVal lapack_int LAPACKE_ctgsen( int matrix_layout, @ByVal lapack_int ijob,
                           @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float alpha,
                           lapack_complex_float beta, lapack_complex_float q,
                           @ByVal lapack_int ldq, lapack_complex_float z,
                           @ByVal lapack_int ldz, lapack_int m, FloatPointer pl, FloatPointer pr,
                           FloatPointer dif );
public static native @ByVal lapack_int LAPACKE_ctgsen( int matrix_layout, @ByVal lapack_int ijob,
                           @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float alpha,
                           lapack_complex_float beta, lapack_complex_float q,
                           @ByVal lapack_int ldq, lapack_complex_float z,
                           @ByVal lapack_int ldz, lapack_int m, FloatBuffer pl, FloatBuffer pr,
                           FloatBuffer dif );
public static native @ByVal lapack_int LAPACKE_ctgsen( int matrix_layout, @ByVal lapack_int ijob,
                           @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float alpha,
                           lapack_complex_float beta, lapack_complex_float q,
                           @ByVal lapack_int ldq, lapack_complex_float z,
                           @ByVal lapack_int ldz, lapack_int m, float[] pl, float[] pr,
                           float[] dif );

public static native @ByVal lapack_int LAPACKE_ctgsen_work( int matrix_layout, @ByVal lapack_int ijob,
                                @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float alpha,
                                lapack_complex_float beta,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_int m, FloatPointer pl, FloatPointer pr, FloatPointer dif,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_ctgsen_work( int matrix_layout, @ByVal lapack_int ijob,
                                @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float alpha,
                                lapack_complex_float beta,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_int m, FloatBuffer pl, FloatBuffer pr, FloatBuffer dif,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_ctgsen_work( int matrix_layout, @ByVal lapack_int ijob,
                                @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float alpha,
                                lapack_complex_float beta,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_complex_float z, @ByVal lapack_int ldz,
                                lapack_int m, float[] pl, float[] pr, float[] dif,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_ctgsja( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n,
                           @ByVal lapack_int k, @ByVal lapack_int l, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float b,
                           @ByVal lapack_int ldb, float tola, float tolb, FloatPointer alpha,
                           FloatPointer beta, lapack_complex_float u, @ByVal lapack_int ldu,
                           lapack_complex_float v, @ByVal lapack_int ldv,
                           lapack_complex_float q, @ByVal lapack_int ldq,
                           lapack_int ncycle );
public static native @ByVal lapack_int LAPACKE_ctgsja( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n,
                           @ByVal lapack_int k, @ByVal lapack_int l, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float b,
                           @ByVal lapack_int ldb, float tola, float tolb, FloatBuffer alpha,
                           FloatBuffer beta, lapack_complex_float u, @ByVal lapack_int ldu,
                           lapack_complex_float v, @ByVal lapack_int ldv,
                           lapack_complex_float q, @ByVal lapack_int ldq,
                           lapack_int ncycle );
public static native @ByVal lapack_int LAPACKE_ctgsja( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n,
                           @ByVal lapack_int k, @ByVal lapack_int l, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float b,
                           @ByVal lapack_int ldb, float tola, float tolb, float[] alpha,
                           float[] beta, lapack_complex_float u, @ByVal lapack_int ldu,
                           lapack_complex_float v, @ByVal lapack_int ldv,
                           lapack_complex_float q, @ByVal lapack_int ldq,
                           lapack_int ncycle );

public static native @ByVal lapack_int LAPACKE_ctgsja_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, @ByVal lapack_int k, @ByVal lapack_int l,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                float tola, float tolb, FloatPointer alpha,
                                FloatPointer beta, lapack_complex_float u,
                                @ByVal lapack_int ldu, lapack_complex_float v,
                                @ByVal lapack_int ldv, lapack_complex_float q,
                                @ByVal lapack_int ldq, lapack_complex_float work,
                                lapack_int ncycle );
public static native @ByVal lapack_int LAPACKE_ctgsja_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, @ByVal lapack_int k, @ByVal lapack_int l,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                float tola, float tolb, FloatBuffer alpha,
                                FloatBuffer beta, lapack_complex_float u,
                                @ByVal lapack_int ldu, lapack_complex_float v,
                                @ByVal lapack_int ldv, lapack_complex_float q,
                                @ByVal lapack_int ldq, lapack_complex_float work,
                                lapack_int ncycle );
public static native @ByVal lapack_int LAPACKE_ctgsja_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, @ByVal lapack_int k, @ByVal lapack_int l,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                float tola, float tolb, float[] alpha,
                                float[] beta, lapack_complex_float u,
                                @ByVal lapack_int ldu, lapack_complex_float v,
                                @ByVal lapack_int ldv, lapack_complex_float q,
                                @ByVal lapack_int ldq, lapack_complex_float work,
                                lapack_int ncycle );

public static native @ByVal lapack_int LAPACKE_ctgsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           @Const lapack_complex_float vl, @ByVal lapack_int ldvl,
                           @Const lapack_complex_float vr, @ByVal lapack_int ldvr,
                           FloatPointer s, FloatPointer dif, @ByVal lapack_int mm, lapack_int m );
public static native @ByVal lapack_int LAPACKE_ctgsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           @Const lapack_complex_float vl, @ByVal lapack_int ldvl,
                           @Const lapack_complex_float vr, @ByVal lapack_int ldvr,
                           FloatBuffer s, FloatBuffer dif, @ByVal lapack_int mm, lapack_int m );
public static native @ByVal lapack_int LAPACKE_ctgsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           @Const lapack_complex_float vl, @ByVal lapack_int ldvl,
                           @Const lapack_complex_float vr, @ByVal lapack_int ldvr,
                           float[] s, float[] dif, @ByVal lapack_int mm, lapack_int m );

public static native @ByVal lapack_int LAPACKE_ctgsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                @Const lapack_complex_float vl, @ByVal lapack_int ldvl,
                                @Const lapack_complex_float vr, @ByVal lapack_int ldvr,
                                FloatPointer s, FloatPointer dif, @ByVal lapack_int mm,
                                lapack_int m, lapack_complex_float work,
                                @ByVal lapack_int lwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_ctgsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                @Const lapack_complex_float vl, @ByVal lapack_int ldvl,
                                @Const lapack_complex_float vr, @ByVal lapack_int ldvr,
                                FloatBuffer s, FloatBuffer dif, @ByVal lapack_int mm,
                                lapack_int m, lapack_complex_float work,
                                @ByVal lapack_int lwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_ctgsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                @Const lapack_complex_float vl, @ByVal lapack_int ldvl,
                                @Const lapack_complex_float vr, @ByVal lapack_int ldvr,
                                float[] s, float[] dif, @ByVal lapack_int mm,
                                lapack_int m, lapack_complex_float work,
                                @ByVal lapack_int lwork, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_ctgsyl( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                           @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float c, @ByVal lapack_int ldc,
                           @Const lapack_complex_float d, @ByVal lapack_int ldd,
                           @Const lapack_complex_float e, @ByVal lapack_int lde,
                           lapack_complex_float f, @ByVal lapack_int ldf,
                           FloatPointer scale, FloatPointer dif );
public static native @ByVal lapack_int LAPACKE_ctgsyl( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                           @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float c, @ByVal lapack_int ldc,
                           @Const lapack_complex_float d, @ByVal lapack_int ldd,
                           @Const lapack_complex_float e, @ByVal lapack_int lde,
                           lapack_complex_float f, @ByVal lapack_int ldf,
                           FloatBuffer scale, FloatBuffer dif );
public static native @ByVal lapack_int LAPACKE_ctgsyl( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                           @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float c, @ByVal lapack_int ldc,
                           @Const lapack_complex_float d, @ByVal lapack_int ldd,
                           @Const lapack_complex_float e, @ByVal lapack_int lde,
                           lapack_complex_float f, @ByVal lapack_int ldf,
                           float[] scale, float[] dif );

public static native @ByVal lapack_int LAPACKE_ctgsyl_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                                @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float c, @ByVal lapack_int ldc,
                                @Const lapack_complex_float d, @ByVal lapack_int ldd,
                                @Const lapack_complex_float e, @ByVal lapack_int lde,
                                lapack_complex_float f, @ByVal lapack_int ldf,
                                FloatPointer scale, FloatPointer dif,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_ctgsyl_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                                @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float c, @ByVal lapack_int ldc,
                                @Const lapack_complex_float d, @ByVal lapack_int ldd,
                                @Const lapack_complex_float e, @ByVal lapack_int lde,
                                lapack_complex_float f, @ByVal lapack_int ldf,
                                FloatBuffer scale, FloatBuffer dif,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_ctgsyl_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                                @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float c, @ByVal lapack_int ldc,
                                @Const lapack_complex_float d, @ByVal lapack_int ldd,
                                @Const lapack_complex_float e, @ByVal lapack_int lde,
                                lapack_complex_float f, @ByVal lapack_int ldf,
                                float[] scale, float[] dif,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_ctpcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const lapack_complex_float ap,
                           FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_ctpcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const lapack_complex_float ap,
                           FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_ctpcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const lapack_complex_float ap,
                           float[] rcond );

public static native @ByVal lapack_int LAPACKE_ctpcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n,
                                @Const lapack_complex_float ap, FloatPointer rcond,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_ctpcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n,
                                @Const lapack_complex_float ap, FloatBuffer rcond,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_ctpcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n,
                                @Const lapack_complex_float ap, float[] rcond,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_ctpmqrt( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                            @ByVal lapack_int l, @ByVal lapack_int nb,
                            @Const lapack_complex_float v, @ByVal lapack_int ldv,
                            @Const lapack_complex_float t, @ByVal lapack_int ldt,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ctpmqrt_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                 @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                 @ByVal lapack_int l, @ByVal lapack_int nb,
                                 @Const lapack_complex_float v, @ByVal lapack_int ldv,
                                 @Const lapack_complex_float t, @ByVal lapack_int ldt,
                                 lapack_complex_float a, @ByVal lapack_int lda,
                                 lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_ctpqrt( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int l, @ByVal lapack_int nb, lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float b,
                           @ByVal lapack_int ldb, lapack_complex_float t,
                           @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_ctpqrt2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @ByVal lapack_int l,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float b, @ByVal lapack_int ldb,
                            lapack_complex_float t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_ctpqrt2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int l,
                                 lapack_complex_float a, @ByVal lapack_int lda,
                                 lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_ctpqrt_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int l, @ByVal lapack_int nb,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float t, @ByVal lapack_int ldt,
                                lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_ctprfb( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans, @Cast("char") byte direct,
                           @Cast("char") byte storev, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, @ByVal lapack_int l,
                           @Const lapack_complex_float v, @ByVal lapack_int ldv,
                           @Const lapack_complex_float t, @ByVal lapack_int ldt,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ctprfb_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @Cast("char") byte direct, @Cast("char") byte storev, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k, @ByVal lapack_int l,
                                @Const lapack_complex_float v, @ByVal lapack_int ldv,
                                @Const lapack_complex_float t, @ByVal lapack_int ldt,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float work, @ByVal lapack_int ldwork );

public static native @ByVal lapack_int LAPACKE_ctprfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float ap,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           @Const lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_ctprfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float ap,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           @Const lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_ctprfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float ap,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           @Const lapack_complex_float x, @ByVal lapack_int ldx,
                           float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_ctprfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float ap,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                @Const lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatPointer ferr, FloatPointer berr,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_ctprfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float ap,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                @Const lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatBuffer ferr, FloatBuffer berr,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_ctprfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float ap,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                @Const lapack_complex_float x, @ByVal lapack_int ldx,
                                float[] ferr, float[] berr,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_ctptri( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag, @ByVal lapack_int n,
                           lapack_complex_float ap );

public static native @ByVal lapack_int LAPACKE_ctptri_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag,
                                @ByVal lapack_int n, lapack_complex_float ap );

public static native @ByVal lapack_int LAPACKE_ctptrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float ap,
                           lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ctptrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float ap,
                                lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ctpttf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const lapack_complex_float ap,
                           lapack_complex_float arf );

public static native @ByVal lapack_int LAPACKE_ctpttf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const lapack_complex_float ap,
                                lapack_complex_float arf );

public static native @ByVal lapack_int LAPACKE_ctpttr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float ap,
                           lapack_complex_float a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_ctpttr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float ap,
                                lapack_complex_float a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_ctrcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_ctrcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_ctrcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, float[] rcond );

public static native @ByVal lapack_int LAPACKE_ctrcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                FloatPointer rcond, lapack_complex_float work,
                                FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_ctrcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                FloatBuffer rcond, lapack_complex_float work,
                                FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_ctrcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                float[] rcond, lapack_complex_float work,
                                float[] rwork );

public static native @ByVal lapack_int LAPACKE_ctrevc( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           lapack_complex_float t, @ByVal lapack_int ldt,
                           lapack_complex_float vl, @ByVal lapack_int ldvl,
                           lapack_complex_float vr, @ByVal lapack_int ldvr,
                           @ByVal lapack_int mm, lapack_int m );

public static native @ByVal lapack_int LAPACKE_ctrevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                lapack_complex_float t, @ByVal lapack_int ldt,
                                lapack_complex_float vl, @ByVal lapack_int ldvl,
                                lapack_complex_float vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_ctrevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                lapack_complex_float t, @ByVal lapack_int ldt,
                                lapack_complex_float vl, @ByVal lapack_int ldvl,
                                lapack_complex_float vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_ctrevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                lapack_complex_float t, @ByVal lapack_int ldt,
                                lapack_complex_float vl, @ByVal lapack_int ldvl,
                                lapack_complex_float vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_ctrexc( int matrix_layout, @Cast("char") byte compq, @ByVal lapack_int n,
                           lapack_complex_float t, @ByVal lapack_int ldt,
                           lapack_complex_float q, @ByVal lapack_int ldq,
                           @ByVal lapack_int ifst, @ByVal lapack_int ilst );

public static native @ByVal lapack_int LAPACKE_ctrexc_work( int matrix_layout, @Cast("char") byte compq, @ByVal lapack_int n,
                                lapack_complex_float t, @ByVal lapack_int ldt,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                @ByVal lapack_int ifst, @ByVal lapack_int ilst );

public static native @ByVal lapack_int LAPACKE_ctrrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           @Const lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_ctrrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           @Const lapack_complex_float x, @ByVal lapack_int ldx,
                           FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_ctrrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           @Const lapack_complex_float x, @ByVal lapack_int ldx,
                           float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_ctrrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                @Const lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatPointer ferr, FloatPointer berr,
                                lapack_complex_float work, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_ctrrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                @Const lapack_complex_float x, @ByVal lapack_int ldx,
                                FloatBuffer ferr, FloatBuffer berr,
                                lapack_complex_float work, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_ctrrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                @Const lapack_complex_float x, @ByVal lapack_int ldx,
                                float[] ferr, float[] berr,
                                lapack_complex_float work, float[] rwork );

public static native @ByVal lapack_int LAPACKE_ctrsen( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           lapack_complex_float t, @ByVal lapack_int ldt,
                           lapack_complex_float q, @ByVal lapack_int ldq,
                           lapack_complex_float w, lapack_int m, FloatPointer s,
                           FloatPointer sep );
public static native @ByVal lapack_int LAPACKE_ctrsen( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           lapack_complex_float t, @ByVal lapack_int ldt,
                           lapack_complex_float q, @ByVal lapack_int ldq,
                           lapack_complex_float w, lapack_int m, FloatBuffer s,
                           FloatBuffer sep );
public static native @ByVal lapack_int LAPACKE_ctrsen( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           lapack_complex_float t, @ByVal lapack_int ldt,
                           lapack_complex_float q, @ByVal lapack_int ldq,
                           lapack_complex_float w, lapack_int m, float[] s,
                           float[] sep );

public static native @ByVal lapack_int LAPACKE_ctrsen_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                lapack_complex_float t, @ByVal lapack_int ldt,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_complex_float w, lapack_int m,
                                FloatPointer s, FloatPointer sep,
                                lapack_complex_float work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ctrsen_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                lapack_complex_float t, @ByVal lapack_int ldt,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_complex_float w, lapack_int m,
                                FloatBuffer s, FloatBuffer sep,
                                lapack_complex_float work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ctrsen_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                lapack_complex_float t, @ByVal lapack_int ldt,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_complex_float w, lapack_int m,
                                float[] s, float[] sep,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_ctrsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const lapack_complex_float t, @ByVal lapack_int ldt,
                           @Const lapack_complex_float vl, @ByVal lapack_int ldvl,
                           @Const lapack_complex_float vr, @ByVal lapack_int ldvr,
                           FloatPointer s, FloatPointer sep, @ByVal lapack_int mm, lapack_int m );
public static native @ByVal lapack_int LAPACKE_ctrsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const lapack_complex_float t, @ByVal lapack_int ldt,
                           @Const lapack_complex_float vl, @ByVal lapack_int ldvl,
                           @Const lapack_complex_float vr, @ByVal lapack_int ldvr,
                           FloatBuffer s, FloatBuffer sep, @ByVal lapack_int mm, lapack_int m );
public static native @ByVal lapack_int LAPACKE_ctrsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const lapack_complex_float t, @ByVal lapack_int ldt,
                           @Const lapack_complex_float vl, @ByVal lapack_int ldvl,
                           @Const lapack_complex_float vr, @ByVal lapack_int ldvr,
                           float[] s, float[] sep, @ByVal lapack_int mm, lapack_int m );

public static native @ByVal lapack_int LAPACKE_ctrsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const lapack_complex_float t, @ByVal lapack_int ldt,
                                @Const lapack_complex_float vl, @ByVal lapack_int ldvl,
                                @Const lapack_complex_float vr, @ByVal lapack_int ldvr,
                                FloatPointer s, FloatPointer sep, @ByVal lapack_int mm,
                                lapack_int m, lapack_complex_float work,
                                @ByVal lapack_int ldwork, FloatPointer rwork );
public static native @ByVal lapack_int LAPACKE_ctrsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const lapack_complex_float t, @ByVal lapack_int ldt,
                                @Const lapack_complex_float vl, @ByVal lapack_int ldvl,
                                @Const lapack_complex_float vr, @ByVal lapack_int ldvr,
                                FloatBuffer s, FloatBuffer sep, @ByVal lapack_int mm,
                                lapack_int m, lapack_complex_float work,
                                @ByVal lapack_int ldwork, FloatBuffer rwork );
public static native @ByVal lapack_int LAPACKE_ctrsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const lapack_complex_float t, @ByVal lapack_int ldt,
                                @Const lapack_complex_float vl, @ByVal lapack_int ldvl,
                                @Const lapack_complex_float vr, @ByVal lapack_int ldvr,
                                float[] s, float[] sep, @ByVal lapack_int mm,
                                lapack_int m, lapack_complex_float work,
                                @ByVal lapack_int ldwork, float[] rwork );

public static native @ByVal lapack_int LAPACKE_ctrsyl( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                           @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float c, @ByVal lapack_int ldc,
                           FloatPointer scale );
public static native @ByVal lapack_int LAPACKE_ctrsyl( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                           @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float c, @ByVal lapack_int ldc,
                           FloatBuffer scale );
public static native @ByVal lapack_int LAPACKE_ctrsyl( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                           @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_complex_float b, @ByVal lapack_int ldb,
                           lapack_complex_float c, @ByVal lapack_int ldc,
                           float[] scale );

public static native @ByVal lapack_int LAPACKE_ctrsyl_work( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                                @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float c, @ByVal lapack_int ldc,
                                FloatPointer scale );
public static native @ByVal lapack_int LAPACKE_ctrsyl_work( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                                @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float c, @ByVal lapack_int ldc,
                                FloatBuffer scale );
public static native @ByVal lapack_int LAPACKE_ctrsyl_work( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                                @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_complex_float b, @ByVal lapack_int ldb,
                                lapack_complex_float c, @ByVal lapack_int ldc,
                                float[] scale );

public static native @ByVal lapack_int LAPACKE_ctrtri( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_ctrtri_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag,
                                @ByVal lapack_int n, lapack_complex_float a,
                                @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_ctrtrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ctrtrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ctrttf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, lapack_complex_float arf );

public static native @ByVal lapack_int LAPACKE_ctrttf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, lapack_complex_float arf );

public static native @ByVal lapack_int LAPACKE_ctrttp( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float ap );

public static native @ByVal lapack_int LAPACKE_ctrttp_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float ap );

public static native @ByVal lapack_int LAPACKE_ctzrzf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_ctzrzf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                lapack_complex_float tau,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cunbdb( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           lapack_complex_float x11, @ByVal lapack_int ldx11,
                           lapack_complex_float x12, @ByVal lapack_int ldx12,
                           lapack_complex_float x21, @ByVal lapack_int ldx21,
                           lapack_complex_float x22, @ByVal lapack_int ldx22,
                           FloatPointer theta, FloatPointer phi,
                           lapack_complex_float taup1,
                           lapack_complex_float taup2,
                           lapack_complex_float tauq1,
                           lapack_complex_float tauq2 );
public static native @ByVal lapack_int LAPACKE_cunbdb( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           lapack_complex_float x11, @ByVal lapack_int ldx11,
                           lapack_complex_float x12, @ByVal lapack_int ldx12,
                           lapack_complex_float x21, @ByVal lapack_int ldx21,
                           lapack_complex_float x22, @ByVal lapack_int ldx22,
                           FloatBuffer theta, FloatBuffer phi,
                           lapack_complex_float taup1,
                           lapack_complex_float taup2,
                           lapack_complex_float tauq1,
                           lapack_complex_float tauq2 );
public static native @ByVal lapack_int LAPACKE_cunbdb( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           lapack_complex_float x11, @ByVal lapack_int ldx11,
                           lapack_complex_float x12, @ByVal lapack_int ldx12,
                           lapack_complex_float x21, @ByVal lapack_int ldx21,
                           lapack_complex_float x22, @ByVal lapack_int ldx22,
                           float[] theta, float[] phi,
                           lapack_complex_float taup1,
                           lapack_complex_float taup2,
                           lapack_complex_float tauq1,
                           lapack_complex_float tauq2 );

public static native @ByVal lapack_int LAPACKE_cunbdb_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                lapack_complex_float x11, @ByVal lapack_int ldx11,
                                lapack_complex_float x12, @ByVal lapack_int ldx12,
                                lapack_complex_float x21, @ByVal lapack_int ldx21,
                                lapack_complex_float x22, @ByVal lapack_int ldx22,
                                FloatPointer theta, FloatPointer phi,
                                lapack_complex_float taup1,
                                lapack_complex_float taup2,
                                lapack_complex_float tauq1,
                                lapack_complex_float tauq2,
                                lapack_complex_float work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_cunbdb_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                lapack_complex_float x11, @ByVal lapack_int ldx11,
                                lapack_complex_float x12, @ByVal lapack_int ldx12,
                                lapack_complex_float x21, @ByVal lapack_int ldx21,
                                lapack_complex_float x22, @ByVal lapack_int ldx22,
                                FloatBuffer theta, FloatBuffer phi,
                                lapack_complex_float taup1,
                                lapack_complex_float taup2,
                                lapack_complex_float tauq1,
                                lapack_complex_float tauq2,
                                lapack_complex_float work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_cunbdb_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                lapack_complex_float x11, @ByVal lapack_int ldx11,
                                lapack_complex_float x12, @ByVal lapack_int ldx12,
                                lapack_complex_float x21, @ByVal lapack_int ldx21,
                                lapack_complex_float x22, @ByVal lapack_int ldx22,
                                float[] theta, float[] phi,
                                lapack_complex_float taup1,
                                lapack_complex_float taup2,
                                lapack_complex_float tauq1,
                                lapack_complex_float tauq2,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cuncsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           lapack_complex_float x11, @ByVal lapack_int ldx11,
                           lapack_complex_float x12, @ByVal lapack_int ldx12,
                           lapack_complex_float x21, @ByVal lapack_int ldx21,
                           lapack_complex_float x22, @ByVal lapack_int ldx22,
                           FloatPointer theta, lapack_complex_float u1,
                           @ByVal lapack_int ldu1, lapack_complex_float u2,
                           @ByVal lapack_int ldu2, lapack_complex_float v1t,
                           @ByVal lapack_int ldv1t, lapack_complex_float v2t,
                           @ByVal lapack_int ldv2t );
public static native @ByVal lapack_int LAPACKE_cuncsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           lapack_complex_float x11, @ByVal lapack_int ldx11,
                           lapack_complex_float x12, @ByVal lapack_int ldx12,
                           lapack_complex_float x21, @ByVal lapack_int ldx21,
                           lapack_complex_float x22, @ByVal lapack_int ldx22,
                           FloatBuffer theta, lapack_complex_float u1,
                           @ByVal lapack_int ldu1, lapack_complex_float u2,
                           @ByVal lapack_int ldu2, lapack_complex_float v1t,
                           @ByVal lapack_int ldv1t, lapack_complex_float v2t,
                           @ByVal lapack_int ldv2t );
public static native @ByVal lapack_int LAPACKE_cuncsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           lapack_complex_float x11, @ByVal lapack_int ldx11,
                           lapack_complex_float x12, @ByVal lapack_int ldx12,
                           lapack_complex_float x21, @ByVal lapack_int ldx21,
                           lapack_complex_float x22, @ByVal lapack_int ldx22,
                           float[] theta, lapack_complex_float u1,
                           @ByVal lapack_int ldu1, lapack_complex_float u2,
                           @ByVal lapack_int ldu2, lapack_complex_float v1t,
                           @ByVal lapack_int ldv1t, lapack_complex_float v2t,
                           @ByVal lapack_int ldv2t );

public static native @ByVal lapack_int LAPACKE_cuncsd2by1( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           lapack_complex_float x11, @ByVal lapack_int ldx11,
                           lapack_complex_float x21, @ByVal lapack_int ldx21,
                           FloatPointer theta, lapack_complex_float u1,
                           @ByVal lapack_int ldu1, lapack_complex_float u2,
                           @ByVal lapack_int ldu2, lapack_complex_float v1t, @ByVal lapack_int ldv1t );
public static native @ByVal lapack_int LAPACKE_cuncsd2by1( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           lapack_complex_float x11, @ByVal lapack_int ldx11,
                           lapack_complex_float x21, @ByVal lapack_int ldx21,
                           FloatBuffer theta, lapack_complex_float u1,
                           @ByVal lapack_int ldu1, lapack_complex_float u2,
                           @ByVal lapack_int ldu2, lapack_complex_float v1t, @ByVal lapack_int ldv1t );
public static native @ByVal lapack_int LAPACKE_cuncsd2by1( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           lapack_complex_float x11, @ByVal lapack_int ldx11,
                           lapack_complex_float x21, @ByVal lapack_int ldx21,
                           float[] theta, lapack_complex_float u1,
                           @ByVal lapack_int ldu1, lapack_complex_float u2,
                           @ByVal lapack_int ldu2, lapack_complex_float v1t, @ByVal lapack_int ldv1t );

public static native @ByVal lapack_int LAPACKE_cuncsd2by1_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, lapack_complex_float x11, @ByVal lapack_int ldx11,
                                lapack_complex_float x21, @ByVal lapack_int ldx21,
                                FloatPointer theta, lapack_complex_float u1,
                                @ByVal lapack_int ldu1, lapack_complex_float u2,
                                @ByVal lapack_int ldu2, lapack_complex_float v1t,
                                @ByVal lapack_int ldv1t, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatPointer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_cuncsd2by1_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, lapack_complex_float x11, @ByVal lapack_int ldx11,
                                lapack_complex_float x21, @ByVal lapack_int ldx21,
                                FloatBuffer theta, lapack_complex_float u1,
                                @ByVal lapack_int ldu1, lapack_complex_float u2,
                                @ByVal lapack_int ldu2, lapack_complex_float v1t,
                                @ByVal lapack_int ldv1t, lapack_complex_float work,
                                @ByVal lapack_int lwork, FloatBuffer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_cuncsd2by1_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, lapack_complex_float x11, @ByVal lapack_int ldx11,
                                lapack_complex_float x21, @ByVal lapack_int ldx21,
                                float[] theta, lapack_complex_float u1,
                                @ByVal lapack_int ldu1, lapack_complex_float u2,
                                @ByVal lapack_int ldu2, lapack_complex_float v1t,
                                @ByVal lapack_int ldv1t, lapack_complex_float work,
                                @ByVal lapack_int lwork, float[] rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_cuncsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @Cast("char") byte signs, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, lapack_complex_float x11,
                                @ByVal lapack_int ldx11, lapack_complex_float x12,
                                @ByVal lapack_int ldx12, lapack_complex_float x21,
                                @ByVal lapack_int ldx21, lapack_complex_float x22,
                                @ByVal lapack_int ldx22, FloatPointer theta,
                                lapack_complex_float u1, @ByVal lapack_int ldu1,
                                lapack_complex_float u2, @ByVal lapack_int ldu2,
                                lapack_complex_float v1t, @ByVal lapack_int ldv1t,
                                lapack_complex_float v2t, @ByVal lapack_int ldv2t,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatPointer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_cuncsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @Cast("char") byte signs, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, lapack_complex_float x11,
                                @ByVal lapack_int ldx11, lapack_complex_float x12,
                                @ByVal lapack_int ldx12, lapack_complex_float x21,
                                @ByVal lapack_int ldx21, lapack_complex_float x22,
                                @ByVal lapack_int ldx22, FloatBuffer theta,
                                lapack_complex_float u1, @ByVal lapack_int ldu1,
                                lapack_complex_float u2, @ByVal lapack_int ldu2,
                                lapack_complex_float v1t, @ByVal lapack_int ldv1t,
                                lapack_complex_float v2t, @ByVal lapack_int ldv2t,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                FloatBuffer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_cuncsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @Cast("char") byte signs, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, lapack_complex_float x11,
                                @ByVal lapack_int ldx11, lapack_complex_float x12,
                                @ByVal lapack_int ldx12, lapack_complex_float x21,
                                @ByVal lapack_int ldx21, lapack_complex_float x22,
                                @ByVal lapack_int ldx22, float[] theta,
                                lapack_complex_float u1, @ByVal lapack_int ldu1,
                                lapack_complex_float u2, @ByVal lapack_int ldu2,
                                lapack_complex_float v1t, @ByVal lapack_int ldv1t,
                                lapack_complex_float v2t, @ByVal lapack_int ldv2t,
                                lapack_complex_float work, @ByVal lapack_int lwork,
                                float[] rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_cungbr( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_int k, lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_cungbr_work( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_complex_float tau,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cunghr( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_cunghr_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_complex_float tau,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cunglq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_cunglq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_complex_float tau,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cungql( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_cungql_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_complex_float tau,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cungqr( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_cungqr_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_complex_float tau,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cungrq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_cungrq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_complex_float tau,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cungtr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_complex_float tau );

public static native @ByVal lapack_int LAPACKE_cungtr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_complex_float tau,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cunmbr( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_complex_float tau,
                           lapack_complex_float c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_cunmbr_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte side,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_complex_float tau,
                                lapack_complex_float c, @ByVal lapack_int ldc,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cunmhr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_complex_float tau,
                           lapack_complex_float c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_cunmhr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_complex_float tau,
                                lapack_complex_float c, @ByVal lapack_int ldc,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cunmlq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_complex_float tau,
                           lapack_complex_float c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_cunmlq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_complex_float tau,
                                lapack_complex_float c, @ByVal lapack_int ldc,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cunmql( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_complex_float tau,
                           lapack_complex_float c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_cunmql_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_complex_float tau,
                                lapack_complex_float c, @ByVal lapack_int ldc,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cunmqr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_complex_float tau,
                           lapack_complex_float c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_cunmqr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_complex_float tau,
                                lapack_complex_float c, @ByVal lapack_int ldc,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cunmrq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_complex_float tau,
                           lapack_complex_float c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_cunmrq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_complex_float tau,
                                lapack_complex_float c, @ByVal lapack_int ldc,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cunmrz( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @ByVal lapack_int l, @Const lapack_complex_float a,
                           @ByVal lapack_int lda, @Const lapack_complex_float tau,
                           lapack_complex_float c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_cunmrz_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @ByVal lapack_int l, @Const lapack_complex_float a,
                                @ByVal lapack_int lda, @Const lapack_complex_float tau,
                                lapack_complex_float c, @ByVal lapack_int ldc,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cunmtr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_complex_float tau,
                           lapack_complex_float c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_cunmtr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_complex_float tau,
                                lapack_complex_float c, @ByVal lapack_int ldc,
                                lapack_complex_float work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_cupgtr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_float ap,
                           @Const lapack_complex_float tau,
                           lapack_complex_float q, @ByVal lapack_int ldq );

public static native @ByVal lapack_int LAPACKE_cupgtr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_float ap,
                                @Const lapack_complex_float tau,
                                lapack_complex_float q, @ByVal lapack_int ldq,
                                lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_cupmtr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_float ap,
                           @Const lapack_complex_float tau,
                           lapack_complex_float c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_cupmtr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_float ap,
                                @Const lapack_complex_float tau,
                                lapack_complex_float c, @ByVal lapack_int ldc,
                                lapack_complex_float work );

public static native @ByVal lapack_int LAPACKE_dbbcsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @ByVal lapack_int m,
                           @ByVal lapack_int p, @ByVal lapack_int q, DoublePointer theta,
                           DoublePointer phi, DoublePointer u1, @ByVal lapack_int ldu1, DoublePointer u2,
                           @ByVal lapack_int ldu2, DoublePointer v1t, @ByVal lapack_int ldv1t,
                           DoublePointer v2t, @ByVal lapack_int ldv2t, DoublePointer b11d,
                           DoublePointer b11e, DoublePointer b12d, DoublePointer b12e,
                           DoublePointer b21d, DoublePointer b21e, DoublePointer b22d,
                           DoublePointer b22e );
public static native @ByVal lapack_int LAPACKE_dbbcsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @ByVal lapack_int m,
                           @ByVal lapack_int p, @ByVal lapack_int q, DoubleBuffer theta,
                           DoubleBuffer phi, DoubleBuffer u1, @ByVal lapack_int ldu1, DoubleBuffer u2,
                           @ByVal lapack_int ldu2, DoubleBuffer v1t, @ByVal lapack_int ldv1t,
                           DoubleBuffer v2t, @ByVal lapack_int ldv2t, DoubleBuffer b11d,
                           DoubleBuffer b11e, DoubleBuffer b12d, DoubleBuffer b12e,
                           DoubleBuffer b21d, DoubleBuffer b21e, DoubleBuffer b22d,
                           DoubleBuffer b22e );
public static native @ByVal lapack_int LAPACKE_dbbcsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @ByVal lapack_int m,
                           @ByVal lapack_int p, @ByVal lapack_int q, double[] theta,
                           double[] phi, double[] u1, @ByVal lapack_int ldu1, double[] u2,
                           @ByVal lapack_int ldu2, double[] v1t, @ByVal lapack_int ldv1t,
                           double[] v2t, @ByVal lapack_int ldv2t, double[] b11d,
                           double[] b11e, double[] b12d, double[] b12e,
                           double[] b21d, double[] b21e, double[] b22d,
                           double[] b22e );

public static native @ByVal lapack_int LAPACKE_dbbcsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                DoublePointer theta, DoublePointer phi, DoublePointer u1,
                                @ByVal lapack_int ldu1, DoublePointer u2, @ByVal lapack_int ldu2,
                                DoublePointer v1t, @ByVal lapack_int ldv1t, DoublePointer v2t,
                                @ByVal lapack_int ldv2t, DoublePointer b11d, DoublePointer b11e,
                                DoublePointer b12d, DoublePointer b12e, DoublePointer b21d,
                                DoublePointer b21e, DoublePointer b22d, DoublePointer b22e,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dbbcsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                DoubleBuffer theta, DoubleBuffer phi, DoubleBuffer u1,
                                @ByVal lapack_int ldu1, DoubleBuffer u2, @ByVal lapack_int ldu2,
                                DoubleBuffer v1t, @ByVal lapack_int ldv1t, DoubleBuffer v2t,
                                @ByVal lapack_int ldv2t, DoubleBuffer b11d, DoubleBuffer b11e,
                                DoubleBuffer b12d, DoubleBuffer b12e, DoubleBuffer b21d,
                                DoubleBuffer b21e, DoubleBuffer b22d, DoubleBuffer b22e,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dbbcsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                double[] theta, double[] phi, double[] u1,
                                @ByVal lapack_int ldu1, double[] u2, @ByVal lapack_int ldu2,
                                double[] v1t, @ByVal lapack_int ldv1t, double[] v2t,
                                @ByVal lapack_int ldv2t, double[] b11d, double[] b11e,
                                double[] b12d, double[] b12e, double[] b21d,
                                double[] b21e, double[] b22d, double[] b22e,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dbdsdc( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte compq,
                           @ByVal lapack_int n, DoublePointer d, DoublePointer e, DoublePointer u,
                           @ByVal lapack_int ldu, DoublePointer vt, @ByVal lapack_int ldvt,
                           DoublePointer q, lapack_int iq );
public static native @ByVal lapack_int LAPACKE_dbdsdc( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte compq,
                           @ByVal lapack_int n, DoubleBuffer d, DoubleBuffer e, DoubleBuffer u,
                           @ByVal lapack_int ldu, DoubleBuffer vt, @ByVal lapack_int ldvt,
                           DoubleBuffer q, lapack_int iq );
public static native @ByVal lapack_int LAPACKE_dbdsdc( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte compq,
                           @ByVal lapack_int n, double[] d, double[] e, double[] u,
                           @ByVal lapack_int ldu, double[] vt, @ByVal lapack_int ldvt,
                           double[] q, lapack_int iq );

public static native @ByVal lapack_int LAPACKE_dbdsdc_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte compq,
                                @ByVal lapack_int n, DoublePointer d, DoublePointer e, DoublePointer u,
                                @ByVal lapack_int ldu, DoublePointer vt, @ByVal lapack_int ldvt,
                                DoublePointer q, lapack_int iq, DoublePointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dbdsdc_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte compq,
                                @ByVal lapack_int n, DoubleBuffer d, DoubleBuffer e, DoubleBuffer u,
                                @ByVal lapack_int ldu, DoubleBuffer vt, @ByVal lapack_int ldvt,
                                DoubleBuffer q, lapack_int iq, DoubleBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dbdsdc_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte compq,
                                @ByVal lapack_int n, double[] d, double[] e, double[] u,
                                @ByVal lapack_int ldu, double[] vt, @ByVal lapack_int ldvt,
                                double[] q, lapack_int iq, double[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dbdsqr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                           DoublePointer d, DoublePointer e, DoublePointer vt, @ByVal lapack_int ldvt,
                           DoublePointer u, @ByVal lapack_int ldu, DoublePointer c,
                           @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dbdsqr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                           DoubleBuffer d, DoubleBuffer e, DoubleBuffer vt, @ByVal lapack_int ldvt,
                           DoubleBuffer u, @ByVal lapack_int ldu, DoubleBuffer c,
                           @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dbdsqr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                           double[] d, double[] e, double[] vt, @ByVal lapack_int ldvt,
                           double[] u, @ByVal lapack_int ldu, double[] c,
                           @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_dbdsqr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                                DoublePointer d, DoublePointer e, DoublePointer vt,
                                @ByVal lapack_int ldvt, DoublePointer u, @ByVal lapack_int ldu,
                                DoublePointer c, @ByVal lapack_int ldc, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dbdsqr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                                DoubleBuffer d, DoubleBuffer e, DoubleBuffer vt,
                                @ByVal lapack_int ldvt, DoubleBuffer u, @ByVal lapack_int ldu,
                                DoubleBuffer c, @ByVal lapack_int ldc, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dbdsqr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                                double[] d, double[] e, double[] vt,
                                @ByVal lapack_int ldvt, double[] u, @ByVal lapack_int ldu,
                                double[] c, @ByVal lapack_int ldc, double[] work );

public static native @ByVal lapack_int LAPACKE_dbdsvdx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, DoublePointer d, DoublePointer e,
                           double vl, double vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                           DoublePointer s, DoublePointer z, @ByVal lapack_int ldz,
                           lapack_int superb );
public static native @ByVal lapack_int LAPACKE_dbdsvdx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, DoubleBuffer d, DoubleBuffer e,
                           double vl, double vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                           DoubleBuffer s, DoubleBuffer z, @ByVal lapack_int ldz,
                           lapack_int superb );
public static native @ByVal lapack_int LAPACKE_dbdsvdx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, double[] d, double[] e,
                           double vl, double vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                           double[] s, double[] z, @ByVal lapack_int ldz,
                           lapack_int superb );

public static native @ByVal lapack_int LAPACKE_dbdsvdx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte jobz, @Cast("char") byte range,
                              @ByVal lapack_int n, DoublePointer d, DoublePointer e,
                              double vl, double vu,
                              @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                              DoublePointer s, DoublePointer z, @ByVal lapack_int ldz,
                                DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dbdsvdx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte jobz, @Cast("char") byte range,
                              @ByVal lapack_int n, DoubleBuffer d, DoubleBuffer e,
                              double vl, double vu,
                              @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                              DoubleBuffer s, DoubleBuffer z, @ByVal lapack_int ldz,
                                DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dbdsvdx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte jobz, @Cast("char") byte range,
                              @ByVal lapack_int n, double[] d, double[] e,
                              double vl, double vu,
                              @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                              double[] s, double[] z, @ByVal lapack_int ldz,
                                double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_ddisna( @Cast("char") byte job, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const DoublePointer d, DoublePointer sep );
public static native @ByVal lapack_int LAPACKE_ddisna( @Cast("char") byte job, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const DoubleBuffer d, DoubleBuffer sep );
public static native @ByVal lapack_int LAPACKE_ddisna( @Cast("char") byte job, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const double[] d, double[] sep );

public static native @ByVal lapack_int LAPACKE_ddisna_work( @Cast("char") byte job, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const DoublePointer d, DoublePointer sep );
public static native @ByVal lapack_int LAPACKE_ddisna_work( @Cast("char") byte job, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const DoubleBuffer d, DoubleBuffer sep );
public static native @ByVal lapack_int LAPACKE_ddisna_work( @Cast("char") byte job, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const double[] d, double[] sep );

public static native @ByVal lapack_int LAPACKE_dgbbrd( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, DoublePointer ab, @ByVal lapack_int ldab,
                           DoublePointer d, DoublePointer e, DoublePointer q, @ByVal lapack_int ldq,
                           DoublePointer pt, @ByVal lapack_int ldpt, DoublePointer c,
                           @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dgbbrd( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, DoubleBuffer ab, @ByVal lapack_int ldab,
                           DoubleBuffer d, DoubleBuffer e, DoubleBuffer q, @ByVal lapack_int ldq,
                           DoubleBuffer pt, @ByVal lapack_int ldpt, DoubleBuffer c,
                           @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dgbbrd( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, double[] ab, @ByVal lapack_int ldab,
                           double[] d, double[] e, double[] q, @ByVal lapack_int ldq,
                           double[] pt, @ByVal lapack_int ldpt, double[] c,
                           @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_dgbbrd_work( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                                @ByVal lapack_int ku, DoublePointer ab, @ByVal lapack_int ldab,
                                DoublePointer d, DoublePointer e, DoublePointer q, @ByVal lapack_int ldq,
                                DoublePointer pt, @ByVal lapack_int ldpt, DoublePointer c,
                                @ByVal lapack_int ldc, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dgbbrd_work( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                                @ByVal lapack_int ku, DoubleBuffer ab, @ByVal lapack_int ldab,
                                DoubleBuffer d, DoubleBuffer e, DoubleBuffer q, @ByVal lapack_int ldq,
                                DoubleBuffer pt, @ByVal lapack_int ldpt, DoubleBuffer c,
                                @ByVal lapack_int ldc, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dgbbrd_work( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                                @ByVal lapack_int ku, double[] ab, @ByVal lapack_int ldab,
                                double[] d, double[] e, double[] q, @ByVal lapack_int ldq,
                                double[] pt, @ByVal lapack_int ldpt, double[] c,
                                @ByVal lapack_int ldc, double[] work );

public static native @ByVal lapack_int LAPACKE_dgbcon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const DoublePointer ab,
                           @ByVal lapack_int ldab, @Const lapack_int ipiv,
                           double anorm, DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_dgbcon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const DoubleBuffer ab,
                           @ByVal lapack_int ldab, @Const lapack_int ipiv,
                           double anorm, DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_dgbcon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const double[] ab,
                           @ByVal lapack_int ldab, @Const lapack_int ipiv,
                           double anorm, double[] rcond );

public static native @ByVal lapack_int LAPACKE_dgbcon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const DoublePointer ab,
                                @ByVal lapack_int ldab, @Const lapack_int ipiv,
                                double anorm, DoublePointer rcond, DoublePointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgbcon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const DoubleBuffer ab,
                                @ByVal lapack_int ldab, @Const lapack_int ipiv,
                                double anorm, DoubleBuffer rcond, DoubleBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgbcon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const double[] ab,
                                @ByVal lapack_int ldab, @Const lapack_int ipiv,
                                double anorm, double[] rcond, double[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dgbequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const DoublePointer ab,
                           @ByVal lapack_int ldab, DoublePointer r, DoublePointer c,
                           DoublePointer rowcnd, DoublePointer colcnd, DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_dgbequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const DoubleBuffer ab,
                           @ByVal lapack_int ldab, DoubleBuffer r, DoubleBuffer c,
                           DoubleBuffer rowcnd, DoubleBuffer colcnd, DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_dgbequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const double[] ab,
                           @ByVal lapack_int ldab, double[] r, double[] c,
                           double[] rowcnd, double[] colcnd, double[] amax );

public static native @ByVal lapack_int LAPACKE_dgbequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const DoublePointer ab,
                                @ByVal lapack_int ldab, DoublePointer r, DoublePointer c,
                                DoublePointer rowcnd, DoublePointer colcnd, DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_dgbequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const DoubleBuffer ab,
                                @ByVal lapack_int ldab, DoubleBuffer r, DoubleBuffer c,
                                DoubleBuffer rowcnd, DoubleBuffer colcnd, DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_dgbequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const double[] ab,
                                @ByVal lapack_int ldab, double[] r, double[] c,
                                double[] rowcnd, double[] colcnd, double[] amax );

public static native @ByVal lapack_int LAPACKE_dgbequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @ByVal lapack_int kl, @ByVal lapack_int ku, @Const DoublePointer ab,
                            @ByVal lapack_int ldab, DoublePointer r, DoublePointer c,
                            DoublePointer rowcnd, DoublePointer colcnd, DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_dgbequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @ByVal lapack_int kl, @ByVal lapack_int ku, @Const DoubleBuffer ab,
                            @ByVal lapack_int ldab, DoubleBuffer r, DoubleBuffer c,
                            DoubleBuffer rowcnd, DoubleBuffer colcnd, DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_dgbequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @ByVal lapack_int kl, @ByVal lapack_int ku, @Const double[] ab,
                            @ByVal lapack_int ldab, double[] r, double[] c,
                            double[] rowcnd, double[] colcnd, double[] amax );

public static native @ByVal lapack_int LAPACKE_dgbequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int kl, @ByVal lapack_int ku, @Const DoublePointer ab,
                                 @ByVal lapack_int ldab, DoublePointer r, DoublePointer c,
                                 DoublePointer rowcnd, DoublePointer colcnd, DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_dgbequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int kl, @ByVal lapack_int ku, @Const DoubleBuffer ab,
                                 @ByVal lapack_int ldab, DoubleBuffer r, DoubleBuffer c,
                                 DoubleBuffer rowcnd, DoubleBuffer colcnd, DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_dgbequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int kl, @ByVal lapack_int ku, @Const double[] ab,
                                 @ByVal lapack_int ldab, double[] r, double[] c,
                                 double[] rowcnd, double[] colcnd, double[] amax );

public static native @ByVal lapack_int LAPACKE_dgbrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                           @Const DoublePointer ab, @ByVal lapack_int ldab, @Const DoublePointer afb,
                           @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                           @Const DoublePointer b, @ByVal lapack_int ldb, DoublePointer x,
                           @ByVal lapack_int ldx, DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_dgbrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                           @Const DoubleBuffer ab, @ByVal lapack_int ldab, @Const DoubleBuffer afb,
                           @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                           @Const DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x,
                           @ByVal lapack_int ldx, DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_dgbrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                           @Const double[] ab, @ByVal lapack_int ldab, @Const double[] afb,
                           @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                           @Const double[] b, @ByVal lapack_int ldb, double[] x,
                           @ByVal lapack_int ldx, double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_dgbrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                                @Const DoublePointer ab, @ByVal lapack_int ldab,
                                @Const DoublePointer afb, @ByVal lapack_int ldafb,
                                @Const lapack_int ipiv, @Const DoublePointer b,
                                @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                                DoublePointer ferr, DoublePointer berr, DoublePointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgbrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                                @Const DoubleBuffer ab, @ByVal lapack_int ldab,
                                @Const DoubleBuffer afb, @ByVal lapack_int ldafb,
                                @Const lapack_int ipiv, @Const DoubleBuffer b,
                                @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                                DoubleBuffer ferr, DoubleBuffer berr, DoubleBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgbrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                                @Const double[] ab, @ByVal lapack_int ldab,
                                @Const double[] afb, @ByVal lapack_int ldafb,
                                @Const lapack_int ipiv, @Const double[] b,
                                @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                                double[] ferr, double[] berr, double[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dgbrfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, @Const DoublePointer ab, @ByVal lapack_int ldab,
                            @Const DoublePointer afb, @ByVal lapack_int ldafb,
                            @Const lapack_int ipiv, @Const DoublePointer r,
                            @Const DoublePointer c, @Const DoublePointer b, @ByVal lapack_int ldb,
                            DoublePointer x, @ByVal lapack_int ldx, DoublePointer rcond,
                            DoublePointer berr, @ByVal lapack_int n_err_bnds,
                            DoublePointer err_bnds_norm, DoublePointer err_bnds_comp,
                            @ByVal lapack_int nparams, DoublePointer params );
public static native @ByVal lapack_int LAPACKE_dgbrfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, @Const DoubleBuffer ab, @ByVal lapack_int ldab,
                            @Const DoubleBuffer afb, @ByVal lapack_int ldafb,
                            @Const lapack_int ipiv, @Const DoubleBuffer r,
                            @Const DoubleBuffer c, @Const DoubleBuffer b, @ByVal lapack_int ldb,
                            DoubleBuffer x, @ByVal lapack_int ldx, DoubleBuffer rcond,
                            DoubleBuffer berr, @ByVal lapack_int n_err_bnds,
                            DoubleBuffer err_bnds_norm, DoubleBuffer err_bnds_comp,
                            @ByVal lapack_int nparams, DoubleBuffer params );
public static native @ByVal lapack_int LAPACKE_dgbrfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, @Const double[] ab, @ByVal lapack_int ldab,
                            @Const double[] afb, @ByVal lapack_int ldafb,
                            @Const lapack_int ipiv, @Const double[] r,
                            @Const double[] c, @Const double[] b, @ByVal lapack_int ldb,
                            double[] x, @ByVal lapack_int ldx, double[] rcond,
                            double[] berr, @ByVal lapack_int n_err_bnds,
                            double[] err_bnds_norm, double[] err_bnds_comp,
                            @ByVal lapack_int nparams, double[] params );

public static native @ByVal lapack_int LAPACKE_dgbrfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs, @Const DoublePointer ab,
                                 @ByVal lapack_int ldab, @Const DoublePointer afb,
                                 @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                                 @Const DoublePointer r, @Const DoublePointer c,
                                 @Const DoublePointer b, @ByVal lapack_int ldb, DoublePointer x,
                                 @ByVal lapack_int ldx, DoublePointer rcond, DoublePointer berr,
                                 @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                                 DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoublePointer params, DoublePointer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgbrfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs, @Const DoubleBuffer ab,
                                 @ByVal lapack_int ldab, @Const DoubleBuffer afb,
                                 @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                                 @Const DoubleBuffer r, @Const DoubleBuffer c,
                                 @Const DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x,
                                 @ByVal lapack_int ldx, DoubleBuffer rcond, DoubleBuffer berr,
                                 @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                                 DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoubleBuffer params, DoubleBuffer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgbrfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs, @Const double[] ab,
                                 @ByVal lapack_int ldab, @Const double[] afb,
                                 @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                                 @Const double[] r, @Const double[] c,
                                 @Const double[] b, @ByVal lapack_int ldb, double[] x,
                                 @ByVal lapack_int ldx, double[] rcond, double[] berr,
                                 @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                                 double[] err_bnds_comp, @ByVal lapack_int nparams,
                                 double[] params, double[] work,
                                 lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dgbsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int kl,
                          @ByVal lapack_int ku, @ByVal lapack_int nrhs, DoublePointer ab,
                          @ByVal lapack_int ldab, lapack_int ipiv, DoublePointer b,
                          @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgbsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int kl,
                          @ByVal lapack_int ku, @ByVal lapack_int nrhs, DoubleBuffer ab,
                          @ByVal lapack_int ldab, lapack_int ipiv, DoubleBuffer b,
                          @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgbsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int kl,
                          @ByVal lapack_int ku, @ByVal lapack_int nrhs, double[] ab,
                          @ByVal lapack_int ldab, lapack_int ipiv, double[] b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dgbsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int kl,
                               @ByVal lapack_int ku, @ByVal lapack_int nrhs, DoublePointer ab,
                               @ByVal lapack_int ldab, lapack_int ipiv, DoublePointer b,
                               @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgbsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int kl,
                               @ByVal lapack_int ku, @ByVal lapack_int nrhs, DoubleBuffer ab,
                               @ByVal lapack_int ldab, lapack_int ipiv, DoubleBuffer b,
                               @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgbsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int kl,
                               @ByVal lapack_int ku, @ByVal lapack_int nrhs, double[] ab,
                               @ByVal lapack_int ldab, lapack_int ipiv, double[] b,
                               @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dgbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @ByVal lapack_int nrhs, DoublePointer ab, @ByVal lapack_int ldab,
                           DoublePointer afb, @ByVal lapack_int ldafb, lapack_int ipiv,
                           @Cast("char*") BytePointer equed, DoublePointer r, DoublePointer c, DoublePointer b,
                           @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                           DoublePointer rcond, DoublePointer ferr, DoublePointer berr,
                           DoublePointer rpivot );
public static native @ByVal lapack_int LAPACKE_dgbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @ByVal lapack_int nrhs, DoubleBuffer ab, @ByVal lapack_int ldab,
                           DoubleBuffer afb, @ByVal lapack_int ldafb, lapack_int ipiv,
                           @Cast("char*") ByteBuffer equed, DoubleBuffer r, DoubleBuffer c, DoubleBuffer b,
                           @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                           DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr,
                           DoubleBuffer rpivot );
public static native @ByVal lapack_int LAPACKE_dgbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @ByVal lapack_int nrhs, double[] ab, @ByVal lapack_int ldab,
                           double[] afb, @ByVal lapack_int ldafb, lapack_int ipiv,
                           @Cast("char*") byte[] equed, double[] r, double[] c, double[] b,
                           @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                           double[] rcond, double[] ferr, double[] berr,
                           double[] rpivot );

public static native @ByVal lapack_int LAPACKE_dgbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @ByVal lapack_int nrhs, DoublePointer ab, @ByVal lapack_int ldab,
                                DoublePointer afb, @ByVal lapack_int ldafb, lapack_int ipiv,
                                @Cast("char*") BytePointer equed, DoublePointer r, DoublePointer c, DoublePointer b,
                                @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                                DoublePointer rcond, DoublePointer ferr, DoublePointer berr,
                                DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @ByVal lapack_int nrhs, DoubleBuffer ab, @ByVal lapack_int ldab,
                                DoubleBuffer afb, @ByVal lapack_int ldafb, lapack_int ipiv,
                                @Cast("char*") ByteBuffer equed, DoubleBuffer r, DoubleBuffer c, DoubleBuffer b,
                                @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                                DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr,
                                DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @ByVal lapack_int nrhs, double[] ab, @ByVal lapack_int ldab,
                                double[] afb, @ByVal lapack_int ldafb, lapack_int ipiv,
                                @Cast("char*") byte[] equed, double[] r, double[] c, double[] b,
                                @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                                double[] rcond, double[] ferr, double[] berr,
                                double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dgbsvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, DoublePointer ab, @ByVal lapack_int ldab,
                            DoublePointer afb, @ByVal lapack_int ldafb, lapack_int ipiv,
                            @Cast("char*") BytePointer equed, DoublePointer r, DoublePointer c, DoublePointer b,
                            @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                            DoublePointer rcond, DoublePointer rpvgrw, DoublePointer berr,
                            @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                            DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                            DoublePointer params );
public static native @ByVal lapack_int LAPACKE_dgbsvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, DoubleBuffer ab, @ByVal lapack_int ldab,
                            DoubleBuffer afb, @ByVal lapack_int ldafb, lapack_int ipiv,
                            @Cast("char*") ByteBuffer equed, DoubleBuffer r, DoubleBuffer c, DoubleBuffer b,
                            @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                            DoubleBuffer rcond, DoubleBuffer rpvgrw, DoubleBuffer berr,
                            @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                            DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                            DoubleBuffer params );
public static native @ByVal lapack_int LAPACKE_dgbsvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, double[] ab, @ByVal lapack_int ldab,
                            double[] afb, @ByVal lapack_int ldafb, lapack_int ipiv,
                            @Cast("char*") byte[] equed, double[] r, double[] c, double[] b,
                            @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                            double[] rcond, double[] rpvgrw, double[] berr,
                            @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                            double[] err_bnds_comp, @ByVal lapack_int nparams,
                            double[] params );

public static native @ByVal lapack_int LAPACKE_dgbsvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs, DoublePointer ab, @ByVal lapack_int ldab,
                                 DoublePointer afb, @ByVal lapack_int ldafb,
                                 lapack_int ipiv, @Cast("char*") BytePointer equed, DoublePointer r,
                                 DoublePointer c, DoublePointer b, @ByVal lapack_int ldb,
                                 DoublePointer x, @ByVal lapack_int ldx, DoublePointer rcond,
                                 DoublePointer rpvgrw, DoublePointer berr,
                                 @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                                 DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoublePointer params, DoublePointer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgbsvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs, DoubleBuffer ab, @ByVal lapack_int ldab,
                                 DoubleBuffer afb, @ByVal lapack_int ldafb,
                                 lapack_int ipiv, @Cast("char*") ByteBuffer equed, DoubleBuffer r,
                                 DoubleBuffer c, DoubleBuffer b, @ByVal lapack_int ldb,
                                 DoubleBuffer x, @ByVal lapack_int ldx, DoubleBuffer rcond,
                                 DoubleBuffer rpvgrw, DoubleBuffer berr,
                                 @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                                 DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoubleBuffer params, DoubleBuffer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgbsvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs, double[] ab, @ByVal lapack_int ldab,
                                 double[] afb, @ByVal lapack_int ldafb,
                                 lapack_int ipiv, @Cast("char*") byte[] equed, double[] r,
                                 double[] c, double[] b, @ByVal lapack_int ldb,
                                 double[] x, @ByVal lapack_int ldx, double[] rcond,
                                 double[] rpvgrw, double[] berr,
                                 @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                                 double[] err_bnds_comp, @ByVal lapack_int nparams,
                                 double[] params, double[] work,
                                 lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dgbtrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, DoublePointer ab,
                           @ByVal lapack_int ldab, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgbtrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, DoubleBuffer ab,
                           @ByVal lapack_int ldab, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgbtrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, double[] ab,
                           @ByVal lapack_int ldab, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_dgbtrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, DoublePointer ab,
                                @ByVal lapack_int ldab, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgbtrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, DoubleBuffer ab,
                                @ByVal lapack_int ldab, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgbtrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, double[] ab,
                                @ByVal lapack_int ldab, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_dgbtrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                           @Const DoublePointer ab, @ByVal lapack_int ldab,
                           @Const lapack_int ipiv, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgbtrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                           @Const DoubleBuffer ab, @ByVal lapack_int ldab,
                           @Const lapack_int ipiv, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgbtrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                           @Const double[] ab, @ByVal lapack_int ldab,
                           @Const lapack_int ipiv, double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dgbtrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                                @Const DoublePointer ab, @ByVal lapack_int ldab,
                                @Const lapack_int ipiv, DoublePointer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgbtrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                                @Const DoubleBuffer ab, @ByVal lapack_int ldab,
                                @Const lapack_int ipiv, DoubleBuffer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgbtrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                                @Const double[] ab, @ByVal lapack_int ldab,
                                @Const lapack_int ipiv, double[] b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dgebak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const DoublePointer scale,
                           @ByVal lapack_int m, DoublePointer v, @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_dgebak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const DoubleBuffer scale,
                           @ByVal lapack_int m, DoubleBuffer v, @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_dgebak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const double[] scale,
                           @ByVal lapack_int m, double[] v, @ByVal lapack_int ldv );

public static native @ByVal lapack_int LAPACKE_dgebak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const DoublePointer scale, @ByVal lapack_int m, DoublePointer v,
                                @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_dgebak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const DoubleBuffer scale, @ByVal lapack_int m, DoubleBuffer v,
                                @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_dgebak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const double[] scale, @ByVal lapack_int m, double[] v,
                                @ByVal lapack_int ldv );

public static native @ByVal lapack_int LAPACKE_dgebal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda, lapack_int ilo, lapack_int ihi,
                           DoublePointer scale );
public static native @ByVal lapack_int LAPACKE_dgebal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda, lapack_int ilo, lapack_int ihi,
                           DoubleBuffer scale );
public static native @ByVal lapack_int LAPACKE_dgebal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda, lapack_int ilo, lapack_int ihi,
                           double[] scale );

public static native @ByVal lapack_int LAPACKE_dgebal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, lapack_int ilo,
                                lapack_int ihi, DoublePointer scale );
public static native @ByVal lapack_int LAPACKE_dgebal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, lapack_int ilo,
                                lapack_int ihi, DoubleBuffer scale );
public static native @ByVal lapack_int LAPACKE_dgebal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, lapack_int ilo,
                                lapack_int ihi, double[] scale );

public static native @ByVal lapack_int LAPACKE_dgebrd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoublePointer a, @ByVal lapack_int lda, DoublePointer d, DoublePointer e,
                           DoublePointer tauq, DoublePointer taup );
public static native @ByVal lapack_int LAPACKE_dgebrd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer d, DoubleBuffer e,
                           DoubleBuffer tauq, DoubleBuffer taup );
public static native @ByVal lapack_int LAPACKE_dgebrd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           double[] a, @ByVal lapack_int lda, double[] d, double[] e,
                           double[] tauq, double[] taup );

public static native @ByVal lapack_int LAPACKE_dgebrd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, DoublePointer d, DoublePointer e,
                                DoublePointer tauq, DoublePointer taup, DoublePointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgebrd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer d, DoubleBuffer e,
                                DoubleBuffer tauq, DoubleBuffer taup, DoubleBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgebrd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, double[] d, double[] e,
                                double[] tauq, double[] taup, double[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dgecon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @Const DoublePointer a, @ByVal lapack_int lda, double anorm,
                           DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_dgecon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @Const DoubleBuffer a, @ByVal lapack_int lda, double anorm,
                           DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_dgecon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @Const double[] a, @ByVal lapack_int lda, double anorm,
                           double[] rcond );

public static native @ByVal lapack_int LAPACKE_dgecon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @Const DoublePointer a, @ByVal lapack_int lda, double anorm,
                                DoublePointer rcond, DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgecon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @Const DoubleBuffer a, @ByVal lapack_int lda, double anorm,
                                DoubleBuffer rcond, DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgecon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @Const double[] a, @ByVal lapack_int lda, double anorm,
                                double[] rcond, double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dgeequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const DoublePointer a, @ByVal lapack_int lda, DoublePointer r,
                           DoublePointer c, DoublePointer rowcnd, DoublePointer colcnd,
                           DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_dgeequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer r,
                           DoubleBuffer c, DoubleBuffer rowcnd, DoubleBuffer colcnd,
                           DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_dgeequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const double[] a, @ByVal lapack_int lda, double[] r,
                           double[] c, double[] rowcnd, double[] colcnd,
                           double[] amax );

public static native @ByVal lapack_int LAPACKE_dgeequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const DoublePointer a, @ByVal lapack_int lda, DoublePointer r,
                                DoublePointer c, DoublePointer rowcnd, DoublePointer colcnd,
                                DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_dgeequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer r,
                                DoubleBuffer c, DoubleBuffer rowcnd, DoubleBuffer colcnd,
                                DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_dgeequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const double[] a, @ByVal lapack_int lda, double[] r,
                                double[] c, double[] rowcnd, double[] colcnd,
                                double[] amax );

public static native @ByVal lapack_int LAPACKE_dgeequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @Const DoublePointer a, @ByVal lapack_int lda, DoublePointer r,
                            DoublePointer c, DoublePointer rowcnd, DoublePointer colcnd,
                            DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_dgeequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @Const DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer r,
                            DoubleBuffer c, DoubleBuffer rowcnd, DoubleBuffer colcnd,
                            DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_dgeequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @Const double[] a, @ByVal lapack_int lda, double[] r,
                            double[] c, double[] rowcnd, double[] colcnd,
                            double[] amax );

public static native @ByVal lapack_int LAPACKE_dgeequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @Const DoublePointer a, @ByVal lapack_int lda, DoublePointer r,
                                 DoublePointer c, DoublePointer rowcnd, DoublePointer colcnd,
                                 DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_dgeequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @Const DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer r,
                                 DoubleBuffer c, DoubleBuffer rowcnd, DoubleBuffer colcnd,
                                 DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_dgeequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @Const double[] a, @ByVal lapack_int lda, double[] r,
                                 double[] c, double[] rowcnd, double[] colcnd,
                                 double[] amax );

public static native @ByVal lapack_int LAPACKE_dgees( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                          LAPACK_D_SELECT2 select, @ByVal lapack_int n, DoublePointer a,
                          @ByVal lapack_int lda, lapack_int sdim, DoublePointer wr,
                          DoublePointer wi, DoublePointer vs, @ByVal lapack_int ldvs );
public static native @ByVal lapack_int LAPACKE_dgees( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                          LAPACK_D_SELECT2 select, @ByVal lapack_int n, DoubleBuffer a,
                          @ByVal lapack_int lda, lapack_int sdim, DoubleBuffer wr,
                          DoubleBuffer wi, DoubleBuffer vs, @ByVal lapack_int ldvs );
public static native @ByVal lapack_int LAPACKE_dgees( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                          LAPACK_D_SELECT2 select, @ByVal lapack_int n, double[] a,
                          @ByVal lapack_int lda, lapack_int sdim, double[] wr,
                          double[] wi, double[] vs, @ByVal lapack_int ldvs );

public static native @ByVal lapack_int LAPACKE_dgees_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                               LAPACK_D_SELECT2 select, @ByVal lapack_int n, DoublePointer a,
                               @ByVal lapack_int lda, lapack_int sdim, DoublePointer wr,
                               DoublePointer wi, DoublePointer vs, @ByVal lapack_int ldvs,
                               DoublePointer work, @ByVal lapack_int lwork,
                               lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_dgees_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                               LAPACK_D_SELECT2 select, @ByVal lapack_int n, DoubleBuffer a,
                               @ByVal lapack_int lda, lapack_int sdim, DoubleBuffer wr,
                               DoubleBuffer wi, DoubleBuffer vs, @ByVal lapack_int ldvs,
                               DoubleBuffer work, @ByVal lapack_int lwork,
                               lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_dgees_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                               LAPACK_D_SELECT2 select, @ByVal lapack_int n, double[] a,
                               @ByVal lapack_int lda, lapack_int sdim, double[] wr,
                               double[] wi, double[] vs, @ByVal lapack_int ldvs,
                               double[] work, @ByVal lapack_int lwork,
                               lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_dgeesx( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                           LAPACK_D_SELECT2 select, @Cast("char") byte sense, @ByVal lapack_int n,
                           DoublePointer a, @ByVal lapack_int lda, lapack_int sdim,
                           DoublePointer wr, DoublePointer wi, DoublePointer vs, @ByVal lapack_int ldvs,
                           DoublePointer rconde, DoublePointer rcondv );
public static native @ByVal lapack_int LAPACKE_dgeesx( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                           LAPACK_D_SELECT2 select, @Cast("char") byte sense, @ByVal lapack_int n,
                           DoubleBuffer a, @ByVal lapack_int lda, lapack_int sdim,
                           DoubleBuffer wr, DoubleBuffer wi, DoubleBuffer vs, @ByVal lapack_int ldvs,
                           DoubleBuffer rconde, DoubleBuffer rcondv );
public static native @ByVal lapack_int LAPACKE_dgeesx( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                           LAPACK_D_SELECT2 select, @Cast("char") byte sense, @ByVal lapack_int n,
                           double[] a, @ByVal lapack_int lda, lapack_int sdim,
                           double[] wr, double[] wi, double[] vs, @ByVal lapack_int ldvs,
                           double[] rconde, double[] rcondv );

public static native @ByVal lapack_int LAPACKE_dgeesx_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                                LAPACK_D_SELECT2 select, @Cast("char") byte sense,
                                @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda,
                                lapack_int sdim, DoublePointer wr, DoublePointer wi,
                                DoublePointer vs, @ByVal lapack_int ldvs, DoublePointer rconde,
                                DoublePointer rcondv, DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork,
                                lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_dgeesx_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                                LAPACK_D_SELECT2 select, @Cast("char") byte sense,
                                @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda,
                                lapack_int sdim, DoubleBuffer wr, DoubleBuffer wi,
                                DoubleBuffer vs, @ByVal lapack_int ldvs, DoubleBuffer rconde,
                                DoubleBuffer rcondv, DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork,
                                lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_dgeesx_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                                LAPACK_D_SELECT2 select, @Cast("char") byte sense,
                                @ByVal lapack_int n, double[] a, @ByVal lapack_int lda,
                                lapack_int sdim, double[] wr, double[] wi,
                                double[] vs, @ByVal lapack_int ldvs, double[] rconde,
                                double[] rcondv, double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork,
                                lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_dgeev( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                          @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda, DoublePointer wr,
                          DoublePointer wi, DoublePointer vl, @ByVal lapack_int ldvl, DoublePointer vr,
                          @ByVal lapack_int ldvr );
public static native @ByVal lapack_int LAPACKE_dgeev( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                          @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer wr,
                          DoubleBuffer wi, DoubleBuffer vl, @ByVal lapack_int ldvl, DoubleBuffer vr,
                          @ByVal lapack_int ldvr );
public static native @ByVal lapack_int LAPACKE_dgeev( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                          @ByVal lapack_int n, double[] a, @ByVal lapack_int lda, double[] wr,
                          double[] wi, double[] vl, @ByVal lapack_int ldvl, double[] vr,
                          @ByVal lapack_int ldvr );

public static native @ByVal lapack_int LAPACKE_dgeev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda,
                               DoublePointer wr, DoublePointer wi, DoublePointer vl,
                               @ByVal lapack_int ldvl, DoublePointer vr, @ByVal lapack_int ldvr,
                               DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgeev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda,
                               DoubleBuffer wr, DoubleBuffer wi, DoubleBuffer vl,
                               @ByVal lapack_int ldvl, DoubleBuffer vr, @ByVal lapack_int ldvr,
                               DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgeev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, double[] a, @ByVal lapack_int lda,
                               double[] wr, double[] wi, double[] vl,
                               @ByVal lapack_int ldvl, double[] vr, @ByVal lapack_int ldvr,
                               double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dgeevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda, DoublePointer wr, DoublePointer wi, DoublePointer vl,
                           @ByVal lapack_int ldvl, DoublePointer vr, @ByVal lapack_int ldvr,
                           lapack_int ilo, lapack_int ihi, DoublePointer scale,
                           DoublePointer abnrm, DoublePointer rconde, DoublePointer rcondv );
public static native @ByVal lapack_int LAPACKE_dgeevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda, DoubleBuffer wr, DoubleBuffer wi, DoubleBuffer vl,
                           @ByVal lapack_int ldvl, DoubleBuffer vr, @ByVal lapack_int ldvr,
                           lapack_int ilo, lapack_int ihi, DoubleBuffer scale,
                           DoubleBuffer abnrm, DoubleBuffer rconde, DoubleBuffer rcondv );
public static native @ByVal lapack_int LAPACKE_dgeevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda, double[] wr, double[] wi, double[] vl,
                           @ByVal lapack_int ldvl, double[] vr, @ByVal lapack_int ldvr,
                           lapack_int ilo, lapack_int ihi, double[] scale,
                           double[] abnrm, double[] rconde, double[] rcondv );

public static native @ByVal lapack_int LAPACKE_dgeevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, DoublePointer a,
                                @ByVal lapack_int lda, DoublePointer wr, DoublePointer wi,
                                DoublePointer vl, @ByVal lapack_int ldvl, DoublePointer vr,
                                @ByVal lapack_int ldvr, lapack_int ilo,
                                lapack_int ihi, DoublePointer scale, DoublePointer abnrm,
                                DoublePointer rconde, DoublePointer rcondv, DoublePointer work,
                                @ByVal lapack_int lwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgeevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, DoubleBuffer a,
                                @ByVal lapack_int lda, DoubleBuffer wr, DoubleBuffer wi,
                                DoubleBuffer vl, @ByVal lapack_int ldvl, DoubleBuffer vr,
                                @ByVal lapack_int ldvr, lapack_int ilo,
                                lapack_int ihi, DoubleBuffer scale, DoubleBuffer abnrm,
                                DoubleBuffer rconde, DoubleBuffer rcondv, DoubleBuffer work,
                                @ByVal lapack_int lwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgeevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, double[] a,
                                @ByVal lapack_int lda, double[] wr, double[] wi,
                                double[] vl, @ByVal lapack_int ldvl, double[] vr,
                                @ByVal lapack_int ldvr, lapack_int ilo,
                                lapack_int ihi, double[] scale, double[] abnrm,
                                double[] rconde, double[] rcondv, double[] work,
                                @ByVal lapack_int lwork, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dgehrd( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, DoublePointer a, @ByVal lapack_int lda,
                           DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dgehrd( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, DoubleBuffer a, @ByVal lapack_int lda,
                           DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dgehrd( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, double[] a, @ByVal lapack_int lda,
                           double[] tau );

public static native @ByVal lapack_int LAPACKE_dgehrd_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, DoublePointer a, @ByVal lapack_int lda,
                                DoublePointer tau, DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgehrd_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, DoubleBuffer a, @ByVal lapack_int lda,
                                DoubleBuffer tau, DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgehrd_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, double[] a, @ByVal lapack_int lda,
                                double[] tau, double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dgejsv( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp, @ByVal lapack_int m,
                           @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda, DoublePointer sva,
                           DoublePointer u, @ByVal lapack_int ldu, DoublePointer v, @ByVal lapack_int ldv,
                           DoublePointer stat, lapack_int istat );
public static native @ByVal lapack_int LAPACKE_dgejsv( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp, @ByVal lapack_int m,
                           @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer sva,
                           DoubleBuffer u, @ByVal lapack_int ldu, DoubleBuffer v, @ByVal lapack_int ldv,
                           DoubleBuffer stat, lapack_int istat );
public static native @ByVal lapack_int LAPACKE_dgejsv( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp, @ByVal lapack_int m,
                           @ByVal lapack_int n, double[] a, @ByVal lapack_int lda, double[] sva,
                           double[] u, @ByVal lapack_int ldu, double[] v, @ByVal lapack_int ldv,
                           double[] stat, lapack_int istat );

public static native @ByVal lapack_int LAPACKE_dgejsv_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp,
                                @ByVal lapack_int m, @ByVal lapack_int n, DoublePointer a,
                                @ByVal lapack_int lda, DoublePointer sva, DoublePointer u,
                                @ByVal lapack_int ldu, DoublePointer v, @ByVal lapack_int ldv,
                                DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgejsv_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp,
                                @ByVal lapack_int m, @ByVal lapack_int n, DoubleBuffer a,
                                @ByVal lapack_int lda, DoubleBuffer sva, DoubleBuffer u,
                                @ByVal lapack_int ldu, DoubleBuffer v, @ByVal lapack_int ldv,
                                DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgejsv_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp,
                                @ByVal lapack_int m, @ByVal lapack_int n, double[] a,
                                @ByVal lapack_int lda, double[] sva, double[] u,
                                @ByVal lapack_int ldu, double[] v, @ByVal lapack_int ldv,
                                double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dgelq2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoublePointer a, @ByVal lapack_int lda, DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dgelq2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dgelq2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           double[] a, @ByVal lapack_int lda, double[] tau );

public static native @ByVal lapack_int LAPACKE_dgelq2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, DoublePointer tau,
                                DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dgelq2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer tau,
                                DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dgelq2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, double[] tau,
                                double[] work );

public static native @ByVal lapack_int LAPACKE_dgelqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoublePointer a, @ByVal lapack_int lda, DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dgelqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dgelqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           double[] a, @ByVal lapack_int lda, double[] tau );

public static native @ByVal lapack_int LAPACKE_dgelqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, DoublePointer tau,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgelqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer tau,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgelqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, double[] tau,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dgels( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                          @ByVal lapack_int n, @ByVal lapack_int nrhs, DoublePointer a,
                          @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgels( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                          @ByVal lapack_int n, @ByVal lapack_int nrhs, DoubleBuffer a,
                          @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgels( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                          @ByVal lapack_int n, @ByVal lapack_int nrhs, double[] a,
                          @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dgels_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                               @ByVal lapack_int n, @ByVal lapack_int nrhs, DoublePointer a,
                               @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb,
                               DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgels_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                               @ByVal lapack_int n, @ByVal lapack_int nrhs, DoubleBuffer a,
                               @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb,
                               DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgels_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                               @ByVal lapack_int n, @ByVal lapack_int nrhs, double[] a,
                               @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb,
                               double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dgelsd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, DoublePointer a, @ByVal lapack_int lda,
                           DoublePointer b, @ByVal lapack_int ldb, DoublePointer s, double rcond,
                           lapack_int rank );
public static native @ByVal lapack_int LAPACKE_dgelsd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, DoubleBuffer a, @ByVal lapack_int lda,
                           DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer s, double rcond,
                           lapack_int rank );
public static native @ByVal lapack_int LAPACKE_dgelsd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, double[] a, @ByVal lapack_int lda,
                           double[] b, @ByVal lapack_int ldb, double[] s, double rcond,
                           lapack_int rank );

public static native @ByVal lapack_int LAPACKE_dgelsd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, DoublePointer a, @ByVal lapack_int lda,
                                DoublePointer b, @ByVal lapack_int ldb, DoublePointer s,
                                double rcond, lapack_int rank, DoublePointer work,
                                @ByVal lapack_int lwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgelsd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, DoubleBuffer a, @ByVal lapack_int lda,
                                DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer s,
                                double rcond, lapack_int rank, DoubleBuffer work,
                                @ByVal lapack_int lwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgelsd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, double[] a, @ByVal lapack_int lda,
                                double[] b, @ByVal lapack_int ldb, double[] s,
                                double rcond, lapack_int rank, double[] work,
                                @ByVal lapack_int lwork, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dgelss( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, DoublePointer a, @ByVal lapack_int lda,
                           DoublePointer b, @ByVal lapack_int ldb, DoublePointer s, double rcond,
                           lapack_int rank );
public static native @ByVal lapack_int LAPACKE_dgelss( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, DoubleBuffer a, @ByVal lapack_int lda,
                           DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer s, double rcond,
                           lapack_int rank );
public static native @ByVal lapack_int LAPACKE_dgelss( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, double[] a, @ByVal lapack_int lda,
                           double[] b, @ByVal lapack_int ldb, double[] s, double rcond,
                           lapack_int rank );

public static native @ByVal lapack_int LAPACKE_dgelss_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, DoublePointer a, @ByVal lapack_int lda,
                                DoublePointer b, @ByVal lapack_int ldb, DoublePointer s,
                                double rcond, lapack_int rank, DoublePointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgelss_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, DoubleBuffer a, @ByVal lapack_int lda,
                                DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer s,
                                double rcond, lapack_int rank, DoubleBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgelss_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, double[] a, @ByVal lapack_int lda,
                                double[] b, @ByVal lapack_int ldb, double[] s,
                                double rcond, lapack_int rank, double[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dgelsy( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, DoublePointer a, @ByVal lapack_int lda,
                           DoublePointer b, @ByVal lapack_int ldb, lapack_int jpvt,
                           double rcond, lapack_int rank );
public static native @ByVal lapack_int LAPACKE_dgelsy( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, DoubleBuffer a, @ByVal lapack_int lda,
                           DoubleBuffer b, @ByVal lapack_int ldb, lapack_int jpvt,
                           double rcond, lapack_int rank );
public static native @ByVal lapack_int LAPACKE_dgelsy( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, double[] a, @ByVal lapack_int lda,
                           double[] b, @ByVal lapack_int ldb, lapack_int jpvt,
                           double rcond, lapack_int rank );

public static native @ByVal lapack_int LAPACKE_dgelsy_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, DoublePointer a, @ByVal lapack_int lda,
                                DoublePointer b, @ByVal lapack_int ldb, lapack_int jpvt,
                                double rcond, lapack_int rank, DoublePointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgelsy_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, DoubleBuffer a, @ByVal lapack_int lda,
                                DoubleBuffer b, @ByVal lapack_int ldb, lapack_int jpvt,
                                double rcond, lapack_int rank, DoubleBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgelsy_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, double[] a, @ByVal lapack_int lda,
                                double[] b, @ByVal lapack_int ldb, lapack_int jpvt,
                                double rcond, lapack_int rank, double[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dgemqrt( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                            @ByVal lapack_int nb, @Const DoublePointer v, @ByVal lapack_int ldv,
                            @Const DoublePointer t, @ByVal lapack_int ldt, DoublePointer c,
                            @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dgemqrt( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                            @ByVal lapack_int nb, @Const DoubleBuffer v, @ByVal lapack_int ldv,
                            @Const DoubleBuffer t, @ByVal lapack_int ldt, DoubleBuffer c,
                            @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dgemqrt( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                            @ByVal lapack_int nb, @Const double[] v, @ByVal lapack_int ldv,
                            @Const double[] t, @ByVal lapack_int ldt, double[] c,
                            @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_dgemqrt_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                 @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                 @ByVal lapack_int nb, @Const DoublePointer v, @ByVal lapack_int ldv,
                                 @Const DoublePointer t, @ByVal lapack_int ldt, DoublePointer c,
                                 @ByVal lapack_int ldc, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dgemqrt_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                 @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                 @ByVal lapack_int nb, @Const DoubleBuffer v, @ByVal lapack_int ldv,
                                 @Const DoubleBuffer t, @ByVal lapack_int ldt, DoubleBuffer c,
                                 @ByVal lapack_int ldc, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dgemqrt_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                 @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                 @ByVal lapack_int nb, @Const double[] v, @ByVal lapack_int ldv,
                                 @Const double[] t, @ByVal lapack_int ldt, double[] c,
                                 @ByVal lapack_int ldc, double[] work );

public static native @ByVal lapack_int LAPACKE_dgeqlf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoublePointer a, @ByVal lapack_int lda, DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dgeqlf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dgeqlf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           double[] a, @ByVal lapack_int lda, double[] tau );

public static native @ByVal lapack_int LAPACKE_dgeqlf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, DoublePointer tau,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgeqlf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer tau,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgeqlf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, double[] tau,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dgeqp3( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoublePointer a, @ByVal lapack_int lda, lapack_int jpvt,
                           DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dgeqp3( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoubleBuffer a, @ByVal lapack_int lda, lapack_int jpvt,
                           DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dgeqp3( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           double[] a, @ByVal lapack_int lda, lapack_int jpvt,
                           double[] tau );

public static native @ByVal lapack_int LAPACKE_dgeqp3_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, lapack_int jpvt,
                                DoublePointer tau, DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgeqp3_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, lapack_int jpvt,
                                DoubleBuffer tau, DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgeqp3_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, lapack_int jpvt,
                                double[] tau, double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dgeqpf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoublePointer a, @ByVal lapack_int lda, lapack_int jpvt,
                           DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dgeqpf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoubleBuffer a, @ByVal lapack_int lda, lapack_int jpvt,
                           DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dgeqpf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           double[] a, @ByVal lapack_int lda, lapack_int jpvt,
                           double[] tau );

public static native @ByVal lapack_int LAPACKE_dgeqpf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, lapack_int jpvt,
                                DoublePointer tau, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dgeqpf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, lapack_int jpvt,
                                DoubleBuffer tau, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dgeqpf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, lapack_int jpvt,
                                double[] tau, double[] work );

public static native @ByVal lapack_int LAPACKE_dgeqr2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoublePointer a, @ByVal lapack_int lda, DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dgeqr2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dgeqr2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           double[] a, @ByVal lapack_int lda, double[] tau );

public static native @ByVal lapack_int LAPACKE_dgeqr2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, DoublePointer tau,
                                DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dgeqr2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer tau,
                                DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dgeqr2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, double[] tau,
                                double[] work );

public static native @ByVal lapack_int LAPACKE_dgeqrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoublePointer a, @ByVal lapack_int lda, DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dgeqrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dgeqrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           double[] a, @ByVal lapack_int lda, double[] tau );

public static native @ByVal lapack_int LAPACKE_dgeqrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, DoublePointer tau,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgeqrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer tau,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgeqrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, double[] tau,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dgeqrfp( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            DoublePointer a, @ByVal lapack_int lda, DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dgeqrfp( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dgeqrfp( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            double[] a, @ByVal lapack_int lda, double[] tau );

public static native @ByVal lapack_int LAPACKE_dgeqrfp_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 DoublePointer a, @ByVal lapack_int lda, DoublePointer tau,
                                 DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgeqrfp_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer tau,
                                 DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgeqrfp_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 double[] a, @ByVal lapack_int lda, double[] tau,
                                 double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dgeqrt( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nb, DoublePointer a, @ByVal lapack_int lda, DoublePointer t,
                           @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_dgeqrt( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nb, DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer t,
                           @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_dgeqrt( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nb, double[] a, @ByVal lapack_int lda, double[] t,
                           @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_dgeqrt2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            DoublePointer a, @ByVal lapack_int lda, DoublePointer t,
                            @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_dgeqrt2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer t,
                            @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_dgeqrt2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            double[] a, @ByVal lapack_int lda, double[] t,
                            @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_dgeqrt2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 DoublePointer a, @ByVal lapack_int lda, DoublePointer t,
                                 @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_dgeqrt2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer t,
                                 @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_dgeqrt2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 double[] a, @ByVal lapack_int lda, double[] t,
                                 @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_dgeqrt3( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            DoublePointer a, @ByVal lapack_int lda, DoublePointer t,
                            @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_dgeqrt3( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer t,
                            @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_dgeqrt3( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            double[] a, @ByVal lapack_int lda, double[] t,
                            @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_dgeqrt3_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 DoublePointer a, @ByVal lapack_int lda, DoublePointer t,
                                 @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_dgeqrt3_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer t,
                                 @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_dgeqrt3_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 double[] a, @ByVal lapack_int lda, double[] t,
                                 @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_dgeqrt_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nb, DoublePointer a, @ByVal lapack_int lda,
                                DoublePointer t, @ByVal lapack_int ldt, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dgeqrt_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nb, DoubleBuffer a, @ByVal lapack_int lda,
                                DoubleBuffer t, @ByVal lapack_int ldt, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dgeqrt_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nb, double[] a, @ByVal lapack_int lda,
                                double[] t, @ByVal lapack_int ldt, double[] work );

public static native @ByVal lapack_int LAPACKE_dgerfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoublePointer a, @ByVal lapack_int lda,
                           @Const DoublePointer af, @ByVal lapack_int ldaf,
                           @Const lapack_int ipiv, @Const DoublePointer b,
                           @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_dgerfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoubleBuffer a, @ByVal lapack_int lda,
                           @Const DoubleBuffer af, @ByVal lapack_int ldaf,
                           @Const lapack_int ipiv, @Const DoubleBuffer b,
                           @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_dgerfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const double[] a, @ByVal lapack_int lda,
                           @Const double[] af, @ByVal lapack_int ldaf,
                           @Const lapack_int ipiv, @Const double[] b,
                           @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_dgerfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoublePointer a,
                                @ByVal lapack_int lda, @Const DoublePointer af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const DoublePointer b, @ByVal lapack_int ldb, DoublePointer x,
                                @ByVal lapack_int ldx, DoublePointer ferr, DoublePointer berr,
                                DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgerfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoubleBuffer a,
                                @ByVal lapack_int lda, @Const DoubleBuffer af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x,
                                @ByVal lapack_int ldx, DoubleBuffer ferr, DoubleBuffer berr,
                                DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgerfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const double[] a,
                                @ByVal lapack_int lda, @Const double[] af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const double[] b, @ByVal lapack_int ldb, double[] x,
                                @ByVal lapack_int ldx, double[] ferr, double[] berr,
                                double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dgerfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoublePointer a,
                            @ByVal lapack_int lda, @Const DoublePointer af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const DoublePointer r,
                            @Const DoublePointer c, @Const DoublePointer b, @ByVal lapack_int ldb,
                            DoublePointer x, @ByVal lapack_int ldx, DoublePointer rcond,
                            DoublePointer berr, @ByVal lapack_int n_err_bnds,
                            DoublePointer err_bnds_norm, DoublePointer err_bnds_comp,
                            @ByVal lapack_int nparams, DoublePointer params );
public static native @ByVal lapack_int LAPACKE_dgerfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoubleBuffer a,
                            @ByVal lapack_int lda, @Const DoubleBuffer af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const DoubleBuffer r,
                            @Const DoubleBuffer c, @Const DoubleBuffer b, @ByVal lapack_int ldb,
                            DoubleBuffer x, @ByVal lapack_int ldx, DoubleBuffer rcond,
                            DoubleBuffer berr, @ByVal lapack_int n_err_bnds,
                            DoubleBuffer err_bnds_norm, DoubleBuffer err_bnds_comp,
                            @ByVal lapack_int nparams, DoubleBuffer params );
public static native @ByVal lapack_int LAPACKE_dgerfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const double[] a,
                            @ByVal lapack_int lda, @Const double[] af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const double[] r,
                            @Const double[] c, @Const double[] b, @ByVal lapack_int ldb,
                            double[] x, @ByVal lapack_int ldx, double[] rcond,
                            double[] berr, @ByVal lapack_int n_err_bnds,
                            double[] err_bnds_norm, double[] err_bnds_comp,
                            @ByVal lapack_int nparams, double[] params );

public static native @ByVal lapack_int LAPACKE_dgerfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoublePointer a,
                                 @ByVal lapack_int lda, @Const DoublePointer af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const DoublePointer r, @Const DoublePointer c,
                                 @Const DoublePointer b, @ByVal lapack_int ldb, DoublePointer x,
                                 @ByVal lapack_int ldx, DoublePointer rcond, DoublePointer berr,
                                 @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                                 DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoublePointer params, DoublePointer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgerfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoubleBuffer a,
                                 @ByVal lapack_int lda, @Const DoubleBuffer af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const DoubleBuffer r, @Const DoubleBuffer c,
                                 @Const DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x,
                                 @ByVal lapack_int ldx, DoubleBuffer rcond, DoubleBuffer berr,
                                 @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                                 DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoubleBuffer params, DoubleBuffer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgerfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const double[] a,
                                 @ByVal lapack_int lda, @Const double[] af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const double[] r, @Const double[] c,
                                 @Const double[] b, @ByVal lapack_int ldb, double[] x,
                                 @ByVal lapack_int ldx, double[] rcond, double[] berr,
                                 @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                                 double[] err_bnds_comp, @ByVal lapack_int nparams,
                                 double[] params, double[] work,
                                 lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dgerqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoublePointer a, @ByVal lapack_int lda, DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dgerqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dgerqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           double[] a, @ByVal lapack_int lda, double[] tau );

public static native @ByVal lapack_int LAPACKE_dgerqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, DoublePointer tau,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgerqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer tau,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgerqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, double[] tau,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dgesdd( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                           @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda, DoublePointer s,
                           DoublePointer u, @ByVal lapack_int ldu, DoublePointer vt,
                           @ByVal lapack_int ldvt );
public static native @ByVal lapack_int LAPACKE_dgesdd( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                           @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer s,
                           DoubleBuffer u, @ByVal lapack_int ldu, DoubleBuffer vt,
                           @ByVal lapack_int ldvt );
public static native @ByVal lapack_int LAPACKE_dgesdd( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                           @ByVal lapack_int n, double[] a, @ByVal lapack_int lda, double[] s,
                           double[] u, @ByVal lapack_int ldu, double[] vt,
                           @ByVal lapack_int ldvt );

public static native @ByVal lapack_int LAPACKE_dgesdd_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                                @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda,
                                DoublePointer s, DoublePointer u, @ByVal lapack_int ldu,
                                DoublePointer vt, @ByVal lapack_int ldvt, DoublePointer work,
                                @ByVal lapack_int lwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgesdd_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                                @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda,
                                DoubleBuffer s, DoubleBuffer u, @ByVal lapack_int ldu,
                                DoubleBuffer vt, @ByVal lapack_int ldvt, DoubleBuffer work,
                                @ByVal lapack_int lwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgesdd_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                                @ByVal lapack_int n, double[] a, @ByVal lapack_int lda,
                                double[] s, double[] u, @ByVal lapack_int ldu,
                                double[] vt, @ByVal lapack_int ldvt, double[] work,
                                @ByVal lapack_int lwork, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dgesv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          DoublePointer a, @ByVal lapack_int lda, lapack_int ipiv,
                          DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgesv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          DoubleBuffer a, @ByVal lapack_int lda, lapack_int ipiv,
                          DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgesv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          double[] a, @ByVal lapack_int lda, lapack_int ipiv,
                          double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dgesv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               DoublePointer a, @ByVal lapack_int lda, lapack_int ipiv,
                               DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgesv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               DoubleBuffer a, @ByVal lapack_int lda, lapack_int ipiv,
                               DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgesv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               double[] a, @ByVal lapack_int lda, lapack_int ipiv,
                               double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dgesvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                           @ByVal lapack_int m, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda, DoublePointer s, DoublePointer u, @ByVal lapack_int ldu,
                           DoublePointer vt, @ByVal lapack_int ldvt, DoublePointer superb );
public static native @ByVal lapack_int LAPACKE_dgesvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                           @ByVal lapack_int m, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda, DoubleBuffer s, DoubleBuffer u, @ByVal lapack_int ldu,
                           DoubleBuffer vt, @ByVal lapack_int ldvt, DoubleBuffer superb );
public static native @ByVal lapack_int LAPACKE_dgesvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                           @ByVal lapack_int m, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda, double[] s, double[] u, @ByVal lapack_int ldu,
                           double[] vt, @ByVal lapack_int ldvt, double[] superb );

public static native @ByVal lapack_int LAPACKE_dgesvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                                @ByVal lapack_int m, @ByVal lapack_int n, DoublePointer a,
                                @ByVal lapack_int lda, DoublePointer s, DoublePointer u,
                                @ByVal lapack_int ldu, DoublePointer vt, @ByVal lapack_int ldvt,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgesvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                                @ByVal lapack_int m, @ByVal lapack_int n, DoubleBuffer a,
                                @ByVal lapack_int lda, DoubleBuffer s, DoubleBuffer u,
                                @ByVal lapack_int ldu, DoubleBuffer vt, @ByVal lapack_int ldvt,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgesvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                                @ByVal lapack_int m, @ByVal lapack_int n, double[] a,
                                @ByVal lapack_int lda, double[] s, double[] u,
                                @ByVal lapack_int ldu, double[] vt, @ByVal lapack_int ldvt,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dgesvdx( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                           @ByVal lapack_int m, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda, double vl, double vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                           DoublePointer s, DoublePointer u, @ByVal lapack_int ldu,
                           DoublePointer vt, @ByVal lapack_int ldvt,
                           lapack_int superb );
public static native @ByVal lapack_int LAPACKE_dgesvdx( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                           @ByVal lapack_int m, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda, double vl, double vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                           DoubleBuffer s, DoubleBuffer u, @ByVal lapack_int ldu,
                           DoubleBuffer vt, @ByVal lapack_int ldvt,
                           lapack_int superb );
public static native @ByVal lapack_int LAPACKE_dgesvdx( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                           @ByVal lapack_int m, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda, double vl, double vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                           double[] s, double[] u, @ByVal lapack_int ldu,
                           double[] vt, @ByVal lapack_int ldvt,
                           lapack_int superb );

public static native @ByVal lapack_int LAPACKE_dgesvdx_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                              @ByVal lapack_int m, @ByVal lapack_int n, DoublePointer a,
                              @ByVal lapack_int lda, double vl, double vu,
                              @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                              DoublePointer s, DoublePointer u, @ByVal lapack_int ldu,
                              DoublePointer vt, @ByVal lapack_int ldvt,
                                DoublePointer work, @ByVal lapack_int lwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgesvdx_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                              @ByVal lapack_int m, @ByVal lapack_int n, DoubleBuffer a,
                              @ByVal lapack_int lda, double vl, double vu,
                              @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                              DoubleBuffer s, DoubleBuffer u, @ByVal lapack_int ldu,
                              DoubleBuffer vt, @ByVal lapack_int ldvt,
                                DoubleBuffer work, @ByVal lapack_int lwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgesvdx_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                              @ByVal lapack_int m, @ByVal lapack_int n, double[] a,
                              @ByVal lapack_int lda, double vl, double vu,
                              @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                              double[] s, double[] u, @ByVal lapack_int ldu,
                              double[] vt, @ByVal lapack_int ldvt,
                                double[] work, @ByVal lapack_int lwork, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dgesvj( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @ByVal lapack_int m, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda, DoublePointer sva, @ByVal lapack_int mv,
                           DoublePointer v, @ByVal lapack_int ldv, DoublePointer stat );
public static native @ByVal lapack_int LAPACKE_dgesvj( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @ByVal lapack_int m, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda, DoubleBuffer sva, @ByVal lapack_int mv,
                           DoubleBuffer v, @ByVal lapack_int ldv, DoubleBuffer stat );
public static native @ByVal lapack_int LAPACKE_dgesvj( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @ByVal lapack_int m, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda, double[] sva, @ByVal lapack_int mv,
                           double[] v, @ByVal lapack_int ldv, double[] stat );

public static native @ByVal lapack_int LAPACKE_dgesvj_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, DoublePointer sva,
                                @ByVal lapack_int mv, DoublePointer v, @ByVal lapack_int ldv,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgesvj_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer sva,
                                @ByVal lapack_int mv, DoubleBuffer v, @ByVal lapack_int ldv,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgesvj_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @ByVal lapack_int m, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, double[] sva,
                                @ByVal lapack_int mv, double[] v, @ByVal lapack_int ldv,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dgesvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, DoublePointer a,
                           @ByVal lapack_int lda, DoublePointer af, @ByVal lapack_int ldaf,
                           lapack_int ipiv, @Cast("char*") BytePointer equed, DoublePointer r, DoublePointer c,
                           DoublePointer b, @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                           DoublePointer rcond, DoublePointer ferr, DoublePointer berr,
                           DoublePointer rpivot );
public static native @ByVal lapack_int LAPACKE_dgesvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, DoubleBuffer a,
                           @ByVal lapack_int lda, DoubleBuffer af, @ByVal lapack_int ldaf,
                           lapack_int ipiv, @Cast("char*") ByteBuffer equed, DoubleBuffer r, DoubleBuffer c,
                           DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                           DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr,
                           DoubleBuffer rpivot );
public static native @ByVal lapack_int LAPACKE_dgesvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, double[] a,
                           @ByVal lapack_int lda, double[] af, @ByVal lapack_int ldaf,
                           lapack_int ipiv, @Cast("char*") byte[] equed, double[] r, double[] c,
                           double[] b, @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                           double[] rcond, double[] ferr, double[] berr,
                           double[] rpivot );

public static native @ByVal lapack_int LAPACKE_dgesvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, DoublePointer a,
                                @ByVal lapack_int lda, DoublePointer af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Cast("char*") BytePointer equed, DoublePointer r,
                                DoublePointer c, DoublePointer b, @ByVal lapack_int ldb, DoublePointer x,
                                @ByVal lapack_int ldx, DoublePointer rcond, DoublePointer ferr,
                                DoublePointer berr, DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgesvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, DoubleBuffer a,
                                @ByVal lapack_int lda, DoubleBuffer af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Cast("char*") ByteBuffer equed, DoubleBuffer r,
                                DoubleBuffer c, DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x,
                                @ByVal lapack_int ldx, DoubleBuffer rcond, DoubleBuffer ferr,
                                DoubleBuffer berr, DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgesvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, double[] a,
                                @ByVal lapack_int lda, double[] af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Cast("char*") byte[] equed, double[] r,
                                double[] c, double[] b, @ByVal lapack_int ldb, double[] x,
                                @ByVal lapack_int ldx, double[] rcond, double[] ferr,
                                double[] berr, double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dgesvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, DoublePointer a,
                            @ByVal lapack_int lda, DoublePointer af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") BytePointer equed, DoublePointer r, DoublePointer c,
                            DoublePointer b, @ByVal lapack_int ldb, DoublePointer x,
                            @ByVal lapack_int ldx, DoublePointer rcond, DoublePointer rpvgrw,
                            DoublePointer berr, @ByVal lapack_int n_err_bnds,
                            DoublePointer err_bnds_norm, DoublePointer err_bnds_comp,
                            @ByVal lapack_int nparams, DoublePointer params );
public static native @ByVal lapack_int LAPACKE_dgesvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, DoubleBuffer a,
                            @ByVal lapack_int lda, DoubleBuffer af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") ByteBuffer equed, DoubleBuffer r, DoubleBuffer c,
                            DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x,
                            @ByVal lapack_int ldx, DoubleBuffer rcond, DoubleBuffer rpvgrw,
                            DoubleBuffer berr, @ByVal lapack_int n_err_bnds,
                            DoubleBuffer err_bnds_norm, DoubleBuffer err_bnds_comp,
                            @ByVal lapack_int nparams, DoubleBuffer params );
public static native @ByVal lapack_int LAPACKE_dgesvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, double[] a,
                            @ByVal lapack_int lda, double[] af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") byte[] equed, double[] r, double[] c,
                            double[] b, @ByVal lapack_int ldb, double[] x,
                            @ByVal lapack_int ldx, double[] rcond, double[] rpvgrw,
                            double[] berr, @ByVal lapack_int n_err_bnds,
                            double[] err_bnds_norm, double[] err_bnds_comp,
                            @ByVal lapack_int nparams, double[] params );

public static native @ByVal lapack_int LAPACKE_dgesvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, DoublePointer a,
                                 @ByVal lapack_int lda, DoublePointer af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") BytePointer equed, DoublePointer r,
                                 DoublePointer c, DoublePointer b, @ByVal lapack_int ldb,
                                 DoublePointer x, @ByVal lapack_int ldx, DoublePointer rcond,
                                 DoublePointer rpvgrw, DoublePointer berr,
                                 @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                                 DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoublePointer params, DoublePointer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgesvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, DoubleBuffer a,
                                 @ByVal lapack_int lda, DoubleBuffer af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") ByteBuffer equed, DoubleBuffer r,
                                 DoubleBuffer c, DoubleBuffer b, @ByVal lapack_int ldb,
                                 DoubleBuffer x, @ByVal lapack_int ldx, DoubleBuffer rcond,
                                 DoubleBuffer rpvgrw, DoubleBuffer berr,
                                 @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                                 DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoubleBuffer params, DoubleBuffer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgesvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, double[] a,
                                 @ByVal lapack_int lda, double[] af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") byte[] equed, double[] r,
                                 double[] c, double[] b, @ByVal lapack_int ldb,
                                 double[] x, @ByVal lapack_int ldx, double[] rcond,
                                 double[] rpvgrw, double[] berr,
                                 @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                                 double[] err_bnds_comp, @ByVal lapack_int nparams,
                                 double[] params, double[] work,
                                 lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dgetf2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoublePointer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgetf2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoubleBuffer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgetf2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           double[] a, @ByVal lapack_int lda, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_dgetf2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgetf2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgetf2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_dgetrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoublePointer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgetrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoubleBuffer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgetrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           double[] a, @ByVal lapack_int lda, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_dgetrf2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoublePointer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgetrf2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoubleBuffer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgetrf2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           double[] a, @ByVal lapack_int lda, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_dgetrf2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgetrf2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgetrf2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_dgetrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgetrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgetrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_dgetri( int matrix_layout, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgetri( int matrix_layout, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgetri( int matrix_layout, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_dgetri_work( int matrix_layout, @ByVal lapack_int n, DoublePointer a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgetri_work( int matrix_layout, @ByVal lapack_int n, DoubleBuffer a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgetri_work( int matrix_layout, @ByVal lapack_int n, double[] a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dgetrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoublePointer a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgetrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoubleBuffer a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgetrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const double[] a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dgetrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoublePointer a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgetrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoubleBuffer a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgetrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const double[] a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dggbak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const DoublePointer lscale,
                           @Const DoublePointer rscale, @ByVal lapack_int m, DoublePointer v,
                           @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_dggbak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const DoubleBuffer lscale,
                           @Const DoubleBuffer rscale, @ByVal lapack_int m, DoubleBuffer v,
                           @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_dggbak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const double[] lscale,
                           @Const double[] rscale, @ByVal lapack_int m, double[] v,
                           @ByVal lapack_int ldv );

public static native @ByVal lapack_int LAPACKE_dggbak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const DoublePointer lscale, @Const DoublePointer rscale,
                                @ByVal lapack_int m, DoublePointer v, @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_dggbak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const DoubleBuffer lscale, @Const DoubleBuffer rscale,
                                @ByVal lapack_int m, DoubleBuffer v, @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_dggbak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const double[] lscale, @Const double[] rscale,
                                @ByVal lapack_int m, double[] v, @ByVal lapack_int ldv );

public static native @ByVal lapack_int LAPACKE_dggbal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb,
                           lapack_int ilo, lapack_int ihi, DoublePointer lscale,
                           DoublePointer rscale );
public static native @ByVal lapack_int LAPACKE_dggbal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb,
                           lapack_int ilo, lapack_int ihi, DoubleBuffer lscale,
                           DoubleBuffer rscale );
public static native @ByVal lapack_int LAPACKE_dggbal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb,
                           lapack_int ilo, lapack_int ihi, double[] lscale,
                           double[] rscale );

public static native @ByVal lapack_int LAPACKE_dggbal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, DoublePointer b,
                                @ByVal lapack_int ldb, lapack_int ilo,
                                lapack_int ihi, DoublePointer lscale, DoublePointer rscale,
                                DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dggbal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer b,
                                @ByVal lapack_int ldb, lapack_int ilo,
                                lapack_int ihi, DoubleBuffer lscale, DoubleBuffer rscale,
                                DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dggbal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, double[] b,
                                @ByVal lapack_int ldb, lapack_int ilo,
                                lapack_int ihi, double[] lscale, double[] rscale,
                                double[] work );

public static native @ByVal lapack_int LAPACKE_dgges( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr, @Cast("char") byte sort,
                          LAPACK_D_SELECT3 selctg, @ByVal lapack_int n, DoublePointer a,
                          @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb,
                          lapack_int sdim, DoublePointer alphar, DoublePointer alphai,
                          DoublePointer beta, DoublePointer vsl, @ByVal lapack_int ldvsl,
                          DoublePointer vsr, @ByVal lapack_int ldvsr );
public static native @ByVal lapack_int LAPACKE_dgges( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr, @Cast("char") byte sort,
                          LAPACK_D_SELECT3 selctg, @ByVal lapack_int n, DoubleBuffer a,
                          @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb,
                          lapack_int sdim, DoubleBuffer alphar, DoubleBuffer alphai,
                          DoubleBuffer beta, DoubleBuffer vsl, @ByVal lapack_int ldvsl,
                          DoubleBuffer vsr, @ByVal lapack_int ldvsr );
public static native @ByVal lapack_int LAPACKE_dgges( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr, @Cast("char") byte sort,
                          LAPACK_D_SELECT3 selctg, @ByVal lapack_int n, double[] a,
                          @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb,
                          lapack_int sdim, double[] alphar, double[] alphai,
                          double[] beta, double[] vsl, @ByVal lapack_int ldvsl,
                          double[] vsr, @ByVal lapack_int ldvsr );

public static native @ByVal lapack_int LAPACKE_dgges3( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                           @Cast("char") byte sort, LAPACK_D_SELECT3 selctg, @ByVal lapack_int n,
                           DoublePointer a, @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb,
                           lapack_int sdim, DoublePointer alphar, DoublePointer alphai,
                           DoublePointer beta, DoublePointer vsl, @ByVal lapack_int ldvsl,
                           DoublePointer vsr, @ByVal lapack_int ldvsr );
public static native @ByVal lapack_int LAPACKE_dgges3( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                           @Cast("char") byte sort, LAPACK_D_SELECT3 selctg, @ByVal lapack_int n,
                           DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb,
                           lapack_int sdim, DoubleBuffer alphar, DoubleBuffer alphai,
                           DoubleBuffer beta, DoubleBuffer vsl, @ByVal lapack_int ldvsl,
                           DoubleBuffer vsr, @ByVal lapack_int ldvsr );
public static native @ByVal lapack_int LAPACKE_dgges3( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                           @Cast("char") byte sort, LAPACK_D_SELECT3 selctg, @ByVal lapack_int n,
                           double[] a, @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb,
                           lapack_int sdim, double[] alphar, double[] alphai,
                           double[] beta, double[] vsl, @ByVal lapack_int ldvsl,
                           double[] vsr, @ByVal lapack_int ldvsr );

public static native @ByVal lapack_int LAPACKE_dgges3_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                                @Cast("char") byte sort, LAPACK_D_SELECT3 selctg,
                                @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda,
                                DoublePointer b, @ByVal lapack_int ldb, lapack_int sdim,
                                DoublePointer alphar, DoublePointer alphai, DoublePointer beta,
                                DoublePointer vsl, @ByVal lapack_int ldvsl,
                                DoublePointer vsr, @ByVal lapack_int ldvsr,
                                DoublePointer work, @ByVal lapack_int lwork,
                                lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_dgges3_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                                @Cast("char") byte sort, LAPACK_D_SELECT3 selctg,
                                @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda,
                                DoubleBuffer b, @ByVal lapack_int ldb, lapack_int sdim,
                                DoubleBuffer alphar, DoubleBuffer alphai, DoubleBuffer beta,
                                DoubleBuffer vsl, @ByVal lapack_int ldvsl,
                                DoubleBuffer vsr, @ByVal lapack_int ldvsr,
                                DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_dgges3_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                                @Cast("char") byte sort, LAPACK_D_SELECT3 selctg,
                                @ByVal lapack_int n, double[] a, @ByVal lapack_int lda,
                                double[] b, @ByVal lapack_int ldb, lapack_int sdim,
                                double[] alphar, double[] alphai, double[] beta,
                                double[] vsl, @ByVal lapack_int ldvsl,
                                double[] vsr, @ByVal lapack_int ldvsr,
                                double[] work, @ByVal lapack_int lwork,
                                lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_dgges_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                               @Cast("char") byte sort, LAPACK_D_SELECT3 selctg, @ByVal lapack_int n,
                               DoublePointer a, @ByVal lapack_int lda, DoublePointer b,
                               @ByVal lapack_int ldb, lapack_int sdim, DoublePointer alphar,
                               DoublePointer alphai, DoublePointer beta, DoublePointer vsl,
                               @ByVal lapack_int ldvsl, DoublePointer vsr, @ByVal lapack_int ldvsr,
                               DoublePointer work, @ByVal lapack_int lwork,
                               lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_dgges_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                               @Cast("char") byte sort, LAPACK_D_SELECT3 selctg, @ByVal lapack_int n,
                               DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer b,
                               @ByVal lapack_int ldb, lapack_int sdim, DoubleBuffer alphar,
                               DoubleBuffer alphai, DoubleBuffer beta, DoubleBuffer vsl,
                               @ByVal lapack_int ldvsl, DoubleBuffer vsr, @ByVal lapack_int ldvsr,
                               DoubleBuffer work, @ByVal lapack_int lwork,
                               lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_dgges_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                               @Cast("char") byte sort, LAPACK_D_SELECT3 selctg, @ByVal lapack_int n,
                               double[] a, @ByVal lapack_int lda, double[] b,
                               @ByVal lapack_int ldb, lapack_int sdim, double[] alphar,
                               double[] alphai, double[] beta, double[] vsl,
                               @ByVal lapack_int ldvsl, double[] vsr, @ByVal lapack_int ldvsr,
                               double[] work, @ByVal lapack_int lwork,
                               lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_dggesx( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                           @Cast("char") byte sort, LAPACK_D_SELECT3 selctg, @Cast("char") byte sense,
                           @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda, DoublePointer b,
                           @ByVal lapack_int ldb, lapack_int sdim, DoublePointer alphar,
                           DoublePointer alphai, DoublePointer beta, DoublePointer vsl,
                           @ByVal lapack_int ldvsl, DoublePointer vsr, @ByVal lapack_int ldvsr,
                           DoublePointer rconde, DoublePointer rcondv );
public static native @ByVal lapack_int LAPACKE_dggesx( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                           @Cast("char") byte sort, LAPACK_D_SELECT3 selctg, @Cast("char") byte sense,
                           @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer b,
                           @ByVal lapack_int ldb, lapack_int sdim, DoubleBuffer alphar,
                           DoubleBuffer alphai, DoubleBuffer beta, DoubleBuffer vsl,
                           @ByVal lapack_int ldvsl, DoubleBuffer vsr, @ByVal lapack_int ldvsr,
                           DoubleBuffer rconde, DoubleBuffer rcondv );
public static native @ByVal lapack_int LAPACKE_dggesx( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                           @Cast("char") byte sort, LAPACK_D_SELECT3 selctg, @Cast("char") byte sense,
                           @ByVal lapack_int n, double[] a, @ByVal lapack_int lda, double[] b,
                           @ByVal lapack_int ldb, lapack_int sdim, double[] alphar,
                           double[] alphai, double[] beta, double[] vsl,
                           @ByVal lapack_int ldvsl, double[] vsr, @ByVal lapack_int ldvsr,
                           double[] rconde, double[] rcondv );

public static native @ByVal lapack_int LAPACKE_dggesx_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                                @Cast("char") byte sort, LAPACK_D_SELECT3 selctg, @Cast("char") byte sense,
                                @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda,
                                DoublePointer b, @ByVal lapack_int ldb, lapack_int sdim,
                                DoublePointer alphar, DoublePointer alphai, DoublePointer beta,
                                DoublePointer vsl, @ByVal lapack_int ldvsl, DoublePointer vsr,
                                @ByVal lapack_int ldvsr, DoublePointer rconde,
                                DoublePointer rcondv, DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork,
                                lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_dggesx_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                                @Cast("char") byte sort, LAPACK_D_SELECT3 selctg, @Cast("char") byte sense,
                                @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda,
                                DoubleBuffer b, @ByVal lapack_int ldb, lapack_int sdim,
                                DoubleBuffer alphar, DoubleBuffer alphai, DoubleBuffer beta,
                                DoubleBuffer vsl, @ByVal lapack_int ldvsl, DoubleBuffer vsr,
                                @ByVal lapack_int ldvsr, DoubleBuffer rconde,
                                DoubleBuffer rcondv, DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork,
                                lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_dggesx_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                                @Cast("char") byte sort, LAPACK_D_SELECT3 selctg, @Cast("char") byte sense,
                                @ByVal lapack_int n, double[] a, @ByVal lapack_int lda,
                                double[] b, @ByVal lapack_int ldb, lapack_int sdim,
                                double[] alphar, double[] alphai, double[] beta,
                                double[] vsl, @ByVal lapack_int ldvsl, double[] vsr,
                                @ByVal lapack_int ldvsr, double[] rconde,
                                double[] rcondv, double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork,
                                lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_dggev( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                          @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda, DoublePointer b,
                          @ByVal lapack_int ldb, DoublePointer alphar, DoublePointer alphai,
                          DoublePointer beta, DoublePointer vl, @ByVal lapack_int ldvl, DoublePointer vr,
                          @ByVal lapack_int ldvr );
public static native @ByVal lapack_int LAPACKE_dggev( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                          @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer b,
                          @ByVal lapack_int ldb, DoubleBuffer alphar, DoubleBuffer alphai,
                          DoubleBuffer beta, DoubleBuffer vl, @ByVal lapack_int ldvl, DoubleBuffer vr,
                          @ByVal lapack_int ldvr );
public static native @ByVal lapack_int LAPACKE_dggev( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                          @ByVal lapack_int n, double[] a, @ByVal lapack_int lda, double[] b,
                          @ByVal lapack_int ldb, double[] alphar, double[] alphai,
                          double[] beta, double[] vl, @ByVal lapack_int ldvl, double[] vr,
                          @ByVal lapack_int ldvr );

public static native @ByVal lapack_int LAPACKE_dggev3( int matrix_layout,
                           @Cast("char") byte jobvl, @Cast("char") byte jobvr, @ByVal lapack_int n,
                           DoublePointer a, @ByVal lapack_int lda,
                           DoublePointer b, @ByVal lapack_int ldb,
                           DoublePointer alphar, DoublePointer alphai, DoublePointer beta,
                           DoublePointer vl, @ByVal lapack_int ldvl,
                           DoublePointer vr, @ByVal lapack_int ldvr );
public static native @ByVal lapack_int LAPACKE_dggev3( int matrix_layout,
                           @Cast("char") byte jobvl, @Cast("char") byte jobvr, @ByVal lapack_int n,
                           DoubleBuffer a, @ByVal lapack_int lda,
                           DoubleBuffer b, @ByVal lapack_int ldb,
                           DoubleBuffer alphar, DoubleBuffer alphai, DoubleBuffer beta,
                           DoubleBuffer vl, @ByVal lapack_int ldvl,
                           DoubleBuffer vr, @ByVal lapack_int ldvr );
public static native @ByVal lapack_int LAPACKE_dggev3( int matrix_layout,
                           @Cast("char") byte jobvl, @Cast("char") byte jobvr, @ByVal lapack_int n,
                           double[] a, @ByVal lapack_int lda,
                           double[] b, @ByVal lapack_int ldb,
                           double[] alphar, double[] alphai, double[] beta,
                           double[] vl, @ByVal lapack_int ldvl,
                           double[] vr, @ByVal lapack_int ldvr );

public static native @ByVal lapack_int LAPACKE_dggev3_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                                @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda,
                                DoublePointer b, @ByVal lapack_int ldb, DoublePointer alphar,
                                DoublePointer alphai, DoublePointer beta, DoublePointer vl,
                                @ByVal lapack_int ldvl, DoublePointer vr, @ByVal lapack_int ldvr,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dggev3_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                                @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda,
                                DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer alphar,
                                DoubleBuffer alphai, DoubleBuffer beta, DoubleBuffer vl,
                                @ByVal lapack_int ldvl, DoubleBuffer vr, @ByVal lapack_int ldvr,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dggev3_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                                @ByVal lapack_int n, double[] a, @ByVal lapack_int lda,
                                double[] b, @ByVal lapack_int ldb, double[] alphar,
                                double[] alphai, double[] beta, double[] vl,
                                @ByVal lapack_int ldvl, double[] vr, @ByVal lapack_int ldvr,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dggev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda,
                               DoublePointer b, @ByVal lapack_int ldb, DoublePointer alphar,
                               DoublePointer alphai, DoublePointer beta, DoublePointer vl,
                               @ByVal lapack_int ldvl, DoublePointer vr, @ByVal lapack_int ldvr,
                               DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dggev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda,
                               DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer alphar,
                               DoubleBuffer alphai, DoubleBuffer beta, DoubleBuffer vl,
                               @ByVal lapack_int ldvl, DoubleBuffer vr, @ByVal lapack_int ldvr,
                               DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dggev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, double[] a, @ByVal lapack_int lda,
                               double[] b, @ByVal lapack_int ldb, double[] alphar,
                               double[] alphai, double[] beta, double[] vl,
                               @ByVal lapack_int ldvl, double[] vr, @ByVal lapack_int ldvr,
                               double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dggevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb,
                           DoublePointer alphar, DoublePointer alphai, DoublePointer beta,
                           DoublePointer vl, @ByVal lapack_int ldvl, DoublePointer vr,
                           @ByVal lapack_int ldvr, lapack_int ilo, lapack_int ihi,
                           DoublePointer lscale, DoublePointer rscale, DoublePointer abnrm,
                           DoublePointer bbnrm, DoublePointer rconde, DoublePointer rcondv );
public static native @ByVal lapack_int LAPACKE_dggevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb,
                           DoubleBuffer alphar, DoubleBuffer alphai, DoubleBuffer beta,
                           DoubleBuffer vl, @ByVal lapack_int ldvl, DoubleBuffer vr,
                           @ByVal lapack_int ldvr, lapack_int ilo, lapack_int ihi,
                           DoubleBuffer lscale, DoubleBuffer rscale, DoubleBuffer abnrm,
                           DoubleBuffer bbnrm, DoubleBuffer rconde, DoubleBuffer rcondv );
public static native @ByVal lapack_int LAPACKE_dggevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb,
                           double[] alphar, double[] alphai, double[] beta,
                           double[] vl, @ByVal lapack_int ldvl, double[] vr,
                           @ByVal lapack_int ldvr, lapack_int ilo, lapack_int ihi,
                           double[] lscale, double[] rscale, double[] abnrm,
                           double[] bbnrm, double[] rconde, double[] rcondv );

public static native @ByVal lapack_int LAPACKE_dggevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, DoublePointer a,
                                @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb,
                                DoublePointer alphar, DoublePointer alphai, DoublePointer beta,
                                DoublePointer vl, @ByVal lapack_int ldvl, DoublePointer vr,
                                @ByVal lapack_int ldvr, lapack_int ilo,
                                lapack_int ihi, DoublePointer lscale, DoublePointer rscale,
                                DoublePointer abnrm, DoublePointer bbnrm, DoublePointer rconde,
                                DoublePointer rcondv, DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_dggevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, DoubleBuffer a,
                                @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb,
                                DoubleBuffer alphar, DoubleBuffer alphai, DoubleBuffer beta,
                                DoubleBuffer vl, @ByVal lapack_int ldvl, DoubleBuffer vr,
                                @ByVal lapack_int ldvr, lapack_int ilo,
                                lapack_int ihi, DoubleBuffer lscale, DoubleBuffer rscale,
                                DoubleBuffer abnrm, DoubleBuffer bbnrm, DoubleBuffer rconde,
                                DoubleBuffer rcondv, DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_dggevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, double[] a,
                                @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb,
                                double[] alphar, double[] alphai, double[] beta,
                                double[] vl, @ByVal lapack_int ldvl, double[] vr,
                                @ByVal lapack_int ldvr, lapack_int ilo,
                                lapack_int ihi, double[] lscale, double[] rscale,
                                double[] abnrm, double[] bbnrm, double[] rconde,
                                double[] rcondv, double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_dggglm( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                           @ByVal lapack_int p, DoublePointer a, @ByVal lapack_int lda, DoublePointer b,
                           @ByVal lapack_int ldb, DoublePointer d, DoublePointer x, DoublePointer y );
public static native @ByVal lapack_int LAPACKE_dggglm( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                           @ByVal lapack_int p, DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer b,
                           @ByVal lapack_int ldb, DoubleBuffer d, DoubleBuffer x, DoubleBuffer y );
public static native @ByVal lapack_int LAPACKE_dggglm( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                           @ByVal lapack_int p, double[] a, @ByVal lapack_int lda, double[] b,
                           @ByVal lapack_int ldb, double[] d, double[] x, double[] y );

public static native @ByVal lapack_int LAPACKE_dggglm_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                                @ByVal lapack_int p, DoublePointer a, @ByVal lapack_int lda,
                                DoublePointer b, @ByVal lapack_int ldb, DoublePointer d, DoublePointer x,
                                DoublePointer y, DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dggglm_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                                @ByVal lapack_int p, DoubleBuffer a, @ByVal lapack_int lda,
                                DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer d, DoubleBuffer x,
                                DoubleBuffer y, DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dggglm_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                                @ByVal lapack_int p, double[] a, @ByVal lapack_int lda,
                                double[] b, @ByVal lapack_int ldb, double[] d, double[] x,
                                double[] y, double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dgghd3( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           DoublePointer a, @ByVal lapack_int lda,
                           DoublePointer b, @ByVal lapack_int ldb,
                           DoublePointer q, @ByVal lapack_int ldq,
                           DoublePointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dgghd3( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           DoubleBuffer a, @ByVal lapack_int lda,
                           DoubleBuffer b, @ByVal lapack_int ldb,
                           DoubleBuffer q, @ByVal lapack_int ldq,
                           DoubleBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dgghd3( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           double[] a, @ByVal lapack_int lda,
                           double[] b, @ByVal lapack_int ldb,
                           double[] q, @ByVal lapack_int ldq,
                           double[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_dgghd3_work( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                DoublePointer a, @ByVal lapack_int lda, DoublePointer b,
                                @ByVal lapack_int ldb, DoublePointer q, @ByVal lapack_int ldq,
                                DoublePointer z, @ByVal lapack_int ldz, DoublePointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgghd3_work( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer b,
                                @ByVal lapack_int ldb, DoubleBuffer q, @ByVal lapack_int ldq,
                                DoubleBuffer z, @ByVal lapack_int ldz, DoubleBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgghd3_work( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                double[] a, @ByVal lapack_int lda, double[] b,
                                @ByVal lapack_int ldb, double[] q, @ByVal lapack_int ldq,
                                double[] z, @ByVal lapack_int ldz, double[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dgghrd( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           DoublePointer a, @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb,
                           DoublePointer q, @ByVal lapack_int ldq, DoublePointer z,
                           @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dgghrd( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb,
                           DoubleBuffer q, @ByVal lapack_int ldq, DoubleBuffer z,
                           @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dgghrd( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           double[] a, @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb,
                           double[] q, @ByVal lapack_int ldq, double[] z,
                           @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_dgghrd_work( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                DoublePointer a, @ByVal lapack_int lda, DoublePointer b,
                                @ByVal lapack_int ldb, DoublePointer q, @ByVal lapack_int ldq,
                                DoublePointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dgghrd_work( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer b,
                                @ByVal lapack_int ldb, DoubleBuffer q, @ByVal lapack_int ldq,
                                DoubleBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dgghrd_work( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                double[] a, @ByVal lapack_int lda, double[] b,
                                @ByVal lapack_int ldb, double[] q, @ByVal lapack_int ldq,
                                double[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_dgglse( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int p, DoublePointer a, @ByVal lapack_int lda, DoublePointer b,
                           @ByVal lapack_int ldb, DoublePointer c, DoublePointer d, DoublePointer x );
public static native @ByVal lapack_int LAPACKE_dgglse( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int p, DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer b,
                           @ByVal lapack_int ldb, DoubleBuffer c, DoubleBuffer d, DoubleBuffer x );
public static native @ByVal lapack_int LAPACKE_dgglse( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int p, double[] a, @ByVal lapack_int lda, double[] b,
                           @ByVal lapack_int ldb, double[] c, double[] d, double[] x );

public static native @ByVal lapack_int LAPACKE_dgglse_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int p, DoublePointer a, @ByVal lapack_int lda,
                                DoublePointer b, @ByVal lapack_int ldb, DoublePointer c, DoublePointer d,
                                DoublePointer x, DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgglse_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int p, DoubleBuffer a, @ByVal lapack_int lda,
                                DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer c, DoubleBuffer d,
                                DoubleBuffer x, DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgglse_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int p, double[] a, @ByVal lapack_int lda,
                                double[] b, @ByVal lapack_int ldb, double[] c, double[] d,
                                double[] x, double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dggqrf( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                           @ByVal lapack_int p, DoublePointer a, @ByVal lapack_int lda,
                           DoublePointer taua, DoublePointer b, @ByVal lapack_int ldb,
                           DoublePointer taub );
public static native @ByVal lapack_int LAPACKE_dggqrf( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                           @ByVal lapack_int p, DoubleBuffer a, @ByVal lapack_int lda,
                           DoubleBuffer taua, DoubleBuffer b, @ByVal lapack_int ldb,
                           DoubleBuffer taub );
public static native @ByVal lapack_int LAPACKE_dggqrf( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                           @ByVal lapack_int p, double[] a, @ByVal lapack_int lda,
                           double[] taua, double[] b, @ByVal lapack_int ldb,
                           double[] taub );

public static native @ByVal lapack_int LAPACKE_dggqrf_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                                @ByVal lapack_int p, DoublePointer a, @ByVal lapack_int lda,
                                DoublePointer taua, DoublePointer b, @ByVal lapack_int ldb,
                                DoublePointer taub, DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dggqrf_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                                @ByVal lapack_int p, DoubleBuffer a, @ByVal lapack_int lda,
                                DoubleBuffer taua, DoubleBuffer b, @ByVal lapack_int ldb,
                                DoubleBuffer taub, DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dggqrf_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                                @ByVal lapack_int p, double[] a, @ByVal lapack_int lda,
                                double[] taua, double[] b, @ByVal lapack_int ldb,
                                double[] taub, double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dggrqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int p,
                           @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda,
                           DoublePointer taua, DoublePointer b, @ByVal lapack_int ldb,
                           DoublePointer taub );
public static native @ByVal lapack_int LAPACKE_dggrqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int p,
                           @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda,
                           DoubleBuffer taua, DoubleBuffer b, @ByVal lapack_int ldb,
                           DoubleBuffer taub );
public static native @ByVal lapack_int LAPACKE_dggrqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int p,
                           @ByVal lapack_int n, double[] a, @ByVal lapack_int lda,
                           double[] taua, double[] b, @ByVal lapack_int ldb,
                           double[] taub );

public static native @ByVal lapack_int LAPACKE_dggrqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda,
                                DoublePointer taua, DoublePointer b, @ByVal lapack_int ldb,
                                DoublePointer taub, DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dggrqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda,
                                DoubleBuffer taua, DoubleBuffer b, @ByVal lapack_int ldb,
                                DoubleBuffer taub, DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dggrqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, double[] a, @ByVal lapack_int lda,
                                double[] taua, double[] b, @ByVal lapack_int ldb,
                                double[] taub, double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dggsvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                           lapack_int k, lapack_int l, DoublePointer a,
                           @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb,
                           DoublePointer alpha, DoublePointer beta, DoublePointer u,
                           @ByVal lapack_int ldu, DoublePointer v, @ByVal lapack_int ldv, DoublePointer q,
                           @ByVal lapack_int ldq, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dggsvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                           lapack_int k, lapack_int l, DoubleBuffer a,
                           @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb,
                           DoubleBuffer alpha, DoubleBuffer beta, DoubleBuffer u,
                           @ByVal lapack_int ldu, DoubleBuffer v, @ByVal lapack_int ldv, DoubleBuffer q,
                           @ByVal lapack_int ldq, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dggsvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                           lapack_int k, lapack_int l, double[] a,
                           @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb,
                           double[] alpha, double[] beta, double[] u,
                           @ByVal lapack_int ldu, double[] v, @ByVal lapack_int ldv, double[] q,
                           @ByVal lapack_int ldq, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dggsvd3( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                            lapack_int k, lapack_int l, DoublePointer a,
                            @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb,
                            DoublePointer alpha, DoublePointer beta, DoublePointer u,
                            @ByVal lapack_int ldu, DoublePointer v, @ByVal lapack_int ldv, DoublePointer q,
                            @ByVal lapack_int ldq, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dggsvd3( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                            lapack_int k, lapack_int l, DoubleBuffer a,
                            @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb,
                            DoubleBuffer alpha, DoubleBuffer beta, DoubleBuffer u,
                            @ByVal lapack_int ldu, DoubleBuffer v, @ByVal lapack_int ldv, DoubleBuffer q,
                            @ByVal lapack_int ldq, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dggsvd3( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                            lapack_int k, lapack_int l, double[] a,
                            @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb,
                            double[] alpha, double[] beta, double[] u,
                            @ByVal lapack_int ldu, double[] v, @ByVal lapack_int ldv, double[] q,
                            @ByVal lapack_int ldq, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dggsvd3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                 @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int p, lapack_int k, lapack_int l,
                                 DoublePointer a, @ByVal lapack_int lda, DoublePointer b,
                                 @ByVal lapack_int ldb, DoublePointer alpha, DoublePointer beta,
                                 DoublePointer u, @ByVal lapack_int ldu, DoublePointer v,
                                 @ByVal lapack_int ldv, DoublePointer q, @ByVal lapack_int ldq,
                                 DoublePointer work, @ByVal lapack_int lwork,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dggsvd3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                 @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int p, lapack_int k, lapack_int l,
                                 DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer b,
                                 @ByVal lapack_int ldb, DoubleBuffer alpha, DoubleBuffer beta,
                                 DoubleBuffer u, @ByVal lapack_int ldu, DoubleBuffer v,
                                 @ByVal lapack_int ldv, DoubleBuffer q, @ByVal lapack_int ldq,
                                 DoubleBuffer work, @ByVal lapack_int lwork,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dggsvd3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                 @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int p, lapack_int k, lapack_int l,
                                 double[] a, @ByVal lapack_int lda, double[] b,
                                 @ByVal lapack_int ldb, double[] alpha, double[] beta,
                                 double[] u, @ByVal lapack_int ldu, double[] v,
                                 @ByVal lapack_int ldv, double[] q, @ByVal lapack_int ldq,
                                 double[] work, @ByVal lapack_int lwork,
                                 lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dggsvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int p, lapack_int k, lapack_int l,
                                DoublePointer a, @ByVal lapack_int lda, DoublePointer b,
                                @ByVal lapack_int ldb, DoublePointer alpha, DoublePointer beta,
                                DoublePointer u, @ByVal lapack_int ldu, DoublePointer v,
                                @ByVal lapack_int ldv, DoublePointer q, @ByVal lapack_int ldq,
                                DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dggsvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int p, lapack_int k, lapack_int l,
                                DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer b,
                                @ByVal lapack_int ldb, DoubleBuffer alpha, DoubleBuffer beta,
                                DoubleBuffer u, @ByVal lapack_int ldu, DoubleBuffer v,
                                @ByVal lapack_int ldv, DoubleBuffer q, @ByVal lapack_int ldq,
                                DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dggsvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int p, lapack_int k, lapack_int l,
                                double[] a, @ByVal lapack_int lda, double[] b,
                                @ByVal lapack_int ldb, double[] alpha, double[] beta,
                                double[] u, @ByVal lapack_int ldu, double[] v,
                                @ByVal lapack_int ldv, double[] q, @ByVal lapack_int ldq,
                                double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dggsvp( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb,
                           double tola, double tolb, lapack_int k,
                           lapack_int l, DoublePointer u, @ByVal lapack_int ldu, DoublePointer v,
                           @ByVal lapack_int ldv, DoublePointer q, @ByVal lapack_int ldq );
public static native @ByVal lapack_int LAPACKE_dggsvp( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb,
                           double tola, double tolb, lapack_int k,
                           lapack_int l, DoubleBuffer u, @ByVal lapack_int ldu, DoubleBuffer v,
                           @ByVal lapack_int ldv, DoubleBuffer q, @ByVal lapack_int ldq );
public static native @ByVal lapack_int LAPACKE_dggsvp( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb,
                           double tola, double tolb, lapack_int k,
                           lapack_int l, double[] u, @ByVal lapack_int ldu, double[] v,
                           @ByVal lapack_int ldv, double[] q, @ByVal lapack_int ldq );

public static native @ByVal lapack_int LAPACKE_dggsvp3( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                            @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n, DoublePointer a,
                            @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb,
                            double tola, double tolb, lapack_int k,
                            lapack_int l, DoublePointer u, @ByVal lapack_int ldu, DoublePointer v,
                            @ByVal lapack_int ldv, DoublePointer q, @ByVal lapack_int ldq );
public static native @ByVal lapack_int LAPACKE_dggsvp3( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                            @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n, DoubleBuffer a,
                            @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb,
                            double tola, double tolb, lapack_int k,
                            lapack_int l, DoubleBuffer u, @ByVal lapack_int ldu, DoubleBuffer v,
                            @ByVal lapack_int ldv, DoubleBuffer q, @ByVal lapack_int ldq );
public static native @ByVal lapack_int LAPACKE_dggsvp3( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                            @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n, double[] a,
                            @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb,
                            double tola, double tolb, lapack_int k,
                            lapack_int l, double[] u, @ByVal lapack_int ldu, double[] v,
                            @ByVal lapack_int ldv, double[] q, @ByVal lapack_int ldq );

public static native @ByVal lapack_int LAPACKE_dggsvp3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                 @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                 @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda,
                                 DoublePointer b, @ByVal lapack_int ldb, double tola,
                                 double tolb, lapack_int k, lapack_int l,
                                 DoublePointer u, @ByVal lapack_int ldu, DoublePointer v,
                                 @ByVal lapack_int ldv, DoublePointer q, @ByVal lapack_int ldq,
                                 lapack_int iwork, DoublePointer tau, DoublePointer work,
                                 @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dggsvp3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                 @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                 @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda,
                                 DoubleBuffer b, @ByVal lapack_int ldb, double tola,
                                 double tolb, lapack_int k, lapack_int l,
                                 DoubleBuffer u, @ByVal lapack_int ldu, DoubleBuffer v,
                                 @ByVal lapack_int ldv, DoubleBuffer q, @ByVal lapack_int ldq,
                                 lapack_int iwork, DoubleBuffer tau, DoubleBuffer work,
                                 @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dggsvp3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                 @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                 @ByVal lapack_int n, double[] a, @ByVal lapack_int lda,
                                 double[] b, @ByVal lapack_int ldb, double tola,
                                 double tolb, lapack_int k, lapack_int l,
                                 double[] u, @ByVal lapack_int ldu, double[] v,
                                 @ByVal lapack_int ldv, double[] q, @ByVal lapack_int ldq,
                                 lapack_int iwork, double[] tau, double[] work,
                                 @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dggsvp_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda,
                                DoublePointer b, @ByVal lapack_int ldb, double tola,
                                double tolb, lapack_int k, lapack_int l,
                                DoublePointer u, @ByVal lapack_int ldu, DoublePointer v,
                                @ByVal lapack_int ldv, DoublePointer q, @ByVal lapack_int ldq,
                                lapack_int iwork, DoublePointer tau, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dggsvp_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda,
                                DoubleBuffer b, @ByVal lapack_int ldb, double tola,
                                double tolb, lapack_int k, lapack_int l,
                                DoubleBuffer u, @ByVal lapack_int ldu, DoubleBuffer v,
                                @ByVal lapack_int ldv, DoubleBuffer q, @ByVal lapack_int ldq,
                                lapack_int iwork, DoubleBuffer tau, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dggsvp_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, double[] a, @ByVal lapack_int lda,
                                double[] b, @ByVal lapack_int ldb, double tola,
                                double tolb, lapack_int k, lapack_int l,
                                double[] u, @ByVal lapack_int ldu, double[] v,
                                @ByVal lapack_int ldv, double[] q, @ByVal lapack_int ldq,
                                lapack_int iwork, double[] tau, double[] work );

public static native @ByVal lapack_int LAPACKE_dgtcon( @Cast("char") byte norm, @ByVal lapack_int n, @Const DoublePointer dl,
                           @Const DoublePointer d, @Const DoublePointer du, @Const DoublePointer du2,
                           @Const lapack_int ipiv, double anorm, DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_dgtcon( @Cast("char") byte norm, @ByVal lapack_int n, @Const DoubleBuffer dl,
                           @Const DoubleBuffer d, @Const DoubleBuffer du, @Const DoubleBuffer du2,
                           @Const lapack_int ipiv, double anorm, DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_dgtcon( @Cast("char") byte norm, @ByVal lapack_int n, @Const double[] dl,
                           @Const double[] d, @Const double[] du, @Const double[] du2,
                           @Const lapack_int ipiv, double anorm, double[] rcond );

public static native @ByVal lapack_int LAPACKE_dgtcon_work( @Cast("char") byte norm, @ByVal lapack_int n, @Const DoublePointer dl,
                                @Const DoublePointer d, @Const DoublePointer du,
                                @Const DoublePointer du2, @Const lapack_int ipiv,
                                double anorm, DoublePointer rcond, DoublePointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgtcon_work( @Cast("char") byte norm, @ByVal lapack_int n, @Const DoubleBuffer dl,
                                @Const DoubleBuffer d, @Const DoubleBuffer du,
                                @Const DoubleBuffer du2, @Const lapack_int ipiv,
                                double anorm, DoubleBuffer rcond, DoubleBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgtcon_work( @Cast("char") byte norm, @ByVal lapack_int n, @Const double[] dl,
                                @Const double[] d, @Const double[] du,
                                @Const double[] du2, @Const lapack_int ipiv,
                                double anorm, double[] rcond, double[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dgtrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoublePointer dl, @Const DoublePointer d,
                           @Const DoublePointer du, @Const DoublePointer dlf,
                           @Const DoublePointer df, @Const DoublePointer duf,
                           @Const DoublePointer du2, @Const lapack_int ipiv,
                           @Const DoublePointer b, @ByVal lapack_int ldb, DoublePointer x,
                           @ByVal lapack_int ldx, DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_dgtrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoubleBuffer dl, @Const DoubleBuffer d,
                           @Const DoubleBuffer du, @Const DoubleBuffer dlf,
                           @Const DoubleBuffer df, @Const DoubleBuffer duf,
                           @Const DoubleBuffer du2, @Const lapack_int ipiv,
                           @Const DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x,
                           @ByVal lapack_int ldx, DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_dgtrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const double[] dl, @Const double[] d,
                           @Const double[] du, @Const double[] dlf,
                           @Const double[] df, @Const double[] duf,
                           @Const double[] du2, @Const lapack_int ipiv,
                           @Const double[] b, @ByVal lapack_int ldb, double[] x,
                           @ByVal lapack_int ldx, double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_dgtrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoublePointer dl,
                                @Const DoublePointer d, @Const DoublePointer du,
                                @Const DoublePointer dlf, @Const DoublePointer df,
                                @Const DoublePointer duf, @Const DoublePointer du2,
                                @Const lapack_int ipiv, @Const DoublePointer b,
                                @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                                DoublePointer ferr, DoublePointer berr, DoublePointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgtrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoubleBuffer dl,
                                @Const DoubleBuffer d, @Const DoubleBuffer du,
                                @Const DoubleBuffer dlf, @Const DoubleBuffer df,
                                @Const DoubleBuffer duf, @Const DoubleBuffer du2,
                                @Const lapack_int ipiv, @Const DoubleBuffer b,
                                @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                                DoubleBuffer ferr, DoubleBuffer berr, DoubleBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgtrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const double[] dl,
                                @Const double[] d, @Const double[] du,
                                @Const double[] dlf, @Const double[] df,
                                @Const double[] duf, @Const double[] du2,
                                @Const lapack_int ipiv, @Const double[] b,
                                @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                                double[] ferr, double[] berr, double[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dgtsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          DoublePointer dl, DoublePointer d, DoublePointer du, DoublePointer b,
                          @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgtsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          DoubleBuffer dl, DoubleBuffer d, DoubleBuffer du, DoubleBuffer b,
                          @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgtsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          double[] dl, double[] d, double[] du, double[] b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dgtsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               DoublePointer dl, DoublePointer d, DoublePointer du, DoublePointer b,
                               @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgtsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               DoubleBuffer dl, DoubleBuffer d, DoubleBuffer du, DoubleBuffer b,
                               @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgtsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               double[] dl, double[] d, double[] du, double[] b,
                               @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dgtsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoublePointer dl,
                           @Const DoublePointer d, @Const DoublePointer du, DoublePointer dlf,
                           DoublePointer df, DoublePointer duf, DoublePointer du2,
                           lapack_int ipiv, @Const DoublePointer b, @ByVal lapack_int ldb,
                           DoublePointer x, @ByVal lapack_int ldx, DoublePointer rcond,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_dgtsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoubleBuffer dl,
                           @Const DoubleBuffer d, @Const DoubleBuffer du, DoubleBuffer dlf,
                           DoubleBuffer df, DoubleBuffer duf, DoubleBuffer du2,
                           lapack_int ipiv, @Const DoubleBuffer b, @ByVal lapack_int ldb,
                           DoubleBuffer x, @ByVal lapack_int ldx, DoubleBuffer rcond,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_dgtsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const double[] dl,
                           @Const double[] d, @Const double[] du, double[] dlf,
                           double[] df, double[] duf, double[] du2,
                           lapack_int ipiv, @Const double[] b, @ByVal lapack_int ldb,
                           double[] x, @ByVal lapack_int ldx, double[] rcond,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_dgtsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoublePointer dl,
                                @Const DoublePointer d, @Const DoublePointer du, DoublePointer dlf,
                                DoublePointer df, DoublePointer duf, DoublePointer du2,
                                lapack_int ipiv, @Const DoublePointer b,
                                @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                                DoublePointer rcond, DoublePointer ferr, DoublePointer berr,
                                DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgtsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoubleBuffer dl,
                                @Const DoubleBuffer d, @Const DoubleBuffer du, DoubleBuffer dlf,
                                DoubleBuffer df, DoubleBuffer duf, DoubleBuffer du2,
                                lapack_int ipiv, @Const DoubleBuffer b,
                                @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                                DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr,
                                DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dgtsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const double[] dl,
                                @Const double[] d, @Const double[] du, double[] dlf,
                                double[] df, double[] duf, double[] du2,
                                lapack_int ipiv, @Const double[] b,
                                @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                                double[] rcond, double[] ferr, double[] berr,
                                double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dgttrf( @ByVal lapack_int n, DoublePointer dl, DoublePointer d, DoublePointer du,
                           DoublePointer du2, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgttrf( @ByVal lapack_int n, DoubleBuffer dl, DoubleBuffer d, DoubleBuffer du,
                           DoubleBuffer du2, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgttrf( @ByVal lapack_int n, double[] dl, double[] d, double[] du,
                           double[] du2, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_dgttrf_work( @ByVal lapack_int n, DoublePointer dl, DoublePointer d, DoublePointer du,
                                DoublePointer du2, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgttrf_work( @ByVal lapack_int n, DoubleBuffer dl, DoubleBuffer d, DoubleBuffer du,
                                DoubleBuffer du2, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dgttrf_work( @ByVal lapack_int n, double[] dl, double[] d, double[] du,
                                double[] du2, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_dgttrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoublePointer dl, @Const DoublePointer d,
                           @Const DoublePointer du, @Const DoublePointer du2,
                           @Const lapack_int ipiv, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgttrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoubleBuffer dl, @Const DoubleBuffer d,
                           @Const DoubleBuffer du, @Const DoubleBuffer du2,
                           @Const lapack_int ipiv, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgttrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const double[] dl, @Const double[] d,
                           @Const double[] du, @Const double[] du2,
                           @Const lapack_int ipiv, double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dgttrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoublePointer dl,
                                @Const DoublePointer d, @Const DoublePointer du,
                                @Const DoublePointer du2, @Const lapack_int ipiv,
                                DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgttrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoubleBuffer dl,
                                @Const DoubleBuffer d, @Const DoubleBuffer du,
                                @Const DoubleBuffer du2, @Const lapack_int ipiv,
                                DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgttrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const double[] dl,
                                @Const double[] d, @Const double[] du,
                                @Const double[] du2, @Const lapack_int ipiv,
                                double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dhgeqz( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           DoublePointer h, @ByVal lapack_int ldh, DoublePointer t, @ByVal lapack_int ldt,
                           DoublePointer alphar, DoublePointer alphai, DoublePointer beta,
                           DoublePointer q, @ByVal lapack_int ldq, DoublePointer z,
                           @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dhgeqz( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           DoubleBuffer h, @ByVal lapack_int ldh, DoubleBuffer t, @ByVal lapack_int ldt,
                           DoubleBuffer alphar, DoubleBuffer alphai, DoubleBuffer beta,
                           DoubleBuffer q, @ByVal lapack_int ldq, DoubleBuffer z,
                           @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dhgeqz( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           double[] h, @ByVal lapack_int ldh, double[] t, @ByVal lapack_int ldt,
                           double[] alphar, double[] alphai, double[] beta,
                           double[] q, @ByVal lapack_int ldq, double[] z,
                           @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_dhgeqz_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Cast("char") byte compz, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, DoublePointer h, @ByVal lapack_int ldh,
                                DoublePointer t, @ByVal lapack_int ldt, DoublePointer alphar,
                                DoublePointer alphai, DoublePointer beta, DoublePointer q,
                                @ByVal lapack_int ldq, DoublePointer z, @ByVal lapack_int ldz,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dhgeqz_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Cast("char") byte compz, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, DoubleBuffer h, @ByVal lapack_int ldh,
                                DoubleBuffer t, @ByVal lapack_int ldt, DoubleBuffer alphar,
                                DoubleBuffer alphai, DoubleBuffer beta, DoubleBuffer q,
                                @ByVal lapack_int ldq, DoubleBuffer z, @ByVal lapack_int ldz,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dhgeqz_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Cast("char") byte compz, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, double[] h, @ByVal lapack_int ldh,
                                double[] t, @ByVal lapack_int ldt, double[] alphar,
                                double[] alphai, double[] beta, double[] q,
                                @ByVal lapack_int ldq, double[] z, @ByVal lapack_int ldz,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dhsein( int matrix_layout, @Cast("char") byte job, @Cast("char") byte eigsrc, @Cast("char") byte initv,
                           lapack_logical select, @ByVal lapack_int n,
                           @Const DoublePointer h, @ByVal lapack_int ldh, DoublePointer wr,
                           @Const DoublePointer wi, DoublePointer vl, @ByVal lapack_int ldvl,
                           DoublePointer vr, @ByVal lapack_int ldvr, @ByVal lapack_int mm,
                           lapack_int m, lapack_int ifaill,
                           lapack_int ifailr );
public static native @ByVal lapack_int LAPACKE_dhsein( int matrix_layout, @Cast("char") byte job, @Cast("char") byte eigsrc, @Cast("char") byte initv,
                           lapack_logical select, @ByVal lapack_int n,
                           @Const DoubleBuffer h, @ByVal lapack_int ldh, DoubleBuffer wr,
                           @Const DoubleBuffer wi, DoubleBuffer vl, @ByVal lapack_int ldvl,
                           DoubleBuffer vr, @ByVal lapack_int ldvr, @ByVal lapack_int mm,
                           lapack_int m, lapack_int ifaill,
                           lapack_int ifailr );
public static native @ByVal lapack_int LAPACKE_dhsein( int matrix_layout, @Cast("char") byte job, @Cast("char") byte eigsrc, @Cast("char") byte initv,
                           lapack_logical select, @ByVal lapack_int n,
                           @Const double[] h, @ByVal lapack_int ldh, double[] wr,
                           @Const double[] wi, double[] vl, @ByVal lapack_int ldvl,
                           double[] vr, @ByVal lapack_int ldvr, @ByVal lapack_int mm,
                           lapack_int m, lapack_int ifaill,
                           lapack_int ifailr );

public static native @ByVal lapack_int LAPACKE_dhsein_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte eigsrc,
                                @Cast("char") byte initv, lapack_logical select,
                                @ByVal lapack_int n, @Const DoublePointer h, @ByVal lapack_int ldh,
                                DoublePointer wr, @Const DoublePointer wi, DoublePointer vl,
                                @ByVal lapack_int ldvl, DoublePointer vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m, DoublePointer work,
                                lapack_int ifaill, lapack_int ifailr );
public static native @ByVal lapack_int LAPACKE_dhsein_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte eigsrc,
                                @Cast("char") byte initv, lapack_logical select,
                                @ByVal lapack_int n, @Const DoubleBuffer h, @ByVal lapack_int ldh,
                                DoubleBuffer wr, @Const DoubleBuffer wi, DoubleBuffer vl,
                                @ByVal lapack_int ldvl, DoubleBuffer vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m, DoubleBuffer work,
                                lapack_int ifaill, lapack_int ifailr );
public static native @ByVal lapack_int LAPACKE_dhsein_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte eigsrc,
                                @Cast("char") byte initv, lapack_logical select,
                                @ByVal lapack_int n, @Const double[] h, @ByVal lapack_int ldh,
                                double[] wr, @Const double[] wi, double[] vl,
                                @ByVal lapack_int ldvl, double[] vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m, double[] work,
                                lapack_int ifaill, lapack_int ifailr );

public static native @ByVal lapack_int LAPACKE_dhseqr( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compz, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, DoublePointer h,
                           @ByVal lapack_int ldh, DoublePointer wr, DoublePointer wi, DoublePointer z,
                           @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dhseqr( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compz, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, DoubleBuffer h,
                           @ByVal lapack_int ldh, DoubleBuffer wr, DoubleBuffer wi, DoubleBuffer z,
                           @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dhseqr( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compz, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, double[] h,
                           @ByVal lapack_int ldh, double[] wr, double[] wi, double[] z,
                           @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_dhseqr_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                DoublePointer h, @ByVal lapack_int ldh, DoublePointer wr,
                                DoublePointer wi, DoublePointer z, @ByVal lapack_int ldz,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dhseqr_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                DoubleBuffer h, @ByVal lapack_int ldh, DoubleBuffer wr,
                                DoubleBuffer wi, DoubleBuffer z, @ByVal lapack_int ldz,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dhseqr_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                double[] h, @ByVal lapack_int ldh, double[] wr,
                                double[] wi, double[] z, @ByVal lapack_int ldz,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dlacn2( @ByVal lapack_int n, DoublePointer v, DoublePointer x, lapack_int isgn,
                           DoublePointer est, lapack_int kase, lapack_int isave );
public static native @ByVal lapack_int LAPACKE_dlacn2( @ByVal lapack_int n, DoubleBuffer v, DoubleBuffer x, lapack_int isgn,
                           DoubleBuffer est, lapack_int kase, lapack_int isave );
public static native @ByVal lapack_int LAPACKE_dlacn2( @ByVal lapack_int n, double[] v, double[] x, lapack_int isgn,
                           double[] est, lapack_int kase, lapack_int isave );

public static native @ByVal lapack_int LAPACKE_dlacn2_work( @ByVal lapack_int n, DoublePointer v, DoublePointer x,
                                lapack_int isgn, DoublePointer est, lapack_int kase,
                                lapack_int isave );
public static native @ByVal lapack_int LAPACKE_dlacn2_work( @ByVal lapack_int n, DoubleBuffer v, DoubleBuffer x,
                                lapack_int isgn, DoubleBuffer est, lapack_int kase,
                                lapack_int isave );
public static native @ByVal lapack_int LAPACKE_dlacn2_work( @ByVal lapack_int n, double[] v, double[] x,
                                lapack_int isgn, double[] est, lapack_int kase,
                                lapack_int isave );

public static native @ByVal lapack_int LAPACKE_dlacpy( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const DoublePointer a, @ByVal lapack_int lda,
                           DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dlacpy( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const DoubleBuffer a, @ByVal lapack_int lda,
                           DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dlacpy( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const double[] a, @ByVal lapack_int lda,
                           double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dlacpy_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const DoublePointer a, @ByVal lapack_int lda,
                                DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dlacpy_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const DoubleBuffer a, @ByVal lapack_int lda,
                                DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dlacpy_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const double[] a, @ByVal lapack_int lda,
                                double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dlag2s( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const DoublePointer a, @ByVal lapack_int lda, FloatPointer sa,
                           @ByVal lapack_int ldsa );
public static native @ByVal lapack_int LAPACKE_dlag2s( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const DoubleBuffer a, @ByVal lapack_int lda, FloatBuffer sa,
                           @ByVal lapack_int ldsa );
public static native @ByVal lapack_int LAPACKE_dlag2s( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const double[] a, @ByVal lapack_int lda, float[] sa,
                           @ByVal lapack_int ldsa );

public static native @ByVal lapack_int LAPACKE_dlag2s_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const DoublePointer a, @ByVal lapack_int lda, FloatPointer sa,
                                @ByVal lapack_int ldsa );
public static native @ByVal lapack_int LAPACKE_dlag2s_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const DoubleBuffer a, @ByVal lapack_int lda, FloatBuffer sa,
                                @ByVal lapack_int ldsa );
public static native @ByVal lapack_int LAPACKE_dlag2s_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const double[] a, @ByVal lapack_int lda, float[] sa,
                                @ByVal lapack_int ldsa );

public static native @ByVal lapack_int LAPACKE_dlagge( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const DoublePointer d,
                           DoublePointer a, @ByVal lapack_int lda, lapack_int iseed );
public static native @ByVal lapack_int LAPACKE_dlagge( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const DoubleBuffer d,
                           DoubleBuffer a, @ByVal lapack_int lda, lapack_int iseed );
public static native @ByVal lapack_int LAPACKE_dlagge( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const double[] d,
                           double[] a, @ByVal lapack_int lda, lapack_int iseed );

public static native @ByVal lapack_int LAPACKE_dlagge_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const DoublePointer d,
                                DoublePointer a, @ByVal lapack_int lda, lapack_int iseed,
                                DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dlagge_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const DoubleBuffer d,
                                DoubleBuffer a, @ByVal lapack_int lda, lapack_int iseed,
                                DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dlagge_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const double[] d,
                                double[] a, @ByVal lapack_int lda, lapack_int iseed,
                                double[] work );

public static native @ByVal lapack_int LAPACKE_dlagsy( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const DoublePointer d, DoublePointer a, @ByVal lapack_int lda,
                           lapack_int iseed );
public static native @ByVal lapack_int LAPACKE_dlagsy( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const DoubleBuffer d, DoubleBuffer a, @ByVal lapack_int lda,
                           lapack_int iseed );
public static native @ByVal lapack_int LAPACKE_dlagsy( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const double[] d, double[] a, @ByVal lapack_int lda,
                           lapack_int iseed );

public static native @ByVal lapack_int LAPACKE_dlagsy_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const DoublePointer d, DoublePointer a, @ByVal lapack_int lda,
                                lapack_int iseed, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dlagsy_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const DoubleBuffer d, DoubleBuffer a, @ByVal lapack_int lda,
                                lapack_int iseed, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dlagsy_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const double[] d, double[] a, @ByVal lapack_int lda,
                                lapack_int iseed, double[] work );

public static native @ByVal lapack_int LAPACKE_dlapmr( int matrix_layout, @ByVal lapack_logical forwrd,
                           @ByVal lapack_int m, @ByVal lapack_int n, DoublePointer x,
                           @ByVal lapack_int ldx, lapack_int k );
public static native @ByVal lapack_int LAPACKE_dlapmr( int matrix_layout, @ByVal lapack_logical forwrd,
                           @ByVal lapack_int m, @ByVal lapack_int n, DoubleBuffer x,
                           @ByVal lapack_int ldx, lapack_int k );
public static native @ByVal lapack_int LAPACKE_dlapmr( int matrix_layout, @ByVal lapack_logical forwrd,
                           @ByVal lapack_int m, @ByVal lapack_int n, double[] x,
                           @ByVal lapack_int ldx, lapack_int k );

public static native @ByVal lapack_int LAPACKE_dlapmr_work( int matrix_layout, @ByVal lapack_logical forwrd,
                                @ByVal lapack_int m, @ByVal lapack_int n, DoublePointer x,
                                @ByVal lapack_int ldx, lapack_int k );
public static native @ByVal lapack_int LAPACKE_dlapmr_work( int matrix_layout, @ByVal lapack_logical forwrd,
                                @ByVal lapack_int m, @ByVal lapack_int n, DoubleBuffer x,
                                @ByVal lapack_int ldx, lapack_int k );
public static native @ByVal lapack_int LAPACKE_dlapmr_work( int matrix_layout, @ByVal lapack_logical forwrd,
                                @ByVal lapack_int m, @ByVal lapack_int n, double[] x,
                                @ByVal lapack_int ldx, lapack_int k );

public static native @ByVal lapack_int LAPACKE_dlapmt( int matrix_layout, @ByVal lapack_logical forwrd,
                           @ByVal lapack_int m, @ByVal lapack_int n, DoublePointer x,
                           @ByVal lapack_int ldx, lapack_int k );
public static native @ByVal lapack_int LAPACKE_dlapmt( int matrix_layout, @ByVal lapack_logical forwrd,
                           @ByVal lapack_int m, @ByVal lapack_int n, DoubleBuffer x,
                           @ByVal lapack_int ldx, lapack_int k );
public static native @ByVal lapack_int LAPACKE_dlapmt( int matrix_layout, @ByVal lapack_logical forwrd,
                           @ByVal lapack_int m, @ByVal lapack_int n, double[] x,
                           @ByVal lapack_int ldx, lapack_int k );

public static native @ByVal lapack_int LAPACKE_dlapmt_work( int matrix_layout, @ByVal lapack_logical forwrd,
                                @ByVal lapack_int m, @ByVal lapack_int n, DoublePointer x,
                                @ByVal lapack_int ldx, lapack_int k );
public static native @ByVal lapack_int LAPACKE_dlapmt_work( int matrix_layout, @ByVal lapack_logical forwrd,
                                @ByVal lapack_int m, @ByVal lapack_int n, DoubleBuffer x,
                                @ByVal lapack_int ldx, lapack_int k );
public static native @ByVal lapack_int LAPACKE_dlapmt_work( int matrix_layout, @ByVal lapack_logical forwrd,
                                @ByVal lapack_int m, @ByVal lapack_int n, double[] x,
                                @ByVal lapack_int ldx, lapack_int k );

public static native @ByVal lapack_int LAPACKE_dlarfb( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans, @Cast("char") byte direct,
                           @Cast("char") byte storev, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, @Const DoublePointer v, @ByVal lapack_int ldv,
                           @Const DoublePointer t, @ByVal lapack_int ldt, DoublePointer c,
                           @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dlarfb( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans, @Cast("char") byte direct,
                           @Cast("char") byte storev, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, @Const DoubleBuffer v, @ByVal lapack_int ldv,
                           @Const DoubleBuffer t, @ByVal lapack_int ldt, DoubleBuffer c,
                           @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dlarfb( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans, @Cast("char") byte direct,
                           @Cast("char") byte storev, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, @Const double[] v, @ByVal lapack_int ldv,
                           @Const double[] t, @ByVal lapack_int ldt, double[] c,
                           @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_dlarfb_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @Cast("char") byte direct, @Cast("char") byte storev, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k, @Const DoublePointer v,
                                @ByVal lapack_int ldv, @Const DoublePointer t, @ByVal lapack_int ldt,
                                DoublePointer c, @ByVal lapack_int ldc, DoublePointer work,
                                @ByVal lapack_int ldwork );
public static native @ByVal lapack_int LAPACKE_dlarfb_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @Cast("char") byte direct, @Cast("char") byte storev, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k, @Const DoubleBuffer v,
                                @ByVal lapack_int ldv, @Const DoubleBuffer t, @ByVal lapack_int ldt,
                                DoubleBuffer c, @ByVal lapack_int ldc, DoubleBuffer work,
                                @ByVal lapack_int ldwork );
public static native @ByVal lapack_int LAPACKE_dlarfb_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @Cast("char") byte direct, @Cast("char") byte storev, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k, @Const double[] v,
                                @ByVal lapack_int ldv, @Const double[] t, @ByVal lapack_int ldt,
                                double[] c, @ByVal lapack_int ldc, double[] work,
                                @ByVal lapack_int ldwork );

public static native @ByVal lapack_int LAPACKE_dlarfg( @ByVal lapack_int n, DoublePointer alpha, DoublePointer x,
                           @ByVal lapack_int incx, DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dlarfg( @ByVal lapack_int n, DoubleBuffer alpha, DoubleBuffer x,
                           @ByVal lapack_int incx, DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dlarfg( @ByVal lapack_int n, double[] alpha, double[] x,
                           @ByVal lapack_int incx, double[] tau );

public static native @ByVal lapack_int LAPACKE_dlarfg_work( @ByVal lapack_int n, DoublePointer alpha, DoublePointer x,
                                @ByVal lapack_int incx, DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dlarfg_work( @ByVal lapack_int n, DoubleBuffer alpha, DoubleBuffer x,
                                @ByVal lapack_int incx, DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dlarfg_work( @ByVal lapack_int n, double[] alpha, double[] x,
                                @ByVal lapack_int incx, double[] tau );

public static native @ByVal lapack_int LAPACKE_dlarft( int matrix_layout, @Cast("char") byte direct, @Cast("char") byte storev,
                           @ByVal lapack_int n, @ByVal lapack_int k, @Const DoublePointer v,
                           @ByVal lapack_int ldv, @Const DoublePointer tau, DoublePointer t,
                           @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_dlarft( int matrix_layout, @Cast("char") byte direct, @Cast("char") byte storev,
                           @ByVal lapack_int n, @ByVal lapack_int k, @Const DoubleBuffer v,
                           @ByVal lapack_int ldv, @Const DoubleBuffer tau, DoubleBuffer t,
                           @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_dlarft( int matrix_layout, @Cast("char") byte direct, @Cast("char") byte storev,
                           @ByVal lapack_int n, @ByVal lapack_int k, @Const double[] v,
                           @ByVal lapack_int ldv, @Const double[] tau, double[] t,
                           @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_dlarft_work( int matrix_layout, @Cast("char") byte direct, @Cast("char") byte storev,
                                @ByVal lapack_int n, @ByVal lapack_int k, @Const DoublePointer v,
                                @ByVal lapack_int ldv, @Const DoublePointer tau, DoublePointer t,
                                @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_dlarft_work( int matrix_layout, @Cast("char") byte direct, @Cast("char") byte storev,
                                @ByVal lapack_int n, @ByVal lapack_int k, @Const DoubleBuffer v,
                                @ByVal lapack_int ldv, @Const DoubleBuffer tau, DoubleBuffer t,
                                @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_dlarft_work( int matrix_layout, @Cast("char") byte direct, @Cast("char") byte storev,
                                @ByVal lapack_int n, @ByVal lapack_int k, @Const double[] v,
                                @ByVal lapack_int ldv, @Const double[] tau, double[] t,
                                @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_dlarfx( int matrix_layout, @Cast("char") byte side, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const DoublePointer v, double tau, DoublePointer c,
                           @ByVal lapack_int ldc, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dlarfx( int matrix_layout, @Cast("char") byte side, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const DoubleBuffer v, double tau, DoubleBuffer c,
                           @ByVal lapack_int ldc, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dlarfx( int matrix_layout, @Cast("char") byte side, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const double[] v, double tau, double[] c,
                           @ByVal lapack_int ldc, double[] work );

public static native @ByVal lapack_int LAPACKE_dlarfx_work( int matrix_layout, @Cast("char") byte side, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const DoublePointer v, double tau,
                                DoublePointer c, @ByVal lapack_int ldc, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dlarfx_work( int matrix_layout, @Cast("char") byte side, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const DoubleBuffer v, double tau,
                                DoubleBuffer c, @ByVal lapack_int ldc, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dlarfx_work( int matrix_layout, @Cast("char") byte side, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const double[] v, double tau,
                                double[] c, @ByVal lapack_int ldc, double[] work );

public static native @ByVal lapack_int LAPACKE_dlarnv( @ByVal lapack_int idist, lapack_int iseed, @ByVal lapack_int n,
                           DoublePointer x );
public static native @ByVal lapack_int LAPACKE_dlarnv( @ByVal lapack_int idist, lapack_int iseed, @ByVal lapack_int n,
                           DoubleBuffer x );
public static native @ByVal lapack_int LAPACKE_dlarnv( @ByVal lapack_int idist, lapack_int iseed, @ByVal lapack_int n,
                           double[] x );

public static native @ByVal lapack_int LAPACKE_dlarnv_work( @ByVal lapack_int idist, lapack_int iseed,
                                @ByVal lapack_int n, DoublePointer x );
public static native @ByVal lapack_int LAPACKE_dlarnv_work( @ByVal lapack_int idist, lapack_int iseed,
                                @ByVal lapack_int n, DoubleBuffer x );
public static native @ByVal lapack_int LAPACKE_dlarnv_work( @ByVal lapack_int idist, lapack_int iseed,
                                @ByVal lapack_int n, double[] x );

public static native @ByVal lapack_int LAPACKE_dlartgp( double f, double g, DoublePointer cs, DoublePointer sn,
                            DoublePointer r );
public static native @ByVal lapack_int LAPACKE_dlartgp( double f, double g, DoubleBuffer cs, DoubleBuffer sn,
                            DoubleBuffer r );
public static native @ByVal lapack_int LAPACKE_dlartgp( double f, double g, double[] cs, double[] sn,
                            double[] r );

public static native @ByVal lapack_int LAPACKE_dlartgp_work( double f, double g, DoublePointer cs, DoublePointer sn,
                                 DoublePointer r );
public static native @ByVal lapack_int LAPACKE_dlartgp_work( double f, double g, DoubleBuffer cs, DoubleBuffer sn,
                                 DoubleBuffer r );
public static native @ByVal lapack_int LAPACKE_dlartgp_work( double f, double g, double[] cs, double[] sn,
                                 double[] r );

public static native @ByVal lapack_int LAPACKE_dlartgs( double x, double y, double sigma, DoublePointer cs,
                            DoublePointer sn );
public static native @ByVal lapack_int LAPACKE_dlartgs( double x, double y, double sigma, DoubleBuffer cs,
                            DoubleBuffer sn );
public static native @ByVal lapack_int LAPACKE_dlartgs( double x, double y, double sigma, double[] cs,
                            double[] sn );

public static native @ByVal lapack_int LAPACKE_dlartgs_work( double x, double y, double sigma, DoublePointer cs,
                                 DoublePointer sn );
public static native @ByVal lapack_int LAPACKE_dlartgs_work( double x, double y, double sigma, DoubleBuffer cs,
                                 DoubleBuffer sn );
public static native @ByVal lapack_int LAPACKE_dlartgs_work( double x, double y, double sigma, double[] cs,
                                 double[] sn );

public static native @ByVal lapack_int LAPACKE_dlascl( int matrix_layout, @Cast("char") byte type, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, double cfrom, double cto,
                           @ByVal lapack_int m, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dlascl( int matrix_layout, @Cast("char") byte type, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, double cfrom, double cto,
                           @ByVal lapack_int m, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dlascl( int matrix_layout, @Cast("char") byte type, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, double cfrom, double cto,
                           @ByVal lapack_int m, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_dlascl_work( int matrix_layout, @Cast("char") byte type, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, double cfrom, double cto,
                           @ByVal lapack_int m, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dlascl_work( int matrix_layout, @Cast("char") byte type, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, double cfrom, double cto,
                           @ByVal lapack_int m, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dlascl_work( int matrix_layout, @Cast("char") byte type, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, double cfrom, double cto,
                           @ByVal lapack_int m, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_dlaset( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, double alpha, double beta, DoublePointer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dlaset( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, double alpha, double beta, DoubleBuffer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dlaset( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, double alpha, double beta, double[] a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_dlaset_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, double alpha, double beta,
                                DoublePointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dlaset_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, double alpha, double beta,
                                DoubleBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dlaset_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, double alpha, double beta,
                                double[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_dlasrt( @Cast("char") byte id, @ByVal lapack_int n, DoublePointer d );
public static native @ByVal lapack_int LAPACKE_dlasrt( @Cast("char") byte id, @ByVal lapack_int n, DoubleBuffer d );
public static native @ByVal lapack_int LAPACKE_dlasrt( @Cast("char") byte id, @ByVal lapack_int n, double[] d );

public static native @ByVal lapack_int LAPACKE_dlasrt_work( @Cast("char") byte id, @ByVal lapack_int n, DoublePointer d );
public static native @ByVal lapack_int LAPACKE_dlasrt_work( @Cast("char") byte id, @ByVal lapack_int n, DoubleBuffer d );
public static native @ByVal lapack_int LAPACKE_dlasrt_work( @Cast("char") byte id, @ByVal lapack_int n, double[] d );

public static native @ByVal lapack_int LAPACKE_dlaswp( int matrix_layout, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda, @ByVal lapack_int k1, @ByVal lapack_int k2,
                           @Const lapack_int ipiv, @ByVal lapack_int incx );
public static native @ByVal lapack_int LAPACKE_dlaswp( int matrix_layout, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda, @ByVal lapack_int k1, @ByVal lapack_int k2,
                           @Const lapack_int ipiv, @ByVal lapack_int incx );
public static native @ByVal lapack_int LAPACKE_dlaswp( int matrix_layout, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda, @ByVal lapack_int k1, @ByVal lapack_int k2,
                           @Const lapack_int ipiv, @ByVal lapack_int incx );

public static native @ByVal lapack_int LAPACKE_dlaswp_work( int matrix_layout, @ByVal lapack_int n, DoublePointer a,
                                @ByVal lapack_int lda, @ByVal lapack_int k1, @ByVal lapack_int k2,
                                @Const lapack_int ipiv, @ByVal lapack_int incx );
public static native @ByVal lapack_int LAPACKE_dlaswp_work( int matrix_layout, @ByVal lapack_int n, DoubleBuffer a,
                                @ByVal lapack_int lda, @ByVal lapack_int k1, @ByVal lapack_int k2,
                                @Const lapack_int ipiv, @ByVal lapack_int incx );
public static native @ByVal lapack_int LAPACKE_dlaswp_work( int matrix_layout, @ByVal lapack_int n, double[] a,
                                @ByVal lapack_int lda, @ByVal lapack_int k1, @ByVal lapack_int k2,
                                @Const lapack_int ipiv, @ByVal lapack_int incx );

public static native @ByVal lapack_int LAPACKE_dlatms( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym, DoublePointer d,
                           @ByVal lapack_int mode, double cond, double dmax,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Cast("char") byte pack, DoublePointer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dlatms( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym, DoubleBuffer d,
                           @ByVal lapack_int mode, double cond, double dmax,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Cast("char") byte pack, DoubleBuffer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dlatms( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym, double[] d,
                           @ByVal lapack_int mode, double cond, double dmax,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Cast("char") byte pack, double[] a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_dlatms_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym,
                                DoublePointer d, @ByVal lapack_int mode, double cond,
                                double dmax, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Cast("char") byte pack, DoublePointer a, @ByVal lapack_int lda,
                                DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dlatms_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym,
                                DoubleBuffer d, @ByVal lapack_int mode, double cond,
                                double dmax, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Cast("char") byte pack, DoubleBuffer a, @ByVal lapack_int lda,
                                DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dlatms_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym,
                                double[] d, @ByVal lapack_int mode, double cond,
                                double dmax, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Cast("char") byte pack, double[] a, @ByVal lapack_int lda,
                                double[] work );

public static native @ByVal lapack_int LAPACKE_dlauum( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dlauum( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dlauum( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_dlauum_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dlauum_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dlauum_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_dopgtr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const DoublePointer ap, @Const DoublePointer tau, DoublePointer q,
                           @ByVal lapack_int ldq );
public static native @ByVal lapack_int LAPACKE_dopgtr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const DoubleBuffer ap, @Const DoubleBuffer tau, DoubleBuffer q,
                           @ByVal lapack_int ldq );
public static native @ByVal lapack_int LAPACKE_dopgtr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const double[] ap, @Const double[] tau, double[] q,
                           @ByVal lapack_int ldq );

public static native @ByVal lapack_int LAPACKE_dopgtr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const DoublePointer ap, @Const DoublePointer tau, DoublePointer q,
                                @ByVal lapack_int ldq, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dopgtr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const DoubleBuffer ap, @Const DoubleBuffer tau, DoubleBuffer q,
                                @ByVal lapack_int ldq, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dopgtr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const double[] ap, @Const double[] tau, double[] q,
                                @ByVal lapack_int ldq, double[] work );

public static native @ByVal lapack_int LAPACKE_dopmtr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const DoublePointer ap,
                           @Const DoublePointer tau, DoublePointer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dopmtr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const DoubleBuffer ap,
                           @Const DoubleBuffer tau, DoubleBuffer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dopmtr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const double[] ap,
                           @Const double[] tau, double[] c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_dopmtr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const DoublePointer ap, @Const DoublePointer tau, DoublePointer c,
                                @ByVal lapack_int ldc, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dopmtr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const DoubleBuffer ap, @Const DoubleBuffer tau, DoubleBuffer c,
                                @ByVal lapack_int ldc, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dopmtr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const double[] ap, @Const double[] tau, double[] c,
                                @ByVal lapack_int ldc, double[] work );

public static native @ByVal lapack_int LAPACKE_dorbdb( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           DoublePointer x11, @ByVal lapack_int ldx11, DoublePointer x12,
                           @ByVal lapack_int ldx12, DoublePointer x21, @ByVal lapack_int ldx21,
                           DoublePointer x22, @ByVal lapack_int ldx22, DoublePointer theta,
                           DoublePointer phi, DoublePointer taup1, DoublePointer taup2,
                           DoublePointer tauq1, DoublePointer tauq2 );
public static native @ByVal lapack_int LAPACKE_dorbdb( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           DoubleBuffer x11, @ByVal lapack_int ldx11, DoubleBuffer x12,
                           @ByVal lapack_int ldx12, DoubleBuffer x21, @ByVal lapack_int ldx21,
                           DoubleBuffer x22, @ByVal lapack_int ldx22, DoubleBuffer theta,
                           DoubleBuffer phi, DoubleBuffer taup1, DoubleBuffer taup2,
                           DoubleBuffer tauq1, DoubleBuffer tauq2 );
public static native @ByVal lapack_int LAPACKE_dorbdb( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           double[] x11, @ByVal lapack_int ldx11, double[] x12,
                           @ByVal lapack_int ldx12, double[] x21, @ByVal lapack_int ldx21,
                           double[] x22, @ByVal lapack_int ldx22, double[] theta,
                           double[] phi, double[] taup1, double[] taup2,
                           double[] tauq1, double[] tauq2 );

public static native @ByVal lapack_int LAPACKE_dorbdb_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                DoublePointer x11, @ByVal lapack_int ldx11, DoublePointer x12,
                                @ByVal lapack_int ldx12, DoublePointer x21, @ByVal lapack_int ldx21,
                                DoublePointer x22, @ByVal lapack_int ldx22, DoublePointer theta,
                                DoublePointer phi, DoublePointer taup1, DoublePointer taup2,
                                DoublePointer tauq1, DoublePointer tauq2, DoublePointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dorbdb_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                DoubleBuffer x11, @ByVal lapack_int ldx11, DoubleBuffer x12,
                                @ByVal lapack_int ldx12, DoubleBuffer x21, @ByVal lapack_int ldx21,
                                DoubleBuffer x22, @ByVal lapack_int ldx22, DoubleBuffer theta,
                                DoubleBuffer phi, DoubleBuffer taup1, DoubleBuffer taup2,
                                DoubleBuffer tauq1, DoubleBuffer tauq2, DoubleBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dorbdb_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                double[] x11, @ByVal lapack_int ldx11, double[] x12,
                                @ByVal lapack_int ldx12, double[] x21, @ByVal lapack_int ldx21,
                                double[] x22, @ByVal lapack_int ldx22, double[] theta,
                                double[] phi, double[] taup1, double[] taup2,
                                double[] tauq1, double[] tauq2, double[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dorcsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           DoublePointer x11, @ByVal lapack_int ldx11, DoublePointer x12,
                           @ByVal lapack_int ldx12, DoublePointer x21, @ByVal lapack_int ldx21,
                           DoublePointer x22, @ByVal lapack_int ldx22, DoublePointer theta,
                           DoublePointer u1, @ByVal lapack_int ldu1, DoublePointer u2,
                           @ByVal lapack_int ldu2, DoublePointer v1t, @ByVal lapack_int ldv1t,
                           DoublePointer v2t, @ByVal lapack_int ldv2t );
public static native @ByVal lapack_int LAPACKE_dorcsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           DoubleBuffer x11, @ByVal lapack_int ldx11, DoubleBuffer x12,
                           @ByVal lapack_int ldx12, DoubleBuffer x21, @ByVal lapack_int ldx21,
                           DoubleBuffer x22, @ByVal lapack_int ldx22, DoubleBuffer theta,
                           DoubleBuffer u1, @ByVal lapack_int ldu1, DoubleBuffer u2,
                           @ByVal lapack_int ldu2, DoubleBuffer v1t, @ByVal lapack_int ldv1t,
                           DoubleBuffer v2t, @ByVal lapack_int ldv2t );
public static native @ByVal lapack_int LAPACKE_dorcsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           double[] x11, @ByVal lapack_int ldx11, double[] x12,
                           @ByVal lapack_int ldx12, double[] x21, @ByVal lapack_int ldx21,
                           double[] x22, @ByVal lapack_int ldx22, double[] theta,
                           double[] u1, @ByVal lapack_int ldu1, double[] u2,
                           @ByVal lapack_int ldu2, double[] v1t, @ByVal lapack_int ldv1t,
                           double[] v2t, @ByVal lapack_int ldv2t );

public static native @ByVal lapack_int LAPACKE_dorcsd2by1( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           DoublePointer x11, @ByVal lapack_int ldx11, DoublePointer x21, @ByVal lapack_int ldx21,
                           DoublePointer theta, DoublePointer u1, @ByVal lapack_int ldu1, DoublePointer u2,
                           @ByVal lapack_int ldu2, DoublePointer v1t, @ByVal lapack_int ldv1t );
public static native @ByVal lapack_int LAPACKE_dorcsd2by1( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           DoubleBuffer x11, @ByVal lapack_int ldx11, DoubleBuffer x21, @ByVal lapack_int ldx21,
                           DoubleBuffer theta, DoubleBuffer u1, @ByVal lapack_int ldu1, DoubleBuffer u2,
                           @ByVal lapack_int ldu2, DoubleBuffer v1t, @ByVal lapack_int ldv1t );
public static native @ByVal lapack_int LAPACKE_dorcsd2by1( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           double[] x11, @ByVal lapack_int ldx11, double[] x21, @ByVal lapack_int ldx21,
                           double[] theta, double[] u1, @ByVal lapack_int ldu1, double[] u2,
                           @ByVal lapack_int ldu2, double[] v1t, @ByVal lapack_int ldv1t );

public static native @ByVal lapack_int LAPACKE_dorcsd2by1_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, DoublePointer x11, @ByVal lapack_int ldx11,
                                DoublePointer x21, @ByVal lapack_int ldx21,
                                DoublePointer theta, DoublePointer u1, @ByVal lapack_int ldu1,
                                DoublePointer u2, @ByVal lapack_int ldu2, DoublePointer v1t,
                                @ByVal lapack_int ldv1t, DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dorcsd2by1_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, DoubleBuffer x11, @ByVal lapack_int ldx11,
                                DoubleBuffer x21, @ByVal lapack_int ldx21,
                                DoubleBuffer theta, DoubleBuffer u1, @ByVal lapack_int ldu1,
                                DoubleBuffer u2, @ByVal lapack_int ldu2, DoubleBuffer v1t,
                                @ByVal lapack_int ldv1t, DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dorcsd2by1_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, double[] x11, @ByVal lapack_int ldx11,
                                double[] x21, @ByVal lapack_int ldx21,
                                double[] theta, double[] u1, @ByVal lapack_int ldu1,
                                double[] u2, @ByVal lapack_int ldu2, double[] v1t,
                                @ByVal lapack_int ldv1t, double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dorcsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @Cast("char") byte signs, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, DoublePointer x11, @ByVal lapack_int ldx11,
                                DoublePointer x12, @ByVal lapack_int ldx12, DoublePointer x21,
                                @ByVal lapack_int ldx21, DoublePointer x22, @ByVal lapack_int ldx22,
                                DoublePointer theta, DoublePointer u1, @ByVal lapack_int ldu1,
                                DoublePointer u2, @ByVal lapack_int ldu2, DoublePointer v1t,
                                @ByVal lapack_int ldv1t, DoublePointer v2t, @ByVal lapack_int ldv2t,
                                DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dorcsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @Cast("char") byte signs, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, DoubleBuffer x11, @ByVal lapack_int ldx11,
                                DoubleBuffer x12, @ByVal lapack_int ldx12, DoubleBuffer x21,
                                @ByVal lapack_int ldx21, DoubleBuffer x22, @ByVal lapack_int ldx22,
                                DoubleBuffer theta, DoubleBuffer u1, @ByVal lapack_int ldu1,
                                DoubleBuffer u2, @ByVal lapack_int ldu2, DoubleBuffer v1t,
                                @ByVal lapack_int ldv1t, DoubleBuffer v2t, @ByVal lapack_int ldv2t,
                                DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dorcsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @Cast("char") byte signs, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, double[] x11, @ByVal lapack_int ldx11,
                                double[] x12, @ByVal lapack_int ldx12, double[] x21,
                                @ByVal lapack_int ldx21, double[] x22, @ByVal lapack_int ldx22,
                                double[] theta, double[] u1, @ByVal lapack_int ldu1,
                                double[] u2, @ByVal lapack_int ldu2, double[] v1t,
                                @ByVal lapack_int ldv1t, double[] v2t, @ByVal lapack_int ldv2t,
                                double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dorgbr( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_int k, DoublePointer a,
                           @ByVal lapack_int lda, @Const DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dorgbr( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_int k, DoubleBuffer a,
                           @ByVal lapack_int lda, @Const DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dorgbr( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_int k, double[] a,
                           @ByVal lapack_int lda, @Const double[] tau );

public static native @ByVal lapack_int LAPACKE_dorgbr_work( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k, DoublePointer a,
                                @ByVal lapack_int lda, @Const DoublePointer tau, DoublePointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dorgbr_work( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k, DoubleBuffer a,
                                @ByVal lapack_int lda, @Const DoubleBuffer tau, DoubleBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dorgbr_work( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k, double[] a,
                                @ByVal lapack_int lda, @Const double[] tau, double[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dorghr( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, DoublePointer a, @ByVal lapack_int lda,
                           @Const DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dorghr( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, DoubleBuffer a, @ByVal lapack_int lda,
                           @Const DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dorghr( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, double[] a, @ByVal lapack_int lda,
                           @Const double[] tau );

public static native @ByVal lapack_int LAPACKE_dorghr_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, DoublePointer a, @ByVal lapack_int lda,
                                @Const DoublePointer tau, DoublePointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dorghr_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, DoubleBuffer a, @ByVal lapack_int lda,
                                @Const DoubleBuffer tau, DoubleBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dorghr_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, double[] a, @ByVal lapack_int lda,
                                @Const double[] tau, double[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dorglq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, DoublePointer a, @ByVal lapack_int lda,
                           @Const DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dorglq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, DoubleBuffer a, @ByVal lapack_int lda,
                           @Const DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dorglq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, double[] a, @ByVal lapack_int lda,
                           @Const double[] tau );

public static native @ByVal lapack_int LAPACKE_dorglq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, DoublePointer a, @ByVal lapack_int lda,
                                @Const DoublePointer tau, DoublePointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dorglq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, DoubleBuffer a, @ByVal lapack_int lda,
                                @Const DoubleBuffer tau, DoubleBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dorglq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, double[] a, @ByVal lapack_int lda,
                                @Const double[] tau, double[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dorgql( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, DoublePointer a, @ByVal lapack_int lda,
                           @Const DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dorgql( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, DoubleBuffer a, @ByVal lapack_int lda,
                           @Const DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dorgql( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, double[] a, @ByVal lapack_int lda,
                           @Const double[] tau );

public static native @ByVal lapack_int LAPACKE_dorgql_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, DoublePointer a, @ByVal lapack_int lda,
                                @Const DoublePointer tau, DoublePointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dorgql_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, DoubleBuffer a, @ByVal lapack_int lda,
                                @Const DoubleBuffer tau, DoubleBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dorgql_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, double[] a, @ByVal lapack_int lda,
                                @Const double[] tau, double[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dorgqr( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, DoublePointer a, @ByVal lapack_int lda,
                           @Const DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dorgqr( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, DoubleBuffer a, @ByVal lapack_int lda,
                           @Const DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dorgqr( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, double[] a, @ByVal lapack_int lda,
                           @Const double[] tau );

public static native @ByVal lapack_int LAPACKE_dorgqr_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, DoublePointer a, @ByVal lapack_int lda,
                                @Const DoublePointer tau, DoublePointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dorgqr_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, DoubleBuffer a, @ByVal lapack_int lda,
                                @Const DoubleBuffer tau, DoubleBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dorgqr_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, double[] a, @ByVal lapack_int lda,
                                @Const double[] tau, double[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dorgrq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, DoublePointer a, @ByVal lapack_int lda,
                           @Const DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dorgrq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, DoubleBuffer a, @ByVal lapack_int lda,
                           @Const DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dorgrq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, double[] a, @ByVal lapack_int lda,
                           @Const double[] tau );

public static native @ByVal lapack_int LAPACKE_dorgrq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, DoublePointer a, @ByVal lapack_int lda,
                                @Const DoublePointer tau, DoublePointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dorgrq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, DoubleBuffer a, @ByVal lapack_int lda,
                                @Const DoubleBuffer tau, DoubleBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dorgrq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, double[] a, @ByVal lapack_int lda,
                                @Const double[] tau, double[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dorgtr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda, @Const DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dorgtr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda, @Const DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dorgtr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda, @Const double[] tau );

public static native @ByVal lapack_int LAPACKE_dorgtr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, @Const DoublePointer tau,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dorgtr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, @Const DoubleBuffer tau,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dorgtr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, @Const double[] tau,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dormbr( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const DoublePointer a, @ByVal lapack_int lda, @Const DoublePointer tau,
                           DoublePointer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dormbr( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const DoubleBuffer a, @ByVal lapack_int lda, @Const DoubleBuffer tau,
                           DoubleBuffer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dormbr( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const double[] a, @ByVal lapack_int lda, @Const double[] tau,
                           double[] c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_dormbr_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte side,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, @Const DoublePointer a, @ByVal lapack_int lda,
                                @Const DoublePointer tau, DoublePointer c, @ByVal lapack_int ldc,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dormbr_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte side,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, @Const DoubleBuffer a, @ByVal lapack_int lda,
                                @Const DoubleBuffer tau, DoubleBuffer c, @ByVal lapack_int ldc,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dormbr_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte side,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, @Const double[] a, @ByVal lapack_int lda,
                                @Const double[] tau, double[] c, @ByVal lapack_int ldc,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dormhr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, @Const DoublePointer a, @ByVal lapack_int lda,
                           @Const DoublePointer tau, DoublePointer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dormhr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, @Const DoubleBuffer a, @ByVal lapack_int lda,
                           @Const DoubleBuffer tau, DoubleBuffer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dormhr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, @Const double[] a, @ByVal lapack_int lda,
                           @Const double[] tau, double[] c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_dormhr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, @Const DoublePointer a, @ByVal lapack_int lda,
                                @Const DoublePointer tau, DoublePointer c, @ByVal lapack_int ldc,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dormhr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, @Const DoubleBuffer a, @ByVal lapack_int lda,
                                @Const DoubleBuffer tau, DoubleBuffer c, @ByVal lapack_int ldc,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dormhr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, @Const double[] a, @ByVal lapack_int lda,
                                @Const double[] tau, double[] c, @ByVal lapack_int ldc,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dormlq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const DoublePointer a, @ByVal lapack_int lda, @Const DoublePointer tau,
                           DoublePointer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dormlq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const DoubleBuffer a, @ByVal lapack_int lda, @Const DoubleBuffer tau,
                           DoubleBuffer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dormlq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const double[] a, @ByVal lapack_int lda, @Const double[] tau,
                           double[] c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_dormlq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const DoublePointer a, @ByVal lapack_int lda,
                                @Const DoublePointer tau, DoublePointer c, @ByVal lapack_int ldc,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dormlq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const DoubleBuffer a, @ByVal lapack_int lda,
                                @Const DoubleBuffer tau, DoubleBuffer c, @ByVal lapack_int ldc,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dormlq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const double[] a, @ByVal lapack_int lda,
                                @Const double[] tau, double[] c, @ByVal lapack_int ldc,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dormql( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const DoublePointer a, @ByVal lapack_int lda, @Const DoublePointer tau,
                           DoublePointer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dormql( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const DoubleBuffer a, @ByVal lapack_int lda, @Const DoubleBuffer tau,
                           DoubleBuffer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dormql( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const double[] a, @ByVal lapack_int lda, @Const double[] tau,
                           double[] c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_dormql_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const DoublePointer a, @ByVal lapack_int lda,
                                @Const DoublePointer tau, DoublePointer c, @ByVal lapack_int ldc,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dormql_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const DoubleBuffer a, @ByVal lapack_int lda,
                                @Const DoubleBuffer tau, DoubleBuffer c, @ByVal lapack_int ldc,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dormql_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const double[] a, @ByVal lapack_int lda,
                                @Const double[] tau, double[] c, @ByVal lapack_int ldc,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dormqr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const DoublePointer a, @ByVal lapack_int lda, @Const DoublePointer tau,
                           DoublePointer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dormqr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const DoubleBuffer a, @ByVal lapack_int lda, @Const DoubleBuffer tau,
                           DoubleBuffer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dormqr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const double[] a, @ByVal lapack_int lda, @Const double[] tau,
                           double[] c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_dormqr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const DoublePointer a, @ByVal lapack_int lda,
                                @Const DoublePointer tau, DoublePointer c, @ByVal lapack_int ldc,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dormqr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const DoubleBuffer a, @ByVal lapack_int lda,
                                @Const DoubleBuffer tau, DoubleBuffer c, @ByVal lapack_int ldc,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dormqr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const double[] a, @ByVal lapack_int lda,
                                @Const double[] tau, double[] c, @ByVal lapack_int ldc,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dormrq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const DoublePointer a, @ByVal lapack_int lda, @Const DoublePointer tau,
                           DoublePointer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dormrq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const DoubleBuffer a, @ByVal lapack_int lda, @Const DoubleBuffer tau,
                           DoubleBuffer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dormrq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const double[] a, @ByVal lapack_int lda, @Const double[] tau,
                           double[] c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_dormrq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const DoublePointer a, @ByVal lapack_int lda,
                                @Const DoublePointer tau, DoublePointer c, @ByVal lapack_int ldc,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dormrq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const DoubleBuffer a, @ByVal lapack_int lda,
                                @Const DoubleBuffer tau, DoubleBuffer c, @ByVal lapack_int ldc,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dormrq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const double[] a, @ByVal lapack_int lda,
                                @Const double[] tau, double[] c, @ByVal lapack_int ldc,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dormrz( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @ByVal lapack_int l, @Const DoublePointer a, @ByVal lapack_int lda,
                           @Const DoublePointer tau, DoublePointer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dormrz( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @ByVal lapack_int l, @Const DoubleBuffer a, @ByVal lapack_int lda,
                           @Const DoubleBuffer tau, DoubleBuffer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dormrz( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @ByVal lapack_int l, @Const double[] a, @ByVal lapack_int lda,
                           @Const double[] tau, double[] c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_dormrz_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @ByVal lapack_int l, @Const DoublePointer a, @ByVal lapack_int lda,
                                @Const DoublePointer tau, DoublePointer c, @ByVal lapack_int ldc,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dormrz_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @ByVal lapack_int l, @Const DoubleBuffer a, @ByVal lapack_int lda,
                                @Const DoubleBuffer tau, DoubleBuffer c, @ByVal lapack_int ldc,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dormrz_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @ByVal lapack_int l, @Const double[] a, @ByVal lapack_int lda,
                                @Const double[] tau, double[] c, @ByVal lapack_int ldc,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dormtr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const DoublePointer a,
                           @ByVal lapack_int lda, @Const DoublePointer tau, DoublePointer c,
                           @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dormtr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const DoubleBuffer a,
                           @ByVal lapack_int lda, @Const DoubleBuffer tau, DoubleBuffer c,
                           @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dormtr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const double[] a,
                           @ByVal lapack_int lda, @Const double[] tau, double[] c,
                           @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_dormtr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const DoublePointer a, @ByVal lapack_int lda,
                                @Const DoublePointer tau, DoublePointer c, @ByVal lapack_int ldc,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dormtr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const DoubleBuffer a, @ByVal lapack_int lda,
                                @Const DoubleBuffer tau, DoubleBuffer c, @ByVal lapack_int ldc,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dormtr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const double[] a, @ByVal lapack_int lda,
                                @Const double[] tau, double[] c, @ByVal lapack_int ldc,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dpbcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const DoublePointer ab, @ByVal lapack_int ldab,
                           double anorm, DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_dpbcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const DoubleBuffer ab, @ByVal lapack_int ldab,
                           double anorm, DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_dpbcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const double[] ab, @ByVal lapack_int ldab,
                           double anorm, double[] rcond );

public static native @ByVal lapack_int LAPACKE_dpbcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const DoublePointer ab,
                                @ByVal lapack_int ldab, double anorm, DoublePointer rcond,
                                DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dpbcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const DoubleBuffer ab,
                                @ByVal lapack_int ldab, double anorm, DoubleBuffer rcond,
                                DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dpbcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const double[] ab,
                                @ByVal lapack_int ldab, double anorm, double[] rcond,
                                double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dpbequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const DoublePointer ab, @ByVal lapack_int ldab,
                           DoublePointer s, DoublePointer scond, DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_dpbequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const DoubleBuffer ab, @ByVal lapack_int ldab,
                           DoubleBuffer s, DoubleBuffer scond, DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_dpbequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const double[] ab, @ByVal lapack_int ldab,
                           double[] s, double[] scond, double[] amax );

public static native @ByVal lapack_int LAPACKE_dpbequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const DoublePointer ab,
                                @ByVal lapack_int ldab, DoublePointer s, DoublePointer scond,
                                DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_dpbequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const DoubleBuffer ab,
                                @ByVal lapack_int ldab, DoubleBuffer s, DoubleBuffer scond,
                                DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_dpbequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const double[] ab,
                                @ByVal lapack_int ldab, double[] s, double[] scond,
                                double[] amax );

public static native @ByVal lapack_int LAPACKE_dpbrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs, @Const DoublePointer ab,
                           @ByVal lapack_int ldab, @Const DoublePointer afb, @ByVal lapack_int ldafb,
                           @Const DoublePointer b, @ByVal lapack_int ldb, DoublePointer x,
                           @ByVal lapack_int ldx, DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_dpbrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs, @Const DoubleBuffer ab,
                           @ByVal lapack_int ldab, @Const DoubleBuffer afb, @ByVal lapack_int ldafb,
                           @Const DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x,
                           @ByVal lapack_int ldx, DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_dpbrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs, @Const double[] ab,
                           @ByVal lapack_int ldab, @Const double[] afb, @ByVal lapack_int ldafb,
                           @Const double[] b, @ByVal lapack_int ldb, double[] x,
                           @ByVal lapack_int ldx, double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_dpbrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                @Const DoublePointer ab, @ByVal lapack_int ldab,
                                @Const DoublePointer afb, @ByVal lapack_int ldafb,
                                @Const DoublePointer b, @ByVal lapack_int ldb, DoublePointer x,
                                @ByVal lapack_int ldx, DoublePointer ferr, DoublePointer berr,
                                DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dpbrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                @Const DoubleBuffer ab, @ByVal lapack_int ldab,
                                @Const DoubleBuffer afb, @ByVal lapack_int ldafb,
                                @Const DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x,
                                @ByVal lapack_int ldx, DoubleBuffer ferr, DoubleBuffer berr,
                                DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dpbrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                @Const double[] ab, @ByVal lapack_int ldab,
                                @Const double[] afb, @ByVal lapack_int ldafb,
                                @Const double[] b, @ByVal lapack_int ldb, double[] x,
                                @ByVal lapack_int ldx, double[] ferr, double[] berr,
                                double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dpbstf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kb, DoublePointer bb, @ByVal lapack_int ldbb );
public static native @ByVal lapack_int LAPACKE_dpbstf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kb, DoubleBuffer bb, @ByVal lapack_int ldbb );
public static native @ByVal lapack_int LAPACKE_dpbstf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kb, double[] bb, @ByVal lapack_int ldbb );

public static native @ByVal lapack_int LAPACKE_dpbstf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kb, DoublePointer bb, @ByVal lapack_int ldbb );
public static native @ByVal lapack_int LAPACKE_dpbstf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kb, DoubleBuffer bb, @ByVal lapack_int ldbb );
public static native @ByVal lapack_int LAPACKE_dpbstf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kb, double[] bb, @ByVal lapack_int ldbb );

public static native @ByVal lapack_int LAPACKE_dpbsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int kd, @ByVal lapack_int nrhs, DoublePointer ab,
                          @ByVal lapack_int ldab, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpbsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int kd, @ByVal lapack_int nrhs, DoubleBuffer ab,
                          @ByVal lapack_int ldab, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpbsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int kd, @ByVal lapack_int nrhs, double[] ab,
                          @ByVal lapack_int ldab, double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dpbsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int kd, @ByVal lapack_int nrhs, DoublePointer ab,
                               @ByVal lapack_int ldab, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpbsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int kd, @ByVal lapack_int nrhs, DoubleBuffer ab,
                               @ByVal lapack_int ldab, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpbsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int kd, @ByVal lapack_int nrhs, double[] ab,
                               @ByVal lapack_int ldab, double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dpbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs, DoublePointer ab,
                           @ByVal lapack_int ldab, DoublePointer afb, @ByVal lapack_int ldafb,
                           @Cast("char*") BytePointer equed, DoublePointer s, DoublePointer b, @ByVal lapack_int ldb,
                           DoublePointer x, @ByVal lapack_int ldx, DoublePointer rcond,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_dpbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs, DoubleBuffer ab,
                           @ByVal lapack_int ldab, DoubleBuffer afb, @ByVal lapack_int ldafb,
                           @Cast("char*") ByteBuffer equed, DoubleBuffer s, DoubleBuffer b, @ByVal lapack_int ldb,
                           DoubleBuffer x, @ByVal lapack_int ldx, DoubleBuffer rcond,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_dpbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs, double[] ab,
                           @ByVal lapack_int ldab, double[] afb, @ByVal lapack_int ldafb,
                           @Cast("char*") byte[] equed, double[] s, double[] b, @ByVal lapack_int ldb,
                           double[] x, @ByVal lapack_int ldx, double[] rcond,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_dpbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                DoublePointer ab, @ByVal lapack_int ldab, DoublePointer afb,
                                @ByVal lapack_int ldafb, @Cast("char*") BytePointer equed, DoublePointer s,
                                DoublePointer b, @ByVal lapack_int ldb, DoublePointer x,
                                @ByVal lapack_int ldx, DoublePointer rcond, DoublePointer ferr,
                                DoublePointer berr, DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dpbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                DoubleBuffer ab, @ByVal lapack_int ldab, DoubleBuffer afb,
                                @ByVal lapack_int ldafb, @Cast("char*") ByteBuffer equed, DoubleBuffer s,
                                DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x,
                                @ByVal lapack_int ldx, DoubleBuffer rcond, DoubleBuffer ferr,
                                DoubleBuffer berr, DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dpbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                double[] ab, @ByVal lapack_int ldab, double[] afb,
                                @ByVal lapack_int ldafb, @Cast("char*") byte[] equed, double[] s,
                                double[] b, @ByVal lapack_int ldb, double[] x,
                                @ByVal lapack_int ldx, double[] rcond, double[] ferr,
                                double[] berr, double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dpbtrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, DoublePointer ab, @ByVal lapack_int ldab );
public static native @ByVal lapack_int LAPACKE_dpbtrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, DoubleBuffer ab, @ByVal lapack_int ldab );
public static native @ByVal lapack_int LAPACKE_dpbtrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, double[] ab, @ByVal lapack_int ldab );

public static native @ByVal lapack_int LAPACKE_dpbtrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, DoublePointer ab, @ByVal lapack_int ldab );
public static native @ByVal lapack_int LAPACKE_dpbtrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, DoubleBuffer ab, @ByVal lapack_int ldab );
public static native @ByVal lapack_int LAPACKE_dpbtrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, double[] ab, @ByVal lapack_int ldab );

public static native @ByVal lapack_int LAPACKE_dpbtrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs, @Const DoublePointer ab,
                           @ByVal lapack_int ldab, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpbtrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs, @Const DoubleBuffer ab,
                           @ByVal lapack_int ldab, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpbtrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs, @Const double[] ab,
                           @ByVal lapack_int ldab, double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dpbtrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                @Const DoublePointer ab, @ByVal lapack_int ldab, DoublePointer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpbtrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                @Const DoubleBuffer ab, @ByVal lapack_int ldab, DoubleBuffer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpbtrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                @Const double[] ab, @ByVal lapack_int ldab, double[] b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dpftrf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, DoublePointer a );
public static native @ByVal lapack_int LAPACKE_dpftrf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, DoubleBuffer a );
public static native @ByVal lapack_int LAPACKE_dpftrf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, double[] a );

public static native @ByVal lapack_int LAPACKE_dpftrf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, DoublePointer a );
public static native @ByVal lapack_int LAPACKE_dpftrf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, DoubleBuffer a );
public static native @ByVal lapack_int LAPACKE_dpftrf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, double[] a );

public static native @ByVal lapack_int LAPACKE_dpftri( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, DoublePointer a );
public static native @ByVal lapack_int LAPACKE_dpftri( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, DoubleBuffer a );
public static native @ByVal lapack_int LAPACKE_dpftri( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, double[] a );

public static native @ByVal lapack_int LAPACKE_dpftri_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, DoublePointer a );
public static native @ByVal lapack_int LAPACKE_dpftri_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, DoubleBuffer a );
public static native @ByVal lapack_int LAPACKE_dpftri_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, double[] a );

public static native @ByVal lapack_int LAPACKE_dpftrs( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoublePointer a,
                           DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpftrs( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoubleBuffer a,
                           DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpftrs( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const double[] a,
                           double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dpftrs_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoublePointer a,
                                DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpftrs_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoubleBuffer a,
                                DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpftrs_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const double[] a,
                                double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dpocon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const DoublePointer a, @ByVal lapack_int lda, double anorm,
                           DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_dpocon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const DoubleBuffer a, @ByVal lapack_int lda, double anorm,
                           DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_dpocon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const double[] a, @ByVal lapack_int lda, double anorm,
                           double[] rcond );

public static native @ByVal lapack_int LAPACKE_dpocon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const DoublePointer a, @ByVal lapack_int lda, double anorm,
                                DoublePointer rcond, DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dpocon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const DoubleBuffer a, @ByVal lapack_int lda, double anorm,
                                DoubleBuffer rcond, DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dpocon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const double[] a, @ByVal lapack_int lda, double anorm,
                                double[] rcond, double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dpoequ( int matrix_layout, @ByVal lapack_int n, @Const DoublePointer a,
                           @ByVal lapack_int lda, DoublePointer s, DoublePointer scond,
                           DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_dpoequ( int matrix_layout, @ByVal lapack_int n, @Const DoubleBuffer a,
                           @ByVal lapack_int lda, DoubleBuffer s, DoubleBuffer scond,
                           DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_dpoequ( int matrix_layout, @ByVal lapack_int n, @Const double[] a,
                           @ByVal lapack_int lda, double[] s, double[] scond,
                           double[] amax );

public static native @ByVal lapack_int LAPACKE_dpoequ_work( int matrix_layout, @ByVal lapack_int n, @Const DoublePointer a,
                                @ByVal lapack_int lda, DoublePointer s, DoublePointer scond,
                                DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_dpoequ_work( int matrix_layout, @ByVal lapack_int n, @Const DoubleBuffer a,
                                @ByVal lapack_int lda, DoubleBuffer s, DoubleBuffer scond,
                                DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_dpoequ_work( int matrix_layout, @ByVal lapack_int n, @Const double[] a,
                                @ByVal lapack_int lda, double[] s, double[] scond,
                                double[] amax );

public static native @ByVal lapack_int LAPACKE_dpoequb( int matrix_layout, @ByVal lapack_int n, @Const DoublePointer a,
                            @ByVal lapack_int lda, DoublePointer s, DoublePointer scond,
                            DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_dpoequb( int matrix_layout, @ByVal lapack_int n, @Const DoubleBuffer a,
                            @ByVal lapack_int lda, DoubleBuffer s, DoubleBuffer scond,
                            DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_dpoequb( int matrix_layout, @ByVal lapack_int n, @Const double[] a,
                            @ByVal lapack_int lda, double[] s, double[] scond,
                            double[] amax );

public static native @ByVal lapack_int LAPACKE_dpoequb_work( int matrix_layout, @ByVal lapack_int n,
                                 @Const DoublePointer a, @ByVal lapack_int lda, DoublePointer s,
                                 DoublePointer scond, DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_dpoequb_work( int matrix_layout, @ByVal lapack_int n,
                                 @Const DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer s,
                                 DoubleBuffer scond, DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_dpoequb_work( int matrix_layout, @ByVal lapack_int n,
                                 @Const double[] a, @ByVal lapack_int lda, double[] s,
                                 double[] scond, double[] amax );

public static native @ByVal lapack_int LAPACKE_dporfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoublePointer a, @ByVal lapack_int lda,
                           @Const DoublePointer af, @ByVal lapack_int ldaf, @Const DoublePointer b,
                           @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_dporfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoubleBuffer a, @ByVal lapack_int lda,
                           @Const DoubleBuffer af, @ByVal lapack_int ldaf, @Const DoubleBuffer b,
                           @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_dporfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const double[] a, @ByVal lapack_int lda,
                           @Const double[] af, @ByVal lapack_int ldaf, @Const double[] b,
                           @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_dporfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoublePointer a,
                                @ByVal lapack_int lda, @Const DoublePointer af,
                                @ByVal lapack_int ldaf, @Const DoublePointer b,
                                @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                                DoublePointer ferr, DoublePointer berr, DoublePointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dporfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoubleBuffer a,
                                @ByVal lapack_int lda, @Const DoubleBuffer af,
                                @ByVal lapack_int ldaf, @Const DoubleBuffer b,
                                @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                                DoubleBuffer ferr, DoubleBuffer berr, DoubleBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dporfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const double[] a,
                                @ByVal lapack_int lda, @Const double[] af,
                                @ByVal lapack_int ldaf, @Const double[] b,
                                @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                                double[] ferr, double[] berr, double[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dporfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoublePointer a,
                            @ByVal lapack_int lda, @Const DoublePointer af, @ByVal lapack_int ldaf,
                            @Const DoublePointer s, @Const DoublePointer b, @ByVal lapack_int ldb,
                            DoublePointer x, @ByVal lapack_int ldx, DoublePointer rcond,
                            DoublePointer berr, @ByVal lapack_int n_err_bnds,
                            DoublePointer err_bnds_norm, DoublePointer err_bnds_comp,
                            @ByVal lapack_int nparams, DoublePointer params );
public static native @ByVal lapack_int LAPACKE_dporfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoubleBuffer a,
                            @ByVal lapack_int lda, @Const DoubleBuffer af, @ByVal lapack_int ldaf,
                            @Const DoubleBuffer s, @Const DoubleBuffer b, @ByVal lapack_int ldb,
                            DoubleBuffer x, @ByVal lapack_int ldx, DoubleBuffer rcond,
                            DoubleBuffer berr, @ByVal lapack_int n_err_bnds,
                            DoubleBuffer err_bnds_norm, DoubleBuffer err_bnds_comp,
                            @ByVal lapack_int nparams, DoubleBuffer params );
public static native @ByVal lapack_int LAPACKE_dporfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const double[] a,
                            @ByVal lapack_int lda, @Const double[] af, @ByVal lapack_int ldaf,
                            @Const double[] s, @Const double[] b, @ByVal lapack_int ldb,
                            double[] x, @ByVal lapack_int ldx, double[] rcond,
                            double[] berr, @ByVal lapack_int n_err_bnds,
                            double[] err_bnds_norm, double[] err_bnds_comp,
                            @ByVal lapack_int nparams, double[] params );

public static native @ByVal lapack_int LAPACKE_dporfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoublePointer a,
                                 @ByVal lapack_int lda, @Const DoublePointer af,
                                 @ByVal lapack_int ldaf, @Const DoublePointer s,
                                 @Const DoublePointer b, @ByVal lapack_int ldb, DoublePointer x,
                                 @ByVal lapack_int ldx, DoublePointer rcond, DoublePointer berr,
                                 @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                                 DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoublePointer params, DoublePointer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dporfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoubleBuffer a,
                                 @ByVal lapack_int lda, @Const DoubleBuffer af,
                                 @ByVal lapack_int ldaf, @Const DoubleBuffer s,
                                 @Const DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x,
                                 @ByVal lapack_int ldx, DoubleBuffer rcond, DoubleBuffer berr,
                                 @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                                 DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoubleBuffer params, DoubleBuffer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dporfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const double[] a,
                                 @ByVal lapack_int lda, @Const double[] af,
                                 @ByVal lapack_int ldaf, @Const double[] s,
                                 @Const double[] b, @ByVal lapack_int ldb, double[] x,
                                 @ByVal lapack_int ldx, double[] rcond, double[] berr,
                                 @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                                 double[] err_bnds_comp, @ByVal lapack_int nparams,
                                 double[] params, double[] work,
                                 lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dposv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, DoublePointer a, @ByVal lapack_int lda, DoublePointer b,
                          @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dposv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer b,
                          @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dposv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, double[] a, @ByVal lapack_int lda, double[] b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dposv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, DoublePointer a, @ByVal lapack_int lda,
                               DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dposv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, DoubleBuffer a, @ByVal lapack_int lda,
                               DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dposv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, double[] a, @ByVal lapack_int lda,
                               double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dposvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, DoublePointer a, @ByVal lapack_int lda,
                           DoublePointer af, @ByVal lapack_int ldaf, @Cast("char*") BytePointer equed, DoublePointer s,
                           DoublePointer b, @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                           DoublePointer rcond, DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_dposvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, DoubleBuffer a, @ByVal lapack_int lda,
                           DoubleBuffer af, @ByVal lapack_int ldaf, @Cast("char*") ByteBuffer equed, DoubleBuffer s,
                           DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                           DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_dposvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, double[] a, @ByVal lapack_int lda,
                           double[] af, @ByVal lapack_int ldaf, @Cast("char*") byte[] equed, double[] s,
                           double[] b, @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                           double[] rcond, double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_dposvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, DoublePointer a,
                                @ByVal lapack_int lda, DoublePointer af, @ByVal lapack_int ldaf,
                                @Cast("char*") BytePointer equed, DoublePointer s, DoublePointer b,
                                @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                                DoublePointer rcond, DoublePointer ferr, DoublePointer berr,
                                DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dposvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, DoubleBuffer a,
                                @ByVal lapack_int lda, DoubleBuffer af, @ByVal lapack_int ldaf,
                                @Cast("char*") ByteBuffer equed, DoubleBuffer s, DoubleBuffer b,
                                @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                                DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr,
                                DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dposvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, double[] a,
                                @ByVal lapack_int lda, double[] af, @ByVal lapack_int ldaf,
                                @Cast("char*") byte[] equed, double[] s, double[] b,
                                @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                                double[] rcond, double[] ferr, double[] berr,
                                double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dposvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, DoublePointer a,
                            @ByVal lapack_int lda, DoublePointer af, @ByVal lapack_int ldaf,
                            @Cast("char*") BytePointer equed, DoublePointer s, DoublePointer b, @ByVal lapack_int ldb,
                            DoublePointer x, @ByVal lapack_int ldx, DoublePointer rcond,
                            DoublePointer rpvgrw, DoublePointer berr, @ByVal lapack_int n_err_bnds,
                            DoublePointer err_bnds_norm, DoublePointer err_bnds_comp,
                            @ByVal lapack_int nparams, DoublePointer params );
public static native @ByVal lapack_int LAPACKE_dposvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, DoubleBuffer a,
                            @ByVal lapack_int lda, DoubleBuffer af, @ByVal lapack_int ldaf,
                            @Cast("char*") ByteBuffer equed, DoubleBuffer s, DoubleBuffer b, @ByVal lapack_int ldb,
                            DoubleBuffer x, @ByVal lapack_int ldx, DoubleBuffer rcond,
                            DoubleBuffer rpvgrw, DoubleBuffer berr, @ByVal lapack_int n_err_bnds,
                            DoubleBuffer err_bnds_norm, DoubleBuffer err_bnds_comp,
                            @ByVal lapack_int nparams, DoubleBuffer params );
public static native @ByVal lapack_int LAPACKE_dposvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, double[] a,
                            @ByVal lapack_int lda, double[] af, @ByVal lapack_int ldaf,
                            @Cast("char*") byte[] equed, double[] s, double[] b, @ByVal lapack_int ldb,
                            double[] x, @ByVal lapack_int ldx, double[] rcond,
                            double[] rpvgrw, double[] berr, @ByVal lapack_int n_err_bnds,
                            double[] err_bnds_norm, double[] err_bnds_comp,
                            @ByVal lapack_int nparams, double[] params );

public static native @ByVal lapack_int LAPACKE_dposvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, DoublePointer a,
                                 @ByVal lapack_int lda, DoublePointer af, @ByVal lapack_int ldaf,
                                 @Cast("char*") BytePointer equed, DoublePointer s, DoublePointer b,
                                 @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                                 DoublePointer rcond, DoublePointer rpvgrw, DoublePointer berr,
                                 @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                                 DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoublePointer params, DoublePointer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dposvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, DoubleBuffer a,
                                 @ByVal lapack_int lda, DoubleBuffer af, @ByVal lapack_int ldaf,
                                 @Cast("char*") ByteBuffer equed, DoubleBuffer s, DoubleBuffer b,
                                 @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                                 DoubleBuffer rcond, DoubleBuffer rpvgrw, DoubleBuffer berr,
                                 @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                                 DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoubleBuffer params, DoubleBuffer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dposvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, double[] a,
                                 @ByVal lapack_int lda, double[] af, @ByVal lapack_int ldaf,
                                 @Cast("char*") byte[] equed, double[] s, double[] b,
                                 @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                                 double[] rcond, double[] rpvgrw, double[] berr,
                                 @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                                 double[] err_bnds_comp, @ByVal lapack_int nparams,
                                 double[] params, double[] work,
                                 lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dpotrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dpotrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dpotrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_dpotrf2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dpotrf2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dpotrf2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_dpotrf2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dpotrf2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dpotrf2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_dpotrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dpotrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dpotrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_dpotri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dpotri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dpotri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_dpotri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dpotri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dpotri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_dpotrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoublePointer a, @ByVal lapack_int lda,
                           DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpotrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoubleBuffer a, @ByVal lapack_int lda,
                           DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpotrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const double[] a, @ByVal lapack_int lda,
                           double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dpotrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoublePointer a,
                                @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpotrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoubleBuffer a,
                                @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpotrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const double[] a,
                                @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dppcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const DoublePointer ap, double anorm, DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_dppcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const DoubleBuffer ap, double anorm, DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_dppcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const double[] ap, double anorm, double[] rcond );

public static native @ByVal lapack_int LAPACKE_dppcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const DoublePointer ap, double anorm, DoublePointer rcond,
                                DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dppcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const DoubleBuffer ap, double anorm, DoubleBuffer rcond,
                                DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dppcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const double[] ap, double anorm, double[] rcond,
                                double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dppequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const DoublePointer ap, DoublePointer s, DoublePointer scond,
                           DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_dppequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const DoubleBuffer ap, DoubleBuffer s, DoubleBuffer scond,
                           DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_dppequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const double[] ap, double[] s, double[] scond,
                           double[] amax );

public static native @ByVal lapack_int LAPACKE_dppequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const DoublePointer ap, DoublePointer s, DoublePointer scond,
                                DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_dppequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const DoubleBuffer ap, DoubleBuffer s, DoubleBuffer scond,
                                DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_dppequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const double[] ap, double[] s, double[] scond,
                                double[] amax );

public static native @ByVal lapack_int LAPACKE_dpprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoublePointer ap, @Const DoublePointer afp,
                           @Const DoublePointer b, @ByVal lapack_int ldb, DoublePointer x,
                           @ByVal lapack_int ldx, DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_dpprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoubleBuffer ap, @Const DoubleBuffer afp,
                           @Const DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x,
                           @ByVal lapack_int ldx, DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_dpprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const double[] ap, @Const double[] afp,
                           @Const double[] b, @ByVal lapack_int ldb, double[] x,
                           @ByVal lapack_int ldx, double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_dpprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoublePointer ap,
                                @Const DoublePointer afp, @Const DoublePointer b,
                                @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                                DoublePointer ferr, DoublePointer berr, DoublePointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dpprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoubleBuffer ap,
                                @Const DoubleBuffer afp, @Const DoubleBuffer b,
                                @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                                DoubleBuffer ferr, DoubleBuffer berr, DoubleBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dpprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const double[] ap,
                                @Const double[] afp, @Const double[] b,
                                @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                                double[] ferr, double[] berr, double[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dppsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, DoublePointer ap, DoublePointer b,
                          @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dppsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, DoubleBuffer ap, DoubleBuffer b,
                          @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dppsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, double[] ap, double[] b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dppsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, DoublePointer ap, DoublePointer b,
                               @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dppsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, DoubleBuffer ap, DoubleBuffer b,
                               @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dppsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, double[] ap, double[] b,
                               @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dppsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, DoublePointer ap, DoublePointer afp,
                           @Cast("char*") BytePointer equed, DoublePointer s, DoublePointer b, @ByVal lapack_int ldb,
                           DoublePointer x, @ByVal lapack_int ldx, DoublePointer rcond,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_dppsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, DoubleBuffer ap, DoubleBuffer afp,
                           @Cast("char*") ByteBuffer equed, DoubleBuffer s, DoubleBuffer b, @ByVal lapack_int ldb,
                           DoubleBuffer x, @ByVal lapack_int ldx, DoubleBuffer rcond,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_dppsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, double[] ap, double[] afp,
                           @Cast("char*") byte[] equed, double[] s, double[] b, @ByVal lapack_int ldb,
                           double[] x, @ByVal lapack_int ldx, double[] rcond,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_dppsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, DoublePointer ap,
                                DoublePointer afp, @Cast("char*") BytePointer equed, DoublePointer s, DoublePointer b,
                                @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                                DoublePointer rcond, DoublePointer ferr, DoublePointer berr,
                                DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dppsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, DoubleBuffer ap,
                                DoubleBuffer afp, @Cast("char*") ByteBuffer equed, DoubleBuffer s, DoubleBuffer b,
                                @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                                DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr,
                                DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dppsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, double[] ap,
                                double[] afp, @Cast("char*") byte[] equed, double[] s, double[] b,
                                @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                                double[] rcond, double[] ferr, double[] berr,
                                double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dpptrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           DoublePointer ap );
public static native @ByVal lapack_int LAPACKE_dpptrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           DoubleBuffer ap );
public static native @ByVal lapack_int LAPACKE_dpptrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           double[] ap );

public static native @ByVal lapack_int LAPACKE_dpptrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoublePointer ap );
public static native @ByVal lapack_int LAPACKE_dpptrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoubleBuffer ap );
public static native @ByVal lapack_int LAPACKE_dpptrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                double[] ap );

public static native @ByVal lapack_int LAPACKE_dpptri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           DoublePointer ap );
public static native @ByVal lapack_int LAPACKE_dpptri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           DoubleBuffer ap );
public static native @ByVal lapack_int LAPACKE_dpptri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           double[] ap );

public static native @ByVal lapack_int LAPACKE_dpptri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoublePointer ap );
public static native @ByVal lapack_int LAPACKE_dpptri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoubleBuffer ap );
public static native @ByVal lapack_int LAPACKE_dpptri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                double[] ap );

public static native @ByVal lapack_int LAPACKE_dpptrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoublePointer ap, DoublePointer b,
                           @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpptrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoubleBuffer ap, DoubleBuffer b,
                           @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpptrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const double[] ap, double[] b,
                           @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dpptrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoublePointer ap, DoublePointer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpptrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoubleBuffer ap, DoubleBuffer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpptrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const double[] ap, double[] b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dpstrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda, lapack_int piv, lapack_int rank,
                           double tol );
public static native @ByVal lapack_int LAPACKE_dpstrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda, lapack_int piv, lapack_int rank,
                           double tol );
public static native @ByVal lapack_int LAPACKE_dpstrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda, lapack_int piv, lapack_int rank,
                           double tol );

public static native @ByVal lapack_int LAPACKE_dpstrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, lapack_int piv,
                                lapack_int rank, double tol, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dpstrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, lapack_int piv,
                                lapack_int rank, double tol, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dpstrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, lapack_int piv,
                                lapack_int rank, double tol, double[] work );

public static native @ByVal lapack_int LAPACKE_dptcon( @ByVal lapack_int n, @Const DoublePointer d, @Const DoublePointer e,
                           double anorm, DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_dptcon( @ByVal lapack_int n, @Const DoubleBuffer d, @Const DoubleBuffer e,
                           double anorm, DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_dptcon( @ByVal lapack_int n, @Const double[] d, @Const double[] e,
                           double anorm, double[] rcond );

public static native @ByVal lapack_int LAPACKE_dptcon_work( @ByVal lapack_int n, @Const DoublePointer d, @Const DoublePointer e,
                                double anorm, DoublePointer rcond, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dptcon_work( @ByVal lapack_int n, @Const DoubleBuffer d, @Const DoubleBuffer e,
                                double anorm, DoubleBuffer rcond, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dptcon_work( @ByVal lapack_int n, @Const double[] d, @Const double[] e,
                                double anorm, double[] rcond, double[] work );

public static native @ByVal lapack_int LAPACKE_dpteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                           DoublePointer d, DoublePointer e, DoublePointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dpteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                           DoubleBuffer d, DoubleBuffer e, DoubleBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dpteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                           double[] d, double[] e, double[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_dpteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                DoublePointer d, DoublePointer e, DoublePointer z, @ByVal lapack_int ldz,
                                DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dpteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                DoubleBuffer d, DoubleBuffer e, DoubleBuffer z, @ByVal lapack_int ldz,
                                DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dpteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                double[] d, double[] e, double[] z, @ByVal lapack_int ldz,
                                double[] work );

public static native @ByVal lapack_int LAPACKE_dptrfs( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const DoublePointer d, @Const DoublePointer e, @Const DoublePointer df,
                           @Const DoublePointer ef, @Const DoublePointer b, @ByVal lapack_int ldb,
                           DoublePointer x, @ByVal lapack_int ldx, DoublePointer ferr,
                           DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_dptrfs( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const DoubleBuffer d, @Const DoubleBuffer e, @Const DoubleBuffer df,
                           @Const DoubleBuffer ef, @Const DoubleBuffer b, @ByVal lapack_int ldb,
                           DoubleBuffer x, @ByVal lapack_int ldx, DoubleBuffer ferr,
                           DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_dptrfs( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const double[] d, @Const double[] e, @Const double[] df,
                           @Const double[] ef, @Const double[] b, @ByVal lapack_int ldb,
                           double[] x, @ByVal lapack_int ldx, double[] ferr,
                           double[] berr );

public static native @ByVal lapack_int LAPACKE_dptrfs_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const DoublePointer d, @Const DoublePointer e,
                                @Const DoublePointer df, @Const DoublePointer ef,
                                @Const DoublePointer b, @ByVal lapack_int ldb, DoublePointer x,
                                @ByVal lapack_int ldx, DoublePointer ferr, DoublePointer berr,
                                DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dptrfs_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const DoubleBuffer d, @Const DoubleBuffer e,
                                @Const DoubleBuffer df, @Const DoubleBuffer ef,
                                @Const DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x,
                                @ByVal lapack_int ldx, DoubleBuffer ferr, DoubleBuffer berr,
                                DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dptrfs_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const double[] d, @Const double[] e,
                                @Const double[] df, @Const double[] ef,
                                @Const double[] b, @ByVal lapack_int ldb, double[] x,
                                @ByVal lapack_int ldx, double[] ferr, double[] berr,
                                double[] work );

public static native @ByVal lapack_int LAPACKE_dptsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          DoublePointer d, DoublePointer e, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dptsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          DoubleBuffer d, DoubleBuffer e, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dptsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          double[] d, double[] e, double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dptsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               DoublePointer d, DoublePointer e, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dptsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               DoubleBuffer d, DoubleBuffer e, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dptsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               double[] d, double[] e, double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dptsvx( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoublePointer d, @Const DoublePointer e,
                           DoublePointer df, DoublePointer ef, @Const DoublePointer b,
                           @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                           DoublePointer rcond, DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_dptsvx( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoubleBuffer d, @Const DoubleBuffer e,
                           DoubleBuffer df, DoubleBuffer ef, @Const DoubleBuffer b,
                           @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                           DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_dptsvx( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const double[] d, @Const double[] e,
                           double[] df, double[] ef, @Const double[] b,
                           @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                           double[] rcond, double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_dptsvx_work( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoublePointer d,
                                @Const DoublePointer e, DoublePointer df, DoublePointer ef,
                                @Const DoublePointer b, @ByVal lapack_int ldb, DoublePointer x,
                                @ByVal lapack_int ldx, DoublePointer rcond, DoublePointer ferr,
                                DoublePointer berr, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dptsvx_work( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoubleBuffer d,
                                @Const DoubleBuffer e, DoubleBuffer df, DoubleBuffer ef,
                                @Const DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x,
                                @ByVal lapack_int ldx, DoubleBuffer rcond, DoubleBuffer ferr,
                                DoubleBuffer berr, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dptsvx_work( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const double[] d,
                                @Const double[] e, double[] df, double[] ef,
                                @Const double[] b, @ByVal lapack_int ldb, double[] x,
                                @ByVal lapack_int ldx, double[] rcond, double[] ferr,
                                double[] berr, double[] work );

public static native @ByVal lapack_int LAPACKE_dpttrf( @ByVal lapack_int n, DoublePointer d, DoublePointer e );
public static native @ByVal lapack_int LAPACKE_dpttrf( @ByVal lapack_int n, DoubleBuffer d, DoubleBuffer e );
public static native @ByVal lapack_int LAPACKE_dpttrf( @ByVal lapack_int n, double[] d, double[] e );

public static native @ByVal lapack_int LAPACKE_dpttrf_work( @ByVal lapack_int n, DoublePointer d, DoublePointer e );
public static native @ByVal lapack_int LAPACKE_dpttrf_work( @ByVal lapack_int n, DoubleBuffer d, DoubleBuffer e );
public static native @ByVal lapack_int LAPACKE_dpttrf_work( @ByVal lapack_int n, double[] d, double[] e );

public static native @ByVal lapack_int LAPACKE_dpttrs( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const DoublePointer d, @Const DoublePointer e, DoublePointer b,
                           @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpttrs( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const DoubleBuffer d, @Const DoubleBuffer e, DoubleBuffer b,
                           @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpttrs( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const double[] d, @Const double[] e, double[] b,
                           @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dpttrs_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const DoublePointer d, @Const DoublePointer e, DoublePointer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpttrs_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const DoubleBuffer d, @Const DoubleBuffer e, DoubleBuffer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dpttrs_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const double[] d, @Const double[] e, double[] b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dsbev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int kd, DoublePointer ab, @ByVal lapack_int ldab, DoublePointer w,
                          DoublePointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dsbev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int kd, DoubleBuffer ab, @ByVal lapack_int ldab, DoubleBuffer w,
                          DoubleBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dsbev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int kd, double[] ab, @ByVal lapack_int ldab, double[] w,
                          double[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_dsbev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int kd, DoublePointer ab,
                               @ByVal lapack_int ldab, DoublePointer w, DoublePointer z,
                               @ByVal lapack_int ldz, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dsbev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int kd, DoubleBuffer ab,
                               @ByVal lapack_int ldab, DoubleBuffer w, DoubleBuffer z,
                               @ByVal lapack_int ldz, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dsbev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int kd, double[] ab,
                               @ByVal lapack_int ldab, double[] w, double[] z,
                               @ByVal lapack_int ldz, double[] work );

public static native @ByVal lapack_int LAPACKE_dsbevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, DoublePointer ab, @ByVal lapack_int ldab,
                           DoublePointer w, DoublePointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dsbevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, DoubleBuffer ab, @ByVal lapack_int ldab,
                           DoubleBuffer w, DoubleBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dsbevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, double[] ab, @ByVal lapack_int ldab,
                           double[] w, double[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_dsbevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, DoublePointer ab,
                                @ByVal lapack_int ldab, DoublePointer w, DoublePointer z,
                                @ByVal lapack_int ldz, DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dsbevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, DoubleBuffer ab,
                                @ByVal lapack_int ldab, DoubleBuffer w, DoubleBuffer z,
                                @ByVal lapack_int ldz, DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dsbevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, double[] ab,
                                @ByVal lapack_int ldab, double[] w, double[] z,
                                @ByVal lapack_int ldz, double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_dsbevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int kd, DoublePointer ab,
                           @ByVal lapack_int ldab, DoublePointer q, @ByVal lapack_int ldq,
                           double vl, double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoublePointer w, DoublePointer z,
                           @ByVal lapack_int ldz, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dsbevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int kd, DoubleBuffer ab,
                           @ByVal lapack_int ldab, DoubleBuffer q, @ByVal lapack_int ldq,
                           double vl, double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoubleBuffer w, DoubleBuffer z,
                           @ByVal lapack_int ldz, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dsbevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int kd, double[] ab,
                           @ByVal lapack_int ldab, double[] q, @ByVal lapack_int ldq,
                           double vl, double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, double[] w, double[] z,
                           @ByVal lapack_int ldz, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_dsbevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int kd,
                                DoublePointer ab, @ByVal lapack_int ldab, DoublePointer q,
                                @ByVal lapack_int ldq, double vl, double vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                                lapack_int m, DoublePointer w, DoublePointer z,
                                @ByVal lapack_int ldz, DoublePointer work, lapack_int iwork,
                                lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dsbevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int kd,
                                DoubleBuffer ab, @ByVal lapack_int ldab, DoubleBuffer q,
                                @ByVal lapack_int ldq, double vl, double vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                                lapack_int m, DoubleBuffer w, DoubleBuffer z,
                                @ByVal lapack_int ldz, DoubleBuffer work, lapack_int iwork,
                                lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dsbevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int kd,
                                double[] ab, @ByVal lapack_int ldab, double[] q,
                                @ByVal lapack_int ldq, double vl, double vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                                lapack_int m, double[] w, double[] z,
                                @ByVal lapack_int ldz, double[] work, lapack_int iwork,
                                lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_dsbgst( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ka, @ByVal lapack_int kb, DoublePointer ab,
                           @ByVal lapack_int ldab, @Const DoublePointer bb, @ByVal lapack_int ldbb,
                           DoublePointer x, @ByVal lapack_int ldx );
public static native @ByVal lapack_int LAPACKE_dsbgst( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ka, @ByVal lapack_int kb, DoubleBuffer ab,
                           @ByVal lapack_int ldab, @Const DoubleBuffer bb, @ByVal lapack_int ldbb,
                           DoubleBuffer x, @ByVal lapack_int ldx );
public static native @ByVal lapack_int LAPACKE_dsbgst( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ka, @ByVal lapack_int kb, double[] ab,
                           @ByVal lapack_int ldab, @Const double[] bb, @ByVal lapack_int ldbb,
                           double[] x, @ByVal lapack_int ldx );

public static native @ByVal lapack_int LAPACKE_dsbgst_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                DoublePointer ab, @ByVal lapack_int ldab, @Const DoublePointer bb,
                                @ByVal lapack_int ldbb, DoublePointer x, @ByVal lapack_int ldx,
                                DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dsbgst_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                DoubleBuffer ab, @ByVal lapack_int ldab, @Const DoubleBuffer bb,
                                @ByVal lapack_int ldbb, DoubleBuffer x, @ByVal lapack_int ldx,
                                DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dsbgst_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                double[] ab, @ByVal lapack_int ldab, @Const double[] bb,
                                @ByVal lapack_int ldbb, double[] x, @ByVal lapack_int ldx,
                                double[] work );

public static native @ByVal lapack_int LAPACKE_dsbgv( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int ka, @ByVal lapack_int kb, DoublePointer ab,
                          @ByVal lapack_int ldab, DoublePointer bb, @ByVal lapack_int ldbb,
                          DoublePointer w, DoublePointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dsbgv( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int ka, @ByVal lapack_int kb, DoubleBuffer ab,
                          @ByVal lapack_int ldab, DoubleBuffer bb, @ByVal lapack_int ldbb,
                          DoubleBuffer w, DoubleBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dsbgv( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int ka, @ByVal lapack_int kb, double[] ab,
                          @ByVal lapack_int ldab, double[] bb, @ByVal lapack_int ldbb,
                          double[] w, double[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_dsbgv_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                               DoublePointer ab, @ByVal lapack_int ldab, DoublePointer bb,
                               @ByVal lapack_int ldbb, DoublePointer w, DoublePointer z,
                               @ByVal lapack_int ldz, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dsbgv_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                               DoubleBuffer ab, @ByVal lapack_int ldab, DoubleBuffer bb,
                               @ByVal lapack_int ldbb, DoubleBuffer w, DoubleBuffer z,
                               @ByVal lapack_int ldz, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dsbgv_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                               double[] ab, @ByVal lapack_int ldab, double[] bb,
                               @ByVal lapack_int ldbb, double[] w, double[] z,
                               @ByVal lapack_int ldz, double[] work );

public static native @ByVal lapack_int LAPACKE_dsbgvd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ka, @ByVal lapack_int kb, DoublePointer ab,
                           @ByVal lapack_int ldab, DoublePointer bb, @ByVal lapack_int ldbb,
                           DoublePointer w, DoublePointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dsbgvd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ka, @ByVal lapack_int kb, DoubleBuffer ab,
                           @ByVal lapack_int ldab, DoubleBuffer bb, @ByVal lapack_int ldbb,
                           DoubleBuffer w, DoubleBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dsbgvd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ka, @ByVal lapack_int kb, double[] ab,
                           @ByVal lapack_int ldab, double[] bb, @ByVal lapack_int ldbb,
                           double[] w, double[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_dsbgvd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                DoublePointer ab, @ByVal lapack_int ldab, DoublePointer bb,
                                @ByVal lapack_int ldbb, DoublePointer w, DoublePointer z,
                                @ByVal lapack_int ldz, DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dsbgvd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                DoubleBuffer ab, @ByVal lapack_int ldab, DoubleBuffer bb,
                                @ByVal lapack_int ldbb, DoubleBuffer w, DoubleBuffer z,
                                @ByVal lapack_int ldz, DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dsbgvd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                double[] ab, @ByVal lapack_int ldab, double[] bb,
                                @ByVal lapack_int ldbb, double[] w, double[] z,
                                @ByVal lapack_int ldz, double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_dsbgvx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                           DoublePointer ab, @ByVal lapack_int ldab, DoublePointer bb,
                           @ByVal lapack_int ldbb, DoublePointer q, @ByVal lapack_int ldq,
                           double vl, double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoublePointer w, DoublePointer z,
                           @ByVal lapack_int ldz, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dsbgvx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                           DoubleBuffer ab, @ByVal lapack_int ldab, DoubleBuffer bb,
                           @ByVal lapack_int ldbb, DoubleBuffer q, @ByVal lapack_int ldq,
                           double vl, double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoubleBuffer w, DoubleBuffer z,
                           @ByVal lapack_int ldz, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dsbgvx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                           double[] ab, @ByVal lapack_int ldab, double[] bb,
                           @ByVal lapack_int ldbb, double[] q, @ByVal lapack_int ldq,
                           double vl, double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, double[] w, double[] z,
                           @ByVal lapack_int ldz, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_dsbgvx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int ka,
                                @ByVal lapack_int kb, DoublePointer ab, @ByVal lapack_int ldab,
                                DoublePointer bb, @ByVal lapack_int ldbb, DoublePointer q,
                                @ByVal lapack_int ldq, double vl, double vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                                lapack_int m, DoublePointer w, DoublePointer z,
                                @ByVal lapack_int ldz, DoublePointer work, lapack_int iwork,
                                lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dsbgvx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int ka,
                                @ByVal lapack_int kb, DoubleBuffer ab, @ByVal lapack_int ldab,
                                DoubleBuffer bb, @ByVal lapack_int ldbb, DoubleBuffer q,
                                @ByVal lapack_int ldq, double vl, double vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                                lapack_int m, DoubleBuffer w, DoubleBuffer z,
                                @ByVal lapack_int ldz, DoubleBuffer work, lapack_int iwork,
                                lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dsbgvx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int ka,
                                @ByVal lapack_int kb, double[] ab, @ByVal lapack_int ldab,
                                double[] bb, @ByVal lapack_int ldbb, double[] q,
                                @ByVal lapack_int ldq, double vl, double vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                                lapack_int m, double[] w, double[] z,
                                @ByVal lapack_int ldz, double[] work, lapack_int iwork,
                                lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_dsbtrd( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, DoublePointer ab, @ByVal lapack_int ldab,
                           DoublePointer d, DoublePointer e, DoublePointer q, @ByVal lapack_int ldq );
public static native @ByVal lapack_int LAPACKE_dsbtrd( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, DoubleBuffer ab, @ByVal lapack_int ldab,
                           DoubleBuffer d, DoubleBuffer e, DoubleBuffer q, @ByVal lapack_int ldq );
public static native @ByVal lapack_int LAPACKE_dsbtrd( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, double[] ab, @ByVal lapack_int ldab,
                           double[] d, double[] e, double[] q, @ByVal lapack_int ldq );

public static native @ByVal lapack_int LAPACKE_dsbtrd_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, DoublePointer ab,
                                @ByVal lapack_int ldab, DoublePointer d, DoublePointer e,
                                DoublePointer q, @ByVal lapack_int ldq, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dsbtrd_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, DoubleBuffer ab,
                                @ByVal lapack_int ldab, DoubleBuffer d, DoubleBuffer e,
                                DoubleBuffer q, @ByVal lapack_int ldq, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dsbtrd_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, double[] ab,
                                @ByVal lapack_int ldab, double[] d, double[] e,
                                double[] q, @ByVal lapack_int ldq, double[] work );

public static native @ByVal lapack_int LAPACKE_dsfrk( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo, @Cast("char") byte trans,
                          @ByVal lapack_int n, @ByVal lapack_int k, double alpha,
                          @Const DoublePointer a, @ByVal lapack_int lda, double beta,
                          DoublePointer c );
public static native @ByVal lapack_int LAPACKE_dsfrk( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo, @Cast("char") byte trans,
                          @ByVal lapack_int n, @ByVal lapack_int k, double alpha,
                          @Const DoubleBuffer a, @ByVal lapack_int lda, double beta,
                          DoubleBuffer c );
public static native @ByVal lapack_int LAPACKE_dsfrk( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo, @Cast("char") byte trans,
                          @ByVal lapack_int n, @ByVal lapack_int k, double alpha,
                          @Const double[] a, @ByVal lapack_int lda, double beta,
                          double[] c );

public static native @ByVal lapack_int LAPACKE_dsfrk_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                               @Cast("char") byte trans, @ByVal lapack_int n, @ByVal lapack_int k,
                               double alpha, @Const DoublePointer a, @ByVal lapack_int lda,
                               double beta, DoublePointer c );
public static native @ByVal lapack_int LAPACKE_dsfrk_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                               @Cast("char") byte trans, @ByVal lapack_int n, @ByVal lapack_int k,
                               double alpha, @Const DoubleBuffer a, @ByVal lapack_int lda,
                               double beta, DoubleBuffer c );
public static native @ByVal lapack_int LAPACKE_dsfrk_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                               @Cast("char") byte trans, @ByVal lapack_int n, @ByVal lapack_int k,
                               double alpha, @Const double[] a, @ByVal lapack_int lda,
                               double beta, double[] c );

public static native @ByVal lapack_int LAPACKE_dsgesv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           DoublePointer a, @ByVal lapack_int lda, lapack_int ipiv,
                           DoublePointer b, @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                           lapack_int iter );
public static native @ByVal lapack_int LAPACKE_dsgesv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           DoubleBuffer a, @ByVal lapack_int lda, lapack_int ipiv,
                           DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                           lapack_int iter );
public static native @ByVal lapack_int LAPACKE_dsgesv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           double[] a, @ByVal lapack_int lda, lapack_int ipiv,
                           double[] b, @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                           lapack_int iter );

public static native @ByVal lapack_int LAPACKE_dsgesv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                DoublePointer a, @ByVal lapack_int lda, lapack_int ipiv,
                                DoublePointer b, @ByVal lapack_int ldb, DoublePointer x,
                                @ByVal lapack_int ldx, DoublePointer work, FloatPointer swork,
                                lapack_int iter );
public static native @ByVal lapack_int LAPACKE_dsgesv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                DoubleBuffer a, @ByVal lapack_int lda, lapack_int ipiv,
                                DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x,
                                @ByVal lapack_int ldx, DoubleBuffer work, FloatBuffer swork,
                                lapack_int iter );
public static native @ByVal lapack_int LAPACKE_dsgesv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                double[] a, @ByVal lapack_int lda, lapack_int ipiv,
                                double[] b, @ByVal lapack_int ldb, double[] x,
                                @ByVal lapack_int ldx, double[] work, float[] swork,
                                lapack_int iter );

public static native @ByVal lapack_int LAPACKE_dspcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const DoublePointer ap, @Const lapack_int ipiv,
                           double anorm, DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_dspcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const DoubleBuffer ap, @Const lapack_int ipiv,
                           double anorm, DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_dspcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const double[] ap, @Const lapack_int ipiv,
                           double anorm, double[] rcond );

public static native @ByVal lapack_int LAPACKE_dspcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const DoublePointer ap, @Const lapack_int ipiv,
                                double anorm, DoublePointer rcond, DoublePointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dspcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const DoubleBuffer ap, @Const lapack_int ipiv,
                                double anorm, DoubleBuffer rcond, DoubleBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dspcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const double[] ap, @Const lapack_int ipiv,
                                double anorm, double[] rcond, double[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dspev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          DoublePointer ap, DoublePointer w, DoublePointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dspev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          DoubleBuffer ap, DoubleBuffer w, DoubleBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dspev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          double[] ap, double[] w, double[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_dspev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, DoublePointer ap, DoublePointer w, DoublePointer z,
                               @ByVal lapack_int ldz, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dspev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, DoubleBuffer ap, DoubleBuffer w, DoubleBuffer z,
                               @ByVal lapack_int ldz, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dspev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, double[] ap, double[] w, double[] z,
                               @ByVal lapack_int ldz, double[] work );

public static native @ByVal lapack_int LAPACKE_dspevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           DoublePointer ap, DoublePointer w, DoublePointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dspevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           DoubleBuffer ap, DoubleBuffer w, DoubleBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dspevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           double[] ap, double[] w, double[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_dspevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, DoublePointer ap, DoublePointer w, DoublePointer z,
                                @ByVal lapack_int ldz, DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dspevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, DoubleBuffer ap, DoubleBuffer w, DoubleBuffer z,
                                @ByVal lapack_int ldz, DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dspevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, double[] ap, double[] w, double[] z,
                                @ByVal lapack_int ldz, double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_dspevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, DoublePointer ap, double vl, double vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                           lapack_int m, DoublePointer w, DoublePointer z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dspevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, DoubleBuffer ap, double vl, double vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                           lapack_int m, DoubleBuffer w, DoubleBuffer z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dspevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, double[] ap, double vl, double vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                           lapack_int m, double[] w, double[] z, @ByVal lapack_int ldz,
                           lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_dspevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer ap, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                double abstol, lapack_int m, DoublePointer w,
                                DoublePointer z, @ByVal lapack_int ldz, DoublePointer work,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dspevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer ap, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                double abstol, lapack_int m, DoubleBuffer w,
                                DoubleBuffer z, @ByVal lapack_int ldz, DoubleBuffer work,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dspevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, double[] ap, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                double abstol, lapack_int m, double[] w,
                                double[] z, @ByVal lapack_int ldz, double[] work,
                                lapack_int iwork, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_dspgst( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                           @ByVal lapack_int n, DoublePointer ap, @Const DoublePointer bp );
public static native @ByVal lapack_int LAPACKE_dspgst( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                           @ByVal lapack_int n, DoubleBuffer ap, @Const DoubleBuffer bp );
public static native @ByVal lapack_int LAPACKE_dspgst( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                           @ByVal lapack_int n, double[] ap, @Const double[] bp );

public static native @ByVal lapack_int LAPACKE_dspgst_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                                @ByVal lapack_int n, DoublePointer ap, @Const DoublePointer bp );
public static native @ByVal lapack_int LAPACKE_dspgst_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                                @ByVal lapack_int n, DoubleBuffer ap, @Const DoubleBuffer bp );
public static native @ByVal lapack_int LAPACKE_dspgst_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                                @ByVal lapack_int n, double[] ap, @Const double[] bp );

public static native @ByVal lapack_int LAPACKE_dspgv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer ap, DoublePointer bp,
                          DoublePointer w, DoublePointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dspgv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer ap, DoubleBuffer bp,
                          DoubleBuffer w, DoubleBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dspgv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, double[] ap, double[] bp,
                          double[] w, double[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_dspgv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer ap, DoublePointer bp,
                               DoublePointer w, DoublePointer z, @ByVal lapack_int ldz,
                               DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dspgv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer ap, DoubleBuffer bp,
                               DoubleBuffer w, DoubleBuffer z, @ByVal lapack_int ldz,
                               DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dspgv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n, double[] ap, double[] bp,
                               double[] w, double[] z, @ByVal lapack_int ldz,
                               double[] work );

public static native @ByVal lapack_int LAPACKE_dspgvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer ap, DoublePointer bp,
                           DoublePointer w, DoublePointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dspgvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer ap, DoubleBuffer bp,
                           DoubleBuffer w, DoubleBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dspgvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, double[] ap, double[] bp,
                           double[] w, double[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_dspgvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer ap, DoublePointer bp,
                                DoublePointer w, DoublePointer z, @ByVal lapack_int ldz,
                                DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dspgvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer ap, DoubleBuffer bp,
                                DoubleBuffer w, DoubleBuffer z, @ByVal lapack_int ldz,
                                DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dspgvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n, double[] ap, double[] bp,
                                double[] w, double[] z, @ByVal lapack_int ldz,
                                double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_dspgvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer ap,
                           DoublePointer bp, double vl, double vu, @ByVal lapack_int il,
                           @ByVal lapack_int iu, double abstol, lapack_int m,
                           DoublePointer w, DoublePointer z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dspgvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer ap,
                           DoubleBuffer bp, double vl, double vu, @ByVal lapack_int il,
                           @ByVal lapack_int iu, double abstol, lapack_int m,
                           DoubleBuffer w, DoubleBuffer z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dspgvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, double[] ap,
                           double[] bp, double vl, double vu, @ByVal lapack_int il,
                           @ByVal lapack_int iu, double abstol, lapack_int m,
                           double[] w, double[] z, @ByVal lapack_int ldz,
                           lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_dspgvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer ap,
                                DoublePointer bp, double vl, double vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, double abstol, lapack_int m,
                                DoublePointer w, DoublePointer z, @ByVal lapack_int ldz,
                                DoublePointer work, lapack_int iwork,
                                lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dspgvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer ap,
                                DoubleBuffer bp, double vl, double vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, double abstol, lapack_int m,
                                DoubleBuffer w, DoubleBuffer z, @ByVal lapack_int ldz,
                                DoubleBuffer work, lapack_int iwork,
                                lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dspgvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, double[] ap,
                                double[] bp, double vl, double vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, double abstol, lapack_int m,
                                double[] w, double[] z, @ByVal lapack_int ldz,
                                double[] work, lapack_int iwork,
                                lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_dsposv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, DoublePointer a, @ByVal lapack_int lda,
                           DoublePointer b, @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                           lapack_int iter );
public static native @ByVal lapack_int LAPACKE_dsposv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, DoubleBuffer a, @ByVal lapack_int lda,
                           DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                           lapack_int iter );
public static native @ByVal lapack_int LAPACKE_dsposv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, double[] a, @ByVal lapack_int lda,
                           double[] b, @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                           lapack_int iter );

public static native @ByVal lapack_int LAPACKE_dsposv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, DoublePointer a, @ByVal lapack_int lda,
                                DoublePointer b, @ByVal lapack_int ldb, DoublePointer x,
                                @ByVal lapack_int ldx, DoublePointer work, FloatPointer swork,
                                lapack_int iter );
public static native @ByVal lapack_int LAPACKE_dsposv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, DoubleBuffer a, @ByVal lapack_int lda,
                                DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x,
                                @ByVal lapack_int ldx, DoubleBuffer work, FloatBuffer swork,
                                lapack_int iter );
public static native @ByVal lapack_int LAPACKE_dsposv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, double[] a, @ByVal lapack_int lda,
                                double[] b, @ByVal lapack_int ldb, double[] x,
                                @ByVal lapack_int ldx, double[] work, float[] swork,
                                lapack_int iter );

public static native @ByVal lapack_int LAPACKE_dsprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoublePointer ap, @Const DoublePointer afp,
                           @Const lapack_int ipiv, @Const DoublePointer b,
                           @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_dsprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoubleBuffer ap, @Const DoubleBuffer afp,
                           @Const lapack_int ipiv, @Const DoubleBuffer b,
                           @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_dsprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const double[] ap, @Const double[] afp,
                           @Const lapack_int ipiv, @Const double[] b,
                           @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_dsprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoublePointer ap,
                                @Const DoublePointer afp, @Const lapack_int ipiv,
                                @Const DoublePointer b, @ByVal lapack_int ldb, DoublePointer x,
                                @ByVal lapack_int ldx, DoublePointer ferr, DoublePointer berr,
                                DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dsprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoubleBuffer ap,
                                @Const DoubleBuffer afp, @Const lapack_int ipiv,
                                @Const DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x,
                                @ByVal lapack_int ldx, DoubleBuffer ferr, DoubleBuffer berr,
                                DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dsprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const double[] ap,
                                @Const double[] afp, @Const lapack_int ipiv,
                                @Const double[] b, @ByVal lapack_int ldb, double[] x,
                                @ByVal lapack_int ldx, double[] ferr, double[] berr,
                                double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dspsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, DoublePointer ap, lapack_int ipiv,
                          DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dspsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, DoubleBuffer ap, lapack_int ipiv,
                          DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dspsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, double[] ap, lapack_int ipiv,
                          double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dspsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, DoublePointer ap, lapack_int ipiv,
                               DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dspsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, DoubleBuffer ap, lapack_int ipiv,
                               DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dspsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, double[] ap, lapack_int ipiv,
                               double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dspsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoublePointer ap, DoublePointer afp,
                           lapack_int ipiv, @Const DoublePointer b, @ByVal lapack_int ldb,
                           DoublePointer x, @ByVal lapack_int ldx, DoublePointer rcond,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_dspsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoubleBuffer ap, DoubleBuffer afp,
                           lapack_int ipiv, @Const DoubleBuffer b, @ByVal lapack_int ldb,
                           DoubleBuffer x, @ByVal lapack_int ldx, DoubleBuffer rcond,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_dspsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const double[] ap, double[] afp,
                           lapack_int ipiv, @Const double[] b, @ByVal lapack_int ldb,
                           double[] x, @ByVal lapack_int ldx, double[] rcond,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_dspsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoublePointer ap,
                                DoublePointer afp, lapack_int ipiv, @Const DoublePointer b,
                                @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                                DoublePointer rcond, DoublePointer ferr, DoublePointer berr,
                                DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dspsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoubleBuffer ap,
                                DoubleBuffer afp, lapack_int ipiv, @Const DoubleBuffer b,
                                @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                                DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr,
                                DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dspsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const double[] ap,
                                double[] afp, lapack_int ipiv, @Const double[] b,
                                @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                                double[] rcond, double[] ferr, double[] berr,
                                double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dsptrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           DoublePointer ap, DoublePointer d, DoublePointer e, DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dsptrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           DoubleBuffer ap, DoubleBuffer d, DoubleBuffer e, DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dsptrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           double[] ap, double[] d, double[] e, double[] tau );

public static native @ByVal lapack_int LAPACKE_dsptrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoublePointer ap, DoublePointer d, DoublePointer e, DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dsptrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoubleBuffer ap, DoubleBuffer d, DoubleBuffer e, DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dsptrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                double[] ap, double[] d, double[] e, double[] tau );

public static native @ByVal lapack_int LAPACKE_dsptrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           DoublePointer ap, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dsptrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           DoubleBuffer ap, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dsptrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           double[] ap, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_dsptrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoublePointer ap, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dsptrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoubleBuffer ap, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dsptrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                double[] ap, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_dsptri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           DoublePointer ap, @Const lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dsptri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           DoubleBuffer ap, @Const lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dsptri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           double[] ap, @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_dsptri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoublePointer ap, @Const lapack_int ipiv,
                                DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dsptri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoubleBuffer ap, @Const lapack_int ipiv,
                                DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dsptri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                double[] ap, @Const lapack_int ipiv,
                                double[] work );

public static native @ByVal lapack_int LAPACKE_dsptrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoublePointer ap,
                           @Const lapack_int ipiv, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsptrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoubleBuffer ap,
                           @Const lapack_int ipiv, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsptrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const double[] ap,
                           @Const lapack_int ipiv, double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dsptrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoublePointer ap,
                                @Const lapack_int ipiv, DoublePointer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsptrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoubleBuffer ap,
                                @Const lapack_int ipiv, DoubleBuffer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsptrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const double[] ap,
                                @Const lapack_int ipiv, double[] b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dstebz( @Cast("char") byte range, @Cast("char") byte order, @ByVal lapack_int n, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, @Const DoublePointer d, @Const DoublePointer e,
                           lapack_int m, lapack_int nsplit, DoublePointer w,
                           lapack_int iblock, lapack_int isplit );
public static native @ByVal lapack_int LAPACKE_dstebz( @Cast("char") byte range, @Cast("char") byte order, @ByVal lapack_int n, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, @Const DoubleBuffer d, @Const DoubleBuffer e,
                           lapack_int m, lapack_int nsplit, DoubleBuffer w,
                           lapack_int iblock, lapack_int isplit );
public static native @ByVal lapack_int LAPACKE_dstebz( @Cast("char") byte range, @Cast("char") byte order, @ByVal lapack_int n, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, @Const double[] d, @Const double[] e,
                           lapack_int m, lapack_int nsplit, double[] w,
                           lapack_int iblock, lapack_int isplit );

public static native @ByVal lapack_int LAPACKE_dstebz_work( @Cast("char") byte range, @Cast("char") byte order, @ByVal lapack_int n, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                double abstol, @Const DoublePointer d, @Const DoublePointer e,
                                lapack_int m, lapack_int nsplit, DoublePointer w,
                                lapack_int iblock, lapack_int isplit,
                                DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dstebz_work( @Cast("char") byte range, @Cast("char") byte order, @ByVal lapack_int n, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                double abstol, @Const DoubleBuffer d, @Const DoubleBuffer e,
                                lapack_int m, lapack_int nsplit, DoubleBuffer w,
                                lapack_int iblock, lapack_int isplit,
                                DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dstebz_work( @Cast("char") byte range, @Cast("char") byte order, @ByVal lapack_int n, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                double abstol, @Const double[] d, @Const double[] e,
                                lapack_int m, lapack_int nsplit, double[] w,
                                lapack_int iblock, lapack_int isplit,
                                double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dstedc( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                           DoublePointer d, DoublePointer e, DoublePointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dstedc( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                           DoubleBuffer d, DoubleBuffer e, DoubleBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dstedc( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                           double[] d, double[] e, double[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_dstedc_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                DoublePointer d, DoublePointer e, DoublePointer z, @ByVal lapack_int ldz,
                                DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dstedc_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                DoubleBuffer d, DoubleBuffer e, DoubleBuffer z, @ByVal lapack_int ldz,
                                DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dstedc_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                double[] d, double[] e, double[] z, @ByVal lapack_int ldz,
                                double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_dstegr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, DoublePointer d, DoublePointer e, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoublePointer w, DoublePointer z,
                           @ByVal lapack_int ldz, lapack_int isuppz );
public static native @ByVal lapack_int LAPACKE_dstegr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, DoubleBuffer d, DoubleBuffer e, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoubleBuffer w, DoubleBuffer z,
                           @ByVal lapack_int ldz, lapack_int isuppz );
public static native @ByVal lapack_int LAPACKE_dstegr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, double[] d, double[] e, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, double[] w, double[] z,
                           @ByVal lapack_int ldz, lapack_int isuppz );

public static native @ByVal lapack_int LAPACKE_dstegr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, DoublePointer d, DoublePointer e, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                double abstol, lapack_int m, DoublePointer w,
                                DoublePointer z, @ByVal lapack_int ldz, lapack_int isuppz,
                                DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dstegr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, DoubleBuffer d, DoubleBuffer e, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                double abstol, lapack_int m, DoubleBuffer w,
                                DoubleBuffer z, @ByVal lapack_int ldz, lapack_int isuppz,
                                DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dstegr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, double[] d, double[] e, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                double abstol, lapack_int m, double[] w,
                                double[] z, @ByVal lapack_int ldz, lapack_int isuppz,
                                double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_dstein( int matrix_layout, @ByVal lapack_int n, @Const DoublePointer d,
                           @Const DoublePointer e, @ByVal lapack_int m, @Const DoublePointer w,
                           @Const lapack_int iblock, @Const lapack_int isplit,
                           DoublePointer z, @ByVal lapack_int ldz, lapack_int ifailv );
public static native @ByVal lapack_int LAPACKE_dstein( int matrix_layout, @ByVal lapack_int n, @Const DoubleBuffer d,
                           @Const DoubleBuffer e, @ByVal lapack_int m, @Const DoubleBuffer w,
                           @Const lapack_int iblock, @Const lapack_int isplit,
                           DoubleBuffer z, @ByVal lapack_int ldz, lapack_int ifailv );
public static native @ByVal lapack_int LAPACKE_dstein( int matrix_layout, @ByVal lapack_int n, @Const double[] d,
                           @Const double[] e, @ByVal lapack_int m, @Const double[] w,
                           @Const lapack_int iblock, @Const lapack_int isplit,
                           double[] z, @ByVal lapack_int ldz, lapack_int ifailv );

public static native @ByVal lapack_int LAPACKE_dstein_work( int matrix_layout, @ByVal lapack_int n, @Const DoublePointer d,
                                @Const DoublePointer e, @ByVal lapack_int m, @Const DoublePointer w,
                                @Const lapack_int iblock,
                                @Const lapack_int isplit, DoublePointer z,
                                @ByVal lapack_int ldz, DoublePointer work, lapack_int iwork,
                                lapack_int ifailv );
public static native @ByVal lapack_int LAPACKE_dstein_work( int matrix_layout, @ByVal lapack_int n, @Const DoubleBuffer d,
                                @Const DoubleBuffer e, @ByVal lapack_int m, @Const DoubleBuffer w,
                                @Const lapack_int iblock,
                                @Const lapack_int isplit, DoubleBuffer z,
                                @ByVal lapack_int ldz, DoubleBuffer work, lapack_int iwork,
                                lapack_int ifailv );
public static native @ByVal lapack_int LAPACKE_dstein_work( int matrix_layout, @ByVal lapack_int n, @Const double[] d,
                                @Const double[] e, @ByVal lapack_int m, @Const double[] w,
                                @Const lapack_int iblock,
                                @Const lapack_int isplit, double[] z,
                                @ByVal lapack_int ldz, double[] work, lapack_int iwork,
                                lapack_int ifailv );

public static native @ByVal lapack_int LAPACKE_dstemr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, DoublePointer d, DoublePointer e, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           lapack_int m, DoublePointer w, DoublePointer z, @ByVal lapack_int ldz,
                           @ByVal lapack_int nzc, lapack_int isuppz,
                           lapack_logical tryrac );
public static native @ByVal lapack_int LAPACKE_dstemr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, DoubleBuffer d, DoubleBuffer e, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           lapack_int m, DoubleBuffer w, DoubleBuffer z, @ByVal lapack_int ldz,
                           @ByVal lapack_int nzc, lapack_int isuppz,
                           lapack_logical tryrac );
public static native @ByVal lapack_int LAPACKE_dstemr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, double[] d, double[] e, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           lapack_int m, double[] w, double[] z, @ByVal lapack_int ldz,
                           @ByVal lapack_int nzc, lapack_int isuppz,
                           lapack_logical tryrac );

public static native @ByVal lapack_int LAPACKE_dstemr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, DoublePointer d, DoublePointer e, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                lapack_int m, DoublePointer w, DoublePointer z,
                                @ByVal lapack_int ldz, @ByVal lapack_int nzc,
                                lapack_int isuppz, lapack_logical tryrac,
                                DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dstemr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, DoubleBuffer d, DoubleBuffer e, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                lapack_int m, DoubleBuffer w, DoubleBuffer z,
                                @ByVal lapack_int ldz, @ByVal lapack_int nzc,
                                lapack_int isuppz, lapack_logical tryrac,
                                DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dstemr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, double[] d, double[] e, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                lapack_int m, double[] w, double[] z,
                                @ByVal lapack_int ldz, @ByVal lapack_int nzc,
                                lapack_int isuppz, lapack_logical tryrac,
                                double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_dsteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                           DoublePointer d, DoublePointer e, DoublePointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dsteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                           DoubleBuffer d, DoubleBuffer e, DoubleBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dsteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                           double[] d, double[] e, double[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_dsteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                DoublePointer d, DoublePointer e, DoublePointer z, @ByVal lapack_int ldz,
                                DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dsteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                DoubleBuffer d, DoubleBuffer e, DoubleBuffer z, @ByVal lapack_int ldz,
                                DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dsteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                double[] d, double[] e, double[] z, @ByVal lapack_int ldz,
                                double[] work );

public static native @ByVal lapack_int LAPACKE_dsterf( @ByVal lapack_int n, DoublePointer d, DoublePointer e );
public static native @ByVal lapack_int LAPACKE_dsterf( @ByVal lapack_int n, DoubleBuffer d, DoubleBuffer e );
public static native @ByVal lapack_int LAPACKE_dsterf( @ByVal lapack_int n, double[] d, double[] e );

public static native @ByVal lapack_int LAPACKE_dsterf_work( @ByVal lapack_int n, DoublePointer d, DoublePointer e );
public static native @ByVal lapack_int LAPACKE_dsterf_work( @ByVal lapack_int n, DoubleBuffer d, DoubleBuffer e );
public static native @ByVal lapack_int LAPACKE_dsterf_work( @ByVal lapack_int n, double[] d, double[] e );

public static native @ByVal lapack_int LAPACKE_dstev( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n, DoublePointer d,
                          DoublePointer e, DoublePointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dstev( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n, DoubleBuffer d,
                          DoubleBuffer e, DoubleBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dstev( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n, double[] d,
                          double[] e, double[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_dstev_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n,
                               DoublePointer d, DoublePointer e, DoublePointer z, @ByVal lapack_int ldz,
                               DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dstev_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n,
                               DoubleBuffer d, DoubleBuffer e, DoubleBuffer z, @ByVal lapack_int ldz,
                               DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dstev_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n,
                               double[] d, double[] e, double[] z, @ByVal lapack_int ldz,
                               double[] work );

public static native @ByVal lapack_int LAPACKE_dstevd( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n, DoublePointer d,
                           DoublePointer e, DoublePointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dstevd( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n, DoubleBuffer d,
                           DoubleBuffer e, DoubleBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_dstevd( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n, double[] d,
                           double[] e, double[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_dstevd_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n,
                                DoublePointer d, DoublePointer e, DoublePointer z, @ByVal lapack_int ldz,
                                DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dstevd_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n,
                                DoubleBuffer d, DoubleBuffer e, DoubleBuffer z, @ByVal lapack_int ldz,
                                DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dstevd_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n,
                                double[] d, double[] e, double[] z, @ByVal lapack_int ldz,
                                double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_dstevr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, DoublePointer d, DoublePointer e, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoublePointer w, DoublePointer z,
                           @ByVal lapack_int ldz, lapack_int isuppz );
public static native @ByVal lapack_int LAPACKE_dstevr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, DoubleBuffer d, DoubleBuffer e, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoubleBuffer w, DoubleBuffer z,
                           @ByVal lapack_int ldz, lapack_int isuppz );
public static native @ByVal lapack_int LAPACKE_dstevr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, double[] d, double[] e, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, double[] w, double[] z,
                           @ByVal lapack_int ldz, lapack_int isuppz );

public static native @ByVal lapack_int LAPACKE_dstevr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, DoublePointer d, DoublePointer e, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                double abstol, lapack_int m, DoublePointer w,
                                DoublePointer z, @ByVal lapack_int ldz, lapack_int isuppz,
                                DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dstevr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, DoubleBuffer d, DoubleBuffer e, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                double abstol, lapack_int m, DoubleBuffer w,
                                DoubleBuffer z, @ByVal lapack_int ldz, lapack_int isuppz,
                                DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dstevr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, double[] d, double[] e, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                double abstol, lapack_int m, double[] w,
                                double[] z, @ByVal lapack_int ldz, lapack_int isuppz,
                                double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_dstevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, DoublePointer d, DoublePointer e, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoublePointer w, DoublePointer z,
                           @ByVal lapack_int ldz, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dstevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, DoubleBuffer d, DoubleBuffer e, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoubleBuffer w, DoubleBuffer z,
                           @ByVal lapack_int ldz, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dstevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, double[] d, double[] e, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, double[] w, double[] z,
                           @ByVal lapack_int ldz, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_dstevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, DoublePointer d, DoublePointer e, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                double abstol, lapack_int m, DoublePointer w,
                                DoublePointer z, @ByVal lapack_int ldz, DoublePointer work,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dstevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, DoubleBuffer d, DoubleBuffer e, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                double abstol, lapack_int m, DoubleBuffer w,
                                DoubleBuffer z, @ByVal lapack_int ldz, DoubleBuffer work,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dstevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, double[] d, double[] e, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                double abstol, lapack_int m, double[] w,
                                double[] z, @ByVal lapack_int ldz, double[] work,
                                lapack_int iwork, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_dsycon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const DoublePointer a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, double anorm, DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_dsycon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const DoubleBuffer a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, double anorm, DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_dsycon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const double[] a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, double anorm, double[] rcond );

public static native @ByVal lapack_int LAPACKE_dsycon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const DoublePointer a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, double anorm,
                                DoublePointer rcond, DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dsycon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const DoubleBuffer a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, double anorm,
                                DoubleBuffer rcond, DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dsycon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const double[] a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, double anorm,
                                double[] rcond, double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dsyconv( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte way, @ByVal lapack_int n,
                            DoublePointer a, @ByVal lapack_int lda, @Const lapack_int ipiv,
                            DoublePointer e );
public static native @ByVal lapack_int LAPACKE_dsyconv( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte way, @ByVal lapack_int n,
                            DoubleBuffer a, @ByVal lapack_int lda, @Const lapack_int ipiv,
                            DoubleBuffer e );
public static native @ByVal lapack_int LAPACKE_dsyconv( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte way, @ByVal lapack_int n,
                            double[] a, @ByVal lapack_int lda, @Const lapack_int ipiv,
                            double[] e );

public static native @ByVal lapack_int LAPACKE_dsyconv_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte way,
                                 @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda,
                                 @Const lapack_int ipiv, DoublePointer e );
public static native @ByVal lapack_int LAPACKE_dsyconv_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte way,
                                 @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda,
                                 @Const lapack_int ipiv, DoubleBuffer e );
public static native @ByVal lapack_int LAPACKE_dsyconv_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte way,
                                 @ByVal lapack_int n, double[] a, @ByVal lapack_int lda,
                                 @Const lapack_int ipiv, double[] e );

public static native @ByVal lapack_int LAPACKE_dsyequb( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @Const DoublePointer a, @ByVal lapack_int lda, DoublePointer s,
                            DoublePointer scond, DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_dsyequb( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @Const DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer s,
                            DoubleBuffer scond, DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_dsyequb( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @Const double[] a, @ByVal lapack_int lda, double[] s,
                            double[] scond, double[] amax );

public static native @ByVal lapack_int LAPACKE_dsyequb_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @Const DoublePointer a, @ByVal lapack_int lda, DoublePointer s,
                                 DoublePointer scond, DoublePointer amax, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dsyequb_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @Const DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer s,
                                 DoubleBuffer scond, DoubleBuffer amax, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dsyequb_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @Const double[] a, @ByVal lapack_int lda, double[] s,
                                 double[] scond, double[] amax, double[] work );

public static native @ByVal lapack_int LAPACKE_dsyev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          DoublePointer a, @ByVal lapack_int lda, DoublePointer w );
public static native @ByVal lapack_int LAPACKE_dsyev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer w );
public static native @ByVal lapack_int LAPACKE_dsyev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          double[] a, @ByVal lapack_int lda, double[] w );

public static native @ByVal lapack_int LAPACKE_dsyev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda,
                               DoublePointer w, DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsyev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda,
                               DoubleBuffer w, DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsyev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, double[] a, @ByVal lapack_int lda,
                               double[] w, double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dsyevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           DoublePointer a, @ByVal lapack_int lda, DoublePointer w );
public static native @ByVal lapack_int LAPACKE_dsyevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer w );
public static native @ByVal lapack_int LAPACKE_dsyevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           double[] a, @ByVal lapack_int lda, double[] w );

public static native @ByVal lapack_int LAPACKE_dsyevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda,
                                DoublePointer w, DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dsyevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda,
                                DoubleBuffer w, DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dsyevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, double[] a, @ByVal lapack_int lda,
                                double[] w, double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_dsyevr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoublePointer w, DoublePointer z,
                           @ByVal lapack_int ldz, lapack_int isuppz );
public static native @ByVal lapack_int LAPACKE_dsyevr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoubleBuffer w, DoubleBuffer z,
                           @ByVal lapack_int ldz, lapack_int isuppz );
public static native @ByVal lapack_int LAPACKE_dsyevr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, double[] a, @ByVal lapack_int lda, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, double[] w, double[] z,
                           @ByVal lapack_int ldz, lapack_int isuppz );

public static native @ByVal lapack_int LAPACKE_dsyevr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer a,
                                @ByVal lapack_int lda, double vl, double vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                                lapack_int m, DoublePointer w, DoublePointer z,
                                @ByVal lapack_int ldz, lapack_int isuppz,
                                DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dsyevr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer a,
                                @ByVal lapack_int lda, double vl, double vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                                lapack_int m, DoubleBuffer w, DoubleBuffer z,
                                @ByVal lapack_int ldz, lapack_int isuppz,
                                DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dsyevr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, double[] a,
                                @ByVal lapack_int lda, double vl, double vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                                lapack_int m, double[] w, double[] z,
                                @ByVal lapack_int ldz, lapack_int isuppz,
                                double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_dsyevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoublePointer w, DoublePointer z,
                           @ByVal lapack_int ldz, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dsyevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoubleBuffer w, DoubleBuffer z,
                           @ByVal lapack_int ldz, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dsyevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, double[] a, @ByVal lapack_int lda, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, double[] w, double[] z,
                           @ByVal lapack_int ldz, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_dsyevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer a,
                                @ByVal lapack_int lda, double vl, double vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                                lapack_int m, DoublePointer w, DoublePointer z,
                                @ByVal lapack_int ldz, DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dsyevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer a,
                                @ByVal lapack_int lda, double vl, double vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                                lapack_int m, DoubleBuffer w, DoubleBuffer z,
                                @ByVal lapack_int ldz, DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dsyevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, double[] a,
                                @ByVal lapack_int lda, double vl, double vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                                lapack_int m, double[] w, double[] z,
                                @ByVal lapack_int ldz, double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_dsygst( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                           @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda,
                           @Const DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsygst( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                           @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda,
                           @Const DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsygst( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                           @ByVal lapack_int n, double[] a, @ByVal lapack_int lda,
                           @Const double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dsygst_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                                @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda,
                                @Const DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsygst_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                                @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda,
                                @Const DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsygst_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                                @ByVal lapack_int n, double[] a, @ByVal lapack_int lda,
                                @Const double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dsygv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda,
                          DoublePointer b, @ByVal lapack_int ldb, DoublePointer w );
public static native @ByVal lapack_int LAPACKE_dsygv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda,
                          DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer w );
public static native @ByVal lapack_int LAPACKE_dsygv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, double[] a, @ByVal lapack_int lda,
                          double[] b, @ByVal lapack_int ldb, double[] w );

public static native @ByVal lapack_int LAPACKE_dsygv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer a,
                               @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb,
                               DoublePointer w, DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsygv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer a,
                               @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb,
                               DoubleBuffer w, DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsygv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n, double[] a,
                               @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb,
                               double[] w, double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dsygvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda,
                           DoublePointer b, @ByVal lapack_int ldb, DoublePointer w );
public static native @ByVal lapack_int LAPACKE_dsygvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda,
                           DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer w );
public static native @ByVal lapack_int LAPACKE_dsygvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, double[] a, @ByVal lapack_int lda,
                           double[] b, @ByVal lapack_int ldb, double[] w );

public static native @ByVal lapack_int LAPACKE_dsygvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer a,
                                @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb,
                                DoublePointer w, DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dsygvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer a,
                                @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb,
                                DoubleBuffer w, DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dsygvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n, double[] a,
                                @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb,
                                double[] w, double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_dsygvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoublePointer w, DoublePointer z,
                           @ByVal lapack_int ldz, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dsygvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoubleBuffer w, DoubleBuffer z,
                           @ByVal lapack_int ldz, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dsygvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, double[] w, double[] z,
                           @ByVal lapack_int ldz, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_dsygvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer a,
                                @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb,
                                double vl, double vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, double abstol, lapack_int m,
                                DoublePointer w, DoublePointer z, @ByVal lapack_int ldz,
                                DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dsygvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer a,
                                @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb,
                                double vl, double vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, double abstol, lapack_int m,
                                DoubleBuffer w, DoubleBuffer z, @ByVal lapack_int ldz,
                                DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_dsygvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, double[] a,
                                @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb,
                                double vl, double vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, double abstol, lapack_int m,
                                double[] w, double[] z, @ByVal lapack_int ldz,
                                double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_dsyrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoublePointer a, @ByVal lapack_int lda,
                           @Const DoublePointer af, @ByVal lapack_int ldaf,
                           @Const lapack_int ipiv, @Const DoublePointer b,
                           @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_dsyrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoubleBuffer a, @ByVal lapack_int lda,
                           @Const DoubleBuffer af, @ByVal lapack_int ldaf,
                           @Const lapack_int ipiv, @Const DoubleBuffer b,
                           @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_dsyrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const double[] a, @ByVal lapack_int lda,
                           @Const double[] af, @ByVal lapack_int ldaf,
                           @Const lapack_int ipiv, @Const double[] b,
                           @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_dsyrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoublePointer a,
                                @ByVal lapack_int lda, @Const DoublePointer af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const DoublePointer b, @ByVal lapack_int ldb, DoublePointer x,
                                @ByVal lapack_int ldx, DoublePointer ferr, DoublePointer berr,
                                DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dsyrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoubleBuffer a,
                                @ByVal lapack_int lda, @Const DoubleBuffer af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x,
                                @ByVal lapack_int ldx, DoubleBuffer ferr, DoubleBuffer berr,
                                DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dsyrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const double[] a,
                                @ByVal lapack_int lda, @Const double[] af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const double[] b, @ByVal lapack_int ldb, double[] x,
                                @ByVal lapack_int ldx, double[] ferr, double[] berr,
                                double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dsyrfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoublePointer a,
                            @ByVal lapack_int lda, @Const DoublePointer af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const DoublePointer s,
                            @Const DoublePointer b, @ByVal lapack_int ldb, DoublePointer x,
                            @ByVal lapack_int ldx, DoublePointer rcond, DoublePointer berr,
                            @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                            DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                            DoublePointer params );
public static native @ByVal lapack_int LAPACKE_dsyrfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoubleBuffer a,
                            @ByVal lapack_int lda, @Const DoubleBuffer af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const DoubleBuffer s,
                            @Const DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x,
                            @ByVal lapack_int ldx, DoubleBuffer rcond, DoubleBuffer berr,
                            @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                            DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                            DoubleBuffer params );
public static native @ByVal lapack_int LAPACKE_dsyrfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const double[] a,
                            @ByVal lapack_int lda, @Const double[] af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const double[] s,
                            @Const double[] b, @ByVal lapack_int ldb, double[] x,
                            @ByVal lapack_int ldx, double[] rcond, double[] berr,
                            @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                            double[] err_bnds_comp, @ByVal lapack_int nparams,
                            double[] params );

public static native @ByVal lapack_int LAPACKE_dsyrfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoublePointer a,
                                 @ByVal lapack_int lda, @Const DoublePointer af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const DoublePointer s, @Const DoublePointer b,
                                 @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                                 DoublePointer rcond, DoublePointer berr,
                                 @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                                 DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoublePointer params, DoublePointer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dsyrfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoubleBuffer a,
                                 @ByVal lapack_int lda, @Const DoubleBuffer af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const DoubleBuffer s, @Const DoubleBuffer b,
                                 @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                                 DoubleBuffer rcond, DoubleBuffer berr,
                                 @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                                 DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoubleBuffer params, DoubleBuffer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dsyrfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const double[] a,
                                 @ByVal lapack_int lda, @Const double[] af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const double[] s, @Const double[] b,
                                 @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                                 double[] rcond, double[] berr,
                                 @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                                 double[] err_bnds_comp, @ByVal lapack_int nparams,
                                 double[] params, double[] work,
                                 lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dsysv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, DoublePointer a, @ByVal lapack_int lda,
                          lapack_int ipiv, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsysv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, DoubleBuffer a, @ByVal lapack_int lda,
                          lapack_int ipiv, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsysv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, double[] a, @ByVal lapack_int lda,
                          lapack_int ipiv, double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dsysv_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, DoublePointer a, @ByVal lapack_int lda,
                               lapack_int ipiv, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsysv_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, DoubleBuffer a, @ByVal lapack_int lda,
                               lapack_int ipiv, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsysv_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, double[] a, @ByVal lapack_int lda,
                               lapack_int ipiv, double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dsysv_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                    @ByVal lapack_int nrhs, DoublePointer a, @ByVal lapack_int lda,
                                    lapack_int ipiv, DoublePointer b, @ByVal lapack_int ldb,
                                    DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsysv_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                    @ByVal lapack_int nrhs, DoubleBuffer a, @ByVal lapack_int lda,
                                    lapack_int ipiv, DoubleBuffer b, @ByVal lapack_int ldb,
                                    DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsysv_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                    @ByVal lapack_int nrhs, double[] a, @ByVal lapack_int lda,
                                    lapack_int ipiv, double[] b, @ByVal lapack_int ldb,
                                    double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dsysv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, DoublePointer a, @ByVal lapack_int lda,
                               lapack_int ipiv, DoublePointer b, @ByVal lapack_int ldb,
                               DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsysv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, DoubleBuffer a, @ByVal lapack_int lda,
                               lapack_int ipiv, DoubleBuffer b, @ByVal lapack_int ldb,
                               DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsysv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, double[] a, @ByVal lapack_int lda,
                               lapack_int ipiv, double[] b, @ByVal lapack_int ldb,
                               double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dsysvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoublePointer a, @ByVal lapack_int lda,
                           DoublePointer af, @ByVal lapack_int ldaf, lapack_int ipiv,
                           @Const DoublePointer b, @ByVal lapack_int ldb, DoublePointer x,
                           @ByVal lapack_int ldx, DoublePointer rcond, DoublePointer ferr,
                           DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_dsysvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoubleBuffer a, @ByVal lapack_int lda,
                           DoubleBuffer af, @ByVal lapack_int ldaf, lapack_int ipiv,
                           @Const DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x,
                           @ByVal lapack_int ldx, DoubleBuffer rcond, DoubleBuffer ferr,
                           DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_dsysvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const double[] a, @ByVal lapack_int lda,
                           double[] af, @ByVal lapack_int ldaf, lapack_int ipiv,
                           @Const double[] b, @ByVal lapack_int ldb, double[] x,
                           @ByVal lapack_int ldx, double[] rcond, double[] ferr,
                           double[] berr );

public static native @ByVal lapack_int LAPACKE_dsysvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoublePointer a,
                                @ByVal lapack_int lda, DoublePointer af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Const DoublePointer b,
                                @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                                DoublePointer rcond, DoublePointer ferr, DoublePointer berr,
                                DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dsysvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoubleBuffer a,
                                @ByVal lapack_int lda, DoubleBuffer af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Const DoubleBuffer b,
                                @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                                DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr,
                                DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dsysvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const double[] a,
                                @ByVal lapack_int lda, double[] af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Const double[] b,
                                @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                                double[] rcond, double[] ferr, double[] berr,
                                double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dsysvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, DoublePointer a,
                            @ByVal lapack_int lda, DoublePointer af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") BytePointer equed, DoublePointer s, DoublePointer b,
                            @ByVal lapack_int ldb, DoublePointer x, @ByVal lapack_int ldx,
                            DoublePointer rcond, DoublePointer rpvgrw, DoublePointer berr,
                            @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                            DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                            DoublePointer params );
public static native @ByVal lapack_int LAPACKE_dsysvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, DoubleBuffer a,
                            @ByVal lapack_int lda, DoubleBuffer af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") ByteBuffer equed, DoubleBuffer s, DoubleBuffer b,
                            @ByVal lapack_int ldb, DoubleBuffer x, @ByVal lapack_int ldx,
                            DoubleBuffer rcond, DoubleBuffer rpvgrw, DoubleBuffer berr,
                            @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                            DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                            DoubleBuffer params );
public static native @ByVal lapack_int LAPACKE_dsysvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, double[] a,
                            @ByVal lapack_int lda, double[] af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") byte[] equed, double[] s, double[] b,
                            @ByVal lapack_int ldb, double[] x, @ByVal lapack_int ldx,
                            double[] rcond, double[] rpvgrw, double[] berr,
                            @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                            double[] err_bnds_comp, @ByVal lapack_int nparams,
                            double[] params );

public static native @ByVal lapack_int LAPACKE_dsysvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, DoublePointer a,
                                 @ByVal lapack_int lda, DoublePointer af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") BytePointer equed, DoublePointer s,
                                 DoublePointer b, @ByVal lapack_int ldb, DoublePointer x,
                                 @ByVal lapack_int ldx, DoublePointer rcond, DoublePointer rpvgrw,
                                 DoublePointer berr, @ByVal lapack_int n_err_bnds,
                                 DoublePointer err_bnds_norm, DoublePointer err_bnds_comp,
                                 @ByVal lapack_int nparams, DoublePointer params,
                                 DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dsysvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, DoubleBuffer a,
                                 @ByVal lapack_int lda, DoubleBuffer af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") ByteBuffer equed, DoubleBuffer s,
                                 DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer x,
                                 @ByVal lapack_int ldx, DoubleBuffer rcond, DoubleBuffer rpvgrw,
                                 DoubleBuffer berr, @ByVal lapack_int n_err_bnds,
                                 DoubleBuffer err_bnds_norm, DoubleBuffer err_bnds_comp,
                                 @ByVal lapack_int nparams, DoubleBuffer params,
                                 DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dsysvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, double[] a,
                                 @ByVal lapack_int lda, double[] af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") byte[] equed, double[] s,
                                 double[] b, @ByVal lapack_int ldb, double[] x,
                                 @ByVal lapack_int ldx, double[] rcond, double[] rpvgrw,
                                 double[] berr, @ByVal lapack_int n_err_bnds,
                                 double[] err_bnds_norm, double[] err_bnds_comp,
                                 @ByVal lapack_int nparams, double[] params,
                                 double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dsyswapr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             DoublePointer a, @ByVal lapack_int lda, @ByVal lapack_int i1, @ByVal lapack_int i2 );
public static native @ByVal lapack_int LAPACKE_dsyswapr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             DoubleBuffer a, @ByVal lapack_int lda, @ByVal lapack_int i1, @ByVal lapack_int i2 );
public static native @ByVal lapack_int LAPACKE_dsyswapr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             double[] a, @ByVal lapack_int lda, @ByVal lapack_int i1, @ByVal lapack_int i2 );

public static native @ByVal lapack_int LAPACKE_dsyswapr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  DoublePointer a, @ByVal lapack_int lda,
                                  @ByVal lapack_int i1, @ByVal lapack_int i2 );
public static native @ByVal lapack_int LAPACKE_dsyswapr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  DoubleBuffer a, @ByVal lapack_int lda,
                                  @ByVal lapack_int i1, @ByVal lapack_int i2 );
public static native @ByVal lapack_int LAPACKE_dsyswapr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  double[] a, @ByVal lapack_int lda,
                                  @ByVal lapack_int i1, @ByVal lapack_int i2 );

public static native @ByVal lapack_int LAPACKE_dsytrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda, DoublePointer d, DoublePointer e, DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dsytrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda, DoubleBuffer d, DoubleBuffer e, DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dsytrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda, double[] d, double[] e, double[] tau );

public static native @ByVal lapack_int LAPACKE_dsytrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, DoublePointer d, DoublePointer e,
                                DoublePointer tau, DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsytrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer d, DoubleBuffer e,
                                DoubleBuffer tau, DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsytrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, double[] d, double[] e,
                                double[] tau, double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dsytrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dsytrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dsytrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_dsytrf_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dsytrf_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dsytrf_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_dsytrf_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, lapack_int ipiv,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsytrf_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, lapack_int ipiv,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsytrf_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, lapack_int ipiv,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dsytrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, lapack_int ipiv,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsytrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, lapack_int ipiv,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsytrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, lapack_int ipiv,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dsytri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dsytri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dsytri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_dsytri2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            DoublePointer a, @ByVal lapack_int lda, @Const lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dsytri2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            DoubleBuffer a, @ByVal lapack_int lda, @Const lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dsytri2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            double[] a, @ByVal lapack_int lda, @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_dsytri2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 DoublePointer a, @ByVal lapack_int lda,
                                 @Const lapack_int ipiv,
                                 DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsytri2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 DoubleBuffer a, @ByVal lapack_int lda,
                                 @Const lapack_int ipiv,
                                 DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsytri2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 double[] a, @ByVal lapack_int lda,
                                 @Const lapack_int ipiv,
                                 double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dsytri2x( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             DoublePointer a, @ByVal lapack_int lda, @Const lapack_int ipiv,
                             @ByVal lapack_int nb );
public static native @ByVal lapack_int LAPACKE_dsytri2x( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             DoubleBuffer a, @ByVal lapack_int lda, @Const lapack_int ipiv,
                             @ByVal lapack_int nb );
public static native @ByVal lapack_int LAPACKE_dsytri2x( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             double[] a, @ByVal lapack_int lda, @Const lapack_int ipiv,
                             @ByVal lapack_int nb );

public static native @ByVal lapack_int LAPACKE_dsytri2x_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  DoublePointer a, @ByVal lapack_int lda,
                                  @Const lapack_int ipiv, DoublePointer work,
                                  @ByVal lapack_int nb );
public static native @ByVal lapack_int LAPACKE_dsytri2x_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  DoubleBuffer a, @ByVal lapack_int lda,
                                  @Const lapack_int ipiv, DoubleBuffer work,
                                  @ByVal lapack_int nb );
public static native @ByVal lapack_int LAPACKE_dsytri2x_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  double[] a, @ByVal lapack_int lda,
                                  @Const lapack_int ipiv, double[] work,
                                  @ByVal lapack_int nb );

public static native @ByVal lapack_int LAPACKE_dsytri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dsytri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dsytri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, double[] work );

public static native @ByVal lapack_int LAPACKE_dsytrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoublePointer a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsytrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoubleBuffer a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsytrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const double[] a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dsytrs2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @ByVal lapack_int nrhs, @Const DoublePointer a, @ByVal lapack_int lda,
                            @Const lapack_int ipiv, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsytrs2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @ByVal lapack_int nrhs, @Const DoubleBuffer a, @ByVal lapack_int lda,
                            @Const lapack_int ipiv, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsytrs2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @ByVal lapack_int nrhs, @Const double[] a, @ByVal lapack_int lda,
                            @Const lapack_int ipiv, double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dsytrs2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @ByVal lapack_int nrhs, @Const DoublePointer a,
                                 @ByVal lapack_int lda, @Const lapack_int ipiv,
                                 DoublePointer b, @ByVal lapack_int ldb, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dsytrs2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @ByVal lapack_int nrhs, @Const DoubleBuffer a,
                                 @ByVal lapack_int lda, @Const lapack_int ipiv,
                                 DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dsytrs2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @ByVal lapack_int nrhs, @Const double[] a,
                                 @ByVal lapack_int lda, @Const lapack_int ipiv,
                                 double[] b, @ByVal lapack_int ldb, double[] work );

public static native @ByVal lapack_int LAPACKE_dsytrs_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoublePointer a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsytrs_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoubleBuffer a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsytrs_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const double[] a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dsytrs_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoublePointer a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsytrs_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoubleBuffer a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsytrs_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const double[] a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dsytrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoublePointer a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsytrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoubleBuffer a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsytrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const double[] a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dtbcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @Const DoublePointer ab,
                           @ByVal lapack_int ldab, DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_dtbcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @Const DoubleBuffer ab,
                           @ByVal lapack_int ldab, DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_dtbcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @Const double[] ab,
                           @ByVal lapack_int ldab, double[] rcond );

public static native @ByVal lapack_int LAPACKE_dtbcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @Const DoublePointer ab, @ByVal lapack_int ldab,
                                DoublePointer rcond, DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dtbcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @Const DoubleBuffer ab, @ByVal lapack_int ldab,
                                DoubleBuffer rcond, DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dtbcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @Const double[] ab, @ByVal lapack_int ldab,
                                double[] rcond, double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dtbrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const DoublePointer ab, @ByVal lapack_int ldab, @Const DoublePointer b,
                           @ByVal lapack_int ldb, @Const DoublePointer x, @ByVal lapack_int ldx,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_dtbrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const DoubleBuffer ab, @ByVal lapack_int ldab, @Const DoubleBuffer b,
                           @ByVal lapack_int ldb, @Const DoubleBuffer x, @ByVal lapack_int ldx,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_dtbrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const double[] ab, @ByVal lapack_int ldab, @Const double[] b,
                           @ByVal lapack_int ldb, @Const double[] x, @ByVal lapack_int ldx,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_dtbrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @ByVal lapack_int nrhs, @Const DoublePointer ab,
                                @ByVal lapack_int ldab, @Const DoublePointer b,
                                @ByVal lapack_int ldb, @Const DoublePointer x, @ByVal lapack_int ldx,
                                DoublePointer ferr, DoublePointer berr, DoublePointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dtbrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @ByVal lapack_int nrhs, @Const DoubleBuffer ab,
                                @ByVal lapack_int ldab, @Const DoubleBuffer b,
                                @ByVal lapack_int ldb, @Const DoubleBuffer x, @ByVal lapack_int ldx,
                                DoubleBuffer ferr, DoubleBuffer berr, DoubleBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dtbrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @ByVal lapack_int nrhs, @Const double[] ab,
                                @ByVal lapack_int ldab, @Const double[] b,
                                @ByVal lapack_int ldb, @Const double[] x, @ByVal lapack_int ldx,
                                double[] ferr, double[] berr, double[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dtbtrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const DoublePointer ab, @ByVal lapack_int ldab, DoublePointer b,
                           @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dtbtrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const DoubleBuffer ab, @ByVal lapack_int ldab, DoubleBuffer b,
                           @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dtbtrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const double[] ab, @ByVal lapack_int ldab, double[] b,
                           @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dtbtrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @ByVal lapack_int nrhs, @Const DoublePointer ab,
                                @ByVal lapack_int ldab, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dtbtrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @ByVal lapack_int nrhs, @Const DoubleBuffer ab,
                                @ByVal lapack_int ldab, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dtbtrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @ByVal lapack_int nrhs, @Const double[] ab,
                                @ByVal lapack_int ldab, double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dtfsm( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte side, @Cast("char") byte uplo,
                          @Cast("char") byte trans, @Cast("char") byte diag, @ByVal lapack_int m, @ByVal lapack_int n,
                          double alpha, @Const DoublePointer a, DoublePointer b,
                          @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dtfsm( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte side, @Cast("char") byte uplo,
                          @Cast("char") byte trans, @Cast("char") byte diag, @ByVal lapack_int m, @ByVal lapack_int n,
                          double alpha, @Const DoubleBuffer a, DoubleBuffer b,
                          @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dtfsm( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte side, @Cast("char") byte uplo,
                          @Cast("char") byte trans, @Cast("char") byte diag, @ByVal lapack_int m, @ByVal lapack_int n,
                          double alpha, @Const double[] a, double[] b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dtfsm_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte side,
                               @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag, @ByVal lapack_int m,
                               @ByVal lapack_int n, double alpha, @Const DoublePointer a,
                               DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dtfsm_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte side,
                               @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag, @ByVal lapack_int m,
                               @ByVal lapack_int n, double alpha, @Const DoubleBuffer a,
                               DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dtfsm_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte side,
                               @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag, @ByVal lapack_int m,
                               @ByVal lapack_int n, double alpha, @Const double[] a,
                               double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dtftri( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, DoublePointer a );
public static native @ByVal lapack_int LAPACKE_dtftri( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, DoubleBuffer a );
public static native @ByVal lapack_int LAPACKE_dtftri( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, double[] a );

public static native @ByVal lapack_int LAPACKE_dtftri_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, DoublePointer a );
public static native @ByVal lapack_int LAPACKE_dtftri_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, DoubleBuffer a );
public static native @ByVal lapack_int LAPACKE_dtftri_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, double[] a );

public static native @ByVal lapack_int LAPACKE_dtfttp( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const DoublePointer arf, DoublePointer ap );
public static native @ByVal lapack_int LAPACKE_dtfttp( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const DoubleBuffer arf, DoubleBuffer ap );
public static native @ByVal lapack_int LAPACKE_dtfttp( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const double[] arf, double[] ap );

public static native @ByVal lapack_int LAPACKE_dtfttp_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const DoublePointer arf, DoublePointer ap );
public static native @ByVal lapack_int LAPACKE_dtfttp_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const DoubleBuffer arf, DoubleBuffer ap );
public static native @ByVal lapack_int LAPACKE_dtfttp_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const double[] arf, double[] ap );

public static native @ByVal lapack_int LAPACKE_dtfttr( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const DoublePointer arf, DoublePointer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dtfttr( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const DoubleBuffer arf, DoubleBuffer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dtfttr( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const double[] arf, double[] a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_dtfttr_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const DoublePointer arf, DoublePointer a,
                                @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dtfttr_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const DoubleBuffer arf, DoubleBuffer a,
                                @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dtfttr_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const double[] arf, double[] a,
                                @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_dtgevc( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const DoublePointer s, @ByVal lapack_int lds, @Const DoublePointer p,
                           @ByVal lapack_int ldp, DoublePointer vl, @ByVal lapack_int ldvl,
                           DoublePointer vr, @ByVal lapack_int ldvr, @ByVal lapack_int mm,
                           lapack_int m );
public static native @ByVal lapack_int LAPACKE_dtgevc( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const DoubleBuffer s, @ByVal lapack_int lds, @Const DoubleBuffer p,
                           @ByVal lapack_int ldp, DoubleBuffer vl, @ByVal lapack_int ldvl,
                           DoubleBuffer vr, @ByVal lapack_int ldvr, @ByVal lapack_int mm,
                           lapack_int m );
public static native @ByVal lapack_int LAPACKE_dtgevc( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const double[] s, @ByVal lapack_int lds, @Const double[] p,
                           @ByVal lapack_int ldp, double[] vl, @ByVal lapack_int ldvl,
                           double[] vr, @ByVal lapack_int ldvr, @ByVal lapack_int mm,
                           lapack_int m );

public static native @ByVal lapack_int LAPACKE_dtgevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const DoublePointer s, @ByVal lapack_int lds,
                                @Const DoublePointer p, @ByVal lapack_int ldp, DoublePointer vl,
                                @ByVal lapack_int ldvl, DoublePointer vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dtgevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const DoubleBuffer s, @ByVal lapack_int lds,
                                @Const DoubleBuffer p, @ByVal lapack_int ldp, DoubleBuffer vl,
                                @ByVal lapack_int ldvl, DoubleBuffer vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dtgevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const double[] s, @ByVal lapack_int lds,
                                @Const double[] p, @ByVal lapack_int ldp, double[] vl,
                                @ByVal lapack_int ldvl, double[] vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m, double[] work );

public static native @ByVal lapack_int LAPACKE_dtgexc( int matrix_layout, @ByVal lapack_logical wantq,
                           @ByVal lapack_logical wantz, @ByVal lapack_int n, DoublePointer a,
                           @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb, DoublePointer q,
                           @ByVal lapack_int ldq, DoublePointer z, @ByVal lapack_int ldz,
                           lapack_int ifst, lapack_int ilst );
public static native @ByVal lapack_int LAPACKE_dtgexc( int matrix_layout, @ByVal lapack_logical wantq,
                           @ByVal lapack_logical wantz, @ByVal lapack_int n, DoubleBuffer a,
                           @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer q,
                           @ByVal lapack_int ldq, DoubleBuffer z, @ByVal lapack_int ldz,
                           lapack_int ifst, lapack_int ilst );
public static native @ByVal lapack_int LAPACKE_dtgexc( int matrix_layout, @ByVal lapack_logical wantq,
                           @ByVal lapack_logical wantz, @ByVal lapack_int n, double[] a,
                           @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb, double[] q,
                           @ByVal lapack_int ldq, double[] z, @ByVal lapack_int ldz,
                           lapack_int ifst, lapack_int ilst );

public static native @ByVal lapack_int LAPACKE_dtgexc_work( int matrix_layout, @ByVal lapack_logical wantq,
                                @ByVal lapack_logical wantz, @ByVal lapack_int n, DoublePointer a,
                                @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb,
                                DoublePointer q, @ByVal lapack_int ldq, DoublePointer z,
                                @ByVal lapack_int ldz, lapack_int ifst,
                                lapack_int ilst, DoublePointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dtgexc_work( int matrix_layout, @ByVal lapack_logical wantq,
                                @ByVal lapack_logical wantz, @ByVal lapack_int n, DoubleBuffer a,
                                @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb,
                                DoubleBuffer q, @ByVal lapack_int ldq, DoubleBuffer z,
                                @ByVal lapack_int ldz, lapack_int ifst,
                                lapack_int ilst, DoubleBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dtgexc_work( int matrix_layout, @ByVal lapack_logical wantq,
                                @ByVal lapack_logical wantz, @ByVal lapack_int n, double[] a,
                                @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb,
                                double[] q, @ByVal lapack_int ldq, double[] z,
                                @ByVal lapack_int ldz, lapack_int ifst,
                                lapack_int ilst, double[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_dtgsen( int matrix_layout, @ByVal lapack_int ijob,
                           @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           DoublePointer a, @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb,
                           DoublePointer alphar, DoublePointer alphai, DoublePointer beta,
                           DoublePointer q, @ByVal lapack_int ldq, DoublePointer z, @ByVal lapack_int ldz,
                           lapack_int m, DoublePointer pl, DoublePointer pr, DoublePointer dif );
public static native @ByVal lapack_int LAPACKE_dtgsen( int matrix_layout, @ByVal lapack_int ijob,
                           @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb,
                           DoubleBuffer alphar, DoubleBuffer alphai, DoubleBuffer beta,
                           DoubleBuffer q, @ByVal lapack_int ldq, DoubleBuffer z, @ByVal lapack_int ldz,
                           lapack_int m, DoubleBuffer pl, DoubleBuffer pr, DoubleBuffer dif );
public static native @ByVal lapack_int LAPACKE_dtgsen( int matrix_layout, @ByVal lapack_int ijob,
                           @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           double[] a, @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb,
                           double[] alphar, double[] alphai, double[] beta,
                           double[] q, @ByVal lapack_int ldq, double[] z, @ByVal lapack_int ldz,
                           lapack_int m, double[] pl, double[] pr, double[] dif );

public static native @ByVal lapack_int LAPACKE_dtgsen_work( int matrix_layout, @ByVal lapack_int ijob,
                                @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, DoublePointer b,
                                @ByVal lapack_int ldb, DoublePointer alphar, DoublePointer alphai,
                                DoublePointer beta, DoublePointer q, @ByVal lapack_int ldq,
                                DoublePointer z, @ByVal lapack_int ldz, lapack_int m,
                                DoublePointer pl, DoublePointer pr, DoublePointer dif,
                                DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dtgsen_work( int matrix_layout, @ByVal lapack_int ijob,
                                @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer b,
                                @ByVal lapack_int ldb, DoubleBuffer alphar, DoubleBuffer alphai,
                                DoubleBuffer beta, DoubleBuffer q, @ByVal lapack_int ldq,
                                DoubleBuffer z, @ByVal lapack_int ldz, lapack_int m,
                                DoubleBuffer pl, DoubleBuffer pr, DoubleBuffer dif,
                                DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dtgsen_work( int matrix_layout, @ByVal lapack_int ijob,
                                @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, double[] b,
                                @ByVal lapack_int ldb, double[] alphar, double[] alphai,
                                double[] beta, double[] q, @ByVal lapack_int ldq,
                                double[] z, @ByVal lapack_int ldz, lapack_int m,
                                double[] pl, double[] pr, double[] dif,
                                double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_dtgsja( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n,
                           @ByVal lapack_int k, @ByVal lapack_int l, DoublePointer a,
                           @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb,
                           double tola, double tolb, DoublePointer alpha,
                           DoublePointer beta, DoublePointer u, @ByVal lapack_int ldu, DoublePointer v,
                           @ByVal lapack_int ldv, DoublePointer q, @ByVal lapack_int ldq,
                           lapack_int ncycle );
public static native @ByVal lapack_int LAPACKE_dtgsja( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n,
                           @ByVal lapack_int k, @ByVal lapack_int l, DoubleBuffer a,
                           @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb,
                           double tola, double tolb, DoubleBuffer alpha,
                           DoubleBuffer beta, DoubleBuffer u, @ByVal lapack_int ldu, DoubleBuffer v,
                           @ByVal lapack_int ldv, DoubleBuffer q, @ByVal lapack_int ldq,
                           lapack_int ncycle );
public static native @ByVal lapack_int LAPACKE_dtgsja( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n,
                           @ByVal lapack_int k, @ByVal lapack_int l, double[] a,
                           @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb,
                           double tola, double tolb, double[] alpha,
                           double[] beta, double[] u, @ByVal lapack_int ldu, double[] v,
                           @ByVal lapack_int ldv, double[] q, @ByVal lapack_int ldq,
                           lapack_int ncycle );

public static native @ByVal lapack_int LAPACKE_dtgsja_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, @ByVal lapack_int k, @ByVal lapack_int l,
                                DoublePointer a, @ByVal lapack_int lda, DoublePointer b,
                                @ByVal lapack_int ldb, double tola, double tolb,
                                DoublePointer alpha, DoublePointer beta, DoublePointer u,
                                @ByVal lapack_int ldu, DoublePointer v, @ByVal lapack_int ldv,
                                DoublePointer q, @ByVal lapack_int ldq, DoublePointer work,
                                lapack_int ncycle );
public static native @ByVal lapack_int LAPACKE_dtgsja_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, @ByVal lapack_int k, @ByVal lapack_int l,
                                DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer b,
                                @ByVal lapack_int ldb, double tola, double tolb,
                                DoubleBuffer alpha, DoubleBuffer beta, DoubleBuffer u,
                                @ByVal lapack_int ldu, DoubleBuffer v, @ByVal lapack_int ldv,
                                DoubleBuffer q, @ByVal lapack_int ldq, DoubleBuffer work,
                                lapack_int ncycle );
public static native @ByVal lapack_int LAPACKE_dtgsja_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, @ByVal lapack_int k, @ByVal lapack_int l,
                                double[] a, @ByVal lapack_int lda, double[] b,
                                @ByVal lapack_int ldb, double tola, double tolb,
                                double[] alpha, double[] beta, double[] u,
                                @ByVal lapack_int ldu, double[] v, @ByVal lapack_int ldv,
                                double[] q, @ByVal lapack_int ldq, double[] work,
                                lapack_int ncycle );

public static native @ByVal lapack_int LAPACKE_dtgsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const DoublePointer a, @ByVal lapack_int lda, @Const DoublePointer b,
                           @ByVal lapack_int ldb, @Const DoublePointer vl, @ByVal lapack_int ldvl,
                           @Const DoublePointer vr, @ByVal lapack_int ldvr, DoublePointer s,
                           DoublePointer dif, @ByVal lapack_int mm, lapack_int m );
public static native @ByVal lapack_int LAPACKE_dtgsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const DoubleBuffer a, @ByVal lapack_int lda, @Const DoubleBuffer b,
                           @ByVal lapack_int ldb, @Const DoubleBuffer vl, @ByVal lapack_int ldvl,
                           @Const DoubleBuffer vr, @ByVal lapack_int ldvr, DoubleBuffer s,
                           DoubleBuffer dif, @ByVal lapack_int mm, lapack_int m );
public static native @ByVal lapack_int LAPACKE_dtgsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const double[] a, @ByVal lapack_int lda, @Const double[] b,
                           @ByVal lapack_int ldb, @Const double[] vl, @ByVal lapack_int ldvl,
                           @Const double[] vr, @ByVal lapack_int ldvr, double[] s,
                           double[] dif, @ByVal lapack_int mm, lapack_int m );

public static native @ByVal lapack_int LAPACKE_dtgsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const DoublePointer a, @ByVal lapack_int lda,
                                @Const DoublePointer b, @ByVal lapack_int ldb,
                                @Const DoublePointer vl, @ByVal lapack_int ldvl,
                                @Const DoublePointer vr, @ByVal lapack_int ldvr, DoublePointer s,
                                DoublePointer dif, @ByVal lapack_int mm, lapack_int m,
                                DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dtgsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const DoubleBuffer a, @ByVal lapack_int lda,
                                @Const DoubleBuffer b, @ByVal lapack_int ldb,
                                @Const DoubleBuffer vl, @ByVal lapack_int ldvl,
                                @Const DoubleBuffer vr, @ByVal lapack_int ldvr, DoubleBuffer s,
                                DoubleBuffer dif, @ByVal lapack_int mm, lapack_int m,
                                DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dtgsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const double[] a, @ByVal lapack_int lda,
                                @Const double[] b, @ByVal lapack_int ldb,
                                @Const double[] vl, @ByVal lapack_int ldvl,
                                @Const double[] vr, @ByVal lapack_int ldvr, double[] s,
                                double[] dif, @ByVal lapack_int mm, lapack_int m,
                                double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dtgsyl( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const DoublePointer a,
                           @ByVal lapack_int lda, @Const DoublePointer b, @ByVal lapack_int ldb,
                           DoublePointer c, @ByVal lapack_int ldc, @Const DoublePointer d,
                           @ByVal lapack_int ldd, @Const DoublePointer e, @ByVal lapack_int lde,
                           DoublePointer f, @ByVal lapack_int ldf, DoublePointer scale,
                           DoublePointer dif );
public static native @ByVal lapack_int LAPACKE_dtgsyl( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const DoubleBuffer a,
                           @ByVal lapack_int lda, @Const DoubleBuffer b, @ByVal lapack_int ldb,
                           DoubleBuffer c, @ByVal lapack_int ldc, @Const DoubleBuffer d,
                           @ByVal lapack_int ldd, @Const DoubleBuffer e, @ByVal lapack_int lde,
                           DoubleBuffer f, @ByVal lapack_int ldf, DoubleBuffer scale,
                           DoubleBuffer dif );
public static native @ByVal lapack_int LAPACKE_dtgsyl( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const double[] a,
                           @ByVal lapack_int lda, @Const double[] b, @ByVal lapack_int ldb,
                           double[] c, @ByVal lapack_int ldc, @Const double[] d,
                           @ByVal lapack_int ldd, @Const double[] e, @ByVal lapack_int lde,
                           double[] f, @ByVal lapack_int ldf, double[] scale,
                           double[] dif );

public static native @ByVal lapack_int LAPACKE_dtgsyl_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                                @ByVal lapack_int m, @ByVal lapack_int n, @Const DoublePointer a,
                                @ByVal lapack_int lda, @Const DoublePointer b, @ByVal lapack_int ldb,
                                DoublePointer c, @ByVal lapack_int ldc, @Const DoublePointer d,
                                @ByVal lapack_int ldd, @Const DoublePointer e, @ByVal lapack_int lde,
                                DoublePointer f, @ByVal lapack_int ldf, DoublePointer scale,
                                DoublePointer dif, DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dtgsyl_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                                @ByVal lapack_int m, @ByVal lapack_int n, @Const DoubleBuffer a,
                                @ByVal lapack_int lda, @Const DoubleBuffer b, @ByVal lapack_int ldb,
                                DoubleBuffer c, @ByVal lapack_int ldc, @Const DoubleBuffer d,
                                @ByVal lapack_int ldd, @Const DoubleBuffer e, @ByVal lapack_int lde,
                                DoubleBuffer f, @ByVal lapack_int ldf, DoubleBuffer scale,
                                DoubleBuffer dif, DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dtgsyl_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                                @ByVal lapack_int m, @ByVal lapack_int n, @Const double[] a,
                                @ByVal lapack_int lda, @Const double[] b, @ByVal lapack_int ldb,
                                double[] c, @ByVal lapack_int ldc, @Const double[] d,
                                @ByVal lapack_int ldd, @Const double[] e, @ByVal lapack_int lde,
                                double[] f, @ByVal lapack_int ldf, double[] scale,
                                double[] dif, double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dtpcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const DoublePointer ap, DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_dtpcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const DoubleBuffer ap, DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_dtpcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const double[] ap, double[] rcond );

public static native @ByVal lapack_int LAPACKE_dtpcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @Const DoublePointer ap,
                                DoublePointer rcond, DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dtpcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @Const DoubleBuffer ap,
                                DoubleBuffer rcond, DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dtpcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @Const double[] ap,
                                double[] rcond, double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dtpmqrt( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                            @ByVal lapack_int l, @ByVal lapack_int nb, @Const DoublePointer v,
                            @ByVal lapack_int ldv, @Const DoublePointer t, @ByVal lapack_int ldt,
                            DoublePointer a, @ByVal lapack_int lda, DoublePointer b,
                            @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dtpmqrt( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                            @ByVal lapack_int l, @ByVal lapack_int nb, @Const DoubleBuffer v,
                            @ByVal lapack_int ldv, @Const DoubleBuffer t, @ByVal lapack_int ldt,
                            DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer b,
                            @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dtpmqrt( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                            @ByVal lapack_int l, @ByVal lapack_int nb, @Const double[] v,
                            @ByVal lapack_int ldv, @Const double[] t, @ByVal lapack_int ldt,
                            double[] a, @ByVal lapack_int lda, double[] b,
                            @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dtpmqrt_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                 @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                 @ByVal lapack_int l, @ByVal lapack_int nb, @Const DoublePointer v,
                                 @ByVal lapack_int ldv, @Const DoublePointer t,
                                 @ByVal lapack_int ldt, DoublePointer a, @ByVal lapack_int lda,
                                 DoublePointer b, @ByVal lapack_int ldb, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dtpmqrt_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                 @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                 @ByVal lapack_int l, @ByVal lapack_int nb, @Const DoubleBuffer v,
                                 @ByVal lapack_int ldv, @Const DoubleBuffer t,
                                 @ByVal lapack_int ldt, DoubleBuffer a, @ByVal lapack_int lda,
                                 DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dtpmqrt_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                 @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                 @ByVal lapack_int l, @ByVal lapack_int nb, @Const double[] v,
                                 @ByVal lapack_int ldv, @Const double[] t,
                                 @ByVal lapack_int ldt, double[] a, @ByVal lapack_int lda,
                                 double[] b, @ByVal lapack_int ldb, double[] work );

public static native @ByVal lapack_int LAPACKE_dtpqrt( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int l, @ByVal lapack_int nb, DoublePointer a,
                           @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb, DoublePointer t,
                           @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_dtpqrt( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int l, @ByVal lapack_int nb, DoubleBuffer a,
                           @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer t,
                           @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_dtpqrt( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int l, @ByVal lapack_int nb, double[] a,
                           @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb, double[] t,
                           @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_dtpqrt2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @ByVal lapack_int l, DoublePointer a, @ByVal lapack_int lda, DoublePointer b,
                            @ByVal lapack_int ldb, DoublePointer t, @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_dtpqrt2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @ByVal lapack_int l, DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer b,
                            @ByVal lapack_int ldb, DoubleBuffer t, @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_dtpqrt2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @ByVal lapack_int l, double[] a, @ByVal lapack_int lda, double[] b,
                            @ByVal lapack_int ldb, double[] t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_dtpqrt2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int l, DoublePointer a, @ByVal lapack_int lda, DoublePointer b,
                                 @ByVal lapack_int ldb, DoublePointer t, @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_dtpqrt2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int l, DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer b,
                                 @ByVal lapack_int ldb, DoubleBuffer t, @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_dtpqrt2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int l, double[] a, @ByVal lapack_int lda, double[] b,
                                 @ByVal lapack_int ldb, double[] t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_dtpqrt_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int l, @ByVal lapack_int nb, DoublePointer a,
                                @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb,
                                DoublePointer t, @ByVal lapack_int ldt, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dtpqrt_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int l, @ByVal lapack_int nb, DoubleBuffer a,
                                @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb,
                                DoubleBuffer t, @ByVal lapack_int ldt, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dtpqrt_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int l, @ByVal lapack_int nb, double[] a,
                                @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb,
                                double[] t, @ByVal lapack_int ldt, double[] work );

public static native @ByVal lapack_int LAPACKE_dtprfb( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans, @Cast("char") byte direct,
                           @Cast("char") byte storev, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, @ByVal lapack_int l, @Const DoublePointer v,
                           @ByVal lapack_int ldv, @Const DoublePointer t, @ByVal lapack_int ldt,
                           DoublePointer a, @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dtprfb( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans, @Cast("char") byte direct,
                           @Cast("char") byte storev, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, @ByVal lapack_int l, @Const DoubleBuffer v,
                           @ByVal lapack_int ldv, @Const DoubleBuffer t, @ByVal lapack_int ldt,
                           DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dtprfb( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans, @Cast("char") byte direct,
                           @Cast("char") byte storev, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, @ByVal lapack_int l, @Const double[] v,
                           @ByVal lapack_int ldv, @Const double[] t, @ByVal lapack_int ldt,
                           double[] a, @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dtprfb_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @Cast("char") byte direct, @Cast("char") byte storev, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k, @ByVal lapack_int l,
                                @Const DoublePointer v, @ByVal lapack_int ldv,
                                @Const DoublePointer t, @ByVal lapack_int ldt, DoublePointer a,
                                @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb,
                                DoublePointer work, @ByVal lapack_int ldwork );
public static native @ByVal lapack_int LAPACKE_dtprfb_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @Cast("char") byte direct, @Cast("char") byte storev, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k, @ByVal lapack_int l,
                                @Const DoubleBuffer v, @ByVal lapack_int ldv,
                                @Const DoubleBuffer t, @ByVal lapack_int ldt, DoubleBuffer a,
                                @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb,
                                DoubleBuffer work, @ByVal lapack_int ldwork );
public static native @ByVal lapack_int LAPACKE_dtprfb_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @Cast("char") byte direct, @Cast("char") byte storev, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k, @ByVal lapack_int l,
                                @Const double[] v, @ByVal lapack_int ldv,
                                @Const double[] t, @ByVal lapack_int ldt, double[] a,
                                @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb,
                                double[] work, @ByVal lapack_int ldwork );

public static native @ByVal lapack_int LAPACKE_dtprfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoublePointer ap,
                           @Const DoublePointer b, @ByVal lapack_int ldb, @Const DoublePointer x,
                           @ByVal lapack_int ldx, DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_dtprfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoubleBuffer ap,
                           @Const DoubleBuffer b, @ByVal lapack_int ldb, @Const DoubleBuffer x,
                           @ByVal lapack_int ldx, DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_dtprfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const double[] ap,
                           @Const double[] b, @ByVal lapack_int ldb, @Const double[] x,
                           @ByVal lapack_int ldx, double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_dtprfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const DoublePointer ap, @Const DoublePointer b,
                                @ByVal lapack_int ldb, @Const DoublePointer x, @ByVal lapack_int ldx,
                                DoublePointer ferr, DoublePointer berr, DoublePointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dtprfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const DoubleBuffer ap, @Const DoubleBuffer b,
                                @ByVal lapack_int ldb, @Const DoubleBuffer x, @ByVal lapack_int ldx,
                                DoubleBuffer ferr, DoubleBuffer berr, DoubleBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dtprfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const double[] ap, @Const double[] b,
                                @ByVal lapack_int ldb, @Const double[] x, @ByVal lapack_int ldx,
                                double[] ferr, double[] berr, double[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dtptri( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag, @ByVal lapack_int n,
                           DoublePointer ap );
public static native @ByVal lapack_int LAPACKE_dtptri( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag, @ByVal lapack_int n,
                           DoubleBuffer ap );
public static native @ByVal lapack_int LAPACKE_dtptri( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag, @ByVal lapack_int n,
                           double[] ap );

public static native @ByVal lapack_int LAPACKE_dtptri_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag,
                                @ByVal lapack_int n, DoublePointer ap );
public static native @ByVal lapack_int LAPACKE_dtptri_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag,
                                @ByVal lapack_int n, DoubleBuffer ap );
public static native @ByVal lapack_int LAPACKE_dtptri_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag,
                                @ByVal lapack_int n, double[] ap );

public static native @ByVal lapack_int LAPACKE_dtptrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoublePointer ap,
                           DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dtptrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoubleBuffer ap,
                           DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dtptrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const double[] ap,
                           double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dtptrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const DoublePointer ap, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dtptrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const DoubleBuffer ap, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dtptrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const double[] ap, double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dtpttf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const DoublePointer ap, DoublePointer arf );
public static native @ByVal lapack_int LAPACKE_dtpttf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const DoubleBuffer ap, DoubleBuffer arf );
public static native @ByVal lapack_int LAPACKE_dtpttf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const double[] ap, double[] arf );

public static native @ByVal lapack_int LAPACKE_dtpttf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const DoublePointer ap, DoublePointer arf );
public static native @ByVal lapack_int LAPACKE_dtpttf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const DoubleBuffer ap, DoubleBuffer arf );
public static native @ByVal lapack_int LAPACKE_dtpttf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const double[] ap, double[] arf );

public static native @ByVal lapack_int LAPACKE_dtpttr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const DoublePointer ap, DoublePointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dtpttr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const DoubleBuffer ap, DoubleBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dtpttr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const double[] ap, double[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_dtpttr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const DoublePointer ap, DoublePointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dtpttr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const DoubleBuffer ap, DoubleBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dtpttr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const double[] ap, double[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_dtrcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const DoublePointer a, @ByVal lapack_int lda,
                           DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_dtrcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const DoubleBuffer a, @ByVal lapack_int lda,
                           DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_dtrcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const double[] a, @ByVal lapack_int lda,
                           double[] rcond );

public static native @ByVal lapack_int LAPACKE_dtrcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @Const DoublePointer a,
                                @ByVal lapack_int lda, DoublePointer rcond, DoublePointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dtrcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @Const DoubleBuffer a,
                                @ByVal lapack_int lda, DoubleBuffer rcond, DoubleBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dtrcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @Const double[] a,
                                @ByVal lapack_int lda, double[] rcond, double[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dtrevc( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                           lapack_logical select, @ByVal lapack_int n,
                           @Const DoublePointer t, @ByVal lapack_int ldt, DoublePointer vl,
                           @ByVal lapack_int ldvl, DoublePointer vr, @ByVal lapack_int ldvr,
                           @ByVal lapack_int mm, lapack_int m );
public static native @ByVal lapack_int LAPACKE_dtrevc( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                           lapack_logical select, @ByVal lapack_int n,
                           @Const DoubleBuffer t, @ByVal lapack_int ldt, DoubleBuffer vl,
                           @ByVal lapack_int ldvl, DoubleBuffer vr, @ByVal lapack_int ldvr,
                           @ByVal lapack_int mm, lapack_int m );
public static native @ByVal lapack_int LAPACKE_dtrevc( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                           lapack_logical select, @ByVal lapack_int n,
                           @Const double[] t, @ByVal lapack_int ldt, double[] vl,
                           @ByVal lapack_int ldvl, double[] vr, @ByVal lapack_int ldvr,
                           @ByVal lapack_int mm, lapack_int m );

public static native @ByVal lapack_int LAPACKE_dtrevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                lapack_logical select, @ByVal lapack_int n,
                                @Const DoublePointer t, @ByVal lapack_int ldt, DoublePointer vl,
                                @ByVal lapack_int ldvl, DoublePointer vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dtrevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                lapack_logical select, @ByVal lapack_int n,
                                @Const DoubleBuffer t, @ByVal lapack_int ldt, DoubleBuffer vl,
                                @ByVal lapack_int ldvl, DoubleBuffer vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dtrevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                lapack_logical select, @ByVal lapack_int n,
                                @Const double[] t, @ByVal lapack_int ldt, double[] vl,
                                @ByVal lapack_int ldvl, double[] vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m, double[] work );

public static native @ByVal lapack_int LAPACKE_dtrexc( int matrix_layout, @Cast("char") byte compq, @ByVal lapack_int n,
                           DoublePointer t, @ByVal lapack_int ldt, DoublePointer q, @ByVal lapack_int ldq,
                           lapack_int ifst, lapack_int ilst );
public static native @ByVal lapack_int LAPACKE_dtrexc( int matrix_layout, @Cast("char") byte compq, @ByVal lapack_int n,
                           DoubleBuffer t, @ByVal lapack_int ldt, DoubleBuffer q, @ByVal lapack_int ldq,
                           lapack_int ifst, lapack_int ilst );
public static native @ByVal lapack_int LAPACKE_dtrexc( int matrix_layout, @Cast("char") byte compq, @ByVal lapack_int n,
                           double[] t, @ByVal lapack_int ldt, double[] q, @ByVal lapack_int ldq,
                           lapack_int ifst, lapack_int ilst );

public static native @ByVal lapack_int LAPACKE_dtrexc_work( int matrix_layout, @Cast("char") byte compq, @ByVal lapack_int n,
                                DoublePointer t, @ByVal lapack_int ldt, DoublePointer q,
                                @ByVal lapack_int ldq, lapack_int ifst,
                                lapack_int ilst, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_dtrexc_work( int matrix_layout, @Cast("char") byte compq, @ByVal lapack_int n,
                                DoubleBuffer t, @ByVal lapack_int ldt, DoubleBuffer q,
                                @ByVal lapack_int ldq, lapack_int ifst,
                                lapack_int ilst, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_dtrexc_work( int matrix_layout, @Cast("char") byte compq, @ByVal lapack_int n,
                                double[] t, @ByVal lapack_int ldt, double[] q,
                                @ByVal lapack_int ldq, lapack_int ifst,
                                lapack_int ilst, double[] work );

public static native @ByVal lapack_int LAPACKE_dtrrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoublePointer a,
                           @ByVal lapack_int lda, @Const DoublePointer b, @ByVal lapack_int ldb,
                           @Const DoublePointer x, @ByVal lapack_int ldx, DoublePointer ferr,
                           DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_dtrrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoubleBuffer a,
                           @ByVal lapack_int lda, @Const DoubleBuffer b, @ByVal lapack_int ldb,
                           @Const DoubleBuffer x, @ByVal lapack_int ldx, DoubleBuffer ferr,
                           DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_dtrrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const double[] a,
                           @ByVal lapack_int lda, @Const double[] b, @ByVal lapack_int ldb,
                           @Const double[] x, @ByVal lapack_int ldx, double[] ferr,
                           double[] berr );

public static native @ByVal lapack_int LAPACKE_dtrrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const DoublePointer a, @ByVal lapack_int lda,
                                @Const DoublePointer b, @ByVal lapack_int ldb,
                                @Const DoublePointer x, @ByVal lapack_int ldx, DoublePointer ferr,
                                DoublePointer berr, DoublePointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dtrrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const DoubleBuffer a, @ByVal lapack_int lda,
                                @Const DoubleBuffer b, @ByVal lapack_int ldb,
                                @Const DoubleBuffer x, @ByVal lapack_int ldx, DoubleBuffer ferr,
                                DoubleBuffer berr, DoubleBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dtrrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const double[] a, @ByVal lapack_int lda,
                                @Const double[] b, @ByVal lapack_int ldb,
                                @Const double[] x, @ByVal lapack_int ldx, double[] ferr,
                                double[] berr, double[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dtrsen( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           DoublePointer t, @ByVal lapack_int ldt, DoublePointer q, @ByVal lapack_int ldq,
                           DoublePointer wr, DoublePointer wi, lapack_int m, DoublePointer s,
                           DoublePointer sep );
public static native @ByVal lapack_int LAPACKE_dtrsen( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           DoubleBuffer t, @ByVal lapack_int ldt, DoubleBuffer q, @ByVal lapack_int ldq,
                           DoubleBuffer wr, DoubleBuffer wi, lapack_int m, DoubleBuffer s,
                           DoubleBuffer sep );
public static native @ByVal lapack_int LAPACKE_dtrsen( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           double[] t, @ByVal lapack_int ldt, double[] q, @ByVal lapack_int ldq,
                           double[] wr, double[] wi, lapack_int m, double[] s,
                           double[] sep );

public static native @ByVal lapack_int LAPACKE_dtrsen_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                DoublePointer t, @ByVal lapack_int ldt, DoublePointer q,
                                @ByVal lapack_int ldq, DoublePointer wr, DoublePointer wi,
                                lapack_int m, DoublePointer s, DoublePointer sep,
                                DoublePointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dtrsen_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                DoubleBuffer t, @ByVal lapack_int ldt, DoubleBuffer q,
                                @ByVal lapack_int ldq, DoubleBuffer wr, DoubleBuffer wi,
                                lapack_int m, DoubleBuffer s, DoubleBuffer sep,
                                DoubleBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_dtrsen_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                double[] t, @ByVal lapack_int ldt, double[] q,
                                @ByVal lapack_int ldq, double[] wr, double[] wi,
                                lapack_int m, double[] s, double[] sep,
                                double[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_dtrsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const DoublePointer t, @ByVal lapack_int ldt, @Const DoublePointer vl,
                           @ByVal lapack_int ldvl, @Const DoublePointer vr, @ByVal lapack_int ldvr,
                           DoublePointer s, DoublePointer sep, @ByVal lapack_int mm,
                           lapack_int m );
public static native @ByVal lapack_int LAPACKE_dtrsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const DoubleBuffer t, @ByVal lapack_int ldt, @Const DoubleBuffer vl,
                           @ByVal lapack_int ldvl, @Const DoubleBuffer vr, @ByVal lapack_int ldvr,
                           DoubleBuffer s, DoubleBuffer sep, @ByVal lapack_int mm,
                           lapack_int m );
public static native @ByVal lapack_int LAPACKE_dtrsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const double[] t, @ByVal lapack_int ldt, @Const double[] vl,
                           @ByVal lapack_int ldvl, @Const double[] vr, @ByVal lapack_int ldvr,
                           double[] s, double[] sep, @ByVal lapack_int mm,
                           lapack_int m );

public static native @ByVal lapack_int LAPACKE_dtrsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const DoublePointer t, @ByVal lapack_int ldt,
                                @Const DoublePointer vl, @ByVal lapack_int ldvl,
                                @Const DoublePointer vr, @ByVal lapack_int ldvr, DoublePointer s,
                                DoublePointer sep, @ByVal lapack_int mm, lapack_int m,
                                DoublePointer work, @ByVal lapack_int ldwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dtrsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const DoubleBuffer t, @ByVal lapack_int ldt,
                                @Const DoubleBuffer vl, @ByVal lapack_int ldvl,
                                @Const DoubleBuffer vr, @ByVal lapack_int ldvr, DoubleBuffer s,
                                DoubleBuffer sep, @ByVal lapack_int mm, lapack_int m,
                                DoubleBuffer work, @ByVal lapack_int ldwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_dtrsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const double[] t, @ByVal lapack_int ldt,
                                @Const double[] vl, @ByVal lapack_int ldvl,
                                @Const double[] vr, @ByVal lapack_int ldvr, double[] s,
                                double[] sep, @ByVal lapack_int mm, lapack_int m,
                                double[] work, @ByVal lapack_int ldwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_dtrsyl( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                           @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const DoublePointer a, @ByVal lapack_int lda, @Const DoublePointer b,
                           @ByVal lapack_int ldb, DoublePointer c, @ByVal lapack_int ldc,
                           DoublePointer scale );
public static native @ByVal lapack_int LAPACKE_dtrsyl( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                           @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const DoubleBuffer a, @ByVal lapack_int lda, @Const DoubleBuffer b,
                           @ByVal lapack_int ldb, DoubleBuffer c, @ByVal lapack_int ldc,
                           DoubleBuffer scale );
public static native @ByVal lapack_int LAPACKE_dtrsyl( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                           @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const double[] a, @ByVal lapack_int lda, @Const double[] b,
                           @ByVal lapack_int ldb, double[] c, @ByVal lapack_int ldc,
                           double[] scale );

public static native @ByVal lapack_int LAPACKE_dtrsyl_work( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                                @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const DoublePointer a, @ByVal lapack_int lda,
                                @Const DoublePointer b, @ByVal lapack_int ldb, DoublePointer c,
                                @ByVal lapack_int ldc, DoublePointer scale );
public static native @ByVal lapack_int LAPACKE_dtrsyl_work( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                                @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const DoubleBuffer a, @ByVal lapack_int lda,
                                @Const DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer c,
                                @ByVal lapack_int ldc, DoubleBuffer scale );
public static native @ByVal lapack_int LAPACKE_dtrsyl_work( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                                @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const double[] a, @ByVal lapack_int lda,
                                @Const double[] b, @ByVal lapack_int ldb, double[] c,
                                @ByVal lapack_int ldc, double[] scale );

public static native @ByVal lapack_int LAPACKE_dtrtri( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag, @ByVal lapack_int n,
                           DoublePointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dtrtri( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag, @ByVal lapack_int n,
                           DoubleBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dtrtri( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag, @ByVal lapack_int n,
                           double[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_dtrtri_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag,
                                @ByVal lapack_int n, DoublePointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dtrtri_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag,
                                @ByVal lapack_int n, DoubleBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_dtrtri_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag,
                                @ByVal lapack_int n, double[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_dtrtrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoublePointer a,
                           @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dtrtrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const DoubleBuffer a,
                           @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dtrtrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const double[] a,
                           @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dtrtrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const DoublePointer a, @ByVal lapack_int lda, DoublePointer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dtrtrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dtrtrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const double[] a, @ByVal lapack_int lda, double[] b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_dtrttf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const DoublePointer a, @ByVal lapack_int lda,
                           DoublePointer arf );
public static native @ByVal lapack_int LAPACKE_dtrttf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const DoubleBuffer a, @ByVal lapack_int lda,
                           DoubleBuffer arf );
public static native @ByVal lapack_int LAPACKE_dtrttf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const double[] a, @ByVal lapack_int lda,
                           double[] arf );

public static native @ByVal lapack_int LAPACKE_dtrttf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const DoublePointer a, @ByVal lapack_int lda,
                                DoublePointer arf );
public static native @ByVal lapack_int LAPACKE_dtrttf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const DoubleBuffer a, @ByVal lapack_int lda,
                                DoubleBuffer arf );
public static native @ByVal lapack_int LAPACKE_dtrttf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const double[] a, @ByVal lapack_int lda,
                                double[] arf );

public static native @ByVal lapack_int LAPACKE_dtrttp( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const DoublePointer a, @ByVal lapack_int lda, DoublePointer ap );
public static native @ByVal lapack_int LAPACKE_dtrttp( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer ap );
public static native @ByVal lapack_int LAPACKE_dtrttp( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const double[] a, @ByVal lapack_int lda, double[] ap );

public static native @ByVal lapack_int LAPACKE_dtrttp_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const DoublePointer a, @ByVal lapack_int lda, DoublePointer ap );
public static native @ByVal lapack_int LAPACKE_dtrttp_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer ap );
public static native @ByVal lapack_int LAPACKE_dtrttp_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const double[] a, @ByVal lapack_int lda, double[] ap );

public static native @ByVal lapack_int LAPACKE_dtzrzf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoublePointer a, @ByVal lapack_int lda, DoublePointer tau );
public static native @ByVal lapack_int LAPACKE_dtzrzf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer tau );
public static native @ByVal lapack_int LAPACKE_dtzrzf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           double[] a, @ByVal lapack_int lda, double[] tau );

public static native @ByVal lapack_int LAPACKE_dtzrzf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoublePointer a, @ByVal lapack_int lda, DoublePointer tau,
                                DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dtzrzf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer tau,
                                DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dtzrzf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                double[] a, @ByVal lapack_int lda, double[] tau,
                                double[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_mkl_cgetrfnpi( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                              @ByVal lapack_int nfact, lapack_complex_float a,
                              @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_cgetrfnpi_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                   @ByVal lapack_int nfact, lapack_complex_float a,
                                   @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_ctppack( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                lapack_complex_float ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                @ByVal lapack_int cols, @Const lapack_complex_float a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_ctppack_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                     lapack_complex_float ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                     @ByVal lapack_int cols, @Const lapack_complex_float a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_ctpunpack( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                  @Const lapack_complex_float ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                  @ByVal lapack_int cols, lapack_complex_float a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_ctpunpack_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                       @Const lapack_complex_float ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                       @ByVal lapack_int cols, lapack_complex_float a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_dgetrfnpi( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                              @ByVal lapack_int nfact, DoublePointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_dgetrfnpi( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                              @ByVal lapack_int nfact, DoubleBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_dgetrfnpi( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                              @ByVal lapack_int nfact, double[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_dgetrfnpi_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                   @ByVal lapack_int nfact, DoublePointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_dgetrfnpi_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                   @ByVal lapack_int nfact, DoubleBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_dgetrfnpi_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                   @ByVal lapack_int nfact, double[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_dtppack( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                DoublePointer ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                @ByVal lapack_int cols, @Const DoublePointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_dtppack( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                DoubleBuffer ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                @ByVal lapack_int cols, @Const DoubleBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_dtppack( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                double[] ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                @ByVal lapack_int cols, @Const double[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_dtppack_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                     DoublePointer ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                     @ByVal lapack_int cols, @Const DoublePointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_dtppack_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                     DoubleBuffer ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                     @ByVal lapack_int cols, @Const DoubleBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_dtppack_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                     double[] ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                     @ByVal lapack_int cols, @Const double[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_dtpunpack( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                  @Const DoublePointer ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                  @ByVal lapack_int cols, DoublePointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_dtpunpack( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                  @Const DoubleBuffer ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                  @ByVal lapack_int cols, DoubleBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_dtpunpack( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                  @Const double[] ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                  @ByVal lapack_int cols, double[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_dtpunpack_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                       @Const DoublePointer ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                       @ByVal lapack_int cols, DoublePointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_dtpunpack_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                       @Const DoubleBuffer ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                       @ByVal lapack_int cols, DoubleBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_dtpunpack_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                       @Const double[] ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                       @ByVal lapack_int cols, double[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_sgetrfnpi( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                              @ByVal lapack_int nfact, FloatPointer a, @ByVal lapack_int lda);
public static native @ByVal lapack_int LAPACKE_mkl_sgetrfnpi( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                              @ByVal lapack_int nfact, FloatBuffer a, @ByVal lapack_int lda);
public static native @ByVal lapack_int LAPACKE_mkl_sgetrfnpi( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                              @ByVal lapack_int nfact, float[] a, @ByVal lapack_int lda);

public static native @ByVal lapack_int LAPACKE_mkl_sgetrfnpi_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                   @ByVal lapack_int nfact, FloatPointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_sgetrfnpi_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                   @ByVal lapack_int nfact, FloatBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_sgetrfnpi_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                   @ByVal lapack_int nfact, float[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_stppack( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                FloatPointer ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                @ByVal lapack_int cols, @Const FloatPointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_stppack( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                FloatBuffer ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                @ByVal lapack_int cols, @Const FloatBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_stppack( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                float[] ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                @ByVal lapack_int cols, @Const float[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_stppack_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                     FloatPointer ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                     @ByVal lapack_int cols, @Const FloatPointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_stppack_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                     FloatBuffer ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                     @ByVal lapack_int cols, @Const FloatBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_stppack_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                     float[] ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                     @ByVal lapack_int cols, @Const float[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_stpunpack( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                  @Const FloatPointer ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                  @ByVal lapack_int cols, FloatPointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_stpunpack( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                  @Const FloatBuffer ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                  @ByVal lapack_int cols, FloatBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_stpunpack( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                  @Const float[] ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                  @ByVal lapack_int cols, float[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_stpunpack_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                       @Const FloatPointer ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                       @ByVal lapack_int cols, FloatPointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_stpunpack_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                       @Const FloatBuffer ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                       @ByVal lapack_int cols, FloatBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_mkl_stpunpack_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                       @Const float[] ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                       @ByVal lapack_int cols, float[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_zgetrfnpi( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                              @ByVal lapack_int nfact, lapack_complex_double a,
                              @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_zgetrfnpi_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                   @ByVal lapack_int nfact, lapack_complex_double a,
                                   @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_ztppack( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                lapack_complex_double ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                @ByVal lapack_int cols, @Const lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_ztppack_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                     lapack_complex_double ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                     @ByVal lapack_int cols, @Const lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_ztpunpack( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                  @Const lapack_complex_double ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                  @ByVal lapack_int cols, lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_mkl_ztpunpack_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @ByVal lapack_int n,
                                       @Const lapack_complex_double ap, @ByVal lapack_int i, @ByVal lapack_int j, @ByVal lapack_int rows,
                                       @ByVal lapack_int cols, lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_sbbcsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @ByVal lapack_int m,
                           @ByVal lapack_int p, @ByVal lapack_int q, FloatPointer theta, FloatPointer phi,
                           FloatPointer u1, @ByVal lapack_int ldu1, FloatPointer u2,
                           @ByVal lapack_int ldu2, FloatPointer v1t, @ByVal lapack_int ldv1t,
                           FloatPointer v2t, @ByVal lapack_int ldv2t, FloatPointer b11d,
                           FloatPointer b11e, FloatPointer b12d, FloatPointer b12e, FloatPointer b21d,
                           FloatPointer b21e, FloatPointer b22d, FloatPointer b22e );
public static native @ByVal lapack_int LAPACKE_sbbcsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @ByVal lapack_int m,
                           @ByVal lapack_int p, @ByVal lapack_int q, FloatBuffer theta, FloatBuffer phi,
                           FloatBuffer u1, @ByVal lapack_int ldu1, FloatBuffer u2,
                           @ByVal lapack_int ldu2, FloatBuffer v1t, @ByVal lapack_int ldv1t,
                           FloatBuffer v2t, @ByVal lapack_int ldv2t, FloatBuffer b11d,
                           FloatBuffer b11e, FloatBuffer b12d, FloatBuffer b12e, FloatBuffer b21d,
                           FloatBuffer b21e, FloatBuffer b22d, FloatBuffer b22e );
public static native @ByVal lapack_int LAPACKE_sbbcsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @ByVal lapack_int m,
                           @ByVal lapack_int p, @ByVal lapack_int q, float[] theta, float[] phi,
                           float[] u1, @ByVal lapack_int ldu1, float[] u2,
                           @ByVal lapack_int ldu2, float[] v1t, @ByVal lapack_int ldv1t,
                           float[] v2t, @ByVal lapack_int ldv2t, float[] b11d,
                           float[] b11e, float[] b12d, float[] b12e, float[] b21d,
                           float[] b21e, float[] b22d, float[] b22e );

public static native @ByVal lapack_int LAPACKE_sbbcsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                FloatPointer theta, FloatPointer phi, FloatPointer u1,
                                @ByVal lapack_int ldu1, FloatPointer u2, @ByVal lapack_int ldu2,
                                FloatPointer v1t, @ByVal lapack_int ldv1t, FloatPointer v2t,
                                @ByVal lapack_int ldv2t, FloatPointer b11d, FloatPointer b11e,
                                FloatPointer b12d, FloatPointer b12e, FloatPointer b21d,
                                FloatPointer b21e, FloatPointer b22d, FloatPointer b22e,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sbbcsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                FloatBuffer theta, FloatBuffer phi, FloatBuffer u1,
                                @ByVal lapack_int ldu1, FloatBuffer u2, @ByVal lapack_int ldu2,
                                FloatBuffer v1t, @ByVal lapack_int ldv1t, FloatBuffer v2t,
                                @ByVal lapack_int ldv2t, FloatBuffer b11d, FloatBuffer b11e,
                                FloatBuffer b12d, FloatBuffer b12e, FloatBuffer b21d,
                                FloatBuffer b21e, FloatBuffer b22d, FloatBuffer b22e,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sbbcsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                float[] theta, float[] phi, float[] u1,
                                @ByVal lapack_int ldu1, float[] u2, @ByVal lapack_int ldu2,
                                float[] v1t, @ByVal lapack_int ldv1t, float[] v2t,
                                @ByVal lapack_int ldv2t, float[] b11d, float[] b11e,
                                float[] b12d, float[] b12e, float[] b21d,
                                float[] b21e, float[] b22d, float[] b22e,
                                float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sbdsdc( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte compq,
                           @ByVal lapack_int n, FloatPointer d, FloatPointer e, FloatPointer u,
                           @ByVal lapack_int ldu, FloatPointer vt, @ByVal lapack_int ldvt, FloatPointer q,
                           lapack_int iq );
public static native @ByVal lapack_int LAPACKE_sbdsdc( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte compq,
                           @ByVal lapack_int n, FloatBuffer d, FloatBuffer e, FloatBuffer u,
                           @ByVal lapack_int ldu, FloatBuffer vt, @ByVal lapack_int ldvt, FloatBuffer q,
                           lapack_int iq );
public static native @ByVal lapack_int LAPACKE_sbdsdc( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte compq,
                           @ByVal lapack_int n, float[] d, float[] e, float[] u,
                           @ByVal lapack_int ldu, float[] vt, @ByVal lapack_int ldvt, float[] q,
                           lapack_int iq );

public static native @ByVal lapack_int LAPACKE_sbdsdc_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte compq,
                                @ByVal lapack_int n, FloatPointer d, FloatPointer e, FloatPointer u,
                                @ByVal lapack_int ldu, FloatPointer vt, @ByVal lapack_int ldvt,
                                FloatPointer q, lapack_int iq, FloatPointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sbdsdc_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte compq,
                                @ByVal lapack_int n, FloatBuffer d, FloatBuffer e, FloatBuffer u,
                                @ByVal lapack_int ldu, FloatBuffer vt, @ByVal lapack_int ldvt,
                                FloatBuffer q, lapack_int iq, FloatBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sbdsdc_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte compq,
                                @ByVal lapack_int n, float[] d, float[] e, float[] u,
                                @ByVal lapack_int ldu, float[] vt, @ByVal lapack_int ldvt,
                                float[] q, lapack_int iq, float[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sbdsqr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                           FloatPointer d, FloatPointer e, FloatPointer vt, @ByVal lapack_int ldvt,
                           FloatPointer u, @ByVal lapack_int ldu, FloatPointer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sbdsqr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                           FloatBuffer d, FloatBuffer e, FloatBuffer vt, @ByVal lapack_int ldvt,
                           FloatBuffer u, @ByVal lapack_int ldu, FloatBuffer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sbdsqr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                           float[] d, float[] e, float[] vt, @ByVal lapack_int ldvt,
                           float[] u, @ByVal lapack_int ldu, float[] c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_sbdsqr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                                FloatPointer d, FloatPointer e, FloatPointer vt, @ByVal lapack_int ldvt,
                                FloatPointer u, @ByVal lapack_int ldu, FloatPointer c,
                                @ByVal lapack_int ldc, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_sbdsqr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                                FloatBuffer d, FloatBuffer e, FloatBuffer vt, @ByVal lapack_int ldvt,
                                FloatBuffer u, @ByVal lapack_int ldu, FloatBuffer c,
                                @ByVal lapack_int ldc, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_sbdsqr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                                float[] d, float[] e, float[] vt, @ByVal lapack_int ldvt,
                                float[] u, @ByVal lapack_int ldu, float[] c,
                                @ByVal lapack_int ldc, float[] work );

public static native @ByVal lapack_int LAPACKE_sbdsvdx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, FloatPointer d, FloatPointer e,
                           float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                           FloatPointer s, FloatPointer z, @ByVal lapack_int ldz,
                           lapack_int superb );
public static native @ByVal lapack_int LAPACKE_sbdsvdx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, FloatBuffer d, FloatBuffer e,
                           float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                           FloatBuffer s, FloatBuffer z, @ByVal lapack_int ldz,
                           lapack_int superb );
public static native @ByVal lapack_int LAPACKE_sbdsvdx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, float[] d, float[] e,
                           float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                           float[] s, float[] z, @ByVal lapack_int ldz,
                           lapack_int superb );

public static native @ByVal lapack_int LAPACKE_sbdsvdx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte jobz, @Cast("char") byte range,
                              @ByVal lapack_int n, FloatPointer d, FloatPointer e,
                              float vl, float vu,
                              @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                              FloatPointer s, FloatPointer z, @ByVal lapack_int ldz,
                                FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sbdsvdx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte jobz, @Cast("char") byte range,
                              @ByVal lapack_int n, FloatBuffer d, FloatBuffer e,
                              float vl, float vu,
                              @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                              FloatBuffer s, FloatBuffer z, @ByVal lapack_int ldz,
                                FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sbdsvdx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte jobz, @Cast("char") byte range,
                              @ByVal lapack_int n, float[] d, float[] e,
                              float vl, float vu,
                              @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                              float[] s, float[] z, @ByVal lapack_int ldz,
                                float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sdisna( @Cast("char") byte job, @ByVal lapack_int m, @ByVal lapack_int n, @Const FloatPointer d,
                           FloatPointer sep );
public static native @ByVal lapack_int LAPACKE_sdisna( @Cast("char") byte job, @ByVal lapack_int m, @ByVal lapack_int n, @Const FloatBuffer d,
                           FloatBuffer sep );
public static native @ByVal lapack_int LAPACKE_sdisna( @Cast("char") byte job, @ByVal lapack_int m, @ByVal lapack_int n, @Const float[] d,
                           float[] sep );

public static native @ByVal lapack_int LAPACKE_sdisna_work( @Cast("char") byte job, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const FloatPointer d, FloatPointer sep );
public static native @ByVal lapack_int LAPACKE_sdisna_work( @Cast("char") byte job, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const FloatBuffer d, FloatBuffer sep );
public static native @ByVal lapack_int LAPACKE_sdisna_work( @Cast("char") byte job, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const float[] d, float[] sep );

public static native @ByVal lapack_int LAPACKE_sgbbrd( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, FloatPointer ab, @ByVal lapack_int ldab, FloatPointer d,
                           FloatPointer e, FloatPointer q, @ByVal lapack_int ldq, FloatPointer pt,
                           @ByVal lapack_int ldpt, FloatPointer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sgbbrd( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, FloatBuffer ab, @ByVal lapack_int ldab, FloatBuffer d,
                           FloatBuffer e, FloatBuffer q, @ByVal lapack_int ldq, FloatBuffer pt,
                           @ByVal lapack_int ldpt, FloatBuffer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sgbbrd( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, float[] ab, @ByVal lapack_int ldab, float[] d,
                           float[] e, float[] q, @ByVal lapack_int ldq, float[] pt,
                           @ByVal lapack_int ldpt, float[] c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_sgbbrd_work( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                                @ByVal lapack_int ku, FloatPointer ab, @ByVal lapack_int ldab,
                                FloatPointer d, FloatPointer e, FloatPointer q, @ByVal lapack_int ldq,
                                FloatPointer pt, @ByVal lapack_int ldpt, FloatPointer c,
                                @ByVal lapack_int ldc, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_sgbbrd_work( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                                @ByVal lapack_int ku, FloatBuffer ab, @ByVal lapack_int ldab,
                                FloatBuffer d, FloatBuffer e, FloatBuffer q, @ByVal lapack_int ldq,
                                FloatBuffer pt, @ByVal lapack_int ldpt, FloatBuffer c,
                                @ByVal lapack_int ldc, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_sgbbrd_work( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                                @ByVal lapack_int ku, float[] ab, @ByVal lapack_int ldab,
                                float[] d, float[] e, float[] q, @ByVal lapack_int ldq,
                                float[] pt, @ByVal lapack_int ldpt, float[] c,
                                @ByVal lapack_int ldc, float[] work );

public static native @ByVal lapack_int LAPACKE_sgbcon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const FloatPointer ab,
                           @ByVal lapack_int ldab, @Const lapack_int ipiv, float anorm,
                           FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_sgbcon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const FloatBuffer ab,
                           @ByVal lapack_int ldab, @Const lapack_int ipiv, float anorm,
                           FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_sgbcon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const float[] ab,
                           @ByVal lapack_int ldab, @Const lapack_int ipiv, float anorm,
                           float[] rcond );

public static native @ByVal lapack_int LAPACKE_sgbcon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const FloatPointer ab,
                                @ByVal lapack_int ldab, @Const lapack_int ipiv,
                                float anorm, FloatPointer rcond, FloatPointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgbcon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const FloatBuffer ab,
                                @ByVal lapack_int ldab, @Const lapack_int ipiv,
                                float anorm, FloatBuffer rcond, FloatBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgbcon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const float[] ab,
                                @ByVal lapack_int ldab, @Const lapack_int ipiv,
                                float anorm, float[] rcond, float[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sgbequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const FloatPointer ab,
                           @ByVal lapack_int ldab, FloatPointer r, FloatPointer c, FloatPointer rowcnd,
                           FloatPointer colcnd, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_sgbequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const FloatBuffer ab,
                           @ByVal lapack_int ldab, FloatBuffer r, FloatBuffer c, FloatBuffer rowcnd,
                           FloatBuffer colcnd, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_sgbequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const float[] ab,
                           @ByVal lapack_int ldab, float[] r, float[] c, float[] rowcnd,
                           float[] colcnd, float[] amax );

public static native @ByVal lapack_int LAPACKE_sgbequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const FloatPointer ab,
                                @ByVal lapack_int ldab, FloatPointer r, FloatPointer c,
                                FloatPointer rowcnd, FloatPointer colcnd, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_sgbequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const FloatBuffer ab,
                                @ByVal lapack_int ldab, FloatBuffer r, FloatBuffer c,
                                FloatBuffer rowcnd, FloatBuffer colcnd, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_sgbequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const float[] ab,
                                @ByVal lapack_int ldab, float[] r, float[] c,
                                float[] rowcnd, float[] colcnd, float[] amax );

public static native @ByVal lapack_int LAPACKE_sgbequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @ByVal lapack_int kl, @ByVal lapack_int ku, @Const FloatPointer ab,
                            @ByVal lapack_int ldab, FloatPointer r, FloatPointer c, FloatPointer rowcnd,
                            FloatPointer colcnd, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_sgbequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @ByVal lapack_int kl, @ByVal lapack_int ku, @Const FloatBuffer ab,
                            @ByVal lapack_int ldab, FloatBuffer r, FloatBuffer c, FloatBuffer rowcnd,
                            FloatBuffer colcnd, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_sgbequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @ByVal lapack_int kl, @ByVal lapack_int ku, @Const float[] ab,
                            @ByVal lapack_int ldab, float[] r, float[] c, float[] rowcnd,
                            float[] colcnd, float[] amax );

public static native @ByVal lapack_int LAPACKE_sgbequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int kl, @ByVal lapack_int ku, @Const FloatPointer ab,
                                 @ByVal lapack_int ldab, FloatPointer r, FloatPointer c,
                                 FloatPointer rowcnd, FloatPointer colcnd, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_sgbequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int kl, @ByVal lapack_int ku, @Const FloatBuffer ab,
                                 @ByVal lapack_int ldab, FloatBuffer r, FloatBuffer c,
                                 FloatBuffer rowcnd, FloatBuffer colcnd, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_sgbequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int kl, @ByVal lapack_int ku, @Const float[] ab,
                                 @ByVal lapack_int ldab, float[] r, float[] c,
                                 float[] rowcnd, float[] colcnd, float[] amax );

public static native @ByVal lapack_int LAPACKE_sgbrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                           @Const FloatPointer ab, @ByVal lapack_int ldab, @Const FloatPointer afb,
                           @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                           @Const FloatPointer b, @ByVal lapack_int ldb, FloatPointer x,
                           @ByVal lapack_int ldx, FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_sgbrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                           @Const FloatBuffer ab, @ByVal lapack_int ldab, @Const FloatBuffer afb,
                           @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                           @Const FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer x,
                           @ByVal lapack_int ldx, FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_sgbrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                           @Const float[] ab, @ByVal lapack_int ldab, @Const float[] afb,
                           @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                           @Const float[] b, @ByVal lapack_int ldb, float[] x,
                           @ByVal lapack_int ldx, float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_sgbrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                                @Const FloatPointer ab, @ByVal lapack_int ldab,
                                @Const FloatPointer afb, @ByVal lapack_int ldafb,
                                @Const lapack_int ipiv, @Const FloatPointer b,
                                @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                                FloatPointer ferr, FloatPointer berr, FloatPointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgbrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                                @Const FloatBuffer ab, @ByVal lapack_int ldab,
                                @Const FloatBuffer afb, @ByVal lapack_int ldafb,
                                @Const lapack_int ipiv, @Const FloatBuffer b,
                                @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                                FloatBuffer ferr, FloatBuffer berr, FloatBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgbrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                                @Const float[] ab, @ByVal lapack_int ldab,
                                @Const float[] afb, @ByVal lapack_int ldafb,
                                @Const lapack_int ipiv, @Const float[] b,
                                @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                                float[] ferr, float[] berr, float[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sgbrfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, @Const FloatPointer ab, @ByVal lapack_int ldab,
                            @Const FloatPointer afb, @ByVal lapack_int ldafb,
                            @Const lapack_int ipiv, @Const FloatPointer r,
                            @Const FloatPointer c, @Const FloatPointer b, @ByVal lapack_int ldb,
                            FloatPointer x, @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer berr,
                            @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                            FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatPointer params );
public static native @ByVal lapack_int LAPACKE_sgbrfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, @Const FloatBuffer ab, @ByVal lapack_int ldab,
                            @Const FloatBuffer afb, @ByVal lapack_int ldafb,
                            @Const lapack_int ipiv, @Const FloatBuffer r,
                            @Const FloatBuffer c, @Const FloatBuffer b, @ByVal lapack_int ldb,
                            FloatBuffer x, @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer berr,
                            @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                            FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatBuffer params );
public static native @ByVal lapack_int LAPACKE_sgbrfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, @Const float[] ab, @ByVal lapack_int ldab,
                            @Const float[] afb, @ByVal lapack_int ldafb,
                            @Const lapack_int ipiv, @Const float[] r,
                            @Const float[] c, @Const float[] b, @ByVal lapack_int ldb,
                            float[] x, @ByVal lapack_int ldx, float[] rcond, float[] berr,
                            @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                            float[] err_bnds_comp, @ByVal lapack_int nparams,
                            float[] params );

public static native @ByVal lapack_int LAPACKE_sgbrfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs, @Const FloatPointer ab,
                                 @ByVal lapack_int ldab, @Const FloatPointer afb,
                                 @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                                 @Const FloatPointer r, @Const FloatPointer c, @Const FloatPointer b,
                                 @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                                 FloatPointer rcond, FloatPointer berr,
                                 @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                                 FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatPointer params, FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgbrfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs, @Const FloatBuffer ab,
                                 @ByVal lapack_int ldab, @Const FloatBuffer afb,
                                 @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                                 @Const FloatBuffer r, @Const FloatBuffer c, @Const FloatBuffer b,
                                 @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                                 FloatBuffer rcond, FloatBuffer berr,
                                 @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                                 FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatBuffer params, FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgbrfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs, @Const float[] ab,
                                 @ByVal lapack_int ldab, @Const float[] afb,
                                 @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                                 @Const float[] r, @Const float[] c, @Const float[] b,
                                 @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                                 float[] rcond, float[] berr,
                                 @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                                 float[] err_bnds_comp, @ByVal lapack_int nparams,
                                 float[] params, float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sgbsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int kl,
                          @ByVal lapack_int ku, @ByVal lapack_int nrhs, FloatPointer ab,
                          @ByVal lapack_int ldab, lapack_int ipiv, FloatPointer b,
                          @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgbsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int kl,
                          @ByVal lapack_int ku, @ByVal lapack_int nrhs, FloatBuffer ab,
                          @ByVal lapack_int ldab, lapack_int ipiv, FloatBuffer b,
                          @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgbsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int kl,
                          @ByVal lapack_int ku, @ByVal lapack_int nrhs, float[] ab,
                          @ByVal lapack_int ldab, lapack_int ipiv, float[] b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sgbsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int kl,
                               @ByVal lapack_int ku, @ByVal lapack_int nrhs, FloatPointer ab,
                               @ByVal lapack_int ldab, lapack_int ipiv, FloatPointer b,
                               @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgbsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int kl,
                               @ByVal lapack_int ku, @ByVal lapack_int nrhs, FloatBuffer ab,
                               @ByVal lapack_int ldab, lapack_int ipiv, FloatBuffer b,
                               @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgbsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int kl,
                               @ByVal lapack_int ku, @ByVal lapack_int nrhs, float[] ab,
                               @ByVal lapack_int ldab, lapack_int ipiv, float[] b,
                               @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sgbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @ByVal lapack_int nrhs, FloatPointer ab, @ByVal lapack_int ldab,
                           FloatPointer afb, @ByVal lapack_int ldafb, lapack_int ipiv,
                           @Cast("char*") BytePointer equed, FloatPointer r, FloatPointer c, FloatPointer b,
                           @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                           FloatPointer rcond, FloatPointer ferr, FloatPointer berr,
                           FloatPointer rpivot );
public static native @ByVal lapack_int LAPACKE_sgbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @ByVal lapack_int nrhs, FloatBuffer ab, @ByVal lapack_int ldab,
                           FloatBuffer afb, @ByVal lapack_int ldafb, lapack_int ipiv,
                           @Cast("char*") ByteBuffer equed, FloatBuffer r, FloatBuffer c, FloatBuffer b,
                           @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                           FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr,
                           FloatBuffer rpivot );
public static native @ByVal lapack_int LAPACKE_sgbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @ByVal lapack_int nrhs, float[] ab, @ByVal lapack_int ldab,
                           float[] afb, @ByVal lapack_int ldafb, lapack_int ipiv,
                           @Cast("char*") byte[] equed, float[] r, float[] c, float[] b,
                           @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                           float[] rcond, float[] ferr, float[] berr,
                           float[] rpivot );

public static native @ByVal lapack_int LAPACKE_sgbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @ByVal lapack_int nrhs, FloatPointer ab, @ByVal lapack_int ldab,
                                FloatPointer afb, @ByVal lapack_int ldafb, lapack_int ipiv,
                                @Cast("char*") BytePointer equed, FloatPointer r, FloatPointer c, FloatPointer b,
                                @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                                FloatPointer rcond, FloatPointer ferr, FloatPointer berr,
                                FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @ByVal lapack_int nrhs, FloatBuffer ab, @ByVal lapack_int ldab,
                                FloatBuffer afb, @ByVal lapack_int ldafb, lapack_int ipiv,
                                @Cast("char*") ByteBuffer equed, FloatBuffer r, FloatBuffer c, FloatBuffer b,
                                @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                                FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr,
                                FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @ByVal lapack_int nrhs, float[] ab, @ByVal lapack_int ldab,
                                float[] afb, @ByVal lapack_int ldafb, lapack_int ipiv,
                                @Cast("char*") byte[] equed, float[] r, float[] c, float[] b,
                                @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                                float[] rcond, float[] ferr, float[] berr,
                                float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sgbsvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, FloatPointer ab, @ByVal lapack_int ldab,
                            FloatPointer afb, @ByVal lapack_int ldafb, lapack_int ipiv,
                            @Cast("char*") BytePointer equed, FloatPointer r, FloatPointer c, FloatPointer b,
                            @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                            FloatPointer rcond, FloatPointer rpvgrw, FloatPointer berr,
                            @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                            FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatPointer params );
public static native @ByVal lapack_int LAPACKE_sgbsvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, FloatBuffer ab, @ByVal lapack_int ldab,
                            FloatBuffer afb, @ByVal lapack_int ldafb, lapack_int ipiv,
                            @Cast("char*") ByteBuffer equed, FloatBuffer r, FloatBuffer c, FloatBuffer b,
                            @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                            FloatBuffer rcond, FloatBuffer rpvgrw, FloatBuffer berr,
                            @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                            FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatBuffer params );
public static native @ByVal lapack_int LAPACKE_sgbsvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, float[] ab, @ByVal lapack_int ldab,
                            float[] afb, @ByVal lapack_int ldafb, lapack_int ipiv,
                            @Cast("char*") byte[] equed, float[] r, float[] c, float[] b,
                            @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                            float[] rcond, float[] rpvgrw, float[] berr,
                            @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                            float[] err_bnds_comp, @ByVal lapack_int nparams,
                            float[] params );

public static native @ByVal lapack_int LAPACKE_sgbsvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs, FloatPointer ab, @ByVal lapack_int ldab,
                                 FloatPointer afb, @ByVal lapack_int ldafb, lapack_int ipiv,
                                 @Cast("char*") BytePointer equed, FloatPointer r, FloatPointer c, FloatPointer b,
                                 @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                                 FloatPointer rcond, FloatPointer rpvgrw, FloatPointer berr,
                                 @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                                 FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatPointer params, FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgbsvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs, FloatBuffer ab, @ByVal lapack_int ldab,
                                 FloatBuffer afb, @ByVal lapack_int ldafb, lapack_int ipiv,
                                 @Cast("char*") ByteBuffer equed, FloatBuffer r, FloatBuffer c, FloatBuffer b,
                                 @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                                 FloatBuffer rcond, FloatBuffer rpvgrw, FloatBuffer berr,
                                 @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                                 FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatBuffer params, FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgbsvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs, float[] ab, @ByVal lapack_int ldab,
                                 float[] afb, @ByVal lapack_int ldafb, lapack_int ipiv,
                                 @Cast("char*") byte[] equed, float[] r, float[] c, float[] b,
                                 @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                                 float[] rcond, float[] rpvgrw, float[] berr,
                                 @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                                 float[] err_bnds_comp, @ByVal lapack_int nparams,
                                 float[] params, float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sgbtrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, FloatPointer ab,
                           @ByVal lapack_int ldab, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgbtrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, FloatBuffer ab,
                           @ByVal lapack_int ldab, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgbtrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, float[] ab,
                           @ByVal lapack_int ldab, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_sgbtrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, FloatPointer ab,
                                @ByVal lapack_int ldab, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgbtrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, FloatBuffer ab,
                                @ByVal lapack_int ldab, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgbtrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, float[] ab,
                                @ByVal lapack_int ldab, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_sgbtrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                           @Const FloatPointer ab, @ByVal lapack_int ldab,
                           @Const lapack_int ipiv, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgbtrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                           @Const FloatBuffer ab, @ByVal lapack_int ldab,
                           @Const lapack_int ipiv, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgbtrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                           @Const float[] ab, @ByVal lapack_int ldab,
                           @Const lapack_int ipiv, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sgbtrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                                @Const FloatPointer ab, @ByVal lapack_int ldab,
                                @Const lapack_int ipiv, FloatPointer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgbtrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                                @Const FloatBuffer ab, @ByVal lapack_int ldab,
                                @Const lapack_int ipiv, FloatBuffer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgbtrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                                @Const float[] ab, @ByVal lapack_int ldab,
                                @Const lapack_int ipiv, float[] b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sgebak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const FloatPointer scale,
                           @ByVal lapack_int m, FloatPointer v, @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_sgebak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const FloatBuffer scale,
                           @ByVal lapack_int m, FloatBuffer v, @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_sgebak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const float[] scale,
                           @ByVal lapack_int m, float[] v, @ByVal lapack_int ldv );

public static native @ByVal lapack_int LAPACKE_sgebak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const FloatPointer scale, @ByVal lapack_int m, FloatPointer v,
                                @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_sgebak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const FloatBuffer scale, @ByVal lapack_int m, FloatBuffer v,
                                @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_sgebak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const float[] scale, @ByVal lapack_int m, float[] v,
                                @ByVal lapack_int ldv );

public static native @ByVal lapack_int LAPACKE_sgebal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda, lapack_int ilo, lapack_int ihi,
                           FloatPointer scale );
public static native @ByVal lapack_int LAPACKE_sgebal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda, lapack_int ilo, lapack_int ihi,
                           FloatBuffer scale );
public static native @ByVal lapack_int LAPACKE_sgebal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda, lapack_int ilo, lapack_int ihi,
                           float[] scale );

public static native @ByVal lapack_int LAPACKE_sgebal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda, lapack_int ilo,
                                lapack_int ihi, FloatPointer scale );
public static native @ByVal lapack_int LAPACKE_sgebal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda, lapack_int ilo,
                                lapack_int ihi, FloatBuffer scale );
public static native @ByVal lapack_int LAPACKE_sgebal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda, lapack_int ilo,
                                lapack_int ihi, float[] scale );

public static native @ByVal lapack_int LAPACKE_sgebrd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatPointer a, @ByVal lapack_int lda, FloatPointer d, FloatPointer e,
                           FloatPointer tauq, FloatPointer taup );
public static native @ByVal lapack_int LAPACKE_sgebrd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatBuffer a, @ByVal lapack_int lda, FloatBuffer d, FloatBuffer e,
                           FloatBuffer tauq, FloatBuffer taup );
public static native @ByVal lapack_int LAPACKE_sgebrd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           float[] a, @ByVal lapack_int lda, float[] d, float[] e,
                           float[] tauq, float[] taup );

public static native @ByVal lapack_int LAPACKE_sgebrd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda, FloatPointer d, FloatPointer e,
                                FloatPointer tauq, FloatPointer taup, FloatPointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgebrd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda, FloatBuffer d, FloatBuffer e,
                                FloatBuffer tauq, FloatBuffer taup, FloatBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgebrd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda, float[] d, float[] e,
                                float[] tauq, float[] taup, float[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sgecon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @Const FloatPointer a, @ByVal lapack_int lda, float anorm,
                           FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_sgecon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @Const FloatBuffer a, @ByVal lapack_int lda, float anorm,
                           FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_sgecon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @Const float[] a, @ByVal lapack_int lda, float anorm,
                           float[] rcond );

public static native @ByVal lapack_int LAPACKE_sgecon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @Const FloatPointer a, @ByVal lapack_int lda, float anorm,
                                FloatPointer rcond, FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgecon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @Const FloatBuffer a, @ByVal lapack_int lda, float anorm,
                                FloatBuffer rcond, FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgecon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @Const float[] a, @ByVal lapack_int lda, float anorm,
                                float[] rcond, float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sgeequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const FloatPointer a, @ByVal lapack_int lda, FloatPointer r, FloatPointer c,
                           FloatPointer rowcnd, FloatPointer colcnd, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_sgeequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const FloatBuffer a, @ByVal lapack_int lda, FloatBuffer r, FloatBuffer c,
                           FloatBuffer rowcnd, FloatBuffer colcnd, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_sgeequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const float[] a, @ByVal lapack_int lda, float[] r, float[] c,
                           float[] rowcnd, float[] colcnd, float[] amax );

public static native @ByVal lapack_int LAPACKE_sgeequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const FloatPointer a, @ByVal lapack_int lda, FloatPointer r,
                                FloatPointer c, FloatPointer rowcnd, FloatPointer colcnd,
                                FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_sgeequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const FloatBuffer a, @ByVal lapack_int lda, FloatBuffer r,
                                FloatBuffer c, FloatBuffer rowcnd, FloatBuffer colcnd,
                                FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_sgeequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const float[] a, @ByVal lapack_int lda, float[] r,
                                float[] c, float[] rowcnd, float[] colcnd,
                                float[] amax );

public static native @ByVal lapack_int LAPACKE_sgeequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @Const FloatPointer a, @ByVal lapack_int lda, FloatPointer r, FloatPointer c,
                            FloatPointer rowcnd, FloatPointer colcnd, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_sgeequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @Const FloatBuffer a, @ByVal lapack_int lda, FloatBuffer r, FloatBuffer c,
                            FloatBuffer rowcnd, FloatBuffer colcnd, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_sgeequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @Const float[] a, @ByVal lapack_int lda, float[] r, float[] c,
                            float[] rowcnd, float[] colcnd, float[] amax );

public static native @ByVal lapack_int LAPACKE_sgeequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @Const FloatPointer a, @ByVal lapack_int lda, FloatPointer r,
                                 FloatPointer c, FloatPointer rowcnd, FloatPointer colcnd,
                                 FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_sgeequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @Const FloatBuffer a, @ByVal lapack_int lda, FloatBuffer r,
                                 FloatBuffer c, FloatBuffer rowcnd, FloatBuffer colcnd,
                                 FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_sgeequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @Const float[] a, @ByVal lapack_int lda, float[] r,
                                 float[] c, float[] rowcnd, float[] colcnd,
                                 float[] amax );

public static native @ByVal lapack_int LAPACKE_sgees( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                          LAPACK_S_SELECT2 select, @ByVal lapack_int n, FloatPointer a,
                          @ByVal lapack_int lda, lapack_int sdim, FloatPointer wr,
                          FloatPointer wi, FloatPointer vs, @ByVal lapack_int ldvs );
public static native @ByVal lapack_int LAPACKE_sgees( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                          LAPACK_S_SELECT2 select, @ByVal lapack_int n, FloatBuffer a,
                          @ByVal lapack_int lda, lapack_int sdim, FloatBuffer wr,
                          FloatBuffer wi, FloatBuffer vs, @ByVal lapack_int ldvs );
public static native @ByVal lapack_int LAPACKE_sgees( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                          LAPACK_S_SELECT2 select, @ByVal lapack_int n, float[] a,
                          @ByVal lapack_int lda, lapack_int sdim, float[] wr,
                          float[] wi, float[] vs, @ByVal lapack_int ldvs );

public static native @ByVal lapack_int LAPACKE_sgees_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                               LAPACK_S_SELECT2 select, @ByVal lapack_int n, FloatPointer a,
                               @ByVal lapack_int lda, lapack_int sdim, FloatPointer wr,
                               FloatPointer wi, FloatPointer vs, @ByVal lapack_int ldvs,
                               FloatPointer work, @ByVal lapack_int lwork,
                               lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_sgees_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                               LAPACK_S_SELECT2 select, @ByVal lapack_int n, FloatBuffer a,
                               @ByVal lapack_int lda, lapack_int sdim, FloatBuffer wr,
                               FloatBuffer wi, FloatBuffer vs, @ByVal lapack_int ldvs,
                               FloatBuffer work, @ByVal lapack_int lwork,
                               lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_sgees_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                               LAPACK_S_SELECT2 select, @ByVal lapack_int n, float[] a,
                               @ByVal lapack_int lda, lapack_int sdim, float[] wr,
                               float[] wi, float[] vs, @ByVal lapack_int ldvs,
                               float[] work, @ByVal lapack_int lwork,
                               lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_sgeesx( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                           LAPACK_S_SELECT2 select, @Cast("char") byte sense, @ByVal lapack_int n,
                           FloatPointer a, @ByVal lapack_int lda, lapack_int sdim,
                           FloatPointer wr, FloatPointer wi, FloatPointer vs, @ByVal lapack_int ldvs,
                           FloatPointer rconde, FloatPointer rcondv );
public static native @ByVal lapack_int LAPACKE_sgeesx( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                           LAPACK_S_SELECT2 select, @Cast("char") byte sense, @ByVal lapack_int n,
                           FloatBuffer a, @ByVal lapack_int lda, lapack_int sdim,
                           FloatBuffer wr, FloatBuffer wi, FloatBuffer vs, @ByVal lapack_int ldvs,
                           FloatBuffer rconde, FloatBuffer rcondv );
public static native @ByVal lapack_int LAPACKE_sgeesx( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                           LAPACK_S_SELECT2 select, @Cast("char") byte sense, @ByVal lapack_int n,
                           float[] a, @ByVal lapack_int lda, lapack_int sdim,
                           float[] wr, float[] wi, float[] vs, @ByVal lapack_int ldvs,
                           float[] rconde, float[] rcondv );

public static native @ByVal lapack_int LAPACKE_sgeesx_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                                LAPACK_S_SELECT2 select, @Cast("char") byte sense,
                                @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda,
                                lapack_int sdim, FloatPointer wr, FloatPointer wi,
                                FloatPointer vs, @ByVal lapack_int ldvs, FloatPointer rconde,
                                FloatPointer rcondv, FloatPointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork,
                                lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_sgeesx_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                                LAPACK_S_SELECT2 select, @Cast("char") byte sense,
                                @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda,
                                lapack_int sdim, FloatBuffer wr, FloatBuffer wi,
                                FloatBuffer vs, @ByVal lapack_int ldvs, FloatBuffer rconde,
                                FloatBuffer rcondv, FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork,
                                lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_sgeesx_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                                LAPACK_S_SELECT2 select, @Cast("char") byte sense,
                                @ByVal lapack_int n, float[] a, @ByVal lapack_int lda,
                                lapack_int sdim, float[] wr, float[] wi,
                                float[] vs, @ByVal lapack_int ldvs, float[] rconde,
                                float[] rcondv, float[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork,
                                lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_sgeev( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                          @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda, FloatPointer wr,
                          FloatPointer wi, FloatPointer vl, @ByVal lapack_int ldvl, FloatPointer vr,
                          @ByVal lapack_int ldvr );
public static native @ByVal lapack_int LAPACKE_sgeev( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                          @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda, FloatBuffer wr,
                          FloatBuffer wi, FloatBuffer vl, @ByVal lapack_int ldvl, FloatBuffer vr,
                          @ByVal lapack_int ldvr );
public static native @ByVal lapack_int LAPACKE_sgeev( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                          @ByVal lapack_int n, float[] a, @ByVal lapack_int lda, float[] wr,
                          float[] wi, float[] vl, @ByVal lapack_int ldvl, float[] vr,
                          @ByVal lapack_int ldvr );

public static native @ByVal lapack_int LAPACKE_sgeev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda,
                               FloatPointer wr, FloatPointer wi, FloatPointer vl, @ByVal lapack_int ldvl,
                               FloatPointer vr, @ByVal lapack_int ldvr, FloatPointer work,
                               @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgeev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda,
                               FloatBuffer wr, FloatBuffer wi, FloatBuffer vl, @ByVal lapack_int ldvl,
                               FloatBuffer vr, @ByVal lapack_int ldvr, FloatBuffer work,
                               @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgeev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, float[] a, @ByVal lapack_int lda,
                               float[] wr, float[] wi, float[] vl, @ByVal lapack_int ldvl,
                               float[] vr, @ByVal lapack_int ldvr, float[] work,
                               @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sgeevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda, FloatPointer wr, FloatPointer wi, FloatPointer vl,
                           @ByVal lapack_int ldvl, FloatPointer vr, @ByVal lapack_int ldvr,
                           lapack_int ilo, lapack_int ihi, FloatPointer scale,
                           FloatPointer abnrm, FloatPointer rconde, FloatPointer rcondv );
public static native @ByVal lapack_int LAPACKE_sgeevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda, FloatBuffer wr, FloatBuffer wi, FloatBuffer vl,
                           @ByVal lapack_int ldvl, FloatBuffer vr, @ByVal lapack_int ldvr,
                           lapack_int ilo, lapack_int ihi, FloatBuffer scale,
                           FloatBuffer abnrm, FloatBuffer rconde, FloatBuffer rcondv );
public static native @ByVal lapack_int LAPACKE_sgeevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda, float[] wr, float[] wi, float[] vl,
                           @ByVal lapack_int ldvl, float[] vr, @ByVal lapack_int ldvr,
                           lapack_int ilo, lapack_int ihi, float[] scale,
                           float[] abnrm, float[] rconde, float[] rcondv );

public static native @ByVal lapack_int LAPACKE_sgeevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, FloatPointer a,
                                @ByVal lapack_int lda, FloatPointer wr, FloatPointer wi, FloatPointer vl,
                                @ByVal lapack_int ldvl, FloatPointer vr, @ByVal lapack_int ldvr,
                                lapack_int ilo, lapack_int ihi, FloatPointer scale,
                                FloatPointer abnrm, FloatPointer rconde, FloatPointer rcondv,
                                FloatPointer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgeevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, FloatBuffer a,
                                @ByVal lapack_int lda, FloatBuffer wr, FloatBuffer wi, FloatBuffer vl,
                                @ByVal lapack_int ldvl, FloatBuffer vr, @ByVal lapack_int ldvr,
                                lapack_int ilo, lapack_int ihi, FloatBuffer scale,
                                FloatBuffer abnrm, FloatBuffer rconde, FloatBuffer rcondv,
                                FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgeevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, float[] a,
                                @ByVal lapack_int lda, float[] wr, float[] wi, float[] vl,
                                @ByVal lapack_int ldvl, float[] vr, @ByVal lapack_int ldvr,
                                lapack_int ilo, lapack_int ihi, float[] scale,
                                float[] abnrm, float[] rconde, float[] rcondv,
                                float[] work, @ByVal lapack_int lwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sgehrd( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, FloatPointer a, @ByVal lapack_int lda,
                           FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_sgehrd( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, FloatBuffer a, @ByVal lapack_int lda,
                           FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_sgehrd( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, float[] a, @ByVal lapack_int lda,
                           float[] tau );

public static native @ByVal lapack_int LAPACKE_sgehrd_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, FloatPointer a, @ByVal lapack_int lda,
                                FloatPointer tau, FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgehrd_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, FloatBuffer a, @ByVal lapack_int lda,
                                FloatBuffer tau, FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgehrd_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, float[] a, @ByVal lapack_int lda,
                                float[] tau, float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sgejsv( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp, @ByVal lapack_int m,
                           @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda, FloatPointer sva,
                           FloatPointer u, @ByVal lapack_int ldu, FloatPointer v, @ByVal lapack_int ldv,
                           FloatPointer stat, lapack_int istat );
public static native @ByVal lapack_int LAPACKE_sgejsv( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp, @ByVal lapack_int m,
                           @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda, FloatBuffer sva,
                           FloatBuffer u, @ByVal lapack_int ldu, FloatBuffer v, @ByVal lapack_int ldv,
                           FloatBuffer stat, lapack_int istat );
public static native @ByVal lapack_int LAPACKE_sgejsv( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp, @ByVal lapack_int m,
                           @ByVal lapack_int n, float[] a, @ByVal lapack_int lda, float[] sva,
                           float[] u, @ByVal lapack_int ldu, float[] v, @ByVal lapack_int ldv,
                           float[] stat, lapack_int istat );

public static native @ByVal lapack_int LAPACKE_sgejsv_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp,
                                @ByVal lapack_int m, @ByVal lapack_int n, FloatPointer a,
                                @ByVal lapack_int lda, FloatPointer sva, FloatPointer u,
                                @ByVal lapack_int ldu, FloatPointer v, @ByVal lapack_int ldv,
                                FloatPointer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgejsv_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp,
                                @ByVal lapack_int m, @ByVal lapack_int n, FloatBuffer a,
                                @ByVal lapack_int lda, FloatBuffer sva, FloatBuffer u,
                                @ByVal lapack_int ldu, FloatBuffer v, @ByVal lapack_int ldv,
                                FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgejsv_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp,
                                @ByVal lapack_int m, @ByVal lapack_int n, float[] a,
                                @ByVal lapack_int lda, float[] sva, float[] u,
                                @ByVal lapack_int ldu, float[] v, @ByVal lapack_int ldv,
                                float[] work, @ByVal lapack_int lwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sgelq2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatPointer a, @ByVal lapack_int lda, FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_sgelq2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatBuffer a, @ByVal lapack_int lda, FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_sgelq2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           float[] a, @ByVal lapack_int lda, float[] tau );

public static native @ByVal lapack_int LAPACKE_sgelq2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda, FloatPointer tau,
                                FloatPointer work );
public static native @ByVal lapack_int LAPACKE_sgelq2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda, FloatBuffer tau,
                                FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_sgelq2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda, float[] tau,
                                float[] work );

public static native @ByVal lapack_int LAPACKE_sgelqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatPointer a, @ByVal lapack_int lda, FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_sgelqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatBuffer a, @ByVal lapack_int lda, FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_sgelqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           float[] a, @ByVal lapack_int lda, float[] tau );

public static native @ByVal lapack_int LAPACKE_sgelqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda, FloatPointer tau,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgelqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda, FloatBuffer tau,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgelqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda, float[] tau,
                                float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sgels( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                          @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatPointer a,
                          @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgels( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                          @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatBuffer a,
                          @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgels( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                          @ByVal lapack_int n, @ByVal lapack_int nrhs, float[] a,
                          @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sgels_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                               @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatPointer a,
                               @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb,
                               FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgels_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                               @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatBuffer a,
                               @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb,
                               FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgels_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                               @ByVal lapack_int n, @ByVal lapack_int nrhs, float[] a,
                               @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb,
                               float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sgelsd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, FloatPointer a, @ByVal lapack_int lda, FloatPointer b,
                           @ByVal lapack_int ldb, FloatPointer s, float rcond,
                           lapack_int rank );
public static native @ByVal lapack_int LAPACKE_sgelsd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b,
                           @ByVal lapack_int ldb, FloatBuffer s, float rcond,
                           lapack_int rank );
public static native @ByVal lapack_int LAPACKE_sgelsd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, float[] a, @ByVal lapack_int lda, float[] b,
                           @ByVal lapack_int ldb, float[] s, float rcond,
                           lapack_int rank );

public static native @ByVal lapack_int LAPACKE_sgelsd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, FloatPointer a, @ByVal lapack_int lda,
                                FloatPointer b, @ByVal lapack_int ldb, FloatPointer s, float rcond,
                                lapack_int rank, FloatPointer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgelsd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, FloatBuffer a, @ByVal lapack_int lda,
                                FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer s, float rcond,
                                lapack_int rank, FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgelsd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, float[] a, @ByVal lapack_int lda,
                                float[] b, @ByVal lapack_int ldb, float[] s, float rcond,
                                lapack_int rank, float[] work, @ByVal lapack_int lwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sgelss( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, FloatPointer a, @ByVal lapack_int lda, FloatPointer b,
                           @ByVal lapack_int ldb, FloatPointer s, float rcond,
                           lapack_int rank );
public static native @ByVal lapack_int LAPACKE_sgelss( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b,
                           @ByVal lapack_int ldb, FloatBuffer s, float rcond,
                           lapack_int rank );
public static native @ByVal lapack_int LAPACKE_sgelss( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, float[] a, @ByVal lapack_int lda, float[] b,
                           @ByVal lapack_int ldb, float[] s, float rcond,
                           lapack_int rank );

public static native @ByVal lapack_int LAPACKE_sgelss_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, FloatPointer a, @ByVal lapack_int lda,
                                FloatPointer b, @ByVal lapack_int ldb, FloatPointer s, float rcond,
                                lapack_int rank, FloatPointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgelss_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, FloatBuffer a, @ByVal lapack_int lda,
                                FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer s, float rcond,
                                lapack_int rank, FloatBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgelss_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, float[] a, @ByVal lapack_int lda,
                                float[] b, @ByVal lapack_int ldb, float[] s, float rcond,
                                lapack_int rank, float[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sgelsy( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, FloatPointer a, @ByVal lapack_int lda, FloatPointer b,
                           @ByVal lapack_int ldb, lapack_int jpvt, float rcond,
                           lapack_int rank );
public static native @ByVal lapack_int LAPACKE_sgelsy( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b,
                           @ByVal lapack_int ldb, lapack_int jpvt, float rcond,
                           lapack_int rank );
public static native @ByVal lapack_int LAPACKE_sgelsy( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, float[] a, @ByVal lapack_int lda, float[] b,
                           @ByVal lapack_int ldb, lapack_int jpvt, float rcond,
                           lapack_int rank );

public static native @ByVal lapack_int LAPACKE_sgelsy_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, FloatPointer a, @ByVal lapack_int lda,
                                FloatPointer b, @ByVal lapack_int ldb, lapack_int jpvt,
                                float rcond, lapack_int rank, FloatPointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgelsy_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, FloatBuffer a, @ByVal lapack_int lda,
                                FloatBuffer b, @ByVal lapack_int ldb, lapack_int jpvt,
                                float rcond, lapack_int rank, FloatBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgelsy_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, float[] a, @ByVal lapack_int lda,
                                float[] b, @ByVal lapack_int ldb, lapack_int jpvt,
                                float rcond, lapack_int rank, float[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sgemqrt( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                            @ByVal lapack_int nb, @Const FloatPointer v, @ByVal lapack_int ldv,
                            @Const FloatPointer t, @ByVal lapack_int ldt, FloatPointer c,
                            @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sgemqrt( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                            @ByVal lapack_int nb, @Const FloatBuffer v, @ByVal lapack_int ldv,
                            @Const FloatBuffer t, @ByVal lapack_int ldt, FloatBuffer c,
                            @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sgemqrt( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                            @ByVal lapack_int nb, @Const float[] v, @ByVal lapack_int ldv,
                            @Const float[] t, @ByVal lapack_int ldt, float[] c,
                            @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_sgemqrt_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                 @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                 @ByVal lapack_int nb, @Const FloatPointer v, @ByVal lapack_int ldv,
                                 @Const FloatPointer t, @ByVal lapack_int ldt, FloatPointer c,
                                 @ByVal lapack_int ldc, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_sgemqrt_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                 @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                 @ByVal lapack_int nb, @Const FloatBuffer v, @ByVal lapack_int ldv,
                                 @Const FloatBuffer t, @ByVal lapack_int ldt, FloatBuffer c,
                                 @ByVal lapack_int ldc, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_sgemqrt_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                 @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                 @ByVal lapack_int nb, @Const float[] v, @ByVal lapack_int ldv,
                                 @Const float[] t, @ByVal lapack_int ldt, float[] c,
                                 @ByVal lapack_int ldc, float[] work );

public static native @ByVal lapack_int LAPACKE_sgeqlf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatPointer a, @ByVal lapack_int lda, FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_sgeqlf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatBuffer a, @ByVal lapack_int lda, FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_sgeqlf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           float[] a, @ByVal lapack_int lda, float[] tau );

public static native @ByVal lapack_int LAPACKE_sgeqlf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda, FloatPointer tau,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgeqlf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda, FloatBuffer tau,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgeqlf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda, float[] tau,
                                float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sgeqp3( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatPointer a, @ByVal lapack_int lda, lapack_int jpvt,
                           FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_sgeqp3( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatBuffer a, @ByVal lapack_int lda, lapack_int jpvt,
                           FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_sgeqp3( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           float[] a, @ByVal lapack_int lda, lapack_int jpvt,
                           float[] tau );

public static native @ByVal lapack_int LAPACKE_sgeqp3_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda, lapack_int jpvt,
                                FloatPointer tau, FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgeqp3_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda, lapack_int jpvt,
                                FloatBuffer tau, FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgeqp3_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda, lapack_int jpvt,
                                float[] tau, float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sgeqpf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatPointer a, @ByVal lapack_int lda, lapack_int jpvt,
                           FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_sgeqpf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatBuffer a, @ByVal lapack_int lda, lapack_int jpvt,
                           FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_sgeqpf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           float[] a, @ByVal lapack_int lda, lapack_int jpvt,
                           float[] tau );

public static native @ByVal lapack_int LAPACKE_sgeqpf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda, lapack_int jpvt,
                                FloatPointer tau, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_sgeqpf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda, lapack_int jpvt,
                                FloatBuffer tau, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_sgeqpf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda, lapack_int jpvt,
                                float[] tau, float[] work );

public static native @ByVal lapack_int LAPACKE_sgeqr2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatPointer a, @ByVal lapack_int lda, FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_sgeqr2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatBuffer a, @ByVal lapack_int lda, FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_sgeqr2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           float[] a, @ByVal lapack_int lda, float[] tau );

public static native @ByVal lapack_int LAPACKE_sgeqr2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda, FloatPointer tau,
                                FloatPointer work );
public static native @ByVal lapack_int LAPACKE_sgeqr2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda, FloatBuffer tau,
                                FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_sgeqr2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda, float[] tau,
                                float[] work );

public static native @ByVal lapack_int LAPACKE_sgeqrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatPointer a, @ByVal lapack_int lda, FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_sgeqrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatBuffer a, @ByVal lapack_int lda, FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_sgeqrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           float[] a, @ByVal lapack_int lda, float[] tau );

public static native @ByVal lapack_int LAPACKE_sgeqrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda, FloatPointer tau,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgeqrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda, FloatBuffer tau,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgeqrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda, float[] tau,
                                float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sgeqrfp( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            FloatPointer a, @ByVal lapack_int lda, FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_sgeqrfp( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            FloatBuffer a, @ByVal lapack_int lda, FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_sgeqrfp( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            float[] a, @ByVal lapack_int lda, float[] tau );

public static native @ByVal lapack_int LAPACKE_sgeqrfp_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 FloatPointer a, @ByVal lapack_int lda, FloatPointer tau,
                                 FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgeqrfp_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 FloatBuffer a, @ByVal lapack_int lda, FloatBuffer tau,
                                 FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgeqrfp_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 float[] a, @ByVal lapack_int lda, float[] tau,
                                 float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sgeqrt( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nb, FloatPointer a, @ByVal lapack_int lda, FloatPointer t,
                           @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_sgeqrt( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nb, FloatBuffer a, @ByVal lapack_int lda, FloatBuffer t,
                           @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_sgeqrt( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nb, float[] a, @ByVal lapack_int lda, float[] t,
                           @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_sgeqrt2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            FloatPointer a, @ByVal lapack_int lda, FloatPointer t, @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_sgeqrt2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            FloatBuffer a, @ByVal lapack_int lda, FloatBuffer t, @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_sgeqrt2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            float[] a, @ByVal lapack_int lda, float[] t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_sgeqrt2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 FloatPointer a, @ByVal lapack_int lda, FloatPointer t,
                                 @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_sgeqrt2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 FloatBuffer a, @ByVal lapack_int lda, FloatBuffer t,
                                 @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_sgeqrt2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 float[] a, @ByVal lapack_int lda, float[] t,
                                 @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_sgeqrt3( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            FloatPointer a, @ByVal lapack_int lda, FloatPointer t, @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_sgeqrt3( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            FloatBuffer a, @ByVal lapack_int lda, FloatBuffer t, @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_sgeqrt3( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            float[] a, @ByVal lapack_int lda, float[] t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_sgeqrt3_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 FloatPointer a, @ByVal lapack_int lda, FloatPointer t,
                                 @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_sgeqrt3_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 FloatBuffer a, @ByVal lapack_int lda, FloatBuffer t,
                                 @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_sgeqrt3_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 float[] a, @ByVal lapack_int lda, float[] t,
                                 @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_sgeqrt_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nb, FloatPointer a, @ByVal lapack_int lda,
                                FloatPointer t, @ByVal lapack_int ldt, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_sgeqrt_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nb, FloatBuffer a, @ByVal lapack_int lda,
                                FloatBuffer t, @ByVal lapack_int ldt, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_sgeqrt_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nb, float[] a, @ByVal lapack_int lda,
                                float[] t, @ByVal lapack_int ldt, float[] work );

public static native @ByVal lapack_int LAPACKE_sgerfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatPointer a, @ByVal lapack_int lda,
                           @Const FloatPointer af, @ByVal lapack_int ldaf,
                           @Const lapack_int ipiv, @Const FloatPointer b,
                           @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                           FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_sgerfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatBuffer a, @ByVal lapack_int lda,
                           @Const FloatBuffer af, @ByVal lapack_int ldaf,
                           @Const lapack_int ipiv, @Const FloatBuffer b,
                           @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                           FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_sgerfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const float[] a, @ByVal lapack_int lda,
                           @Const float[] af, @ByVal lapack_int ldaf,
                           @Const lapack_int ipiv, @Const float[] b,
                           @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                           float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_sgerfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatPointer a, @ByVal lapack_int lda,
                                @Const FloatPointer af, @ByVal lapack_int ldaf,
                                @Const lapack_int ipiv, @Const FloatPointer b,
                                @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                                FloatPointer ferr, FloatPointer berr, FloatPointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgerfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatBuffer a, @ByVal lapack_int lda,
                                @Const FloatBuffer af, @ByVal lapack_int ldaf,
                                @Const lapack_int ipiv, @Const FloatBuffer b,
                                @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                                FloatBuffer ferr, FloatBuffer berr, FloatBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgerfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const float[] a, @ByVal lapack_int lda,
                                @Const float[] af, @ByVal lapack_int ldaf,
                                @Const lapack_int ipiv, @Const float[] b,
                                @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                                float[] ferr, float[] berr, float[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sgerfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatPointer a,
                            @ByVal lapack_int lda, @Const FloatPointer af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const FloatPointer r,
                            @Const FloatPointer c, @Const FloatPointer b, @ByVal lapack_int ldb,
                            FloatPointer x, @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer berr,
                            @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                            FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatPointer params );
public static native @ByVal lapack_int LAPACKE_sgerfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatBuffer a,
                            @ByVal lapack_int lda, @Const FloatBuffer af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const FloatBuffer r,
                            @Const FloatBuffer c, @Const FloatBuffer b, @ByVal lapack_int ldb,
                            FloatBuffer x, @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer berr,
                            @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                            FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatBuffer params );
public static native @ByVal lapack_int LAPACKE_sgerfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const float[] a,
                            @ByVal lapack_int lda, @Const float[] af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const float[] r,
                            @Const float[] c, @Const float[] b, @ByVal lapack_int ldb,
                            float[] x, @ByVal lapack_int ldx, float[] rcond, float[] berr,
                            @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                            float[] err_bnds_comp, @ByVal lapack_int nparams,
                            float[] params );

public static native @ByVal lapack_int LAPACKE_sgerfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatPointer a,
                                 @ByVal lapack_int lda, @Const FloatPointer af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const FloatPointer r, @Const FloatPointer c, @Const FloatPointer b,
                                 @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                                 FloatPointer rcond, FloatPointer berr,
                                 @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                                 FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatPointer params, FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgerfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatBuffer a,
                                 @ByVal lapack_int lda, @Const FloatBuffer af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const FloatBuffer r, @Const FloatBuffer c, @Const FloatBuffer b,
                                 @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                                 FloatBuffer rcond, FloatBuffer berr,
                                 @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                                 FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatBuffer params, FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgerfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const float[] a,
                                 @ByVal lapack_int lda, @Const float[] af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const float[] r, @Const float[] c, @Const float[] b,
                                 @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                                 float[] rcond, float[] berr,
                                 @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                                 float[] err_bnds_comp, @ByVal lapack_int nparams,
                                 float[] params, float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sgerqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatPointer a, @ByVal lapack_int lda, FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_sgerqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatBuffer a, @ByVal lapack_int lda, FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_sgerqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           float[] a, @ByVal lapack_int lda, float[] tau );

public static native @ByVal lapack_int LAPACKE_sgerqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda, FloatPointer tau,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgerqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda, FloatBuffer tau,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgerqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda, float[] tau,
                                float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sgesdd( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                           @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda, FloatPointer s,
                           FloatPointer u, @ByVal lapack_int ldu, FloatPointer vt,
                           @ByVal lapack_int ldvt );
public static native @ByVal lapack_int LAPACKE_sgesdd( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                           @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda, FloatBuffer s,
                           FloatBuffer u, @ByVal lapack_int ldu, FloatBuffer vt,
                           @ByVal lapack_int ldvt );
public static native @ByVal lapack_int LAPACKE_sgesdd( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                           @ByVal lapack_int n, float[] a, @ByVal lapack_int lda, float[] s,
                           float[] u, @ByVal lapack_int ldu, float[] vt,
                           @ByVal lapack_int ldvt );

public static native @ByVal lapack_int LAPACKE_sgesdd_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                                @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda,
                                FloatPointer s, FloatPointer u, @ByVal lapack_int ldu, FloatPointer vt,
                                @ByVal lapack_int ldvt, FloatPointer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgesdd_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                                @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda,
                                FloatBuffer s, FloatBuffer u, @ByVal lapack_int ldu, FloatBuffer vt,
                                @ByVal lapack_int ldvt, FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgesdd_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                                @ByVal lapack_int n, float[] a, @ByVal lapack_int lda,
                                float[] s, float[] u, @ByVal lapack_int ldu, float[] vt,
                                @ByVal lapack_int ldvt, float[] work, @ByVal lapack_int lwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sgesv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          FloatPointer a, @ByVal lapack_int lda, lapack_int ipiv, FloatPointer b,
                          @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgesv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          FloatBuffer a, @ByVal lapack_int lda, lapack_int ipiv, FloatBuffer b,
                          @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgesv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          float[] a, @ByVal lapack_int lda, lapack_int ipiv, float[] b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sgesv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               FloatPointer a, @ByVal lapack_int lda, lapack_int ipiv,
                               FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgesv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               FloatBuffer a, @ByVal lapack_int lda, lapack_int ipiv,
                               FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgesv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               float[] a, @ByVal lapack_int lda, lapack_int ipiv,
                               float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sgesvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                           @ByVal lapack_int m, @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda,
                           FloatPointer s, FloatPointer u, @ByVal lapack_int ldu, FloatPointer vt,
                           @ByVal lapack_int ldvt, FloatPointer superb );
public static native @ByVal lapack_int LAPACKE_sgesvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                           @ByVal lapack_int m, @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda,
                           FloatBuffer s, FloatBuffer u, @ByVal lapack_int ldu, FloatBuffer vt,
                           @ByVal lapack_int ldvt, FloatBuffer superb );
public static native @ByVal lapack_int LAPACKE_sgesvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                           @ByVal lapack_int m, @ByVal lapack_int n, float[] a, @ByVal lapack_int lda,
                           float[] s, float[] u, @ByVal lapack_int ldu, float[] vt,
                           @ByVal lapack_int ldvt, float[] superb );

public static native @ByVal lapack_int LAPACKE_sgesvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                                @ByVal lapack_int m, @ByVal lapack_int n, FloatPointer a,
                                @ByVal lapack_int lda, FloatPointer s, FloatPointer u,
                                @ByVal lapack_int ldu, FloatPointer vt, @ByVal lapack_int ldvt,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgesvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                                @ByVal lapack_int m, @ByVal lapack_int n, FloatBuffer a,
                                @ByVal lapack_int lda, FloatBuffer s, FloatBuffer u,
                                @ByVal lapack_int ldu, FloatBuffer vt, @ByVal lapack_int ldvt,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgesvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                                @ByVal lapack_int m, @ByVal lapack_int n, float[] a,
                                @ByVal lapack_int lda, float[] s, float[] u,
                                @ByVal lapack_int ldu, float[] vt, @ByVal lapack_int ldvt,
                                float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sgesvdx( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                           @ByVal lapack_int m, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                           FloatPointer s, FloatPointer u, @ByVal lapack_int ldu,
                           FloatPointer vt, @ByVal lapack_int ldvt,
                           lapack_int superb );
public static native @ByVal lapack_int LAPACKE_sgesvdx( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                           @ByVal lapack_int m, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                           FloatBuffer s, FloatBuffer u, @ByVal lapack_int ldu,
                           FloatBuffer vt, @ByVal lapack_int ldvt,
                           lapack_int superb );
public static native @ByVal lapack_int LAPACKE_sgesvdx( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                           @ByVal lapack_int m, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                           float[] s, float[] u, @ByVal lapack_int ldu,
                           float[] vt, @ByVal lapack_int ldvt,
                           lapack_int superb );

public static native @ByVal lapack_int LAPACKE_sgesvdx_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                              @ByVal lapack_int m, @ByVal lapack_int n, FloatPointer a,
                              @ByVal lapack_int lda, float vl, float vu,
                              @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                              FloatPointer s, FloatPointer u, @ByVal lapack_int ldu,
                              FloatPointer vt, @ByVal lapack_int ldvt,
                                FloatPointer work, @ByVal lapack_int lwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgesvdx_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                              @ByVal lapack_int m, @ByVal lapack_int n, FloatBuffer a,
                              @ByVal lapack_int lda, float vl, float vu,
                              @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                              FloatBuffer s, FloatBuffer u, @ByVal lapack_int ldu,
                              FloatBuffer vt, @ByVal lapack_int ldvt,
                                FloatBuffer work, @ByVal lapack_int lwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgesvdx_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                              @ByVal lapack_int m, @ByVal lapack_int n, float[] a,
                              @ByVal lapack_int lda, float vl, float vu,
                              @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                              float[] s, float[] u, @ByVal lapack_int ldu,
                              float[] vt, @ByVal lapack_int ldvt,
                                float[] work, @ByVal lapack_int lwork, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sgesvj( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @ByVal lapack_int m, @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda,
                           FloatPointer sva, @ByVal lapack_int mv, FloatPointer v, @ByVal lapack_int ldv,
                           FloatPointer stat );
public static native @ByVal lapack_int LAPACKE_sgesvj( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @ByVal lapack_int m, @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda,
                           FloatBuffer sva, @ByVal lapack_int mv, FloatBuffer v, @ByVal lapack_int ldv,
                           FloatBuffer stat );
public static native @ByVal lapack_int LAPACKE_sgesvj( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @ByVal lapack_int m, @ByVal lapack_int n, float[] a, @ByVal lapack_int lda,
                           float[] sva, @ByVal lapack_int mv, float[] v, @ByVal lapack_int ldv,
                           float[] stat );

public static native @ByVal lapack_int LAPACKE_sgesvj_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @ByVal lapack_int m, @ByVal lapack_int n, FloatPointer a,
                                @ByVal lapack_int lda, FloatPointer sva, @ByVal lapack_int mv,
                                FloatPointer v, @ByVal lapack_int ldv, FloatPointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgesvj_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @ByVal lapack_int m, @ByVal lapack_int n, FloatBuffer a,
                                @ByVal lapack_int lda, FloatBuffer sva, @ByVal lapack_int mv,
                                FloatBuffer v, @ByVal lapack_int ldv, FloatBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgesvj_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @ByVal lapack_int m, @ByVal lapack_int n, float[] a,
                                @ByVal lapack_int lda, float[] sva, @ByVal lapack_int mv,
                                float[] v, @ByVal lapack_int ldv, float[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sgesvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatPointer a,
                           @ByVal lapack_int lda, FloatPointer af, @ByVal lapack_int ldaf,
                           lapack_int ipiv, @Cast("char*") BytePointer equed, FloatPointer r, FloatPointer c,
                           FloatPointer b, @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                           FloatPointer rcond, FloatPointer ferr, FloatPointer berr,
                           FloatPointer rpivot );
public static native @ByVal lapack_int LAPACKE_sgesvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatBuffer a,
                           @ByVal lapack_int lda, FloatBuffer af, @ByVal lapack_int ldaf,
                           lapack_int ipiv, @Cast("char*") ByteBuffer equed, FloatBuffer r, FloatBuffer c,
                           FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                           FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr,
                           FloatBuffer rpivot );
public static native @ByVal lapack_int LAPACKE_sgesvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, float[] a,
                           @ByVal lapack_int lda, float[] af, @ByVal lapack_int ldaf,
                           lapack_int ipiv, @Cast("char*") byte[] equed, float[] r, float[] c,
                           float[] b, @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                           float[] rcond, float[] ferr, float[] berr,
                           float[] rpivot );

public static native @ByVal lapack_int LAPACKE_sgesvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatPointer a,
                                @ByVal lapack_int lda, FloatPointer af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Cast("char*") BytePointer equed, FloatPointer r,
                                FloatPointer c, FloatPointer b, @ByVal lapack_int ldb, FloatPointer x,
                                @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer ferr,
                                FloatPointer berr, FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgesvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatBuffer a,
                                @ByVal lapack_int lda, FloatBuffer af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Cast("char*") ByteBuffer equed, FloatBuffer r,
                                FloatBuffer c, FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer x,
                                @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer ferr,
                                FloatBuffer berr, FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgesvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, float[] a,
                                @ByVal lapack_int lda, float[] af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Cast("char*") byte[] equed, float[] r,
                                float[] c, float[] b, @ByVal lapack_int ldb, float[] x,
                                @ByVal lapack_int ldx, float[] rcond, float[] ferr,
                                float[] berr, float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sgesvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatPointer a,
                            @ByVal lapack_int lda, FloatPointer af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") BytePointer equed, FloatPointer r, FloatPointer c,
                            FloatPointer b, @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                            FloatPointer rcond, FloatPointer rpvgrw, FloatPointer berr,
                            @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                            FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatPointer params );
public static native @ByVal lapack_int LAPACKE_sgesvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatBuffer a,
                            @ByVal lapack_int lda, FloatBuffer af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") ByteBuffer equed, FloatBuffer r, FloatBuffer c,
                            FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                            FloatBuffer rcond, FloatBuffer rpvgrw, FloatBuffer berr,
                            @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                            FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatBuffer params );
public static native @ByVal lapack_int LAPACKE_sgesvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, float[] a,
                            @ByVal lapack_int lda, float[] af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") byte[] equed, float[] r, float[] c,
                            float[] b, @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                            float[] rcond, float[] rpvgrw, float[] berr,
                            @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                            float[] err_bnds_comp, @ByVal lapack_int nparams,
                            float[] params );

public static native @ByVal lapack_int LAPACKE_sgesvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatPointer a,
                                 @ByVal lapack_int lda, FloatPointer af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") BytePointer equed, FloatPointer r,
                                 FloatPointer c, FloatPointer b, @ByVal lapack_int ldb, FloatPointer x,
                                 @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer rpvgrw,
                                 FloatPointer berr, @ByVal lapack_int n_err_bnds,
                                 FloatPointer err_bnds_norm, FloatPointer err_bnds_comp,
                                 @ByVal lapack_int nparams, FloatPointer params, FloatPointer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgesvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatBuffer a,
                                 @ByVal lapack_int lda, FloatBuffer af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") ByteBuffer equed, FloatBuffer r,
                                 FloatBuffer c, FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer x,
                                 @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer rpvgrw,
                                 FloatBuffer berr, @ByVal lapack_int n_err_bnds,
                                 FloatBuffer err_bnds_norm, FloatBuffer err_bnds_comp,
                                 @ByVal lapack_int nparams, FloatBuffer params, FloatBuffer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgesvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, float[] a,
                                 @ByVal lapack_int lda, float[] af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") byte[] equed, float[] r,
                                 float[] c, float[] b, @ByVal lapack_int ldb, float[] x,
                                 @ByVal lapack_int ldx, float[] rcond, float[] rpvgrw,
                                 float[] berr, @ByVal lapack_int n_err_bnds,
                                 float[] err_bnds_norm, float[] err_bnds_comp,
                                 @ByVal lapack_int nparams, float[] params, float[] work,
                                 lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sgetf2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatPointer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgetf2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatBuffer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgetf2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           float[] a, @ByVal lapack_int lda, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_sgetf2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgetf2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgetf2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_sgetrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatPointer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgetrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatBuffer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgetrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           float[] a, @ByVal lapack_int lda, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_sgetrf2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatPointer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgetrf2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatBuffer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgetrf2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           float[] a, @ByVal lapack_int lda, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_sgetrf2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgetrf2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgetrf2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_sgetrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgetrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgetrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_sgetri( int matrix_layout, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgetri( int matrix_layout, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgetri( int matrix_layout, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_sgetri_work( int matrix_layout, @ByVal lapack_int n, FloatPointer a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgetri_work( int matrix_layout, @ByVal lapack_int n, FloatBuffer a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgetri_work( int matrix_layout, @ByVal lapack_int n, float[] a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sgetrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatPointer a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgetrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatBuffer a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgetrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const float[] a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sgetrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatPointer a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, FloatPointer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgetrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatBuffer a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, FloatBuffer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgetrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const float[] a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, float[] b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sggbak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const FloatPointer lscale,
                           @Const FloatPointer rscale, @ByVal lapack_int m, FloatPointer v,
                           @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_sggbak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const FloatBuffer lscale,
                           @Const FloatBuffer rscale, @ByVal lapack_int m, FloatBuffer v,
                           @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_sggbak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const float[] lscale,
                           @Const float[] rscale, @ByVal lapack_int m, float[] v,
                           @ByVal lapack_int ldv );

public static native @ByVal lapack_int LAPACKE_sggbak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const FloatPointer lscale, @Const FloatPointer rscale,
                                @ByVal lapack_int m, FloatPointer v, @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_sggbak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const FloatBuffer lscale, @Const FloatBuffer rscale,
                                @ByVal lapack_int m, FloatBuffer v, @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_sggbak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const float[] lscale, @Const float[] rscale,
                                @ByVal lapack_int m, float[] v, @ByVal lapack_int ldv );

public static native @ByVal lapack_int LAPACKE_sggbal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb,
                           lapack_int ilo, lapack_int ihi, FloatPointer lscale,
                           FloatPointer rscale );
public static native @ByVal lapack_int LAPACKE_sggbal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb,
                           lapack_int ilo, lapack_int ihi, FloatBuffer lscale,
                           FloatBuffer rscale );
public static native @ByVal lapack_int LAPACKE_sggbal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb,
                           lapack_int ilo, lapack_int ihi, float[] lscale,
                           float[] rscale );

public static native @ByVal lapack_int LAPACKE_sggbal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda, FloatPointer b,
                                @ByVal lapack_int ldb, lapack_int ilo,
                                lapack_int ihi, FloatPointer lscale, FloatPointer rscale,
                                FloatPointer work );
public static native @ByVal lapack_int LAPACKE_sggbal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b,
                                @ByVal lapack_int ldb, lapack_int ilo,
                                lapack_int ihi, FloatBuffer lscale, FloatBuffer rscale,
                                FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_sggbal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda, float[] b,
                                @ByVal lapack_int ldb, lapack_int ilo,
                                lapack_int ihi, float[] lscale, float[] rscale,
                                float[] work );

public static native @ByVal lapack_int LAPACKE_sgges( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr, @Cast("char") byte sort,
                          LAPACK_S_SELECT3 selctg, @ByVal lapack_int n, FloatPointer a,
                          @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb,
                          lapack_int sdim, FloatPointer alphar, FloatPointer alphai,
                          FloatPointer beta, FloatPointer vsl, @ByVal lapack_int ldvsl, FloatPointer vsr,
                          @ByVal lapack_int ldvsr );
public static native @ByVal lapack_int LAPACKE_sgges( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr, @Cast("char") byte sort,
                          LAPACK_S_SELECT3 selctg, @ByVal lapack_int n, FloatBuffer a,
                          @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb,
                          lapack_int sdim, FloatBuffer alphar, FloatBuffer alphai,
                          FloatBuffer beta, FloatBuffer vsl, @ByVal lapack_int ldvsl, FloatBuffer vsr,
                          @ByVal lapack_int ldvsr );
public static native @ByVal lapack_int LAPACKE_sgges( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr, @Cast("char") byte sort,
                          LAPACK_S_SELECT3 selctg, @ByVal lapack_int n, float[] a,
                          @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb,
                          lapack_int sdim, float[] alphar, float[] alphai,
                          float[] beta, float[] vsl, @ByVal lapack_int ldvsl, float[] vsr,
                          @ByVal lapack_int ldvsr );

public static native @ByVal lapack_int LAPACKE_sgges3( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                           @Cast("char") byte sort, LAPACK_S_SELECT3 selctg, @ByVal lapack_int n,
                           FloatPointer a, @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb,
                           lapack_int sdim, FloatPointer alphar, FloatPointer alphai,
                           FloatPointer beta, FloatPointer vsl, @ByVal lapack_int ldvsl,
                           FloatPointer vsr, @ByVal lapack_int ldvsr );
public static native @ByVal lapack_int LAPACKE_sgges3( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                           @Cast("char") byte sort, LAPACK_S_SELECT3 selctg, @ByVal lapack_int n,
                           FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb,
                           lapack_int sdim, FloatBuffer alphar, FloatBuffer alphai,
                           FloatBuffer beta, FloatBuffer vsl, @ByVal lapack_int ldvsl,
                           FloatBuffer vsr, @ByVal lapack_int ldvsr );
public static native @ByVal lapack_int LAPACKE_sgges3( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                           @Cast("char") byte sort, LAPACK_S_SELECT3 selctg, @ByVal lapack_int n,
                           float[] a, @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb,
                           lapack_int sdim, float[] alphar, float[] alphai,
                           float[] beta, float[] vsl, @ByVal lapack_int ldvsl,
                           float[] vsr, @ByVal lapack_int ldvsr );

public static native @ByVal lapack_int LAPACKE_sgges3_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                                @Cast("char") byte sort, LAPACK_S_SELECT3 selctg,
                                @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda,
                                FloatPointer b, @ByVal lapack_int ldb, lapack_int sdim,
                                FloatPointer alphar, FloatPointer alphai, FloatPointer beta,
                                FloatPointer vsl, @ByVal lapack_int ldvsl,
                                FloatPointer vsr, @ByVal lapack_int ldvsr,
                                FloatPointer work, @ByVal lapack_int lwork,
                                lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_sgges3_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                                @Cast("char") byte sort, LAPACK_S_SELECT3 selctg,
                                @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda,
                                FloatBuffer b, @ByVal lapack_int ldb, lapack_int sdim,
                                FloatBuffer alphar, FloatBuffer alphai, FloatBuffer beta,
                                FloatBuffer vsl, @ByVal lapack_int ldvsl,
                                FloatBuffer vsr, @ByVal lapack_int ldvsr,
                                FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_sgges3_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                                @Cast("char") byte sort, LAPACK_S_SELECT3 selctg,
                                @ByVal lapack_int n, float[] a, @ByVal lapack_int lda,
                                float[] b, @ByVal lapack_int ldb, lapack_int sdim,
                                float[] alphar, float[] alphai, float[] beta,
                                float[] vsl, @ByVal lapack_int ldvsl,
                                float[] vsr, @ByVal lapack_int ldvsr,
                                float[] work, @ByVal lapack_int lwork,
                                lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_sgges_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                               @Cast("char") byte sort, LAPACK_S_SELECT3 selctg, @ByVal lapack_int n,
                               FloatPointer a, @ByVal lapack_int lda, FloatPointer b,
                               @ByVal lapack_int ldb, lapack_int sdim, FloatPointer alphar,
                               FloatPointer alphai, FloatPointer beta, FloatPointer vsl,
                               @ByVal lapack_int ldvsl, FloatPointer vsr, @ByVal lapack_int ldvsr,
                               FloatPointer work, @ByVal lapack_int lwork,
                               lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_sgges_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                               @Cast("char") byte sort, LAPACK_S_SELECT3 selctg, @ByVal lapack_int n,
                               FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b,
                               @ByVal lapack_int ldb, lapack_int sdim, FloatBuffer alphar,
                               FloatBuffer alphai, FloatBuffer beta, FloatBuffer vsl,
                               @ByVal lapack_int ldvsl, FloatBuffer vsr, @ByVal lapack_int ldvsr,
                               FloatBuffer work, @ByVal lapack_int lwork,
                               lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_sgges_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                               @Cast("char") byte sort, LAPACK_S_SELECT3 selctg, @ByVal lapack_int n,
                               float[] a, @ByVal lapack_int lda, float[] b,
                               @ByVal lapack_int ldb, lapack_int sdim, float[] alphar,
                               float[] alphai, float[] beta, float[] vsl,
                               @ByVal lapack_int ldvsl, float[] vsr, @ByVal lapack_int ldvsr,
                               float[] work, @ByVal lapack_int lwork,
                               lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_sggesx( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                           @Cast("char") byte sort, LAPACK_S_SELECT3 selctg, @Cast("char") byte sense,
                           @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda, FloatPointer b,
                           @ByVal lapack_int ldb, lapack_int sdim, FloatPointer alphar,
                           FloatPointer alphai, FloatPointer beta, FloatPointer vsl,
                           @ByVal lapack_int ldvsl, FloatPointer vsr, @ByVal lapack_int ldvsr,
                           FloatPointer rconde, FloatPointer rcondv );
public static native @ByVal lapack_int LAPACKE_sggesx( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                           @Cast("char") byte sort, LAPACK_S_SELECT3 selctg, @Cast("char") byte sense,
                           @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b,
                           @ByVal lapack_int ldb, lapack_int sdim, FloatBuffer alphar,
                           FloatBuffer alphai, FloatBuffer beta, FloatBuffer vsl,
                           @ByVal lapack_int ldvsl, FloatBuffer vsr, @ByVal lapack_int ldvsr,
                           FloatBuffer rconde, FloatBuffer rcondv );
public static native @ByVal lapack_int LAPACKE_sggesx( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                           @Cast("char") byte sort, LAPACK_S_SELECT3 selctg, @Cast("char") byte sense,
                           @ByVal lapack_int n, float[] a, @ByVal lapack_int lda, float[] b,
                           @ByVal lapack_int ldb, lapack_int sdim, float[] alphar,
                           float[] alphai, float[] beta, float[] vsl,
                           @ByVal lapack_int ldvsl, float[] vsr, @ByVal lapack_int ldvsr,
                           float[] rconde, float[] rcondv );

public static native @ByVal lapack_int LAPACKE_sggesx_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                                @Cast("char") byte sort, LAPACK_S_SELECT3 selctg, @Cast("char") byte sense,
                                @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda,
                                FloatPointer b, @ByVal lapack_int ldb, lapack_int sdim,
                                FloatPointer alphar, FloatPointer alphai, FloatPointer beta,
                                FloatPointer vsl, @ByVal lapack_int ldvsl, FloatPointer vsr,
                                @ByVal lapack_int ldvsr, FloatPointer rconde, FloatPointer rcondv,
                                FloatPointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork,
                                lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_sggesx_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                                @Cast("char") byte sort, LAPACK_S_SELECT3 selctg, @Cast("char") byte sense,
                                @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda,
                                FloatBuffer b, @ByVal lapack_int ldb, lapack_int sdim,
                                FloatBuffer alphar, FloatBuffer alphai, FloatBuffer beta,
                                FloatBuffer vsl, @ByVal lapack_int ldvsl, FloatBuffer vsr,
                                @ByVal lapack_int ldvsr, FloatBuffer rconde, FloatBuffer rcondv,
                                FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork,
                                lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_sggesx_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                                @Cast("char") byte sort, LAPACK_S_SELECT3 selctg, @Cast("char") byte sense,
                                @ByVal lapack_int n, float[] a, @ByVal lapack_int lda,
                                float[] b, @ByVal lapack_int ldb, lapack_int sdim,
                                float[] alphar, float[] alphai, float[] beta,
                                float[] vsl, @ByVal lapack_int ldvsl, float[] vsr,
                                @ByVal lapack_int ldvsr, float[] rconde, float[] rcondv,
                                float[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork,
                                lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_sggev( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                          @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda, FloatPointer b,
                          @ByVal lapack_int ldb, FloatPointer alphar, FloatPointer alphai,
                          FloatPointer beta, FloatPointer vl, @ByVal lapack_int ldvl, FloatPointer vr,
                          @ByVal lapack_int ldvr );
public static native @ByVal lapack_int LAPACKE_sggev( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                          @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b,
                          @ByVal lapack_int ldb, FloatBuffer alphar, FloatBuffer alphai,
                          FloatBuffer beta, FloatBuffer vl, @ByVal lapack_int ldvl, FloatBuffer vr,
                          @ByVal lapack_int ldvr );
public static native @ByVal lapack_int LAPACKE_sggev( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                          @ByVal lapack_int n, float[] a, @ByVal lapack_int lda, float[] b,
                          @ByVal lapack_int ldb, float[] alphar, float[] alphai,
                          float[] beta, float[] vl, @ByVal lapack_int ldvl, float[] vr,
                          @ByVal lapack_int ldvr );

public static native @ByVal lapack_int LAPACKE_sggev3( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                           @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda, FloatPointer b,
                           @ByVal lapack_int ldb, FloatPointer alphar, FloatPointer alphai,
                           FloatPointer beta, FloatPointer vl, @ByVal lapack_int ldvl, FloatPointer vr,
                           @ByVal lapack_int ldvr );
public static native @ByVal lapack_int LAPACKE_sggev3( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                           @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b,
                           @ByVal lapack_int ldb, FloatBuffer alphar, FloatBuffer alphai,
                           FloatBuffer beta, FloatBuffer vl, @ByVal lapack_int ldvl, FloatBuffer vr,
                           @ByVal lapack_int ldvr );
public static native @ByVal lapack_int LAPACKE_sggev3( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                           @ByVal lapack_int n, float[] a, @ByVal lapack_int lda, float[] b,
                           @ByVal lapack_int ldb, float[] alphar, float[] alphai,
                           float[] beta, float[] vl, @ByVal lapack_int ldvl, float[] vr,
                           @ByVal lapack_int ldvr );

public static native @ByVal lapack_int LAPACKE_sggev3_work( int matrix_layout,
                                @Cast("char") byte jobvl, @Cast("char") byte jobvr, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda,
                                FloatPointer b, @ByVal lapack_int ldb,
                                FloatPointer alphar, FloatPointer alphai, FloatPointer beta,
                                FloatPointer vl, @ByVal lapack_int ldvl,
                                FloatPointer vr, @ByVal lapack_int ldvr,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sggev3_work( int matrix_layout,
                                @Cast("char") byte jobvl, @Cast("char") byte jobvr, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda,
                                FloatBuffer b, @ByVal lapack_int ldb,
                                FloatBuffer alphar, FloatBuffer alphai, FloatBuffer beta,
                                FloatBuffer vl, @ByVal lapack_int ldvl,
                                FloatBuffer vr, @ByVal lapack_int ldvr,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sggev3_work( int matrix_layout,
                                @Cast("char") byte jobvl, @Cast("char") byte jobvr, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda,
                                float[] b, @ByVal lapack_int ldb,
                                float[] alphar, float[] alphai, float[] beta,
                                float[] vl, @ByVal lapack_int ldvl,
                                float[] vr, @ByVal lapack_int ldvr,
                                float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sggev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda, FloatPointer b,
                               @ByVal lapack_int ldb, FloatPointer alphar, FloatPointer alphai,
                               FloatPointer beta, FloatPointer vl, @ByVal lapack_int ldvl,
                               FloatPointer vr, @ByVal lapack_int ldvr, FloatPointer work,
                               @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sggev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b,
                               @ByVal lapack_int ldb, FloatBuffer alphar, FloatBuffer alphai,
                               FloatBuffer beta, FloatBuffer vl, @ByVal lapack_int ldvl,
                               FloatBuffer vr, @ByVal lapack_int ldvr, FloatBuffer work,
                               @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sggev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, float[] a, @ByVal lapack_int lda, float[] b,
                               @ByVal lapack_int ldb, float[] alphar, float[] alphai,
                               float[] beta, float[] vl, @ByVal lapack_int ldvl,
                               float[] vr, @ByVal lapack_int ldvr, float[] work,
                               @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sggevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb,
                           FloatPointer alphar, FloatPointer alphai, FloatPointer beta, FloatPointer vl,
                           @ByVal lapack_int ldvl, FloatPointer vr, @ByVal lapack_int ldvr,
                           lapack_int ilo, lapack_int ihi, FloatPointer lscale,
                           FloatPointer rscale, FloatPointer abnrm, FloatPointer bbnrm,
                           FloatPointer rconde, FloatPointer rcondv );
public static native @ByVal lapack_int LAPACKE_sggevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb,
                           FloatBuffer alphar, FloatBuffer alphai, FloatBuffer beta, FloatBuffer vl,
                           @ByVal lapack_int ldvl, FloatBuffer vr, @ByVal lapack_int ldvr,
                           lapack_int ilo, lapack_int ihi, FloatBuffer lscale,
                           FloatBuffer rscale, FloatBuffer abnrm, FloatBuffer bbnrm,
                           FloatBuffer rconde, FloatBuffer rcondv );
public static native @ByVal lapack_int LAPACKE_sggevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb,
                           float[] alphar, float[] alphai, float[] beta, float[] vl,
                           @ByVal lapack_int ldvl, float[] vr, @ByVal lapack_int ldvr,
                           lapack_int ilo, lapack_int ihi, float[] lscale,
                           float[] rscale, float[] abnrm, float[] bbnrm,
                           float[] rconde, float[] rcondv );

public static native @ByVal lapack_int LAPACKE_sggevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, FloatPointer a,
                                @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb,
                                FloatPointer alphar, FloatPointer alphai, FloatPointer beta,
                                FloatPointer vl, @ByVal lapack_int ldvl, FloatPointer vr,
                                @ByVal lapack_int ldvr, lapack_int ilo,
                                lapack_int ihi, FloatPointer lscale, FloatPointer rscale,
                                FloatPointer abnrm, FloatPointer bbnrm, FloatPointer rconde,
                                FloatPointer rcondv, FloatPointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_sggevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, FloatBuffer a,
                                @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb,
                                FloatBuffer alphar, FloatBuffer alphai, FloatBuffer beta,
                                FloatBuffer vl, @ByVal lapack_int ldvl, FloatBuffer vr,
                                @ByVal lapack_int ldvr, lapack_int ilo,
                                lapack_int ihi, FloatBuffer lscale, FloatBuffer rscale,
                                FloatBuffer abnrm, FloatBuffer bbnrm, FloatBuffer rconde,
                                FloatBuffer rcondv, FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_sggevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n, float[] a,
                                @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb,
                                float[] alphar, float[] alphai, float[] beta,
                                float[] vl, @ByVal lapack_int ldvl, float[] vr,
                                @ByVal lapack_int ldvr, lapack_int ilo,
                                lapack_int ihi, float[] lscale, float[] rscale,
                                float[] abnrm, float[] bbnrm, float[] rconde,
                                float[] rcondv, float[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_sggglm( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                           @ByVal lapack_int p, FloatPointer a, @ByVal lapack_int lda, FloatPointer b,
                           @ByVal lapack_int ldb, FloatPointer d, FloatPointer x, FloatPointer y );
public static native @ByVal lapack_int LAPACKE_sggglm( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                           @ByVal lapack_int p, FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b,
                           @ByVal lapack_int ldb, FloatBuffer d, FloatBuffer x, FloatBuffer y );
public static native @ByVal lapack_int LAPACKE_sggglm( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                           @ByVal lapack_int p, float[] a, @ByVal lapack_int lda, float[] b,
                           @ByVal lapack_int ldb, float[] d, float[] x, float[] y );

public static native @ByVal lapack_int LAPACKE_sggglm_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                                @ByVal lapack_int p, FloatPointer a, @ByVal lapack_int lda,
                                FloatPointer b, @ByVal lapack_int ldb, FloatPointer d, FloatPointer x,
                                FloatPointer y, FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sggglm_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                                @ByVal lapack_int p, FloatBuffer a, @ByVal lapack_int lda,
                                FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer d, FloatBuffer x,
                                FloatBuffer y, FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sggglm_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                                @ByVal lapack_int p, float[] a, @ByVal lapack_int lda,
                                float[] b, @ByVal lapack_int ldb, float[] d, float[] x,
                                float[] y, float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sgghd3( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           FloatPointer a, @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb,
                           FloatPointer q, @ByVal lapack_int ldq, FloatPointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_sgghd3( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb,
                           FloatBuffer q, @ByVal lapack_int ldq, FloatBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_sgghd3( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           float[] a, @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb,
                           float[] q, @ByVal lapack_int ldq, float[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_sgghd3_work( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                FloatPointer a, @ByVal lapack_int lda, FloatPointer b,
                                @ByVal lapack_int ldb, FloatPointer q, @ByVal lapack_int ldq,
                                FloatPointer z, @ByVal lapack_int ldz, FloatPointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgghd3_work( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b,
                                @ByVal lapack_int ldb, FloatBuffer q, @ByVal lapack_int ldq,
                                FloatBuffer z, @ByVal lapack_int ldz, FloatBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgghd3_work( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                float[] a, @ByVal lapack_int lda, float[] b,
                                @ByVal lapack_int ldb, float[] q, @ByVal lapack_int ldq,
                                float[] z, @ByVal lapack_int ldz, float[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sgghrd( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           FloatPointer a, @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb,
                           FloatPointer q, @ByVal lapack_int ldq, FloatPointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_sgghrd( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb,
                           FloatBuffer q, @ByVal lapack_int ldq, FloatBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_sgghrd( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           float[] a, @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb,
                           float[] q, @ByVal lapack_int ldq, float[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_sgghrd_work( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                FloatPointer a, @ByVal lapack_int lda, FloatPointer b,
                                @ByVal lapack_int ldb, FloatPointer q, @ByVal lapack_int ldq,
                                FloatPointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_sgghrd_work( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b,
                                @ByVal lapack_int ldb, FloatBuffer q, @ByVal lapack_int ldq,
                                FloatBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_sgghrd_work( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                float[] a, @ByVal lapack_int lda, float[] b,
                                @ByVal lapack_int ldb, float[] q, @ByVal lapack_int ldq,
                                float[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_sgglse( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int p, FloatPointer a, @ByVal lapack_int lda, FloatPointer b,
                           @ByVal lapack_int ldb, FloatPointer c, FloatPointer d, FloatPointer x );
public static native @ByVal lapack_int LAPACKE_sgglse( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int p, FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b,
                           @ByVal lapack_int ldb, FloatBuffer c, FloatBuffer d, FloatBuffer x );
public static native @ByVal lapack_int LAPACKE_sgglse( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int p, float[] a, @ByVal lapack_int lda, float[] b,
                           @ByVal lapack_int ldb, float[] c, float[] d, float[] x );

public static native @ByVal lapack_int LAPACKE_sgglse_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int p, FloatPointer a, @ByVal lapack_int lda,
                                FloatPointer b, @ByVal lapack_int ldb, FloatPointer c, FloatPointer d,
                                FloatPointer x, FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgglse_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int p, FloatBuffer a, @ByVal lapack_int lda,
                                FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer c, FloatBuffer d,
                                FloatBuffer x, FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgglse_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int p, float[] a, @ByVal lapack_int lda,
                                float[] b, @ByVal lapack_int ldb, float[] c, float[] d,
                                float[] x, float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sggqrf( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                           @ByVal lapack_int p, FloatPointer a, @ByVal lapack_int lda, FloatPointer taua,
                           FloatPointer b, @ByVal lapack_int ldb, FloatPointer taub );
public static native @ByVal lapack_int LAPACKE_sggqrf( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                           @ByVal lapack_int p, FloatBuffer a, @ByVal lapack_int lda, FloatBuffer taua,
                           FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer taub );
public static native @ByVal lapack_int LAPACKE_sggqrf( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                           @ByVal lapack_int p, float[] a, @ByVal lapack_int lda, float[] taua,
                           float[] b, @ByVal lapack_int ldb, float[] taub );

public static native @ByVal lapack_int LAPACKE_sggqrf_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                                @ByVal lapack_int p, FloatPointer a, @ByVal lapack_int lda,
                                FloatPointer taua, FloatPointer b, @ByVal lapack_int ldb,
                                FloatPointer taub, FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sggqrf_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                                @ByVal lapack_int p, FloatBuffer a, @ByVal lapack_int lda,
                                FloatBuffer taua, FloatBuffer b, @ByVal lapack_int ldb,
                                FloatBuffer taub, FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sggqrf_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                                @ByVal lapack_int p, float[] a, @ByVal lapack_int lda,
                                float[] taua, float[] b, @ByVal lapack_int ldb,
                                float[] taub, float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sggrqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int p,
                           @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda, FloatPointer taua,
                           FloatPointer b, @ByVal lapack_int ldb, FloatPointer taub );
public static native @ByVal lapack_int LAPACKE_sggrqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int p,
                           @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda, FloatBuffer taua,
                           FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer taub );
public static native @ByVal lapack_int LAPACKE_sggrqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int p,
                           @ByVal lapack_int n, float[] a, @ByVal lapack_int lda, float[] taua,
                           float[] b, @ByVal lapack_int ldb, float[] taub );

public static native @ByVal lapack_int LAPACKE_sggrqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda,
                                FloatPointer taua, FloatPointer b, @ByVal lapack_int ldb,
                                FloatPointer taub, FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sggrqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda,
                                FloatBuffer taua, FloatBuffer b, @ByVal lapack_int ldb,
                                FloatBuffer taub, FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sggrqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, float[] a, @ByVal lapack_int lda,
                                float[] taua, float[] b, @ByVal lapack_int ldb,
                                float[] taub, float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sggsvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                           lapack_int k, lapack_int l, FloatPointer a,
                           @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb,
                           FloatPointer alpha, FloatPointer beta, FloatPointer u, @ByVal lapack_int ldu,
                           FloatPointer v, @ByVal lapack_int ldv, FloatPointer q, @ByVal lapack_int ldq,
                           lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sggsvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                           lapack_int k, lapack_int l, FloatBuffer a,
                           @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb,
                           FloatBuffer alpha, FloatBuffer beta, FloatBuffer u, @ByVal lapack_int ldu,
                           FloatBuffer v, @ByVal lapack_int ldv, FloatBuffer q, @ByVal lapack_int ldq,
                           lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sggsvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                           lapack_int k, lapack_int l, float[] a,
                           @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb,
                           float[] alpha, float[] beta, float[] u, @ByVal lapack_int ldu,
                           float[] v, @ByVal lapack_int ldv, float[] q, @ByVal lapack_int ldq,
                           lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sggsvd3( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                            lapack_int k, lapack_int l, FloatPointer a,
                            @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb,
                            FloatPointer alpha, FloatPointer beta, FloatPointer u, @ByVal lapack_int ldu,
                            FloatPointer v, @ByVal lapack_int ldv, FloatPointer q, @ByVal lapack_int ldq,
                            lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sggsvd3( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                            lapack_int k, lapack_int l, FloatBuffer a,
                            @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb,
                            FloatBuffer alpha, FloatBuffer beta, FloatBuffer u, @ByVal lapack_int ldu,
                            FloatBuffer v, @ByVal lapack_int ldv, FloatBuffer q, @ByVal lapack_int ldq,
                            lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sggsvd3( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                            lapack_int k, lapack_int l, float[] a,
                            @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb,
                            float[] alpha, float[] beta, float[] u, @ByVal lapack_int ldu,
                            float[] v, @ByVal lapack_int ldv, float[] q, @ByVal lapack_int ldq,
                            lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sggsvd3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                 @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int p, lapack_int k, lapack_int l,
                                 FloatPointer a, @ByVal lapack_int lda, FloatPointer b,
                                 @ByVal lapack_int ldb, FloatPointer alpha, FloatPointer beta,
                                 FloatPointer u, @ByVal lapack_int ldu, FloatPointer v,
                                 @ByVal lapack_int ldv, FloatPointer q, @ByVal lapack_int ldq,
                                 FloatPointer work, @ByVal lapack_int lwork,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sggsvd3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                 @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int p, lapack_int k, lapack_int l,
                                 FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b,
                                 @ByVal lapack_int ldb, FloatBuffer alpha, FloatBuffer beta,
                                 FloatBuffer u, @ByVal lapack_int ldu, FloatBuffer v,
                                 @ByVal lapack_int ldv, FloatBuffer q, @ByVal lapack_int ldq,
                                 FloatBuffer work, @ByVal lapack_int lwork,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sggsvd3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                 @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int p, lapack_int k, lapack_int l,
                                 float[] a, @ByVal lapack_int lda, float[] b,
                                 @ByVal lapack_int ldb, float[] alpha, float[] beta,
                                 float[] u, @ByVal lapack_int ldu, float[] v,
                                 @ByVal lapack_int ldv, float[] q, @ByVal lapack_int ldq,
                                 float[] work, @ByVal lapack_int lwork,
                                 lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sggsvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int p, lapack_int k, lapack_int l,
                                FloatPointer a, @ByVal lapack_int lda, FloatPointer b,
                                @ByVal lapack_int ldb, FloatPointer alpha, FloatPointer beta,
                                FloatPointer u, @ByVal lapack_int ldu, FloatPointer v,
                                @ByVal lapack_int ldv, FloatPointer q, @ByVal lapack_int ldq,
                                FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sggsvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int p, lapack_int k, lapack_int l,
                                FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b,
                                @ByVal lapack_int ldb, FloatBuffer alpha, FloatBuffer beta,
                                FloatBuffer u, @ByVal lapack_int ldu, FloatBuffer v,
                                @ByVal lapack_int ldv, FloatBuffer q, @ByVal lapack_int ldq,
                                FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sggsvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int p, lapack_int k, lapack_int l,
                                float[] a, @ByVal lapack_int lda, float[] b,
                                @ByVal lapack_int ldb, float[] alpha, float[] beta,
                                float[] u, @ByVal lapack_int ldu, float[] v,
                                @ByVal lapack_int ldv, float[] q, @ByVal lapack_int ldq,
                                float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sggsvp( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb, float tola,
                           float tolb, lapack_int k, lapack_int l, FloatPointer u,
                           @ByVal lapack_int ldu, FloatPointer v, @ByVal lapack_int ldv, FloatPointer q,
                           @ByVal lapack_int ldq );
public static native @ByVal lapack_int LAPACKE_sggsvp( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb, float tola,
                           float tolb, lapack_int k, lapack_int l, FloatBuffer u,
                           @ByVal lapack_int ldu, FloatBuffer v, @ByVal lapack_int ldv, FloatBuffer q,
                           @ByVal lapack_int ldq );
public static native @ByVal lapack_int LAPACKE_sggsvp( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb, float tola,
                           float tolb, lapack_int k, lapack_int l, float[] u,
                           @ByVal lapack_int ldu, float[] v, @ByVal lapack_int ldv, float[] q,
                           @ByVal lapack_int ldq );

public static native @ByVal lapack_int LAPACKE_sggsvp3( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                            @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n, FloatPointer a,
                            @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb, float tola,
                            float tolb, lapack_int k, lapack_int l, FloatPointer u,
                            @ByVal lapack_int ldu, FloatPointer v, @ByVal lapack_int ldv, FloatPointer q,
                            @ByVal lapack_int ldq );
public static native @ByVal lapack_int LAPACKE_sggsvp3( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                            @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n, FloatBuffer a,
                            @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb, float tola,
                            float tolb, lapack_int k, lapack_int l, FloatBuffer u,
                            @ByVal lapack_int ldu, FloatBuffer v, @ByVal lapack_int ldv, FloatBuffer q,
                            @ByVal lapack_int ldq );
public static native @ByVal lapack_int LAPACKE_sggsvp3( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                            @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n, float[] a,
                            @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb, float tola,
                            float tolb, lapack_int k, lapack_int l, float[] u,
                            @ByVal lapack_int ldu, float[] v, @ByVal lapack_int ldv, float[] q,
                            @ByVal lapack_int ldq );

public static native @ByVal lapack_int LAPACKE_sggsvp3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                 @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                 @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda,
                                 FloatPointer b, @ByVal lapack_int ldb, float tola,
                                 float tolb, lapack_int k, lapack_int l,
                                 FloatPointer u, @ByVal lapack_int ldu, FloatPointer v,
                                 @ByVal lapack_int ldv, FloatPointer q, @ByVal lapack_int ldq,
                                 lapack_int iwork, FloatPointer tau, FloatPointer work,
                                 @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sggsvp3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                 @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                 @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda,
                                 FloatBuffer b, @ByVal lapack_int ldb, float tola,
                                 float tolb, lapack_int k, lapack_int l,
                                 FloatBuffer u, @ByVal lapack_int ldu, FloatBuffer v,
                                 @ByVal lapack_int ldv, FloatBuffer q, @ByVal lapack_int ldq,
                                 lapack_int iwork, FloatBuffer tau, FloatBuffer work,
                                 @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sggsvp3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                 @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                 @ByVal lapack_int n, float[] a, @ByVal lapack_int lda,
                                 float[] b, @ByVal lapack_int ldb, float tola,
                                 float tolb, lapack_int k, lapack_int l,
                                 float[] u, @ByVal lapack_int ldu, float[] v,
                                 @ByVal lapack_int ldv, float[] q, @ByVal lapack_int ldq,
                                 lapack_int iwork, float[] tau, float[] work,
                                 @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sggsvp_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda,
                                FloatPointer b, @ByVal lapack_int ldb, float tola,
                                float tolb, lapack_int k, lapack_int l,
                                FloatPointer u, @ByVal lapack_int ldu, FloatPointer v,
                                @ByVal lapack_int ldv, FloatPointer q, @ByVal lapack_int ldq,
                                lapack_int iwork, FloatPointer tau, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_sggsvp_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda,
                                FloatBuffer b, @ByVal lapack_int ldb, float tola,
                                float tolb, lapack_int k, lapack_int l,
                                FloatBuffer u, @ByVal lapack_int ldu, FloatBuffer v,
                                @ByVal lapack_int ldv, FloatBuffer q, @ByVal lapack_int ldq,
                                lapack_int iwork, FloatBuffer tau, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_sggsvp_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, float[] a, @ByVal lapack_int lda,
                                float[] b, @ByVal lapack_int ldb, float tola,
                                float tolb, lapack_int k, lapack_int l,
                                float[] u, @ByVal lapack_int ldu, float[] v,
                                @ByVal lapack_int ldv, float[] q, @ByVal lapack_int ldq,
                                lapack_int iwork, float[] tau, float[] work );

public static native @ByVal lapack_int LAPACKE_sgtcon( @Cast("char") byte norm, @ByVal lapack_int n, @Const FloatPointer dl,
                           @Const FloatPointer d, @Const FloatPointer du, @Const FloatPointer du2,
                           @Const lapack_int ipiv, float anorm, FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_sgtcon( @Cast("char") byte norm, @ByVal lapack_int n, @Const FloatBuffer dl,
                           @Const FloatBuffer d, @Const FloatBuffer du, @Const FloatBuffer du2,
                           @Const lapack_int ipiv, float anorm, FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_sgtcon( @Cast("char") byte norm, @ByVal lapack_int n, @Const float[] dl,
                           @Const float[] d, @Const float[] du, @Const float[] du2,
                           @Const lapack_int ipiv, float anorm, float[] rcond );

public static native @ByVal lapack_int LAPACKE_sgtcon_work( @Cast("char") byte norm, @ByVal lapack_int n, @Const FloatPointer dl,
                                @Const FloatPointer d, @Const FloatPointer du,
                                @Const FloatPointer du2, @Const lapack_int ipiv,
                                float anorm, FloatPointer rcond, FloatPointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgtcon_work( @Cast("char") byte norm, @ByVal lapack_int n, @Const FloatBuffer dl,
                                @Const FloatBuffer d, @Const FloatBuffer du,
                                @Const FloatBuffer du2, @Const lapack_int ipiv,
                                float anorm, FloatBuffer rcond, FloatBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgtcon_work( @Cast("char") byte norm, @ByVal lapack_int n, @Const float[] dl,
                                @Const float[] d, @Const float[] du,
                                @Const float[] du2, @Const lapack_int ipiv,
                                float anorm, float[] rcond, float[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sgtrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatPointer dl, @Const FloatPointer d,
                           @Const FloatPointer du, @Const FloatPointer dlf, @Const FloatPointer df,
                           @Const FloatPointer duf, @Const FloatPointer du2,
                           @Const lapack_int ipiv, @Const FloatPointer b,
                           @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                           FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_sgtrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatBuffer dl, @Const FloatBuffer d,
                           @Const FloatBuffer du, @Const FloatBuffer dlf, @Const FloatBuffer df,
                           @Const FloatBuffer duf, @Const FloatBuffer du2,
                           @Const lapack_int ipiv, @Const FloatBuffer b,
                           @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                           FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_sgtrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const float[] dl, @Const float[] d,
                           @Const float[] du, @Const float[] dlf, @Const float[] df,
                           @Const float[] duf, @Const float[] du2,
                           @Const lapack_int ipiv, @Const float[] b,
                           @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                           float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_sgtrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatPointer dl,
                                @Const FloatPointer d, @Const FloatPointer du,
                                @Const FloatPointer dlf, @Const FloatPointer df,
                                @Const FloatPointer duf, @Const FloatPointer du2,
                                @Const lapack_int ipiv, @Const FloatPointer b,
                                @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                                FloatPointer ferr, FloatPointer berr, FloatPointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgtrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatBuffer dl,
                                @Const FloatBuffer d, @Const FloatBuffer du,
                                @Const FloatBuffer dlf, @Const FloatBuffer df,
                                @Const FloatBuffer duf, @Const FloatBuffer du2,
                                @Const lapack_int ipiv, @Const FloatBuffer b,
                                @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                                FloatBuffer ferr, FloatBuffer berr, FloatBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgtrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const float[] dl,
                                @Const float[] d, @Const float[] du,
                                @Const float[] dlf, @Const float[] df,
                                @Const float[] duf, @Const float[] du2,
                                @Const lapack_int ipiv, @Const float[] b,
                                @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                                float[] ferr, float[] berr, float[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sgtsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          FloatPointer dl, FloatPointer d, FloatPointer du, FloatPointer b,
                          @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgtsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          FloatBuffer dl, FloatBuffer d, FloatBuffer du, FloatBuffer b,
                          @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgtsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          float[] dl, float[] d, float[] du, float[] b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sgtsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               FloatPointer dl, FloatPointer d, FloatPointer du, FloatPointer b,
                               @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgtsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               FloatBuffer dl, FloatBuffer d, FloatBuffer du, FloatBuffer b,
                               @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgtsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               float[] dl, float[] d, float[] du, float[] b,
                               @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sgtsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatPointer dl,
                           @Const FloatPointer d, @Const FloatPointer du, FloatPointer dlf,
                           FloatPointer df, FloatPointer duf, FloatPointer du2, lapack_int ipiv,
                           @Const FloatPointer b, @ByVal lapack_int ldb, FloatPointer x,
                           @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer ferr,
                           FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_sgtsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatBuffer dl,
                           @Const FloatBuffer d, @Const FloatBuffer du, FloatBuffer dlf,
                           FloatBuffer df, FloatBuffer duf, FloatBuffer du2, lapack_int ipiv,
                           @Const FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer x,
                           @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer ferr,
                           FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_sgtsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const float[] dl,
                           @Const float[] d, @Const float[] du, float[] dlf,
                           float[] df, float[] duf, float[] du2, lapack_int ipiv,
                           @Const float[] b, @ByVal lapack_int ldb, float[] x,
                           @ByVal lapack_int ldx, float[] rcond, float[] ferr,
                           float[] berr );

public static native @ByVal lapack_int LAPACKE_sgtsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatPointer dl,
                                @Const FloatPointer d, @Const FloatPointer du, FloatPointer dlf,
                                FloatPointer df, FloatPointer duf, FloatPointer du2,
                                lapack_int ipiv, @Const FloatPointer b,
                                @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                                FloatPointer rcond, FloatPointer ferr, FloatPointer berr,
                                FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgtsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatBuffer dl,
                                @Const FloatBuffer d, @Const FloatBuffer du, FloatBuffer dlf,
                                FloatBuffer df, FloatBuffer duf, FloatBuffer du2,
                                lapack_int ipiv, @Const FloatBuffer b,
                                @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                                FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr,
                                FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sgtsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const float[] dl,
                                @Const float[] d, @Const float[] du, float[] dlf,
                                float[] df, float[] duf, float[] du2,
                                lapack_int ipiv, @Const float[] b,
                                @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                                float[] rcond, float[] ferr, float[] berr,
                                float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sgttrf( @ByVal lapack_int n, FloatPointer dl, FloatPointer d, FloatPointer du,
                           FloatPointer du2, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgttrf( @ByVal lapack_int n, FloatBuffer dl, FloatBuffer d, FloatBuffer du,
                           FloatBuffer du2, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgttrf( @ByVal lapack_int n, float[] dl, float[] d, float[] du,
                           float[] du2, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_sgttrf_work( @ByVal lapack_int n, FloatPointer dl, FloatPointer d, FloatPointer du,
                                FloatPointer du2, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgttrf_work( @ByVal lapack_int n, FloatBuffer dl, FloatBuffer d, FloatBuffer du,
                                FloatBuffer du2, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_sgttrf_work( @ByVal lapack_int n, float[] dl, float[] d, float[] du,
                                float[] du2, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_sgttrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatPointer dl, @Const FloatPointer d,
                           @Const FloatPointer du, @Const FloatPointer du2,
                           @Const lapack_int ipiv, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgttrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatBuffer dl, @Const FloatBuffer d,
                           @Const FloatBuffer du, @Const FloatBuffer du2,
                           @Const lapack_int ipiv, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgttrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const float[] dl, @Const float[] d,
                           @Const float[] du, @Const float[] du2,
                           @Const lapack_int ipiv, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sgttrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatPointer dl,
                                @Const FloatPointer d, @Const FloatPointer du,
                                @Const FloatPointer du2, @Const lapack_int ipiv,
                                FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgttrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatBuffer dl,
                                @Const FloatBuffer d, @Const FloatBuffer du,
                                @Const FloatBuffer du2, @Const lapack_int ipiv,
                                FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgttrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const float[] dl,
                                @Const float[] d, @Const float[] du,
                                @Const float[] du2, @Const lapack_int ipiv,
                                float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_shgeqz( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           FloatPointer h, @ByVal lapack_int ldh, FloatPointer t, @ByVal lapack_int ldt,
                           FloatPointer alphar, FloatPointer alphai, FloatPointer beta, FloatPointer q,
                           @ByVal lapack_int ldq, FloatPointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_shgeqz( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           FloatBuffer h, @ByVal lapack_int ldh, FloatBuffer t, @ByVal lapack_int ldt,
                           FloatBuffer alphar, FloatBuffer alphai, FloatBuffer beta, FloatBuffer q,
                           @ByVal lapack_int ldq, FloatBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_shgeqz( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           float[] h, @ByVal lapack_int ldh, float[] t, @ByVal lapack_int ldt,
                           float[] alphar, float[] alphai, float[] beta, float[] q,
                           @ByVal lapack_int ldq, float[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_shgeqz_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Cast("char") byte compz, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, FloatPointer h, @ByVal lapack_int ldh,
                                FloatPointer t, @ByVal lapack_int ldt, FloatPointer alphar,
                                FloatPointer alphai, FloatPointer beta, FloatPointer q,
                                @ByVal lapack_int ldq, FloatPointer z, @ByVal lapack_int ldz,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_shgeqz_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Cast("char") byte compz, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, FloatBuffer h, @ByVal lapack_int ldh,
                                FloatBuffer t, @ByVal lapack_int ldt, FloatBuffer alphar,
                                FloatBuffer alphai, FloatBuffer beta, FloatBuffer q,
                                @ByVal lapack_int ldq, FloatBuffer z, @ByVal lapack_int ldz,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_shgeqz_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Cast("char") byte compz, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, float[] h, @ByVal lapack_int ldh,
                                float[] t, @ByVal lapack_int ldt, float[] alphar,
                                float[] alphai, float[] beta, float[] q,
                                @ByVal lapack_int ldq, float[] z, @ByVal lapack_int ldz,
                                float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_shsein( int matrix_layout, @Cast("char") byte job, @Cast("char") byte eigsrc, @Cast("char") byte initv,
                           lapack_logical select, @ByVal lapack_int n, @Const FloatPointer h,
                           @ByVal lapack_int ldh, FloatPointer wr, @Const FloatPointer wi,
                           FloatPointer vl, @ByVal lapack_int ldvl, FloatPointer vr,
                           @ByVal lapack_int ldvr, @ByVal lapack_int mm, lapack_int m,
                           lapack_int ifaill, lapack_int ifailr );
public static native @ByVal lapack_int LAPACKE_shsein( int matrix_layout, @Cast("char") byte job, @Cast("char") byte eigsrc, @Cast("char") byte initv,
                           lapack_logical select, @ByVal lapack_int n, @Const FloatBuffer h,
                           @ByVal lapack_int ldh, FloatBuffer wr, @Const FloatBuffer wi,
                           FloatBuffer vl, @ByVal lapack_int ldvl, FloatBuffer vr,
                           @ByVal lapack_int ldvr, @ByVal lapack_int mm, lapack_int m,
                           lapack_int ifaill, lapack_int ifailr );
public static native @ByVal lapack_int LAPACKE_shsein( int matrix_layout, @Cast("char") byte job, @Cast("char") byte eigsrc, @Cast("char") byte initv,
                           lapack_logical select, @ByVal lapack_int n, @Const float[] h,
                           @ByVal lapack_int ldh, float[] wr, @Const float[] wi,
                           float[] vl, @ByVal lapack_int ldvl, float[] vr,
                           @ByVal lapack_int ldvr, @ByVal lapack_int mm, lapack_int m,
                           lapack_int ifaill, lapack_int ifailr );

public static native @ByVal lapack_int LAPACKE_shsein_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte eigsrc,
                                @Cast("char") byte initv, lapack_logical select,
                                @ByVal lapack_int n, @Const FloatPointer h, @ByVal lapack_int ldh,
                                FloatPointer wr, @Const FloatPointer wi, FloatPointer vl,
                                @ByVal lapack_int ldvl, FloatPointer vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m, FloatPointer work,
                                lapack_int ifaill, lapack_int ifailr );
public static native @ByVal lapack_int LAPACKE_shsein_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte eigsrc,
                                @Cast("char") byte initv, lapack_logical select,
                                @ByVal lapack_int n, @Const FloatBuffer h, @ByVal lapack_int ldh,
                                FloatBuffer wr, @Const FloatBuffer wi, FloatBuffer vl,
                                @ByVal lapack_int ldvl, FloatBuffer vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m, FloatBuffer work,
                                lapack_int ifaill, lapack_int ifailr );
public static native @ByVal lapack_int LAPACKE_shsein_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte eigsrc,
                                @Cast("char") byte initv, lapack_logical select,
                                @ByVal lapack_int n, @Const float[] h, @ByVal lapack_int ldh,
                                float[] wr, @Const float[] wi, float[] vl,
                                @ByVal lapack_int ldvl, float[] vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m, float[] work,
                                lapack_int ifaill, lapack_int ifailr );

public static native @ByVal lapack_int LAPACKE_shseqr( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compz, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, FloatPointer h,
                           @ByVal lapack_int ldh, FloatPointer wr, FloatPointer wi, FloatPointer z,
                           @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_shseqr( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compz, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, FloatBuffer h,
                           @ByVal lapack_int ldh, FloatBuffer wr, FloatBuffer wi, FloatBuffer z,
                           @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_shseqr( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compz, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, float[] h,
                           @ByVal lapack_int ldh, float[] wr, float[] wi, float[] z,
                           @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_shseqr_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                FloatPointer h, @ByVal lapack_int ldh, FloatPointer wr, FloatPointer wi,
                                FloatPointer z, @ByVal lapack_int ldz, FloatPointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_shseqr_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                FloatBuffer h, @ByVal lapack_int ldh, FloatBuffer wr, FloatBuffer wi,
                                FloatBuffer z, @ByVal lapack_int ldz, FloatBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_shseqr_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                float[] h, @ByVal lapack_int ldh, float[] wr, float[] wi,
                                float[] z, @ByVal lapack_int ldz, float[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_slacn2( @ByVal lapack_int n, FloatPointer v, FloatPointer x, lapack_int isgn,
                           FloatPointer est, lapack_int kase, lapack_int isave );
public static native @ByVal lapack_int LAPACKE_slacn2( @ByVal lapack_int n, FloatBuffer v, FloatBuffer x, lapack_int isgn,
                           FloatBuffer est, lapack_int kase, lapack_int isave );
public static native @ByVal lapack_int LAPACKE_slacn2( @ByVal lapack_int n, float[] v, float[] x, lapack_int isgn,
                           float[] est, lapack_int kase, lapack_int isave );

public static native @ByVal lapack_int LAPACKE_slacn2_work( @ByVal lapack_int n, FloatPointer v, FloatPointer x,
                                lapack_int isgn, FloatPointer est, lapack_int kase,
                                lapack_int isave );
public static native @ByVal lapack_int LAPACKE_slacn2_work( @ByVal lapack_int n, FloatBuffer v, FloatBuffer x,
                                lapack_int isgn, FloatBuffer est, lapack_int kase,
                                lapack_int isave );
public static native @ByVal lapack_int LAPACKE_slacn2_work( @ByVal lapack_int n, float[] v, float[] x,
                                lapack_int isgn, float[] est, lapack_int kase,
                                lapack_int isave );

public static native @ByVal lapack_int LAPACKE_slacpy( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const FloatPointer a, @ByVal lapack_int lda,
                           FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_slacpy( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const FloatBuffer a, @ByVal lapack_int lda,
                           FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_slacpy( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const float[] a, @ByVal lapack_int lda,
                           float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_slacpy_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const FloatPointer a, @ByVal lapack_int lda,
                                FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_slacpy_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const FloatBuffer a, @ByVal lapack_int lda,
                                FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_slacpy_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const float[] a, @ByVal lapack_int lda,
                                float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_slag2d( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const FloatPointer sa, @ByVal lapack_int ldsa, DoublePointer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_slag2d( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const FloatBuffer sa, @ByVal lapack_int ldsa, DoubleBuffer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_slag2d( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const float[] sa, @ByVal lapack_int ldsa, double[] a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_slag2d_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const FloatPointer sa, @ByVal lapack_int ldsa, DoublePointer a,
                                @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_slag2d_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const FloatBuffer sa, @ByVal lapack_int ldsa, DoubleBuffer a,
                                @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_slag2d_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const float[] sa, @ByVal lapack_int ldsa, double[] a,
                                @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_slagge( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const FloatPointer d,
                           FloatPointer a, @ByVal lapack_int lda, lapack_int iseed );
public static native @ByVal lapack_int LAPACKE_slagge( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const FloatBuffer d,
                           FloatBuffer a, @ByVal lapack_int lda, lapack_int iseed );
public static native @ByVal lapack_int LAPACKE_slagge( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const float[] d,
                           float[] a, @ByVal lapack_int lda, lapack_int iseed );

public static native @ByVal lapack_int LAPACKE_slagge_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const FloatPointer d,
                                FloatPointer a, @ByVal lapack_int lda, lapack_int iseed,
                                FloatPointer work );
public static native @ByVal lapack_int LAPACKE_slagge_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const FloatBuffer d,
                                FloatBuffer a, @ByVal lapack_int lda, lapack_int iseed,
                                FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_slagge_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const float[] d,
                                float[] a, @ByVal lapack_int lda, lapack_int iseed,
                                float[] work );

public static native @ByVal lapack_int LAPACKE_slagsy( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const FloatPointer d, FloatPointer a, @ByVal lapack_int lda,
                           lapack_int iseed );
public static native @ByVal lapack_int LAPACKE_slagsy( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const FloatBuffer d, FloatBuffer a, @ByVal lapack_int lda,
                           lapack_int iseed );
public static native @ByVal lapack_int LAPACKE_slagsy( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const float[] d, float[] a, @ByVal lapack_int lda,
                           lapack_int iseed );

public static native @ByVal lapack_int LAPACKE_slagsy_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const FloatPointer d, FloatPointer a, @ByVal lapack_int lda,
                                lapack_int iseed, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_slagsy_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const FloatBuffer d, FloatBuffer a, @ByVal lapack_int lda,
                                lapack_int iseed, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_slagsy_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const float[] d, float[] a, @ByVal lapack_int lda,
                                lapack_int iseed, float[] work );

public static native @ByVal lapack_int LAPACKE_slapmr( int matrix_layout, @ByVal lapack_logical forwrd,
                           @ByVal lapack_int m, @ByVal lapack_int n, FloatPointer x, @ByVal lapack_int ldx,
                           lapack_int k );
public static native @ByVal lapack_int LAPACKE_slapmr( int matrix_layout, @ByVal lapack_logical forwrd,
                           @ByVal lapack_int m, @ByVal lapack_int n, FloatBuffer x, @ByVal lapack_int ldx,
                           lapack_int k );
public static native @ByVal lapack_int LAPACKE_slapmr( int matrix_layout, @ByVal lapack_logical forwrd,
                           @ByVal lapack_int m, @ByVal lapack_int n, float[] x, @ByVal lapack_int ldx,
                           lapack_int k );

public static native @ByVal lapack_int LAPACKE_slapmr_work( int matrix_layout, @ByVal lapack_logical forwrd,
                                @ByVal lapack_int m, @ByVal lapack_int n, FloatPointer x,
                                @ByVal lapack_int ldx, lapack_int k );
public static native @ByVal lapack_int LAPACKE_slapmr_work( int matrix_layout, @ByVal lapack_logical forwrd,
                                @ByVal lapack_int m, @ByVal lapack_int n, FloatBuffer x,
                                @ByVal lapack_int ldx, lapack_int k );
public static native @ByVal lapack_int LAPACKE_slapmr_work( int matrix_layout, @ByVal lapack_logical forwrd,
                                @ByVal lapack_int m, @ByVal lapack_int n, float[] x,
                                @ByVal lapack_int ldx, lapack_int k );

public static native @ByVal lapack_int LAPACKE_slapmt( int matrix_layout, @ByVal lapack_logical forwrd,
                           @ByVal lapack_int m, @ByVal lapack_int n, FloatPointer x, @ByVal lapack_int ldx,
                           lapack_int k );
public static native @ByVal lapack_int LAPACKE_slapmt( int matrix_layout, @ByVal lapack_logical forwrd,
                           @ByVal lapack_int m, @ByVal lapack_int n, FloatBuffer x, @ByVal lapack_int ldx,
                           lapack_int k );
public static native @ByVal lapack_int LAPACKE_slapmt( int matrix_layout, @ByVal lapack_logical forwrd,
                           @ByVal lapack_int m, @ByVal lapack_int n, float[] x, @ByVal lapack_int ldx,
                           lapack_int k );

public static native @ByVal lapack_int LAPACKE_slapmt_work( int matrix_layout, @ByVal lapack_logical forwrd,
                                @ByVal lapack_int m, @ByVal lapack_int n, FloatPointer x,
                                @ByVal lapack_int ldx, lapack_int k );
public static native @ByVal lapack_int LAPACKE_slapmt_work( int matrix_layout, @ByVal lapack_logical forwrd,
                                @ByVal lapack_int m, @ByVal lapack_int n, FloatBuffer x,
                                @ByVal lapack_int ldx, lapack_int k );
public static native @ByVal lapack_int LAPACKE_slapmt_work( int matrix_layout, @ByVal lapack_logical forwrd,
                                @ByVal lapack_int m, @ByVal lapack_int n, float[] x,
                                @ByVal lapack_int ldx, lapack_int k );

public static native @ByVal lapack_int LAPACKE_slarfb( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans, @Cast("char") byte direct,
                           @Cast("char") byte storev, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, @Const FloatPointer v, @ByVal lapack_int ldv,
                           @Const FloatPointer t, @ByVal lapack_int ldt, FloatPointer c,
                           @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_slarfb( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans, @Cast("char") byte direct,
                           @Cast("char") byte storev, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, @Const FloatBuffer v, @ByVal lapack_int ldv,
                           @Const FloatBuffer t, @ByVal lapack_int ldt, FloatBuffer c,
                           @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_slarfb( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans, @Cast("char") byte direct,
                           @Cast("char") byte storev, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, @Const float[] v, @ByVal lapack_int ldv,
                           @Const float[] t, @ByVal lapack_int ldt, float[] c,
                           @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_slarfb_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @Cast("char") byte direct, @Cast("char") byte storev, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k, @Const FloatPointer v,
                                @ByVal lapack_int ldv, @Const FloatPointer t, @ByVal lapack_int ldt,
                                FloatPointer c, @ByVal lapack_int ldc, FloatPointer work,
                                @ByVal lapack_int ldwork );
public static native @ByVal lapack_int LAPACKE_slarfb_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @Cast("char") byte direct, @Cast("char") byte storev, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k, @Const FloatBuffer v,
                                @ByVal lapack_int ldv, @Const FloatBuffer t, @ByVal lapack_int ldt,
                                FloatBuffer c, @ByVal lapack_int ldc, FloatBuffer work,
                                @ByVal lapack_int ldwork );
public static native @ByVal lapack_int LAPACKE_slarfb_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @Cast("char") byte direct, @Cast("char") byte storev, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k, @Const float[] v,
                                @ByVal lapack_int ldv, @Const float[] t, @ByVal lapack_int ldt,
                                float[] c, @ByVal lapack_int ldc, float[] work,
                                @ByVal lapack_int ldwork );

public static native @ByVal lapack_int LAPACKE_slarfg( @ByVal lapack_int n, FloatPointer alpha, FloatPointer x,
                           @ByVal lapack_int incx, FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_slarfg( @ByVal lapack_int n, FloatBuffer alpha, FloatBuffer x,
                           @ByVal lapack_int incx, FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_slarfg( @ByVal lapack_int n, float[] alpha, float[] x,
                           @ByVal lapack_int incx, float[] tau );

public static native @ByVal lapack_int LAPACKE_slarfg_work( @ByVal lapack_int n, FloatPointer alpha, FloatPointer x,
                                @ByVal lapack_int incx, FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_slarfg_work( @ByVal lapack_int n, FloatBuffer alpha, FloatBuffer x,
                                @ByVal lapack_int incx, FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_slarfg_work( @ByVal lapack_int n, float[] alpha, float[] x,
                                @ByVal lapack_int incx, float[] tau );

public static native @ByVal lapack_int LAPACKE_slarft( int matrix_layout, @Cast("char") byte direct, @Cast("char") byte storev,
                           @ByVal lapack_int n, @ByVal lapack_int k, @Const FloatPointer v,
                           @ByVal lapack_int ldv, @Const FloatPointer tau, FloatPointer t,
                           @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_slarft( int matrix_layout, @Cast("char") byte direct, @Cast("char") byte storev,
                           @ByVal lapack_int n, @ByVal lapack_int k, @Const FloatBuffer v,
                           @ByVal lapack_int ldv, @Const FloatBuffer tau, FloatBuffer t,
                           @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_slarft( int matrix_layout, @Cast("char") byte direct, @Cast("char") byte storev,
                           @ByVal lapack_int n, @ByVal lapack_int k, @Const float[] v,
                           @ByVal lapack_int ldv, @Const float[] tau, float[] t,
                           @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_slarft_work( int matrix_layout, @Cast("char") byte direct, @Cast("char") byte storev,
                                @ByVal lapack_int n, @ByVal lapack_int k, @Const FloatPointer v,
                                @ByVal lapack_int ldv, @Const FloatPointer tau, FloatPointer t,
                                @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_slarft_work( int matrix_layout, @Cast("char") byte direct, @Cast("char") byte storev,
                                @ByVal lapack_int n, @ByVal lapack_int k, @Const FloatBuffer v,
                                @ByVal lapack_int ldv, @Const FloatBuffer tau, FloatBuffer t,
                                @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_slarft_work( int matrix_layout, @Cast("char") byte direct, @Cast("char") byte storev,
                                @ByVal lapack_int n, @ByVal lapack_int k, @Const float[] v,
                                @ByVal lapack_int ldv, @Const float[] tau, float[] t,
                                @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_slarfx( int matrix_layout, @Cast("char") byte side, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const FloatPointer v, float tau, FloatPointer c,
                           @ByVal lapack_int ldc, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_slarfx( int matrix_layout, @Cast("char") byte side, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const FloatBuffer v, float tau, FloatBuffer c,
                           @ByVal lapack_int ldc, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_slarfx( int matrix_layout, @Cast("char") byte side, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const float[] v, float tau, float[] c,
                           @ByVal lapack_int ldc, float[] work );

public static native @ByVal lapack_int LAPACKE_slarfx_work( int matrix_layout, @Cast("char") byte side, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const FloatPointer v, float tau,
                                FloatPointer c, @ByVal lapack_int ldc, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_slarfx_work( int matrix_layout, @Cast("char") byte side, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const FloatBuffer v, float tau,
                                FloatBuffer c, @ByVal lapack_int ldc, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_slarfx_work( int matrix_layout, @Cast("char") byte side, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const float[] v, float tau,
                                float[] c, @ByVal lapack_int ldc, float[] work );

public static native @ByVal lapack_int LAPACKE_slarnv( @ByVal lapack_int idist, lapack_int iseed, @ByVal lapack_int n,
                           FloatPointer x );
public static native @ByVal lapack_int LAPACKE_slarnv( @ByVal lapack_int idist, lapack_int iseed, @ByVal lapack_int n,
                           FloatBuffer x );
public static native @ByVal lapack_int LAPACKE_slarnv( @ByVal lapack_int idist, lapack_int iseed, @ByVal lapack_int n,
                           float[] x );

public static native @ByVal lapack_int LAPACKE_slarnv_work( @ByVal lapack_int idist, lapack_int iseed,
                                @ByVal lapack_int n, FloatPointer x );
public static native @ByVal lapack_int LAPACKE_slarnv_work( @ByVal lapack_int idist, lapack_int iseed,
                                @ByVal lapack_int n, FloatBuffer x );
public static native @ByVal lapack_int LAPACKE_slarnv_work( @ByVal lapack_int idist, lapack_int iseed,
                                @ByVal lapack_int n, float[] x );

public static native @ByVal lapack_int LAPACKE_slartgp( float f, float g, FloatPointer cs, FloatPointer sn, FloatPointer r );
public static native @ByVal lapack_int LAPACKE_slartgp( float f, float g, FloatBuffer cs, FloatBuffer sn, FloatBuffer r );
public static native @ByVal lapack_int LAPACKE_slartgp( float f, float g, float[] cs, float[] sn, float[] r );

public static native @ByVal lapack_int LAPACKE_slartgp_work( float f, float g, FloatPointer cs, FloatPointer sn,
                                 FloatPointer r );
public static native @ByVal lapack_int LAPACKE_slartgp_work( float f, float g, FloatBuffer cs, FloatBuffer sn,
                                 FloatBuffer r );
public static native @ByVal lapack_int LAPACKE_slartgp_work( float f, float g, float[] cs, float[] sn,
                                 float[] r );

public static native @ByVal lapack_int LAPACKE_slartgs( float x, float y, float sigma, FloatPointer cs,
                            FloatPointer sn );
public static native @ByVal lapack_int LAPACKE_slartgs( float x, float y, float sigma, FloatBuffer cs,
                            FloatBuffer sn );
public static native @ByVal lapack_int LAPACKE_slartgs( float x, float y, float sigma, float[] cs,
                            float[] sn );

public static native @ByVal lapack_int LAPACKE_slartgs_work( float x, float y, float sigma, FloatPointer cs,
                                 FloatPointer sn );
public static native @ByVal lapack_int LAPACKE_slartgs_work( float x, float y, float sigma, FloatBuffer cs,
                                 FloatBuffer sn );
public static native @ByVal lapack_int LAPACKE_slartgs_work( float x, float y, float sigma, float[] cs,
                                 float[] sn );

public static native @ByVal lapack_int LAPACKE_slascl( int matrix_layout, @Cast("char") byte type, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, float cfrom, float cto,
                           @ByVal lapack_int m, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_slascl( int matrix_layout, @Cast("char") byte type, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, float cfrom, float cto,
                           @ByVal lapack_int m, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_slascl( int matrix_layout, @Cast("char") byte type, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, float cfrom, float cto,
                           @ByVal lapack_int m, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_slascl_work( int matrix_layout, @Cast("char") byte type, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, float cfrom, float cto,
                           @ByVal lapack_int m, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_slascl_work( int matrix_layout, @Cast("char") byte type, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, float cfrom, float cto,
                           @ByVal lapack_int m, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_slascl_work( int matrix_layout, @Cast("char") byte type, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, float cfrom, float cto,
                           @ByVal lapack_int m, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_slaset( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, float alpha, float beta, FloatPointer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_slaset( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, float alpha, float beta, FloatBuffer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_slaset( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, float alpha, float beta, float[] a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_slaset_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, float alpha, float beta, FloatPointer a,
                                @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_slaset_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, float alpha, float beta, FloatBuffer a,
                                @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_slaset_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, float alpha, float beta, float[] a,
                                @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_slasrt( @Cast("char") byte id, @ByVal lapack_int n, FloatPointer d );
public static native @ByVal lapack_int LAPACKE_slasrt( @Cast("char") byte id, @ByVal lapack_int n, FloatBuffer d );
public static native @ByVal lapack_int LAPACKE_slasrt( @Cast("char") byte id, @ByVal lapack_int n, float[] d );

public static native @ByVal lapack_int LAPACKE_slasrt_work( @Cast("char") byte id, @ByVal lapack_int n, FloatPointer d );
public static native @ByVal lapack_int LAPACKE_slasrt_work( @Cast("char") byte id, @ByVal lapack_int n, FloatBuffer d );
public static native @ByVal lapack_int LAPACKE_slasrt_work( @Cast("char") byte id, @ByVal lapack_int n, float[] d );

public static native @ByVal lapack_int LAPACKE_slaswp( int matrix_layout, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda, @ByVal lapack_int k1, @ByVal lapack_int k2,
                           @Const lapack_int ipiv, @ByVal lapack_int incx );
public static native @ByVal lapack_int LAPACKE_slaswp( int matrix_layout, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda, @ByVal lapack_int k1, @ByVal lapack_int k2,
                           @Const lapack_int ipiv, @ByVal lapack_int incx );
public static native @ByVal lapack_int LAPACKE_slaswp( int matrix_layout, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda, @ByVal lapack_int k1, @ByVal lapack_int k2,
                           @Const lapack_int ipiv, @ByVal lapack_int incx );

public static native @ByVal lapack_int LAPACKE_slaswp_work( int matrix_layout, @ByVal lapack_int n, FloatPointer a,
                                @ByVal lapack_int lda, @ByVal lapack_int k1, @ByVal lapack_int k2,
                                @Const lapack_int ipiv, @ByVal lapack_int incx );
public static native @ByVal lapack_int LAPACKE_slaswp_work( int matrix_layout, @ByVal lapack_int n, FloatBuffer a,
                                @ByVal lapack_int lda, @ByVal lapack_int k1, @ByVal lapack_int k2,
                                @Const lapack_int ipiv, @ByVal lapack_int incx );
public static native @ByVal lapack_int LAPACKE_slaswp_work( int matrix_layout, @ByVal lapack_int n, float[] a,
                                @ByVal lapack_int lda, @ByVal lapack_int k1, @ByVal lapack_int k2,
                                @Const lapack_int ipiv, @ByVal lapack_int incx );

public static native @ByVal lapack_int LAPACKE_slatms( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym, FloatPointer d,
                           @ByVal lapack_int mode, float cond, float dmax,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Cast("char") byte pack, FloatPointer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_slatms( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym, FloatBuffer d,
                           @ByVal lapack_int mode, float cond, float dmax,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Cast("char") byte pack, FloatBuffer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_slatms( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym, float[] d,
                           @ByVal lapack_int mode, float cond, float dmax,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Cast("char") byte pack, float[] a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_slatms_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym,
                                FloatPointer d, @ByVal lapack_int mode, float cond,
                                float dmax, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Cast("char") byte pack, FloatPointer a, @ByVal lapack_int lda,
                                FloatPointer work );
public static native @ByVal lapack_int LAPACKE_slatms_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym,
                                FloatBuffer d, @ByVal lapack_int mode, float cond,
                                float dmax, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Cast("char") byte pack, FloatBuffer a, @ByVal lapack_int lda,
                                FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_slatms_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym,
                                float[] d, @ByVal lapack_int mode, float cond,
                                float dmax, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Cast("char") byte pack, float[] a, @ByVal lapack_int lda,
                                float[] work );

public static native @ByVal lapack_int LAPACKE_slauum( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_slauum( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_slauum( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_slauum_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_slauum_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_slauum_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_sopgtr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const FloatPointer ap, @Const FloatPointer tau, FloatPointer q,
                           @ByVal lapack_int ldq );
public static native @ByVal lapack_int LAPACKE_sopgtr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const FloatBuffer ap, @Const FloatBuffer tau, FloatBuffer q,
                           @ByVal lapack_int ldq );
public static native @ByVal lapack_int LAPACKE_sopgtr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const float[] ap, @Const float[] tau, float[] q,
                           @ByVal lapack_int ldq );

public static native @ByVal lapack_int LAPACKE_sopgtr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const FloatPointer ap, @Const FloatPointer tau, FloatPointer q,
                                @ByVal lapack_int ldq, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_sopgtr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const FloatBuffer ap, @Const FloatBuffer tau, FloatBuffer q,
                                @ByVal lapack_int ldq, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_sopgtr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const float[] ap, @Const float[] tau, float[] q,
                                @ByVal lapack_int ldq, float[] work );

public static native @ByVal lapack_int LAPACKE_sopmtr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const FloatPointer ap,
                           @Const FloatPointer tau, FloatPointer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sopmtr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const FloatBuffer ap,
                           @Const FloatBuffer tau, FloatBuffer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sopmtr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const float[] ap,
                           @Const float[] tau, float[] c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_sopmtr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const FloatPointer ap, @Const FloatPointer tau, FloatPointer c,
                                @ByVal lapack_int ldc, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_sopmtr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const FloatBuffer ap, @Const FloatBuffer tau, FloatBuffer c,
                                @ByVal lapack_int ldc, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_sopmtr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const float[] ap, @Const float[] tau, float[] c,
                                @ByVal lapack_int ldc, float[] work );

public static native @ByVal lapack_int LAPACKE_sorbdb( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q, FloatPointer x11,
                           @ByVal lapack_int ldx11, FloatPointer x12, @ByVal lapack_int ldx12,
                           FloatPointer x21, @ByVal lapack_int ldx21, FloatPointer x22,
                           @ByVal lapack_int ldx22, FloatPointer theta, FloatPointer phi,
                           FloatPointer taup1, FloatPointer taup2, FloatPointer tauq1,
                           FloatPointer tauq2 );
public static native @ByVal lapack_int LAPACKE_sorbdb( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q, FloatBuffer x11,
                           @ByVal lapack_int ldx11, FloatBuffer x12, @ByVal lapack_int ldx12,
                           FloatBuffer x21, @ByVal lapack_int ldx21, FloatBuffer x22,
                           @ByVal lapack_int ldx22, FloatBuffer theta, FloatBuffer phi,
                           FloatBuffer taup1, FloatBuffer taup2, FloatBuffer tauq1,
                           FloatBuffer tauq2 );
public static native @ByVal lapack_int LAPACKE_sorbdb( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q, float[] x11,
                           @ByVal lapack_int ldx11, float[] x12, @ByVal lapack_int ldx12,
                           float[] x21, @ByVal lapack_int ldx21, float[] x22,
                           @ByVal lapack_int ldx22, float[] theta, float[] phi,
                           float[] taup1, float[] taup2, float[] tauq1,
                           float[] tauq2 );

public static native @ByVal lapack_int LAPACKE_sorbdb_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                FloatPointer x11, @ByVal lapack_int ldx11, FloatPointer x12,
                                @ByVal lapack_int ldx12, FloatPointer x21, @ByVal lapack_int ldx21,
                                FloatPointer x22, @ByVal lapack_int ldx22, FloatPointer theta,
                                FloatPointer phi, FloatPointer taup1, FloatPointer taup2,
                                FloatPointer tauq1, FloatPointer tauq2, FloatPointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sorbdb_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                FloatBuffer x11, @ByVal lapack_int ldx11, FloatBuffer x12,
                                @ByVal lapack_int ldx12, FloatBuffer x21, @ByVal lapack_int ldx21,
                                FloatBuffer x22, @ByVal lapack_int ldx22, FloatBuffer theta,
                                FloatBuffer phi, FloatBuffer taup1, FloatBuffer taup2,
                                FloatBuffer tauq1, FloatBuffer tauq2, FloatBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sorbdb_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                float[] x11, @ByVal lapack_int ldx11, float[] x12,
                                @ByVal lapack_int ldx12, float[] x21, @ByVal lapack_int ldx21,
                                float[] x22, @ByVal lapack_int ldx22, float[] theta,
                                float[] phi, float[] taup1, float[] taup2,
                                float[] tauq1, float[] tauq2, float[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sorcsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q, FloatPointer x11,
                           @ByVal lapack_int ldx11, FloatPointer x12, @ByVal lapack_int ldx12,
                           FloatPointer x21, @ByVal lapack_int ldx21, FloatPointer x22,
                           @ByVal lapack_int ldx22, FloatPointer theta, FloatPointer u1,
                           @ByVal lapack_int ldu1, FloatPointer u2, @ByVal lapack_int ldu2,
                           FloatPointer v1t, @ByVal lapack_int ldv1t, FloatPointer v2t,
                           @ByVal lapack_int ldv2t );
public static native @ByVal lapack_int LAPACKE_sorcsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q, FloatBuffer x11,
                           @ByVal lapack_int ldx11, FloatBuffer x12, @ByVal lapack_int ldx12,
                           FloatBuffer x21, @ByVal lapack_int ldx21, FloatBuffer x22,
                           @ByVal lapack_int ldx22, FloatBuffer theta, FloatBuffer u1,
                           @ByVal lapack_int ldu1, FloatBuffer u2, @ByVal lapack_int ldu2,
                           FloatBuffer v1t, @ByVal lapack_int ldv1t, FloatBuffer v2t,
                           @ByVal lapack_int ldv2t );
public static native @ByVal lapack_int LAPACKE_sorcsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q, float[] x11,
                           @ByVal lapack_int ldx11, float[] x12, @ByVal lapack_int ldx12,
                           float[] x21, @ByVal lapack_int ldx21, float[] x22,
                           @ByVal lapack_int ldx22, float[] theta, float[] u1,
                           @ByVal lapack_int ldu1, float[] u2, @ByVal lapack_int ldu2,
                           float[] v1t, @ByVal lapack_int ldv1t, float[] v2t,
                           @ByVal lapack_int ldv2t );

public static native @ByVal lapack_int LAPACKE_sorcsd2by1( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           FloatPointer x11, @ByVal lapack_int ldx11, FloatPointer x21, @ByVal lapack_int ldx21,
                           FloatPointer theta, FloatPointer u1, @ByVal lapack_int ldu1, FloatPointer u2,
                           @ByVal lapack_int ldu2, FloatPointer v1t, @ByVal lapack_int ldv1t );
public static native @ByVal lapack_int LAPACKE_sorcsd2by1( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           FloatBuffer x11, @ByVal lapack_int ldx11, FloatBuffer x21, @ByVal lapack_int ldx21,
                           FloatBuffer theta, FloatBuffer u1, @ByVal lapack_int ldu1, FloatBuffer u2,
                           @ByVal lapack_int ldu2, FloatBuffer v1t, @ByVal lapack_int ldv1t );
public static native @ByVal lapack_int LAPACKE_sorcsd2by1( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           float[] x11, @ByVal lapack_int ldx11, float[] x21, @ByVal lapack_int ldx21,
                           float[] theta, float[] u1, @ByVal lapack_int ldu1, float[] u2,
                           @ByVal lapack_int ldu2, float[] v1t, @ByVal lapack_int ldv1t );

public static native @ByVal lapack_int LAPACKE_sorcsd2by1_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, FloatPointer x11, @ByVal lapack_int ldx11,
                                FloatPointer x21, @ByVal lapack_int ldx21,
                                FloatPointer theta, FloatPointer u1, @ByVal lapack_int ldu1,
                                FloatPointer u2, @ByVal lapack_int ldu2, FloatPointer v1t,
                                @ByVal lapack_int ldv1t, FloatPointer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sorcsd2by1_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, FloatBuffer x11, @ByVal lapack_int ldx11,
                                FloatBuffer x21, @ByVal lapack_int ldx21,
                                FloatBuffer theta, FloatBuffer u1, @ByVal lapack_int ldu1,
                                FloatBuffer u2, @ByVal lapack_int ldu2, FloatBuffer v1t,
                                @ByVal lapack_int ldv1t, FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sorcsd2by1_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, float[] x11, @ByVal lapack_int ldx11,
                                float[] x21, @ByVal lapack_int ldx21,
                                float[] theta, float[] u1, @ByVal lapack_int ldu1,
                                float[] u2, @ByVal lapack_int ldu2, float[] v1t,
                                @ByVal lapack_int ldv1t, float[] work, @ByVal lapack_int lwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sorcsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @Cast("char") byte signs, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, FloatPointer x11, @ByVal lapack_int ldx11,
                                FloatPointer x12, @ByVal lapack_int ldx12, FloatPointer x21,
                                @ByVal lapack_int ldx21, FloatPointer x22, @ByVal lapack_int ldx22,
                                FloatPointer theta, FloatPointer u1, @ByVal lapack_int ldu1,
                                FloatPointer u2, @ByVal lapack_int ldu2, FloatPointer v1t,
                                @ByVal lapack_int ldv1t, FloatPointer v2t, @ByVal lapack_int ldv2t,
                                FloatPointer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sorcsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @Cast("char") byte signs, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, FloatBuffer x11, @ByVal lapack_int ldx11,
                                FloatBuffer x12, @ByVal lapack_int ldx12, FloatBuffer x21,
                                @ByVal lapack_int ldx21, FloatBuffer x22, @ByVal lapack_int ldx22,
                                FloatBuffer theta, FloatBuffer u1, @ByVal lapack_int ldu1,
                                FloatBuffer u2, @ByVal lapack_int ldu2, FloatBuffer v1t,
                                @ByVal lapack_int ldv1t, FloatBuffer v2t, @ByVal lapack_int ldv2t,
                                FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sorcsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @Cast("char") byte signs, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, float[] x11, @ByVal lapack_int ldx11,
                                float[] x12, @ByVal lapack_int ldx12, float[] x21,
                                @ByVal lapack_int ldx21, float[] x22, @ByVal lapack_int ldx22,
                                float[] theta, float[] u1, @ByVal lapack_int ldu1,
                                float[] u2, @ByVal lapack_int ldu2, float[] v1t,
                                @ByVal lapack_int ldv1t, float[] v2t, @ByVal lapack_int ldv2t,
                                float[] work, @ByVal lapack_int lwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sorgbr( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_int k, FloatPointer a, @ByVal lapack_int lda,
                           @Const FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_sorgbr( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_int k, FloatBuffer a, @ByVal lapack_int lda,
                           @Const FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_sorgbr( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_int k, float[] a, @ByVal lapack_int lda,
                           @Const float[] tau );

public static native @ByVal lapack_int LAPACKE_sorgbr_work( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k, FloatPointer a,
                                @ByVal lapack_int lda, @Const FloatPointer tau, FloatPointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sorgbr_work( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k, FloatBuffer a,
                                @ByVal lapack_int lda, @Const FloatBuffer tau, FloatBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sorgbr_work( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k, float[] a,
                                @ByVal lapack_int lda, @Const float[] tau, float[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sorghr( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, FloatPointer a, @ByVal lapack_int lda,
                           @Const FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_sorghr( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, FloatBuffer a, @ByVal lapack_int lda,
                           @Const FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_sorghr( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, float[] a, @ByVal lapack_int lda,
                           @Const float[] tau );

public static native @ByVal lapack_int LAPACKE_sorghr_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, FloatPointer a, @ByVal lapack_int lda,
                                @Const FloatPointer tau, FloatPointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sorghr_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, FloatBuffer a, @ByVal lapack_int lda,
                                @Const FloatBuffer tau, FloatBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sorghr_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, float[] a, @ByVal lapack_int lda,
                                @Const float[] tau, float[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sorglq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, FloatPointer a, @ByVal lapack_int lda,
                           @Const FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_sorglq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, FloatBuffer a, @ByVal lapack_int lda,
                           @Const FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_sorglq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, float[] a, @ByVal lapack_int lda,
                           @Const float[] tau );

public static native @ByVal lapack_int LAPACKE_sorglq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, FloatPointer a, @ByVal lapack_int lda,
                                @Const FloatPointer tau, FloatPointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sorglq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, FloatBuffer a, @ByVal lapack_int lda,
                                @Const FloatBuffer tau, FloatBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sorglq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, float[] a, @ByVal lapack_int lda,
                                @Const float[] tau, float[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sorgql( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, FloatPointer a, @ByVal lapack_int lda,
                           @Const FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_sorgql( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, FloatBuffer a, @ByVal lapack_int lda,
                           @Const FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_sorgql( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, float[] a, @ByVal lapack_int lda,
                           @Const float[] tau );

public static native @ByVal lapack_int LAPACKE_sorgql_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, FloatPointer a, @ByVal lapack_int lda,
                                @Const FloatPointer tau, FloatPointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sorgql_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, FloatBuffer a, @ByVal lapack_int lda,
                                @Const FloatBuffer tau, FloatBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sorgql_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, float[] a, @ByVal lapack_int lda,
                                @Const float[] tau, float[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sorgqr( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, FloatPointer a, @ByVal lapack_int lda,
                           @Const FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_sorgqr( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, FloatBuffer a, @ByVal lapack_int lda,
                           @Const FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_sorgqr( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, float[] a, @ByVal lapack_int lda,
                           @Const float[] tau );

public static native @ByVal lapack_int LAPACKE_sorgqr_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, FloatPointer a, @ByVal lapack_int lda,
                                @Const FloatPointer tau, FloatPointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sorgqr_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, FloatBuffer a, @ByVal lapack_int lda,
                                @Const FloatBuffer tau, FloatBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sorgqr_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, float[] a, @ByVal lapack_int lda,
                                @Const float[] tau, float[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sorgrq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, FloatPointer a, @ByVal lapack_int lda,
                           @Const FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_sorgrq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, FloatBuffer a, @ByVal lapack_int lda,
                           @Const FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_sorgrq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, float[] a, @ByVal lapack_int lda,
                           @Const float[] tau );

public static native @ByVal lapack_int LAPACKE_sorgrq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, FloatPointer a, @ByVal lapack_int lda,
                                @Const FloatPointer tau, FloatPointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sorgrq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, FloatBuffer a, @ByVal lapack_int lda,
                                @Const FloatBuffer tau, FloatBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sorgrq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, float[] a, @ByVal lapack_int lda,
                                @Const float[] tau, float[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sorgtr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda, @Const FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_sorgtr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda, @Const FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_sorgtr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda, @Const float[] tau );

public static native @ByVal lapack_int LAPACKE_sorgtr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda, @Const FloatPointer tau,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sorgtr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda, @Const FloatBuffer tau,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sorgtr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda, @Const float[] tau,
                                float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sormbr( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const FloatPointer a, @ByVal lapack_int lda, @Const FloatPointer tau,
                           FloatPointer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sormbr( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const FloatBuffer a, @ByVal lapack_int lda, @Const FloatBuffer tau,
                           FloatBuffer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sormbr( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const float[] a, @ByVal lapack_int lda, @Const float[] tau,
                           float[] c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_sormbr_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte side,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, @Const FloatPointer a, @ByVal lapack_int lda,
                                @Const FloatPointer tau, FloatPointer c, @ByVal lapack_int ldc,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sormbr_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte side,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, @Const FloatBuffer a, @ByVal lapack_int lda,
                                @Const FloatBuffer tau, FloatBuffer c, @ByVal lapack_int ldc,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sormbr_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte side,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, @Const float[] a, @ByVal lapack_int lda,
                                @Const float[] tau, float[] c, @ByVal lapack_int ldc,
                                float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sormhr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, @Const FloatPointer a, @ByVal lapack_int lda,
                           @Const FloatPointer tau, FloatPointer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sormhr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, @Const FloatBuffer a, @ByVal lapack_int lda,
                           @Const FloatBuffer tau, FloatBuffer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sormhr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, @Const float[] a, @ByVal lapack_int lda,
                           @Const float[] tau, float[] c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_sormhr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, @Const FloatPointer a, @ByVal lapack_int lda,
                                @Const FloatPointer tau, FloatPointer c, @ByVal lapack_int ldc,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sormhr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, @Const FloatBuffer a, @ByVal lapack_int lda,
                                @Const FloatBuffer tau, FloatBuffer c, @ByVal lapack_int ldc,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sormhr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, @Const float[] a, @ByVal lapack_int lda,
                                @Const float[] tau, float[] c, @ByVal lapack_int ldc,
                                float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sormlq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const FloatPointer a, @ByVal lapack_int lda, @Const FloatPointer tau,
                           FloatPointer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sormlq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const FloatBuffer a, @ByVal lapack_int lda, @Const FloatBuffer tau,
                           FloatBuffer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sormlq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const float[] a, @ByVal lapack_int lda, @Const float[] tau,
                           float[] c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_sormlq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const FloatPointer a, @ByVal lapack_int lda,
                                @Const FloatPointer tau, FloatPointer c, @ByVal lapack_int ldc,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sormlq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const FloatBuffer a, @ByVal lapack_int lda,
                                @Const FloatBuffer tau, FloatBuffer c, @ByVal lapack_int ldc,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sormlq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const float[] a, @ByVal lapack_int lda,
                                @Const float[] tau, float[] c, @ByVal lapack_int ldc,
                                float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sormql( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const FloatPointer a, @ByVal lapack_int lda, @Const FloatPointer tau,
                           FloatPointer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sormql( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const FloatBuffer a, @ByVal lapack_int lda, @Const FloatBuffer tau,
                           FloatBuffer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sormql( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const float[] a, @ByVal lapack_int lda, @Const float[] tau,
                           float[] c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_sormql_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const FloatPointer a, @ByVal lapack_int lda,
                                @Const FloatPointer tau, FloatPointer c, @ByVal lapack_int ldc,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sormql_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const FloatBuffer a, @ByVal lapack_int lda,
                                @Const FloatBuffer tau, FloatBuffer c, @ByVal lapack_int ldc,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sormql_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const float[] a, @ByVal lapack_int lda,
                                @Const float[] tau, float[] c, @ByVal lapack_int ldc,
                                float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sormqr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const FloatPointer a, @ByVal lapack_int lda, @Const FloatPointer tau,
                           FloatPointer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sormqr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const FloatBuffer a, @ByVal lapack_int lda, @Const FloatBuffer tau,
                           FloatBuffer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sormqr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const float[] a, @ByVal lapack_int lda, @Const float[] tau,
                           float[] c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_sormqr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const FloatPointer a, @ByVal lapack_int lda,
                                @Const FloatPointer tau, FloatPointer c, @ByVal lapack_int ldc,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sormqr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const FloatBuffer a, @ByVal lapack_int lda,
                                @Const FloatBuffer tau, FloatBuffer c, @ByVal lapack_int ldc,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sormqr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const float[] a, @ByVal lapack_int lda,
                                @Const float[] tau, float[] c, @ByVal lapack_int ldc,
                                float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sormrq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const FloatPointer a, @ByVal lapack_int lda, @Const FloatPointer tau,
                           FloatPointer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sormrq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const FloatBuffer a, @ByVal lapack_int lda, @Const FloatBuffer tau,
                           FloatBuffer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sormrq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const float[] a, @ByVal lapack_int lda, @Const float[] tau,
                           float[] c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_sormrq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const FloatPointer a, @ByVal lapack_int lda,
                                @Const FloatPointer tau, FloatPointer c, @ByVal lapack_int ldc,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sormrq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const FloatBuffer a, @ByVal lapack_int lda,
                                @Const FloatBuffer tau, FloatBuffer c, @ByVal lapack_int ldc,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sormrq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const float[] a, @ByVal lapack_int lda,
                                @Const float[] tau, float[] c, @ByVal lapack_int ldc,
                                float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sormrz( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @ByVal lapack_int l, @Const FloatPointer a, @ByVal lapack_int lda,
                           @Const FloatPointer tau, FloatPointer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sormrz( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @ByVal lapack_int l, @Const FloatBuffer a, @ByVal lapack_int lda,
                           @Const FloatBuffer tau, FloatBuffer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sormrz( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @ByVal lapack_int l, @Const float[] a, @ByVal lapack_int lda,
                           @Const float[] tau, float[] c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_sormrz_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @ByVal lapack_int l, @Const FloatPointer a, @ByVal lapack_int lda,
                                @Const FloatPointer tau, FloatPointer c, @ByVal lapack_int ldc,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sormrz_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @ByVal lapack_int l, @Const FloatBuffer a, @ByVal lapack_int lda,
                                @Const FloatBuffer tau, FloatBuffer c, @ByVal lapack_int ldc,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sormrz_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @ByVal lapack_int l, @Const float[] a, @ByVal lapack_int lda,
                                @Const float[] tau, float[] c, @ByVal lapack_int ldc,
                                float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_sormtr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const FloatPointer a,
                           @ByVal lapack_int lda, @Const FloatPointer tau, FloatPointer c,
                           @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sormtr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const FloatBuffer a,
                           @ByVal lapack_int lda, @Const FloatBuffer tau, FloatBuffer c,
                           @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sormtr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const float[] a,
                           @ByVal lapack_int lda, @Const float[] tau, float[] c,
                           @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_sormtr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const FloatPointer a, @ByVal lapack_int lda,
                                @Const FloatPointer tau, FloatPointer c, @ByVal lapack_int ldc,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sormtr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const FloatBuffer a, @ByVal lapack_int lda,
                                @Const FloatBuffer tau, FloatBuffer c, @ByVal lapack_int ldc,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sormtr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const float[] a, @ByVal lapack_int lda,
                                @Const float[] tau, float[] c, @ByVal lapack_int ldc,
                                float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_spbcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const FloatPointer ab, @ByVal lapack_int ldab,
                           float anorm, FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_spbcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const FloatBuffer ab, @ByVal lapack_int ldab,
                           float anorm, FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_spbcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const float[] ab, @ByVal lapack_int ldab,
                           float anorm, float[] rcond );

public static native @ByVal lapack_int LAPACKE_spbcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const FloatPointer ab, @ByVal lapack_int ldab,
                                float anorm, FloatPointer rcond, FloatPointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_spbcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const FloatBuffer ab, @ByVal lapack_int ldab,
                                float anorm, FloatBuffer rcond, FloatBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_spbcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const float[] ab, @ByVal lapack_int ldab,
                                float anorm, float[] rcond, float[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_spbequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const FloatPointer ab, @ByVal lapack_int ldab,
                           FloatPointer s, FloatPointer scond, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_spbequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const FloatBuffer ab, @ByVal lapack_int ldab,
                           FloatBuffer s, FloatBuffer scond, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_spbequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const float[] ab, @ByVal lapack_int ldab,
                           float[] s, float[] scond, float[] amax );

public static native @ByVal lapack_int LAPACKE_spbequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const FloatPointer ab, @ByVal lapack_int ldab,
                                FloatPointer s, FloatPointer scond, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_spbequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const FloatBuffer ab, @ByVal lapack_int ldab,
                                FloatBuffer s, FloatBuffer scond, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_spbequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const float[] ab, @ByVal lapack_int ldab,
                                float[] s, float[] scond, float[] amax );

public static native @ByVal lapack_int LAPACKE_spbrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs, @Const FloatPointer ab,
                           @ByVal lapack_int ldab, @Const FloatPointer afb, @ByVal lapack_int ldafb,
                           @Const FloatPointer b, @ByVal lapack_int ldb, FloatPointer x,
                           @ByVal lapack_int ldx, FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_spbrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs, @Const FloatBuffer ab,
                           @ByVal lapack_int ldab, @Const FloatBuffer afb, @ByVal lapack_int ldafb,
                           @Const FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer x,
                           @ByVal lapack_int ldx, FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_spbrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs, @Const float[] ab,
                           @ByVal lapack_int ldab, @Const float[] afb, @ByVal lapack_int ldafb,
                           @Const float[] b, @ByVal lapack_int ldb, float[] x,
                           @ByVal lapack_int ldx, float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_spbrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @ByVal lapack_int nrhs, @Const FloatPointer ab,
                                @ByVal lapack_int ldab, @Const FloatPointer afb,
                                @ByVal lapack_int ldafb, @Const FloatPointer b,
                                @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                                FloatPointer ferr, FloatPointer berr, FloatPointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_spbrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @ByVal lapack_int nrhs, @Const FloatBuffer ab,
                                @ByVal lapack_int ldab, @Const FloatBuffer afb,
                                @ByVal lapack_int ldafb, @Const FloatBuffer b,
                                @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                                FloatBuffer ferr, FloatBuffer berr, FloatBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_spbrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @ByVal lapack_int nrhs, @Const float[] ab,
                                @ByVal lapack_int ldab, @Const float[] afb,
                                @ByVal lapack_int ldafb, @Const float[] b,
                                @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                                float[] ferr, float[] berr, float[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_spbstf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kb, FloatPointer bb, @ByVal lapack_int ldbb );
public static native @ByVal lapack_int LAPACKE_spbstf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kb, FloatBuffer bb, @ByVal lapack_int ldbb );
public static native @ByVal lapack_int LAPACKE_spbstf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kb, float[] bb, @ByVal lapack_int ldbb );

public static native @ByVal lapack_int LAPACKE_spbstf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kb, FloatPointer bb, @ByVal lapack_int ldbb );
public static native @ByVal lapack_int LAPACKE_spbstf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kb, FloatBuffer bb, @ByVal lapack_int ldbb );
public static native @ByVal lapack_int LAPACKE_spbstf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kb, float[] bb, @ByVal lapack_int ldbb );

public static native @ByVal lapack_int LAPACKE_spbsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int kd, @ByVal lapack_int nrhs, FloatPointer ab,
                          @ByVal lapack_int ldab, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spbsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int kd, @ByVal lapack_int nrhs, FloatBuffer ab,
                          @ByVal lapack_int ldab, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spbsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int kd, @ByVal lapack_int nrhs, float[] ab,
                          @ByVal lapack_int ldab, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_spbsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int kd, @ByVal lapack_int nrhs, FloatPointer ab,
                               @ByVal lapack_int ldab, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spbsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int kd, @ByVal lapack_int nrhs, FloatBuffer ab,
                               @ByVal lapack_int ldab, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spbsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int kd, @ByVal lapack_int nrhs, float[] ab,
                               @ByVal lapack_int ldab, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_spbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs, FloatPointer ab,
                           @ByVal lapack_int ldab, FloatPointer afb, @ByVal lapack_int ldafb,
                           @Cast("char*") BytePointer equed, FloatPointer s, FloatPointer b, @ByVal lapack_int ldb,
                           FloatPointer x, @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer ferr,
                           FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_spbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs, FloatBuffer ab,
                           @ByVal lapack_int ldab, FloatBuffer afb, @ByVal lapack_int ldafb,
                           @Cast("char*") ByteBuffer equed, FloatBuffer s, FloatBuffer b, @ByVal lapack_int ldb,
                           FloatBuffer x, @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer ferr,
                           FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_spbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs, float[] ab,
                           @ByVal lapack_int ldab, float[] afb, @ByVal lapack_int ldafb,
                           @Cast("char*") byte[] equed, float[] s, float[] b, @ByVal lapack_int ldb,
                           float[] x, @ByVal lapack_int ldx, float[] rcond, float[] ferr,
                           float[] berr );

public static native @ByVal lapack_int LAPACKE_spbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                FloatPointer ab, @ByVal lapack_int ldab, FloatPointer afb,
                                @ByVal lapack_int ldafb, @Cast("char*") BytePointer equed, FloatPointer s,
                                FloatPointer b, @ByVal lapack_int ldb, FloatPointer x,
                                @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer ferr,
                                FloatPointer berr, FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_spbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                FloatBuffer ab, @ByVal lapack_int ldab, FloatBuffer afb,
                                @ByVal lapack_int ldafb, @Cast("char*") ByteBuffer equed, FloatBuffer s,
                                FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer x,
                                @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer ferr,
                                FloatBuffer berr, FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_spbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                float[] ab, @ByVal lapack_int ldab, float[] afb,
                                @ByVal lapack_int ldafb, @Cast("char*") byte[] equed, float[] s,
                                float[] b, @ByVal lapack_int ldb, float[] x,
                                @ByVal lapack_int ldx, float[] rcond, float[] ferr,
                                float[] berr, float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_spbtrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, FloatPointer ab, @ByVal lapack_int ldab );
public static native @ByVal lapack_int LAPACKE_spbtrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, FloatBuffer ab, @ByVal lapack_int ldab );
public static native @ByVal lapack_int LAPACKE_spbtrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, float[] ab, @ByVal lapack_int ldab );

public static native @ByVal lapack_int LAPACKE_spbtrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, FloatPointer ab, @ByVal lapack_int ldab );
public static native @ByVal lapack_int LAPACKE_spbtrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, FloatBuffer ab, @ByVal lapack_int ldab );
public static native @ByVal lapack_int LAPACKE_spbtrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, float[] ab, @ByVal lapack_int ldab );

public static native @ByVal lapack_int LAPACKE_spbtrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs, @Const FloatPointer ab,
                           @ByVal lapack_int ldab, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spbtrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs, @Const FloatBuffer ab,
                           @ByVal lapack_int ldab, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spbtrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs, @Const float[] ab,
                           @ByVal lapack_int ldab, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_spbtrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @ByVal lapack_int nrhs, @Const FloatPointer ab,
                                @ByVal lapack_int ldab, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spbtrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @ByVal lapack_int nrhs, @Const FloatBuffer ab,
                                @ByVal lapack_int ldab, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spbtrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @ByVal lapack_int nrhs, @Const float[] ab,
                                @ByVal lapack_int ldab, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_spftrf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, FloatPointer a );
public static native @ByVal lapack_int LAPACKE_spftrf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, FloatBuffer a );
public static native @ByVal lapack_int LAPACKE_spftrf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, float[] a );

public static native @ByVal lapack_int LAPACKE_spftrf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, FloatPointer a );
public static native @ByVal lapack_int LAPACKE_spftrf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, FloatBuffer a );
public static native @ByVal lapack_int LAPACKE_spftrf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, float[] a );

public static native @ByVal lapack_int LAPACKE_spftri( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, FloatPointer a );
public static native @ByVal lapack_int LAPACKE_spftri( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, FloatBuffer a );
public static native @ByVal lapack_int LAPACKE_spftri( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, float[] a );

public static native @ByVal lapack_int LAPACKE_spftri_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, FloatPointer a );
public static native @ByVal lapack_int LAPACKE_spftri_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, FloatBuffer a );
public static native @ByVal lapack_int LAPACKE_spftri_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, float[] a );

public static native @ByVal lapack_int LAPACKE_spftrs( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatPointer a,
                           FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spftrs( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatBuffer a,
                           FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spftrs( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const float[] a,
                           float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_spftrs_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatPointer a,
                                FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spftrs_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatBuffer a,
                                FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spftrs_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const float[] a,
                                float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_spocon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const FloatPointer a, @ByVal lapack_int lda, float anorm,
                           FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_spocon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const FloatBuffer a, @ByVal lapack_int lda, float anorm,
                           FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_spocon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const float[] a, @ByVal lapack_int lda, float anorm,
                           float[] rcond );

public static native @ByVal lapack_int LAPACKE_spocon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const FloatPointer a, @ByVal lapack_int lda, float anorm,
                                FloatPointer rcond, FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_spocon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const FloatBuffer a, @ByVal lapack_int lda, float anorm,
                                FloatBuffer rcond, FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_spocon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const float[] a, @ByVal lapack_int lda, float anorm,
                                float[] rcond, float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_spoequ( int matrix_layout, @ByVal lapack_int n, @Const FloatPointer a,
                           @ByVal lapack_int lda, FloatPointer s, FloatPointer scond, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_spoequ( int matrix_layout, @ByVal lapack_int n, @Const FloatBuffer a,
                           @ByVal lapack_int lda, FloatBuffer s, FloatBuffer scond, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_spoequ( int matrix_layout, @ByVal lapack_int n, @Const float[] a,
                           @ByVal lapack_int lda, float[] s, float[] scond, float[] amax );

public static native @ByVal lapack_int LAPACKE_spoequ_work( int matrix_layout, @ByVal lapack_int n, @Const FloatPointer a,
                                @ByVal lapack_int lda, FloatPointer s, FloatPointer scond,
                                FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_spoequ_work( int matrix_layout, @ByVal lapack_int n, @Const FloatBuffer a,
                                @ByVal lapack_int lda, FloatBuffer s, FloatBuffer scond,
                                FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_spoequ_work( int matrix_layout, @ByVal lapack_int n, @Const float[] a,
                                @ByVal lapack_int lda, float[] s, float[] scond,
                                float[] amax );

public static native @ByVal lapack_int LAPACKE_spoequb( int matrix_layout, @ByVal lapack_int n, @Const FloatPointer a,
                            @ByVal lapack_int lda, FloatPointer s, FloatPointer scond,
                            FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_spoequb( int matrix_layout, @ByVal lapack_int n, @Const FloatBuffer a,
                            @ByVal lapack_int lda, FloatBuffer s, FloatBuffer scond,
                            FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_spoequb( int matrix_layout, @ByVal lapack_int n, @Const float[] a,
                            @ByVal lapack_int lda, float[] s, float[] scond,
                            float[] amax );

public static native @ByVal lapack_int LAPACKE_spoequb_work( int matrix_layout, @ByVal lapack_int n,
                                 @Const FloatPointer a, @ByVal lapack_int lda, FloatPointer s,
                                 FloatPointer scond, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_spoequb_work( int matrix_layout, @ByVal lapack_int n,
                                 @Const FloatBuffer a, @ByVal lapack_int lda, FloatBuffer s,
                                 FloatBuffer scond, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_spoequb_work( int matrix_layout, @ByVal lapack_int n,
                                 @Const float[] a, @ByVal lapack_int lda, float[] s,
                                 float[] scond, float[] amax );

public static native @ByVal lapack_int LAPACKE_sporfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatPointer a, @ByVal lapack_int lda,
                           @Const FloatPointer af, @ByVal lapack_int ldaf, @Const FloatPointer b,
                           @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                           FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_sporfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatBuffer a, @ByVal lapack_int lda,
                           @Const FloatBuffer af, @ByVal lapack_int ldaf, @Const FloatBuffer b,
                           @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                           FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_sporfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const float[] a, @ByVal lapack_int lda,
                           @Const float[] af, @ByVal lapack_int ldaf, @Const float[] b,
                           @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                           float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_sporfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatPointer a,
                                @ByVal lapack_int lda, @Const FloatPointer af,
                                @ByVal lapack_int ldaf, @Const FloatPointer b,
                                @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                                FloatPointer ferr, FloatPointer berr, FloatPointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sporfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatBuffer a,
                                @ByVal lapack_int lda, @Const FloatBuffer af,
                                @ByVal lapack_int ldaf, @Const FloatBuffer b,
                                @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                                FloatBuffer ferr, FloatBuffer berr, FloatBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sporfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const float[] a,
                                @ByVal lapack_int lda, @Const float[] af,
                                @ByVal lapack_int ldaf, @Const float[] b,
                                @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                                float[] ferr, float[] berr, float[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sporfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatPointer a,
                            @ByVal lapack_int lda, @Const FloatPointer af, @ByVal lapack_int ldaf,
                            @Const FloatPointer s, @Const FloatPointer b, @ByVal lapack_int ldb,
                            FloatPointer x, @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer berr,
                            @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                            FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatPointer params );
public static native @ByVal lapack_int LAPACKE_sporfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatBuffer a,
                            @ByVal lapack_int lda, @Const FloatBuffer af, @ByVal lapack_int ldaf,
                            @Const FloatBuffer s, @Const FloatBuffer b, @ByVal lapack_int ldb,
                            FloatBuffer x, @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer berr,
                            @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                            FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatBuffer params );
public static native @ByVal lapack_int LAPACKE_sporfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const float[] a,
                            @ByVal lapack_int lda, @Const float[] af, @ByVal lapack_int ldaf,
                            @Const float[] s, @Const float[] b, @ByVal lapack_int ldb,
                            float[] x, @ByVal lapack_int ldx, float[] rcond, float[] berr,
                            @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                            float[] err_bnds_comp, @ByVal lapack_int nparams,
                            float[] params );

public static native @ByVal lapack_int LAPACKE_sporfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatPointer a,
                                 @ByVal lapack_int lda, @Const FloatPointer af,
                                 @ByVal lapack_int ldaf, @Const FloatPointer s,
                                 @Const FloatPointer b, @ByVal lapack_int ldb, FloatPointer x,
                                 @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer berr,
                                 @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                                 FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatPointer params, FloatPointer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sporfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatBuffer a,
                                 @ByVal lapack_int lda, @Const FloatBuffer af,
                                 @ByVal lapack_int ldaf, @Const FloatBuffer s,
                                 @Const FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer x,
                                 @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer berr,
                                 @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                                 FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatBuffer params, FloatBuffer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sporfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const float[] a,
                                 @ByVal lapack_int lda, @Const float[] af,
                                 @ByVal lapack_int ldaf, @Const float[] s,
                                 @Const float[] b, @ByVal lapack_int ldb, float[] x,
                                 @ByVal lapack_int ldx, float[] rcond, float[] berr,
                                 @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                                 float[] err_bnds_comp, @ByVal lapack_int nparams,
                                 float[] params, float[] work,
                                 lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sposv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, FloatPointer a, @ByVal lapack_int lda, FloatPointer b,
                          @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sposv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b,
                          @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sposv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, float[] a, @ByVal lapack_int lda, float[] b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sposv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, FloatPointer a, @ByVal lapack_int lda,
                               FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sposv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, FloatBuffer a, @ByVal lapack_int lda,
                               FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sposv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, float[] a, @ByVal lapack_int lda,
                               float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sposvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, FloatPointer a, @ByVal lapack_int lda, FloatPointer af,
                           @ByVal lapack_int ldaf, @Cast("char*") BytePointer equed, FloatPointer s, FloatPointer b,
                           @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                           FloatPointer rcond, FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_sposvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, FloatBuffer a, @ByVal lapack_int lda, FloatBuffer af,
                           @ByVal lapack_int ldaf, @Cast("char*") ByteBuffer equed, FloatBuffer s, FloatBuffer b,
                           @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                           FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_sposvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, float[] a, @ByVal lapack_int lda, float[] af,
                           @ByVal lapack_int ldaf, @Cast("char*") byte[] equed, float[] s, float[] b,
                           @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                           float[] rcond, float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_sposvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatPointer a,
                                @ByVal lapack_int lda, FloatPointer af, @ByVal lapack_int ldaf,
                                @Cast("char*") BytePointer equed, FloatPointer s, FloatPointer b,
                                @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                                FloatPointer rcond, FloatPointer ferr, FloatPointer berr,
                                FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sposvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatBuffer a,
                                @ByVal lapack_int lda, FloatBuffer af, @ByVal lapack_int ldaf,
                                @Cast("char*") ByteBuffer equed, FloatBuffer s, FloatBuffer b,
                                @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                                FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr,
                                FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sposvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, float[] a,
                                @ByVal lapack_int lda, float[] af, @ByVal lapack_int ldaf,
                                @Cast("char*") byte[] equed, float[] s, float[] b,
                                @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                                float[] rcond, float[] ferr, float[] berr,
                                float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sposvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatPointer a,
                            @ByVal lapack_int lda, FloatPointer af, @ByVal lapack_int ldaf,
                            @Cast("char*") BytePointer equed, FloatPointer s, FloatPointer b, @ByVal lapack_int ldb,
                            FloatPointer x, @ByVal lapack_int ldx, FloatPointer rcond,
                            FloatPointer rpvgrw, FloatPointer berr, @ByVal lapack_int n_err_bnds,
                            FloatPointer err_bnds_norm, FloatPointer err_bnds_comp,
                            @ByVal lapack_int nparams, FloatPointer params );
public static native @ByVal lapack_int LAPACKE_sposvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatBuffer a,
                            @ByVal lapack_int lda, FloatBuffer af, @ByVal lapack_int ldaf,
                            @Cast("char*") ByteBuffer equed, FloatBuffer s, FloatBuffer b, @ByVal lapack_int ldb,
                            FloatBuffer x, @ByVal lapack_int ldx, FloatBuffer rcond,
                            FloatBuffer rpvgrw, FloatBuffer berr, @ByVal lapack_int n_err_bnds,
                            FloatBuffer err_bnds_norm, FloatBuffer err_bnds_comp,
                            @ByVal lapack_int nparams, FloatBuffer params );
public static native @ByVal lapack_int LAPACKE_sposvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, float[] a,
                            @ByVal lapack_int lda, float[] af, @ByVal lapack_int ldaf,
                            @Cast("char*") byte[] equed, float[] s, float[] b, @ByVal lapack_int ldb,
                            float[] x, @ByVal lapack_int ldx, float[] rcond,
                            float[] rpvgrw, float[] berr, @ByVal lapack_int n_err_bnds,
                            float[] err_bnds_norm, float[] err_bnds_comp,
                            @ByVal lapack_int nparams, float[] params );

public static native @ByVal lapack_int LAPACKE_sposvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatPointer a,
                                 @ByVal lapack_int lda, FloatPointer af, @ByVal lapack_int ldaf,
                                 @Cast("char*") BytePointer equed, FloatPointer s, FloatPointer b,
                                 @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                                 FloatPointer rcond, FloatPointer rpvgrw, FloatPointer berr,
                                 @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                                 FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatPointer params, FloatPointer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sposvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatBuffer a,
                                 @ByVal lapack_int lda, FloatBuffer af, @ByVal lapack_int ldaf,
                                 @Cast("char*") ByteBuffer equed, FloatBuffer s, FloatBuffer b,
                                 @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                                 FloatBuffer rcond, FloatBuffer rpvgrw, FloatBuffer berr,
                                 @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                                 FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 FloatBuffer params, FloatBuffer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sposvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, float[] a,
                                 @ByVal lapack_int lda, float[] af, @ByVal lapack_int ldaf,
                                 @Cast("char*") byte[] equed, float[] s, float[] b,
                                 @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                                 float[] rcond, float[] rpvgrw, float[] berr,
                                 @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                                 float[] err_bnds_comp, @ByVal lapack_int nparams,
                                 float[] params, float[] work,
                                 lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_spotrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_spotrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_spotrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_spotrf2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_spotrf2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_spotrf2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_spotrf2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_spotrf2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_spotrf2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_spotrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_spotrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_spotrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_spotri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_spotri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_spotri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_spotri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_spotri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_spotri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_spotrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatPointer a, @ByVal lapack_int lda,
                           FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spotrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatBuffer a, @ByVal lapack_int lda,
                           FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spotrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const float[] a, @ByVal lapack_int lda,
                           float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_spotrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatPointer a,
                                @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spotrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatBuffer a,
                                @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spotrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const float[] a,
                                @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sppcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const FloatPointer ap, float anorm, FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_sppcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const FloatBuffer ap, float anorm, FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_sppcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const float[] ap, float anorm, float[] rcond );

public static native @ByVal lapack_int LAPACKE_sppcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const FloatPointer ap, float anorm, FloatPointer rcond,
                                FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sppcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const FloatBuffer ap, float anorm, FloatBuffer rcond,
                                FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sppcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const float[] ap, float anorm, float[] rcond,
                                float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sppequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const FloatPointer ap, FloatPointer s, FloatPointer scond,
                           FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_sppequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const FloatBuffer ap, FloatBuffer s, FloatBuffer scond,
                           FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_sppequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const float[] ap, float[] s, float[] scond,
                           float[] amax );

public static native @ByVal lapack_int LAPACKE_sppequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const FloatPointer ap, FloatPointer s, FloatPointer scond,
                                FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_sppequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const FloatBuffer ap, FloatBuffer s, FloatBuffer scond,
                                FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_sppequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const float[] ap, float[] s, float[] scond,
                                float[] amax );

public static native @ByVal lapack_int LAPACKE_spprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatPointer ap, @Const FloatPointer afp,
                           @Const FloatPointer b, @ByVal lapack_int ldb, FloatPointer x,
                           @ByVal lapack_int ldx, FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_spprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatBuffer ap, @Const FloatBuffer afp,
                           @Const FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer x,
                           @ByVal lapack_int ldx, FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_spprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const float[] ap, @Const float[] afp,
                           @Const float[] b, @ByVal lapack_int ldb, float[] x,
                           @ByVal lapack_int ldx, float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_spprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatPointer ap,
                                @Const FloatPointer afp, @Const FloatPointer b,
                                @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                                FloatPointer ferr, FloatPointer berr, FloatPointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_spprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatBuffer ap,
                                @Const FloatBuffer afp, @Const FloatBuffer b,
                                @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                                FloatBuffer ferr, FloatBuffer berr, FloatBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_spprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const float[] ap,
                                @Const float[] afp, @Const float[] b,
                                @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                                float[] ferr, float[] berr, float[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sppsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, FloatPointer ap, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sppsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, FloatBuffer ap, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sppsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, float[] ap, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sppsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, FloatPointer ap, FloatPointer b,
                               @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sppsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, FloatBuffer ap, FloatBuffer b,
                               @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sppsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, float[] ap, float[] b,
                               @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sppsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, FloatPointer ap, FloatPointer afp, @Cast("char*") BytePointer equed,
                           FloatPointer s, FloatPointer b, @ByVal lapack_int ldb, FloatPointer x,
                           @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer ferr,
                           FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_sppsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, FloatBuffer ap, FloatBuffer afp, @Cast("char*") ByteBuffer equed,
                           FloatBuffer s, FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer x,
                           @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer ferr,
                           FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_sppsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, float[] ap, float[] afp, @Cast("char*") byte[] equed,
                           float[] s, float[] b, @ByVal lapack_int ldb, float[] x,
                           @ByVal lapack_int ldx, float[] rcond, float[] ferr,
                           float[] berr );

public static native @ByVal lapack_int LAPACKE_sppsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatPointer ap,
                                FloatPointer afp, @Cast("char*") BytePointer equed, FloatPointer s, FloatPointer b,
                                @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                                FloatPointer rcond, FloatPointer ferr, FloatPointer berr,
                                FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sppsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatBuffer ap,
                                FloatBuffer afp, @Cast("char*") ByteBuffer equed, FloatBuffer s, FloatBuffer b,
                                @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                                FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr,
                                FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sppsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, float[] ap,
                                float[] afp, @Cast("char*") byte[] equed, float[] s, float[] b,
                                @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                                float[] rcond, float[] ferr, float[] berr,
                                float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_spptrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           FloatPointer ap );
public static native @ByVal lapack_int LAPACKE_spptrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           FloatBuffer ap );
public static native @ByVal lapack_int LAPACKE_spptrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           float[] ap );

public static native @ByVal lapack_int LAPACKE_spptrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatPointer ap );
public static native @ByVal lapack_int LAPACKE_spptrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatBuffer ap );
public static native @ByVal lapack_int LAPACKE_spptrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                float[] ap );

public static native @ByVal lapack_int LAPACKE_spptri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           FloatPointer ap );
public static native @ByVal lapack_int LAPACKE_spptri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           FloatBuffer ap );
public static native @ByVal lapack_int LAPACKE_spptri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           float[] ap );

public static native @ByVal lapack_int LAPACKE_spptri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatPointer ap );
public static native @ByVal lapack_int LAPACKE_spptri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatBuffer ap );
public static native @ByVal lapack_int LAPACKE_spptri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                float[] ap );

public static native @ByVal lapack_int LAPACKE_spptrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatPointer ap, FloatPointer b,
                           @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spptrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatBuffer ap, FloatBuffer b,
                           @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spptrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const float[] ap, float[] b,
                           @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_spptrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatPointer ap, FloatPointer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spptrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatBuffer ap, FloatBuffer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spptrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const float[] ap, float[] b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_spstrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda, lapack_int piv, lapack_int rank,
                           float tol );
public static native @ByVal lapack_int LAPACKE_spstrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda, lapack_int piv, lapack_int rank,
                           float tol );
public static native @ByVal lapack_int LAPACKE_spstrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda, lapack_int piv, lapack_int rank,
                           float tol );

public static native @ByVal lapack_int LAPACKE_spstrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda, lapack_int piv,
                                lapack_int rank, float tol, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_spstrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda, lapack_int piv,
                                lapack_int rank, float tol, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_spstrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda, lapack_int piv,
                                lapack_int rank, float tol, float[] work );

public static native @ByVal lapack_int LAPACKE_sptcon( @ByVal lapack_int n, @Const FloatPointer d, @Const FloatPointer e,
                           float anorm, FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_sptcon( @ByVal lapack_int n, @Const FloatBuffer d, @Const FloatBuffer e,
                           float anorm, FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_sptcon( @ByVal lapack_int n, @Const float[] d, @Const float[] e,
                           float anorm, float[] rcond );

public static native @ByVal lapack_int LAPACKE_sptcon_work( @ByVal lapack_int n, @Const FloatPointer d, @Const FloatPointer e,
                                float anorm, FloatPointer rcond, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_sptcon_work( @ByVal lapack_int n, @Const FloatBuffer d, @Const FloatBuffer e,
                                float anorm, FloatBuffer rcond, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_sptcon_work( @ByVal lapack_int n, @Const float[] d, @Const float[] e,
                                float anorm, float[] rcond, float[] work );

public static native @ByVal lapack_int LAPACKE_spteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n, FloatPointer d,
                           FloatPointer e, FloatPointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_spteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n, FloatBuffer d,
                           FloatBuffer e, FloatBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_spteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n, float[] d,
                           float[] e, float[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_spteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                FloatPointer d, FloatPointer e, FloatPointer z, @ByVal lapack_int ldz,
                                FloatPointer work );
public static native @ByVal lapack_int LAPACKE_spteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                FloatBuffer d, FloatBuffer e, FloatBuffer z, @ByVal lapack_int ldz,
                                FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_spteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                float[] d, float[] e, float[] z, @ByVal lapack_int ldz,
                                float[] work );

public static native @ByVal lapack_int LAPACKE_sptrfs( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const FloatPointer d, @Const FloatPointer e, @Const FloatPointer df,
                           @Const FloatPointer ef, @Const FloatPointer b, @ByVal lapack_int ldb,
                           FloatPointer x, @ByVal lapack_int ldx, FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_sptrfs( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const FloatBuffer d, @Const FloatBuffer e, @Const FloatBuffer df,
                           @Const FloatBuffer ef, @Const FloatBuffer b, @ByVal lapack_int ldb,
                           FloatBuffer x, @ByVal lapack_int ldx, FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_sptrfs( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const float[] d, @Const float[] e, @Const float[] df,
                           @Const float[] ef, @Const float[] b, @ByVal lapack_int ldb,
                           float[] x, @ByVal lapack_int ldx, float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_sptrfs_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const FloatPointer d, @Const FloatPointer e, @Const FloatPointer df,
                                @Const FloatPointer ef, @Const FloatPointer b, @ByVal lapack_int ldb,
                                FloatPointer x, @ByVal lapack_int ldx, FloatPointer ferr,
                                FloatPointer berr, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_sptrfs_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const FloatBuffer d, @Const FloatBuffer e, @Const FloatBuffer df,
                                @Const FloatBuffer ef, @Const FloatBuffer b, @ByVal lapack_int ldb,
                                FloatBuffer x, @ByVal lapack_int ldx, FloatBuffer ferr,
                                FloatBuffer berr, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_sptrfs_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const float[] d, @Const float[] e, @Const float[] df,
                                @Const float[] ef, @Const float[] b, @ByVal lapack_int ldb,
                                float[] x, @ByVal lapack_int ldx, float[] ferr,
                                float[] berr, float[] work );

public static native @ByVal lapack_int LAPACKE_sptsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          FloatPointer d, FloatPointer e, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sptsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          FloatBuffer d, FloatBuffer e, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sptsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          float[] d, float[] e, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sptsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               FloatPointer d, FloatPointer e, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sptsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               FloatBuffer d, FloatBuffer e, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sptsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               float[] d, float[] e, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sptsvx( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatPointer d, @Const FloatPointer e,
                           FloatPointer df, FloatPointer ef, @Const FloatPointer b, @ByVal lapack_int ldb,
                           FloatPointer x, @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer ferr,
                           FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_sptsvx( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatBuffer d, @Const FloatBuffer e,
                           FloatBuffer df, FloatBuffer ef, @Const FloatBuffer b, @ByVal lapack_int ldb,
                           FloatBuffer x, @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer ferr,
                           FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_sptsvx( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const float[] d, @Const float[] e,
                           float[] df, float[] ef, @Const float[] b, @ByVal lapack_int ldb,
                           float[] x, @ByVal lapack_int ldx, float[] rcond, float[] ferr,
                           float[] berr );

public static native @ByVal lapack_int LAPACKE_sptsvx_work( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatPointer d, @Const FloatPointer e,
                                FloatPointer df, FloatPointer ef, @Const FloatPointer b,
                                @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                                FloatPointer rcond, FloatPointer ferr, FloatPointer berr,
                                FloatPointer work );
public static native @ByVal lapack_int LAPACKE_sptsvx_work( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatBuffer d, @Const FloatBuffer e,
                                FloatBuffer df, FloatBuffer ef, @Const FloatBuffer b,
                                @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                                FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr,
                                FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_sptsvx_work( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const float[] d, @Const float[] e,
                                float[] df, float[] ef, @Const float[] b,
                                @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                                float[] rcond, float[] ferr, float[] berr,
                                float[] work );

public static native @ByVal lapack_int LAPACKE_spttrf( @ByVal lapack_int n, FloatPointer d, FloatPointer e );
public static native @ByVal lapack_int LAPACKE_spttrf( @ByVal lapack_int n, FloatBuffer d, FloatBuffer e );
public static native @ByVal lapack_int LAPACKE_spttrf( @ByVal lapack_int n, float[] d, float[] e );

public static native @ByVal lapack_int LAPACKE_spttrf_work( @ByVal lapack_int n, FloatPointer d, FloatPointer e );
public static native @ByVal lapack_int LAPACKE_spttrf_work( @ByVal lapack_int n, FloatBuffer d, FloatBuffer e );
public static native @ByVal lapack_int LAPACKE_spttrf_work( @ByVal lapack_int n, float[] d, float[] e );

public static native @ByVal lapack_int LAPACKE_spttrs( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const FloatPointer d, @Const FloatPointer e, FloatPointer b,
                           @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spttrs( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const FloatBuffer d, @Const FloatBuffer e, FloatBuffer b,
                           @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spttrs( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const float[] d, @Const float[] e, float[] b,
                           @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_spttrs_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const FloatPointer d, @Const FloatPointer e, FloatPointer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spttrs_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const FloatBuffer d, @Const FloatBuffer e, FloatBuffer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_spttrs_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const float[] d, @Const float[] e, float[] b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ssbev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int kd, FloatPointer ab, @ByVal lapack_int ldab, FloatPointer w,
                          FloatPointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_ssbev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int kd, FloatBuffer ab, @ByVal lapack_int ldab, FloatBuffer w,
                          FloatBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_ssbev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int kd, float[] ab, @ByVal lapack_int ldab, float[] w,
                          float[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_ssbev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int kd, FloatPointer ab,
                               @ByVal lapack_int ldab, FloatPointer w, FloatPointer z,
                               @ByVal lapack_int ldz, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_ssbev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int kd, FloatBuffer ab,
                               @ByVal lapack_int ldab, FloatBuffer w, FloatBuffer z,
                               @ByVal lapack_int ldz, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_ssbev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int kd, float[] ab,
                               @ByVal lapack_int ldab, float[] w, float[] z,
                               @ByVal lapack_int ldz, float[] work );

public static native @ByVal lapack_int LAPACKE_ssbevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, FloatPointer ab, @ByVal lapack_int ldab, FloatPointer w,
                           FloatPointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_ssbevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, FloatBuffer ab, @ByVal lapack_int ldab, FloatBuffer w,
                           FloatBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_ssbevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, float[] ab, @ByVal lapack_int ldab, float[] w,
                           float[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_ssbevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, FloatPointer ab,
                                @ByVal lapack_int ldab, FloatPointer w, FloatPointer z,
                                @ByVal lapack_int ldz, FloatPointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_ssbevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, FloatBuffer ab,
                                @ByVal lapack_int ldab, FloatBuffer w, FloatBuffer z,
                                @ByVal lapack_int ldz, FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_ssbevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, float[] ab,
                                @ByVal lapack_int ldab, float[] w, float[] z,
                                @ByVal lapack_int ldz, float[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_ssbevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int kd, FloatPointer ab,
                           @ByVal lapack_int ldab, FloatPointer q, @ByVal lapack_int ldq, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatPointer w, FloatPointer z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_ssbevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int kd, FloatBuffer ab,
                           @ByVal lapack_int ldab, FloatBuffer q, @ByVal lapack_int ldq, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatBuffer w, FloatBuffer z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_ssbevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int kd, float[] ab,
                           @ByVal lapack_int ldab, float[] q, @ByVal lapack_int ldq, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, float[] w, float[] z, @ByVal lapack_int ldz,
                           lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_ssbevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int kd,
                                FloatPointer ab, @ByVal lapack_int ldab, FloatPointer q,
                                @ByVal lapack_int ldq, float vl, float vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                                lapack_int m, FloatPointer w, FloatPointer z,
                                @ByVal lapack_int ldz, FloatPointer work, lapack_int iwork,
                                lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_ssbevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int kd,
                                FloatBuffer ab, @ByVal lapack_int ldab, FloatBuffer q,
                                @ByVal lapack_int ldq, float vl, float vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                                lapack_int m, FloatBuffer w, FloatBuffer z,
                                @ByVal lapack_int ldz, FloatBuffer work, lapack_int iwork,
                                lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_ssbevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int kd,
                                float[] ab, @ByVal lapack_int ldab, float[] q,
                                @ByVal lapack_int ldq, float vl, float vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                                lapack_int m, float[] w, float[] z,
                                @ByVal lapack_int ldz, float[] work, lapack_int iwork,
                                lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_ssbgst( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ka, @ByVal lapack_int kb, FloatPointer ab,
                           @ByVal lapack_int ldab, @Const FloatPointer bb, @ByVal lapack_int ldbb,
                           FloatPointer x, @ByVal lapack_int ldx );
public static native @ByVal lapack_int LAPACKE_ssbgst( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ka, @ByVal lapack_int kb, FloatBuffer ab,
                           @ByVal lapack_int ldab, @Const FloatBuffer bb, @ByVal lapack_int ldbb,
                           FloatBuffer x, @ByVal lapack_int ldx );
public static native @ByVal lapack_int LAPACKE_ssbgst( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ka, @ByVal lapack_int kb, float[] ab,
                           @ByVal lapack_int ldab, @Const float[] bb, @ByVal lapack_int ldbb,
                           float[] x, @ByVal lapack_int ldx );

public static native @ByVal lapack_int LAPACKE_ssbgst_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                FloatPointer ab, @ByVal lapack_int ldab, @Const FloatPointer bb,
                                @ByVal lapack_int ldbb, FloatPointer x, @ByVal lapack_int ldx,
                                FloatPointer work );
public static native @ByVal lapack_int LAPACKE_ssbgst_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                FloatBuffer ab, @ByVal lapack_int ldab, @Const FloatBuffer bb,
                                @ByVal lapack_int ldbb, FloatBuffer x, @ByVal lapack_int ldx,
                                FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_ssbgst_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                float[] ab, @ByVal lapack_int ldab, @Const float[] bb,
                                @ByVal lapack_int ldbb, float[] x, @ByVal lapack_int ldx,
                                float[] work );

public static native @ByVal lapack_int LAPACKE_ssbgv( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int ka, @ByVal lapack_int kb, FloatPointer ab,
                          @ByVal lapack_int ldab, FloatPointer bb, @ByVal lapack_int ldbb, FloatPointer w,
                          FloatPointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_ssbgv( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int ka, @ByVal lapack_int kb, FloatBuffer ab,
                          @ByVal lapack_int ldab, FloatBuffer bb, @ByVal lapack_int ldbb, FloatBuffer w,
                          FloatBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_ssbgv( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int ka, @ByVal lapack_int kb, float[] ab,
                          @ByVal lapack_int ldab, float[] bb, @ByVal lapack_int ldbb, float[] w,
                          float[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_ssbgv_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                               FloatPointer ab, @ByVal lapack_int ldab, FloatPointer bb,
                               @ByVal lapack_int ldbb, FloatPointer w, FloatPointer z,
                               @ByVal lapack_int ldz, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_ssbgv_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                               FloatBuffer ab, @ByVal lapack_int ldab, FloatBuffer bb,
                               @ByVal lapack_int ldbb, FloatBuffer w, FloatBuffer z,
                               @ByVal lapack_int ldz, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_ssbgv_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                               float[] ab, @ByVal lapack_int ldab, float[] bb,
                               @ByVal lapack_int ldbb, float[] w, float[] z,
                               @ByVal lapack_int ldz, float[] work );

public static native @ByVal lapack_int LAPACKE_ssbgvd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ka, @ByVal lapack_int kb, FloatPointer ab,
                           @ByVal lapack_int ldab, FloatPointer bb, @ByVal lapack_int ldbb,
                           FloatPointer w, FloatPointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_ssbgvd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ka, @ByVal lapack_int kb, FloatBuffer ab,
                           @ByVal lapack_int ldab, FloatBuffer bb, @ByVal lapack_int ldbb,
                           FloatBuffer w, FloatBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_ssbgvd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ka, @ByVal lapack_int kb, float[] ab,
                           @ByVal lapack_int ldab, float[] bb, @ByVal lapack_int ldbb,
                           float[] w, float[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_ssbgvd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                FloatPointer ab, @ByVal lapack_int ldab, FloatPointer bb,
                                @ByVal lapack_int ldbb, FloatPointer w, FloatPointer z,
                                @ByVal lapack_int ldz, FloatPointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_ssbgvd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                FloatBuffer ab, @ByVal lapack_int ldab, FloatBuffer bb,
                                @ByVal lapack_int ldbb, FloatBuffer w, FloatBuffer z,
                                @ByVal lapack_int ldz, FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_ssbgvd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                float[] ab, @ByVal lapack_int ldab, float[] bb,
                                @ByVal lapack_int ldbb, float[] w, float[] z,
                                @ByVal lapack_int ldz, float[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_ssbgvx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                           FloatPointer ab, @ByVal lapack_int ldab, FloatPointer bb,
                           @ByVal lapack_int ldbb, FloatPointer q, @ByVal lapack_int ldq, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatPointer w, FloatPointer z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_ssbgvx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                           FloatBuffer ab, @ByVal lapack_int ldab, FloatBuffer bb,
                           @ByVal lapack_int ldbb, FloatBuffer q, @ByVal lapack_int ldq, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatBuffer w, FloatBuffer z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_ssbgvx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                           float[] ab, @ByVal lapack_int ldab, float[] bb,
                           @ByVal lapack_int ldbb, float[] q, @ByVal lapack_int ldq, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, float[] w, float[] z, @ByVal lapack_int ldz,
                           lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_ssbgvx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int ka,
                                @ByVal lapack_int kb, FloatPointer ab, @ByVal lapack_int ldab,
                                FloatPointer bb, @ByVal lapack_int ldbb, FloatPointer q,
                                @ByVal lapack_int ldq, float vl, float vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                                lapack_int m, FloatPointer w, FloatPointer z,
                                @ByVal lapack_int ldz, FloatPointer work, lapack_int iwork,
                                lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_ssbgvx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int ka,
                                @ByVal lapack_int kb, FloatBuffer ab, @ByVal lapack_int ldab,
                                FloatBuffer bb, @ByVal lapack_int ldbb, FloatBuffer q,
                                @ByVal lapack_int ldq, float vl, float vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                                lapack_int m, FloatBuffer w, FloatBuffer z,
                                @ByVal lapack_int ldz, FloatBuffer work, lapack_int iwork,
                                lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_ssbgvx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int ka,
                                @ByVal lapack_int kb, float[] ab, @ByVal lapack_int ldab,
                                float[] bb, @ByVal lapack_int ldbb, float[] q,
                                @ByVal lapack_int ldq, float vl, float vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                                lapack_int m, float[] w, float[] z,
                                @ByVal lapack_int ldz, float[] work, lapack_int iwork,
                                lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_ssbtrd( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, FloatPointer ab, @ByVal lapack_int ldab, FloatPointer d,
                           FloatPointer e, FloatPointer q, @ByVal lapack_int ldq );
public static native @ByVal lapack_int LAPACKE_ssbtrd( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, FloatBuffer ab, @ByVal lapack_int ldab, FloatBuffer d,
                           FloatBuffer e, FloatBuffer q, @ByVal lapack_int ldq );
public static native @ByVal lapack_int LAPACKE_ssbtrd( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, float[] ab, @ByVal lapack_int ldab, float[] d,
                           float[] e, float[] q, @ByVal lapack_int ldq );

public static native @ByVal lapack_int LAPACKE_ssbtrd_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, FloatPointer ab,
                                @ByVal lapack_int ldab, FloatPointer d, FloatPointer e, FloatPointer q,
                                @ByVal lapack_int ldq, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_ssbtrd_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, FloatBuffer ab,
                                @ByVal lapack_int ldab, FloatBuffer d, FloatBuffer e, FloatBuffer q,
                                @ByVal lapack_int ldq, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_ssbtrd_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, float[] ab,
                                @ByVal lapack_int ldab, float[] d, float[] e, float[] q,
                                @ByVal lapack_int ldq, float[] work );

public static native @ByVal lapack_int LAPACKE_ssfrk( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo, @Cast("char") byte trans,
                          @ByVal lapack_int n, @ByVal lapack_int k, float alpha,
                          @Const FloatPointer a, @ByVal lapack_int lda, float beta, FloatPointer c );
public static native @ByVal lapack_int LAPACKE_ssfrk( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo, @Cast("char") byte trans,
                          @ByVal lapack_int n, @ByVal lapack_int k, float alpha,
                          @Const FloatBuffer a, @ByVal lapack_int lda, float beta, FloatBuffer c );
public static native @ByVal lapack_int LAPACKE_ssfrk( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo, @Cast("char") byte trans,
                          @ByVal lapack_int n, @ByVal lapack_int k, float alpha,
                          @Const float[] a, @ByVal lapack_int lda, float beta, float[] c );

public static native @ByVal lapack_int LAPACKE_ssfrk_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                               @Cast("char") byte trans, @ByVal lapack_int n, @ByVal lapack_int k,
                               float alpha, @Const FloatPointer a, @ByVal lapack_int lda,
                               float beta, FloatPointer c );
public static native @ByVal lapack_int LAPACKE_ssfrk_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                               @Cast("char") byte trans, @ByVal lapack_int n, @ByVal lapack_int k,
                               float alpha, @Const FloatBuffer a, @ByVal lapack_int lda,
                               float beta, FloatBuffer c );
public static native @ByVal lapack_int LAPACKE_ssfrk_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                               @Cast("char") byte trans, @ByVal lapack_int n, @ByVal lapack_int k,
                               float alpha, @Const float[] a, @ByVal lapack_int lda,
                               float beta, float[] c );

public static native @ByVal lapack_int LAPACKE_sspcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const FloatPointer ap, @Const lapack_int ipiv, float anorm,
                           FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_sspcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const FloatBuffer ap, @Const lapack_int ipiv, float anorm,
                           FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_sspcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const float[] ap, @Const lapack_int ipiv, float anorm,
                           float[] rcond );

public static native @ByVal lapack_int LAPACKE_sspcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const FloatPointer ap, @Const lapack_int ipiv,
                                float anorm, FloatPointer rcond, FloatPointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sspcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const FloatBuffer ap, @Const lapack_int ipiv,
                                float anorm, FloatBuffer rcond, FloatBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sspcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const float[] ap, @Const lapack_int ipiv,
                                float anorm, float[] rcond, float[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sspev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          FloatPointer ap, FloatPointer w, FloatPointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_sspev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          FloatBuffer ap, FloatBuffer w, FloatBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_sspev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          float[] ap, float[] w, float[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_sspev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, FloatPointer ap, FloatPointer w, FloatPointer z,
                               @ByVal lapack_int ldz, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_sspev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, FloatBuffer ap, FloatBuffer w, FloatBuffer z,
                               @ByVal lapack_int ldz, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_sspev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, float[] ap, float[] w, float[] z,
                               @ByVal lapack_int ldz, float[] work );

public static native @ByVal lapack_int LAPACKE_sspevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           FloatPointer ap, FloatPointer w, FloatPointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_sspevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           FloatBuffer ap, FloatBuffer w, FloatBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_sspevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           float[] ap, float[] w, float[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_sspevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, FloatPointer ap, FloatPointer w, FloatPointer z,
                                @ByVal lapack_int ldz, FloatPointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_sspevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, FloatBuffer ap, FloatBuffer w, FloatBuffer z,
                                @ByVal lapack_int ldz, FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_sspevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, float[] ap, float[] w, float[] z,
                                @ByVal lapack_int ldz, float[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_sspevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, FloatPointer ap, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatPointer w, FloatPointer z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_sspevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, FloatBuffer ap, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatBuffer w, FloatBuffer z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_sspevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, float[] ap, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, float[] w, float[] z, @ByVal lapack_int ldz,
                           lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_sspevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer ap, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                float abstol, lapack_int m, FloatPointer w, FloatPointer z,
                                @ByVal lapack_int ldz, FloatPointer work, lapack_int iwork,
                                lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_sspevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer ap, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                float abstol, lapack_int m, FloatBuffer w, FloatBuffer z,
                                @ByVal lapack_int ldz, FloatBuffer work, lapack_int iwork,
                                lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_sspevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, float[] ap, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                float abstol, lapack_int m, float[] w, float[] z,
                                @ByVal lapack_int ldz, float[] work, lapack_int iwork,
                                lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_sspgst( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                           @ByVal lapack_int n, FloatPointer ap, @Const FloatPointer bp );
public static native @ByVal lapack_int LAPACKE_sspgst( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                           @ByVal lapack_int n, FloatBuffer ap, @Const FloatBuffer bp );
public static native @ByVal lapack_int LAPACKE_sspgst( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                           @ByVal lapack_int n, float[] ap, @Const float[] bp );

public static native @ByVal lapack_int LAPACKE_sspgst_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                                @ByVal lapack_int n, FloatPointer ap, @Const FloatPointer bp );
public static native @ByVal lapack_int LAPACKE_sspgst_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                                @ByVal lapack_int n, FloatBuffer ap, @Const FloatBuffer bp );
public static native @ByVal lapack_int LAPACKE_sspgst_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                                @ByVal lapack_int n, float[] ap, @Const float[] bp );

public static native @ByVal lapack_int LAPACKE_sspgv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer ap, FloatPointer bp,
                          FloatPointer w, FloatPointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_sspgv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer ap, FloatBuffer bp,
                          FloatBuffer w, FloatBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_sspgv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, float[] ap, float[] bp,
                          float[] w, float[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_sspgv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer ap, FloatPointer bp,
                               FloatPointer w, FloatPointer z, @ByVal lapack_int ldz, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_sspgv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer ap, FloatBuffer bp,
                               FloatBuffer w, FloatBuffer z, @ByVal lapack_int ldz, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_sspgv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n, float[] ap, float[] bp,
                               float[] w, float[] z, @ByVal lapack_int ldz, float[] work );

public static native @ByVal lapack_int LAPACKE_sspgvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer ap, FloatPointer bp,
                           FloatPointer w, FloatPointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_sspgvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer ap, FloatBuffer bp,
                           FloatBuffer w, FloatBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_sspgvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, float[] ap, float[] bp,
                           float[] w, float[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_sspgvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer ap, FloatPointer bp,
                                FloatPointer w, FloatPointer z, @ByVal lapack_int ldz, FloatPointer work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_sspgvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer ap, FloatBuffer bp,
                                FloatBuffer w, FloatBuffer z, @ByVal lapack_int ldz, FloatBuffer work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_sspgvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n, float[] ap, float[] bp,
                                float[] w, float[] z, @ByVal lapack_int ldz, float[] work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_sspgvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer ap,
                           FloatPointer bp, float vl, float vu, @ByVal lapack_int il,
                           @ByVal lapack_int iu, float abstol, lapack_int m, FloatPointer w,
                           FloatPointer z, @ByVal lapack_int ldz, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_sspgvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer ap,
                           FloatBuffer bp, float vl, float vu, @ByVal lapack_int il,
                           @ByVal lapack_int iu, float abstol, lapack_int m, FloatBuffer w,
                           FloatBuffer z, @ByVal lapack_int ldz, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_sspgvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, float[] ap,
                           float[] bp, float vl, float vu, @ByVal lapack_int il,
                           @ByVal lapack_int iu, float abstol, lapack_int m, float[] w,
                           float[] z, @ByVal lapack_int ldz, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_sspgvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer ap,
                                FloatPointer bp, float vl, float vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, float abstol, lapack_int m,
                                FloatPointer w, FloatPointer z, @ByVal lapack_int ldz, FloatPointer work,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_sspgvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer ap,
                                FloatBuffer bp, float vl, float vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, float abstol, lapack_int m,
                                FloatBuffer w, FloatBuffer z, @ByVal lapack_int ldz, FloatBuffer work,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_sspgvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, float[] ap,
                                float[] bp, float vl, float vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, float abstol, lapack_int m,
                                float[] w, float[] z, @ByVal lapack_int ldz, float[] work,
                                lapack_int iwork, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_ssprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatPointer ap, @Const FloatPointer afp,
                           @Const lapack_int ipiv, @Const FloatPointer b,
                           @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                           FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_ssprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatBuffer ap, @Const FloatBuffer afp,
                           @Const lapack_int ipiv, @Const FloatBuffer b,
                           @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                           FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_ssprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const float[] ap, @Const float[] afp,
                           @Const lapack_int ipiv, @Const float[] b,
                           @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                           float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_ssprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatPointer ap,
                                @Const FloatPointer afp, @Const lapack_int ipiv,
                                @Const FloatPointer b, @ByVal lapack_int ldb, FloatPointer x,
                                @ByVal lapack_int ldx, FloatPointer ferr, FloatPointer berr,
                                FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_ssprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatBuffer ap,
                                @Const FloatBuffer afp, @Const lapack_int ipiv,
                                @Const FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer x,
                                @ByVal lapack_int ldx, FloatBuffer ferr, FloatBuffer berr,
                                FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_ssprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const float[] ap,
                                @Const float[] afp, @Const lapack_int ipiv,
                                @Const float[] b, @ByVal lapack_int ldb, float[] x,
                                @ByVal lapack_int ldx, float[] ferr, float[] berr,
                                float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sspsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, FloatPointer ap, lapack_int ipiv,
                          FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sspsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, FloatBuffer ap, lapack_int ipiv,
                          FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sspsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, float[] ap, lapack_int ipiv,
                          float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sspsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, FloatPointer ap, lapack_int ipiv,
                               FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sspsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, FloatBuffer ap, lapack_int ipiv,
                               FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sspsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, float[] ap, lapack_int ipiv,
                               float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sspsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatPointer ap, FloatPointer afp,
                           lapack_int ipiv, @Const FloatPointer b, @ByVal lapack_int ldb,
                           FloatPointer x, @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer ferr,
                           FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_sspsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatBuffer ap, FloatBuffer afp,
                           lapack_int ipiv, @Const FloatBuffer b, @ByVal lapack_int ldb,
                           FloatBuffer x, @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer ferr,
                           FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_sspsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const float[] ap, float[] afp,
                           lapack_int ipiv, @Const float[] b, @ByVal lapack_int ldb,
                           float[] x, @ByVal lapack_int ldx, float[] rcond, float[] ferr,
                           float[] berr );

public static native @ByVal lapack_int LAPACKE_sspsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatPointer ap,
                                FloatPointer afp, lapack_int ipiv, @Const FloatPointer b,
                                @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                                FloatPointer rcond, FloatPointer ferr, FloatPointer berr,
                                FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sspsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatBuffer ap,
                                FloatBuffer afp, lapack_int ipiv, @Const FloatBuffer b,
                                @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                                FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr,
                                FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sspsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const float[] ap,
                                float[] afp, lapack_int ipiv, @Const float[] b,
                                @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                                float[] rcond, float[] ferr, float[] berr,
                                float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_ssptrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer ap,
                           FloatPointer d, FloatPointer e, FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_ssptrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer ap,
                           FloatBuffer d, FloatBuffer e, FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_ssptrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, float[] ap,
                           float[] d, float[] e, float[] tau );

public static native @ByVal lapack_int LAPACKE_ssptrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatPointer ap, FloatPointer d, FloatPointer e, FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_ssptrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatBuffer ap, FloatBuffer d, FloatBuffer e, FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_ssptrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                float[] ap, float[] d, float[] e, float[] tau );

public static native @ByVal lapack_int LAPACKE_ssptrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer ap,
                           lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_ssptrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer ap,
                           lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_ssptrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, float[] ap,
                           lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_ssptrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatPointer ap, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_ssptrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatBuffer ap, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_ssptrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                float[] ap, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_ssptri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer ap,
                           @Const lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_ssptri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer ap,
                           @Const lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_ssptri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, float[] ap,
                           @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_ssptri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatPointer ap, @Const lapack_int ipiv, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_ssptri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatBuffer ap, @Const lapack_int ipiv, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_ssptri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                float[] ap, @Const lapack_int ipiv, float[] work );

public static native @ByVal lapack_int LAPACKE_ssptrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatPointer ap,
                           @Const lapack_int ipiv, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssptrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatBuffer ap,
                           @Const lapack_int ipiv, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssptrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const float[] ap,
                           @Const lapack_int ipiv, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ssptrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatPointer ap,
                                @Const lapack_int ipiv, FloatPointer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssptrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatBuffer ap,
                                @Const lapack_int ipiv, FloatBuffer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssptrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const float[] ap,
                                @Const lapack_int ipiv, float[] b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_sstebz( @Cast("char") byte range, @Cast("char") byte order, @ByVal lapack_int n, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           @Const FloatPointer d, @Const FloatPointer e, lapack_int m,
                           lapack_int nsplit, FloatPointer w, lapack_int iblock,
                           lapack_int isplit );
public static native @ByVal lapack_int LAPACKE_sstebz( @Cast("char") byte range, @Cast("char") byte order, @ByVal lapack_int n, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           @Const FloatBuffer d, @Const FloatBuffer e, lapack_int m,
                           lapack_int nsplit, FloatBuffer w, lapack_int iblock,
                           lapack_int isplit );
public static native @ByVal lapack_int LAPACKE_sstebz( @Cast("char") byte range, @Cast("char") byte order, @ByVal lapack_int n, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           @Const float[] d, @Const float[] e, lapack_int m,
                           lapack_int nsplit, float[] w, lapack_int iblock,
                           lapack_int isplit );

public static native @ByVal lapack_int LAPACKE_sstebz_work( @Cast("char") byte range, @Cast("char") byte order, @ByVal lapack_int n, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                float abstol, @Const FloatPointer d, @Const FloatPointer e,
                                lapack_int m, lapack_int nsplit, FloatPointer w,
                                lapack_int iblock, lapack_int isplit,
                                FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sstebz_work( @Cast("char") byte range, @Cast("char") byte order, @ByVal lapack_int n, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                float abstol, @Const FloatBuffer d, @Const FloatBuffer e,
                                lapack_int m, lapack_int nsplit, FloatBuffer w,
                                lapack_int iblock, lapack_int isplit,
                                FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_sstebz_work( @Cast("char") byte range, @Cast("char") byte order, @ByVal lapack_int n, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                float abstol, @Const float[] d, @Const float[] e,
                                lapack_int m, lapack_int nsplit, float[] w,
                                lapack_int iblock, lapack_int isplit,
                                float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_sstedc( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n, FloatPointer d,
                           FloatPointer e, FloatPointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_sstedc( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n, FloatBuffer d,
                           FloatBuffer e, FloatBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_sstedc( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n, float[] d,
                           float[] e, float[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_sstedc_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                FloatPointer d, FloatPointer e, FloatPointer z, @ByVal lapack_int ldz,
                                FloatPointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_sstedc_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                FloatBuffer d, FloatBuffer e, FloatBuffer z, @ByVal lapack_int ldz,
                                FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_sstedc_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                float[] d, float[] e, float[] z, @ByVal lapack_int ldz,
                                float[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_sstegr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, FloatPointer d, FloatPointer e, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatPointer w, FloatPointer z, @ByVal lapack_int ldz,
                           lapack_int isuppz );
public static native @ByVal lapack_int LAPACKE_sstegr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, FloatBuffer d, FloatBuffer e, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatBuffer w, FloatBuffer z, @ByVal lapack_int ldz,
                           lapack_int isuppz );
public static native @ByVal lapack_int LAPACKE_sstegr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, float[] d, float[] e, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, float[] w, float[] z, @ByVal lapack_int ldz,
                           lapack_int isuppz );

public static native @ByVal lapack_int LAPACKE_sstegr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, FloatPointer d, FloatPointer e, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                float abstol, lapack_int m, FloatPointer w, FloatPointer z,
                                @ByVal lapack_int ldz, lapack_int isuppz, FloatPointer work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_sstegr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, FloatBuffer d, FloatBuffer e, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                float abstol, lapack_int m, FloatBuffer w, FloatBuffer z,
                                @ByVal lapack_int ldz, lapack_int isuppz, FloatBuffer work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_sstegr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, float[] d, float[] e, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                float abstol, lapack_int m, float[] w, float[] z,
                                @ByVal lapack_int ldz, lapack_int isuppz, float[] work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_sstein( int matrix_layout, @ByVal lapack_int n, @Const FloatPointer d,
                           @Const FloatPointer e, @ByVal lapack_int m, @Const FloatPointer w,
                           @Const lapack_int iblock, @Const lapack_int isplit,
                           FloatPointer z, @ByVal lapack_int ldz, lapack_int ifailv );
public static native @ByVal lapack_int LAPACKE_sstein( int matrix_layout, @ByVal lapack_int n, @Const FloatBuffer d,
                           @Const FloatBuffer e, @ByVal lapack_int m, @Const FloatBuffer w,
                           @Const lapack_int iblock, @Const lapack_int isplit,
                           FloatBuffer z, @ByVal lapack_int ldz, lapack_int ifailv );
public static native @ByVal lapack_int LAPACKE_sstein( int matrix_layout, @ByVal lapack_int n, @Const float[] d,
                           @Const float[] e, @ByVal lapack_int m, @Const float[] w,
                           @Const lapack_int iblock, @Const lapack_int isplit,
                           float[] z, @ByVal lapack_int ldz, lapack_int ifailv );

public static native @ByVal lapack_int LAPACKE_sstein_work( int matrix_layout, @ByVal lapack_int n, @Const FloatPointer d,
                                @Const FloatPointer e, @ByVal lapack_int m, @Const FloatPointer w,
                                @Const lapack_int iblock,
                                @Const lapack_int isplit, FloatPointer z,
                                @ByVal lapack_int ldz, FloatPointer work, lapack_int iwork,
                                lapack_int ifailv );
public static native @ByVal lapack_int LAPACKE_sstein_work( int matrix_layout, @ByVal lapack_int n, @Const FloatBuffer d,
                                @Const FloatBuffer e, @ByVal lapack_int m, @Const FloatBuffer w,
                                @Const lapack_int iblock,
                                @Const lapack_int isplit, FloatBuffer z,
                                @ByVal lapack_int ldz, FloatBuffer work, lapack_int iwork,
                                lapack_int ifailv );
public static native @ByVal lapack_int LAPACKE_sstein_work( int matrix_layout, @ByVal lapack_int n, @Const float[] d,
                                @Const float[] e, @ByVal lapack_int m, @Const float[] w,
                                @Const lapack_int iblock,
                                @Const lapack_int isplit, float[] z,
                                @ByVal lapack_int ldz, float[] work, lapack_int iwork,
                                lapack_int ifailv );

public static native @ByVal lapack_int LAPACKE_sstemr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, FloatPointer d, FloatPointer e, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int m,
                           FloatPointer w, FloatPointer z, @ByVal lapack_int ldz, @ByVal lapack_int nzc,
                           lapack_int isuppz, lapack_logical tryrac );
public static native @ByVal lapack_int LAPACKE_sstemr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, FloatBuffer d, FloatBuffer e, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int m,
                           FloatBuffer w, FloatBuffer z, @ByVal lapack_int ldz, @ByVal lapack_int nzc,
                           lapack_int isuppz, lapack_logical tryrac );
public static native @ByVal lapack_int LAPACKE_sstemr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, float[] d, float[] e, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int m,
                           float[] w, float[] z, @ByVal lapack_int ldz, @ByVal lapack_int nzc,
                           lapack_int isuppz, lapack_logical tryrac );

public static native @ByVal lapack_int LAPACKE_sstemr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, FloatPointer d, FloatPointer e, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                lapack_int m, FloatPointer w, FloatPointer z,
                                @ByVal lapack_int ldz, @ByVal lapack_int nzc,
                                lapack_int isuppz, lapack_logical tryrac,
                                FloatPointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_sstemr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, FloatBuffer d, FloatBuffer e, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                lapack_int m, FloatBuffer w, FloatBuffer z,
                                @ByVal lapack_int ldz, @ByVal lapack_int nzc,
                                lapack_int isuppz, lapack_logical tryrac,
                                FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_sstemr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, float[] d, float[] e, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                lapack_int m, float[] w, float[] z,
                                @ByVal lapack_int ldz, @ByVal lapack_int nzc,
                                lapack_int isuppz, lapack_logical tryrac,
                                float[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_ssteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n, FloatPointer d,
                           FloatPointer e, FloatPointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_ssteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n, FloatBuffer d,
                           FloatBuffer e, FloatBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_ssteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n, float[] d,
                           float[] e, float[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_ssteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                FloatPointer d, FloatPointer e, FloatPointer z, @ByVal lapack_int ldz,
                                FloatPointer work );
public static native @ByVal lapack_int LAPACKE_ssteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                FloatBuffer d, FloatBuffer e, FloatBuffer z, @ByVal lapack_int ldz,
                                FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_ssteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                float[] d, float[] e, float[] z, @ByVal lapack_int ldz,
                                float[] work );

public static native @ByVal lapack_int LAPACKE_ssterf( @ByVal lapack_int n, FloatPointer d, FloatPointer e );
public static native @ByVal lapack_int LAPACKE_ssterf( @ByVal lapack_int n, FloatBuffer d, FloatBuffer e );
public static native @ByVal lapack_int LAPACKE_ssterf( @ByVal lapack_int n, float[] d, float[] e );

public static native @ByVal lapack_int LAPACKE_ssterf_work( @ByVal lapack_int n, FloatPointer d, FloatPointer e );
public static native @ByVal lapack_int LAPACKE_ssterf_work( @ByVal lapack_int n, FloatBuffer d, FloatBuffer e );
public static native @ByVal lapack_int LAPACKE_ssterf_work( @ByVal lapack_int n, float[] d, float[] e );

public static native @ByVal lapack_int LAPACKE_sstev( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n, FloatPointer d,
                          FloatPointer e, FloatPointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_sstev( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n, FloatBuffer d,
                          FloatBuffer e, FloatBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_sstev( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n, float[] d,
                          float[] e, float[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_sstev_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n,
                               FloatPointer d, FloatPointer e, FloatPointer z, @ByVal lapack_int ldz,
                               FloatPointer work );
public static native @ByVal lapack_int LAPACKE_sstev_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n,
                               FloatBuffer d, FloatBuffer e, FloatBuffer z, @ByVal lapack_int ldz,
                               FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_sstev_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n,
                               float[] d, float[] e, float[] z, @ByVal lapack_int ldz,
                               float[] work );

public static native @ByVal lapack_int LAPACKE_sstevd( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n, FloatPointer d,
                           FloatPointer e, FloatPointer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_sstevd( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n, FloatBuffer d,
                           FloatBuffer e, FloatBuffer z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_sstevd( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n, float[] d,
                           float[] e, float[] z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_sstevd_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n,
                                FloatPointer d, FloatPointer e, FloatPointer z, @ByVal lapack_int ldz,
                                FloatPointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_sstevd_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n,
                                FloatBuffer d, FloatBuffer e, FloatBuffer z, @ByVal lapack_int ldz,
                                FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_sstevd_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int n,
                                float[] d, float[] e, float[] z, @ByVal lapack_int ldz,
                                float[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_sstevr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, FloatPointer d, FloatPointer e, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatPointer w, FloatPointer z, @ByVal lapack_int ldz,
                           lapack_int isuppz );
public static native @ByVal lapack_int LAPACKE_sstevr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, FloatBuffer d, FloatBuffer e, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatBuffer w, FloatBuffer z, @ByVal lapack_int ldz,
                           lapack_int isuppz );
public static native @ByVal lapack_int LAPACKE_sstevr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, float[] d, float[] e, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, float[] w, float[] z, @ByVal lapack_int ldz,
                           lapack_int isuppz );

public static native @ByVal lapack_int LAPACKE_sstevr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, FloatPointer d, FloatPointer e, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                float abstol, lapack_int m, FloatPointer w, FloatPointer z,
                                @ByVal lapack_int ldz, lapack_int isuppz, FloatPointer work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_sstevr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, FloatBuffer d, FloatBuffer e, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                float abstol, lapack_int m, FloatBuffer w, FloatBuffer z,
                                @ByVal lapack_int ldz, lapack_int isuppz, FloatBuffer work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_sstevr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, float[] d, float[] e, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                float abstol, lapack_int m, float[] w, float[] z,
                                @ByVal lapack_int ldz, lapack_int isuppz, float[] work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_sstevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, FloatPointer d, FloatPointer e, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatPointer w, FloatPointer z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_sstevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, FloatBuffer d, FloatBuffer e, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatBuffer w, FloatBuffer z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_sstevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, float[] d, float[] e, float vl, float vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, float[] w, float[] z, @ByVal lapack_int ldz,
                           lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_sstevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, FloatPointer d, FloatPointer e, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                float abstol, lapack_int m, FloatPointer w, FloatPointer z,
                                @ByVal lapack_int ldz, FloatPointer work, lapack_int iwork,
                                lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_sstevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, FloatBuffer d, FloatBuffer e, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                float abstol, lapack_int m, FloatBuffer w, FloatBuffer z,
                                @ByVal lapack_int ldz, FloatBuffer work, lapack_int iwork,
                                lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_sstevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, float[] d, float[] e, float vl,
                                float vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                float abstol, lapack_int m, float[] w, float[] z,
                                @ByVal lapack_int ldz, float[] work, lapack_int iwork,
                                lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_ssycon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const FloatPointer a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, float anorm, FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_ssycon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const FloatBuffer a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, float anorm, FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_ssycon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const float[] a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, float anorm, float[] rcond );

public static native @ByVal lapack_int LAPACKE_ssycon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const FloatPointer a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, float anorm,
                                FloatPointer rcond, FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_ssycon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const FloatBuffer a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, float anorm,
                                FloatBuffer rcond, FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_ssycon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const float[] a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, float anorm,
                                float[] rcond, float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_ssyconv( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte way, @ByVal lapack_int n,
                            FloatPointer a, @ByVal lapack_int lda, @Const lapack_int ipiv,
                            FloatPointer e );
public static native @ByVal lapack_int LAPACKE_ssyconv( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte way, @ByVal lapack_int n,
                            FloatBuffer a, @ByVal lapack_int lda, @Const lapack_int ipiv,
                            FloatBuffer e );
public static native @ByVal lapack_int LAPACKE_ssyconv( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte way, @ByVal lapack_int n,
                            float[] a, @ByVal lapack_int lda, @Const lapack_int ipiv,
                            float[] e );

public static native @ByVal lapack_int LAPACKE_ssyconv_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte way,
                                 @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda,
                                 @Const lapack_int ipiv, FloatPointer e );
public static native @ByVal lapack_int LAPACKE_ssyconv_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte way,
                                 @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda,
                                 @Const lapack_int ipiv, FloatBuffer e );
public static native @ByVal lapack_int LAPACKE_ssyconv_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte way,
                                 @ByVal lapack_int n, float[] a, @ByVal lapack_int lda,
                                 @Const lapack_int ipiv, float[] e );

public static native @ByVal lapack_int LAPACKE_ssyequb( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @Const FloatPointer a, @ByVal lapack_int lda, FloatPointer s,
                            FloatPointer scond, FloatPointer amax );
public static native @ByVal lapack_int LAPACKE_ssyequb( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @Const FloatBuffer a, @ByVal lapack_int lda, FloatBuffer s,
                            FloatBuffer scond, FloatBuffer amax );
public static native @ByVal lapack_int LAPACKE_ssyequb( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @Const float[] a, @ByVal lapack_int lda, float[] s,
                            float[] scond, float[] amax );

public static native @ByVal lapack_int LAPACKE_ssyequb_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @Const FloatPointer a, @ByVal lapack_int lda, FloatPointer s,
                                 FloatPointer scond, FloatPointer amax, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_ssyequb_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @Const FloatBuffer a, @ByVal lapack_int lda, FloatBuffer s,
                                 FloatBuffer scond, FloatBuffer amax, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_ssyequb_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @Const float[] a, @ByVal lapack_int lda, float[] s,
                                 float[] scond, float[] amax, float[] work );

public static native @ByVal lapack_int LAPACKE_ssyev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          FloatPointer a, @ByVal lapack_int lda, FloatPointer w );
public static native @ByVal lapack_int LAPACKE_ssyev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          FloatBuffer a, @ByVal lapack_int lda, FloatBuffer w );
public static native @ByVal lapack_int LAPACKE_ssyev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          float[] a, @ByVal lapack_int lda, float[] w );

public static native @ByVal lapack_int LAPACKE_ssyev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda, FloatPointer w,
                               FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssyev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda, FloatBuffer w,
                               FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssyev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, float[] a, @ByVal lapack_int lda, float[] w,
                               float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_ssyevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           FloatPointer a, @ByVal lapack_int lda, FloatPointer w );
public static native @ByVal lapack_int LAPACKE_ssyevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           FloatBuffer a, @ByVal lapack_int lda, FloatBuffer w );
public static native @ByVal lapack_int LAPACKE_ssyevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           float[] a, @ByVal lapack_int lda, float[] w );

public static native @ByVal lapack_int LAPACKE_ssyevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda,
                                FloatPointer w, FloatPointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_ssyevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda,
                                FloatBuffer w, FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_ssyevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, float[] a, @ByVal lapack_int lda,
                                float[] w, float[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_ssyevr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatPointer w, FloatPointer z, @ByVal lapack_int ldz,
                           lapack_int isuppz );
public static native @ByVal lapack_int LAPACKE_ssyevr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatBuffer w, FloatBuffer z, @ByVal lapack_int ldz,
                           lapack_int isuppz );
public static native @ByVal lapack_int LAPACKE_ssyevr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, float[] a, @ByVal lapack_int lda, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, float[] w, float[] z, @ByVal lapack_int ldz,
                           lapack_int isuppz );

public static native @ByVal lapack_int LAPACKE_ssyevr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer a,
                                @ByVal lapack_int lda, float vl, float vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                                lapack_int m, FloatPointer w, FloatPointer z,
                                @ByVal lapack_int ldz, lapack_int isuppz, FloatPointer work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_ssyevr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer a,
                                @ByVal lapack_int lda, float vl, float vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                                lapack_int m, FloatBuffer w, FloatBuffer z,
                                @ByVal lapack_int ldz, lapack_int isuppz, FloatBuffer work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_ssyevr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, float[] a,
                                @ByVal lapack_int lda, float vl, float vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                                lapack_int m, float[] w, float[] z,
                                @ByVal lapack_int ldz, lapack_int isuppz, float[] work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_ssyevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatPointer w, FloatPointer z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_ssyevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatBuffer w, FloatBuffer z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_ssyevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, float[] a, @ByVal lapack_int lda, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, float[] w, float[] z, @ByVal lapack_int ldz,
                           lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_ssyevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer a,
                                @ByVal lapack_int lda, float vl, float vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                                lapack_int m, FloatPointer w, FloatPointer z,
                                @ByVal lapack_int ldz, FloatPointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_ssyevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer a,
                                @ByVal lapack_int lda, float vl, float vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                                lapack_int m, FloatBuffer w, FloatBuffer z,
                                @ByVal lapack_int ldz, FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_ssyevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, float[] a,
                                @ByVal lapack_int lda, float vl, float vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                                lapack_int m, float[] w, float[] z,
                                @ByVal lapack_int ldz, float[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_ssygst( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                           @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda,
                           @Const FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssygst( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                           @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda,
                           @Const FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssygst( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                           @ByVal lapack_int n, float[] a, @ByVal lapack_int lda,
                           @Const float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ssygst_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                                @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda,
                                @Const FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssygst_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                                @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda,
                                @Const FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssygst_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                                @ByVal lapack_int n, float[] a, @ByVal lapack_int lda,
                                @Const float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ssygv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda,
                          FloatPointer b, @ByVal lapack_int ldb, FloatPointer w );
public static native @ByVal lapack_int LAPACKE_ssygv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda,
                          FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer w );
public static native @ByVal lapack_int LAPACKE_ssygv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, float[] a, @ByVal lapack_int lda,
                          float[] b, @ByVal lapack_int ldb, float[] w );

public static native @ByVal lapack_int LAPACKE_ssygv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer a,
                               @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb,
                               FloatPointer w, FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssygv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer a,
                               @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb,
                               FloatBuffer w, FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssygv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n, float[] a,
                               @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb,
                               float[] w, float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_ssygvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda,
                           FloatPointer b, @ByVal lapack_int ldb, FloatPointer w );
public static native @ByVal lapack_int LAPACKE_ssygvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda,
                           FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer w );
public static native @ByVal lapack_int LAPACKE_ssygvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, float[] a, @ByVal lapack_int lda,
                           float[] b, @ByVal lapack_int ldb, float[] w );

public static native @ByVal lapack_int LAPACKE_ssygvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer a,
                                @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb,
                                FloatPointer w, FloatPointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_ssygvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer a,
                                @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb,
                                FloatBuffer w, FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_ssygvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n, float[] a,
                                @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb,
                                float[] w, float[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_ssygvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatPointer w, FloatPointer z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_ssygvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, FloatBuffer w, FloatBuffer z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_ssygvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb, float vl,
                           float vu, @ByVal lapack_int il, @ByVal lapack_int iu, float abstol,
                           lapack_int m, float[] w, float[] z, @ByVal lapack_int ldz,
                           lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_ssygvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer a,
                                @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb,
                                float vl, float vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, float abstol, lapack_int m,
                                FloatPointer w, FloatPointer z, @ByVal lapack_int ldz, FloatPointer work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_ssygvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer a,
                                @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb,
                                float vl, float vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, float abstol, lapack_int m,
                                FloatBuffer w, FloatBuffer z, @ByVal lapack_int ldz, FloatBuffer work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_ssygvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n, float[] a,
                                @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb,
                                float vl, float vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, float abstol, lapack_int m,
                                float[] w, float[] z, @ByVal lapack_int ldz, float[] work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_ssyrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatPointer a, @ByVal lapack_int lda,
                           @Const FloatPointer af, @ByVal lapack_int ldaf,
                           @Const lapack_int ipiv, @Const FloatPointer b,
                           @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                           FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_ssyrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatBuffer a, @ByVal lapack_int lda,
                           @Const FloatBuffer af, @ByVal lapack_int ldaf,
                           @Const lapack_int ipiv, @Const FloatBuffer b,
                           @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                           FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_ssyrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const float[] a, @ByVal lapack_int lda,
                           @Const float[] af, @ByVal lapack_int ldaf,
                           @Const lapack_int ipiv, @Const float[] b,
                           @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                           float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_ssyrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatPointer a, @ByVal lapack_int lda,
                                @Const FloatPointer af, @ByVal lapack_int ldaf,
                                @Const lapack_int ipiv, @Const FloatPointer b,
                                @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                                FloatPointer ferr, FloatPointer berr, FloatPointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_ssyrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatBuffer a, @ByVal lapack_int lda,
                                @Const FloatBuffer af, @ByVal lapack_int ldaf,
                                @Const lapack_int ipiv, @Const FloatBuffer b,
                                @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                                FloatBuffer ferr, FloatBuffer berr, FloatBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_ssyrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const float[] a, @ByVal lapack_int lda,
                                @Const float[] af, @ByVal lapack_int ldaf,
                                @Const lapack_int ipiv, @Const float[] b,
                                @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                                float[] ferr, float[] berr, float[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_ssyrfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatPointer a,
                            @ByVal lapack_int lda, @Const FloatPointer af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const FloatPointer s,
                            @Const FloatPointer b, @ByVal lapack_int ldb, FloatPointer x,
                            @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer berr,
                            @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                            FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatPointer params );
public static native @ByVal lapack_int LAPACKE_ssyrfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatBuffer a,
                            @ByVal lapack_int lda, @Const FloatBuffer af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const FloatBuffer s,
                            @Const FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer x,
                            @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer berr,
                            @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                            FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatBuffer params );
public static native @ByVal lapack_int LAPACKE_ssyrfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const float[] a,
                            @ByVal lapack_int lda, @Const float[] af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const float[] s,
                            @Const float[] b, @ByVal lapack_int ldb, float[] x,
                            @ByVal lapack_int ldx, float[] rcond, float[] berr,
                            @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                            float[] err_bnds_comp, @ByVal lapack_int nparams,
                            float[] params );

public static native @ByVal lapack_int LAPACKE_ssyrfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatPointer a,
                                 @ByVal lapack_int lda, @Const FloatPointer af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const FloatPointer s, @Const FloatPointer b, @ByVal lapack_int ldb,
                                 FloatPointer x, @ByVal lapack_int ldx, FloatPointer rcond,
                                 FloatPointer berr, @ByVal lapack_int n_err_bnds,
                                 FloatPointer err_bnds_norm, FloatPointer err_bnds_comp,
                                 @ByVal lapack_int nparams, FloatPointer params, FloatPointer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_ssyrfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatBuffer a,
                                 @ByVal lapack_int lda, @Const FloatBuffer af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const FloatBuffer s, @Const FloatBuffer b, @ByVal lapack_int ldb,
                                 FloatBuffer x, @ByVal lapack_int ldx, FloatBuffer rcond,
                                 FloatBuffer berr, @ByVal lapack_int n_err_bnds,
                                 FloatBuffer err_bnds_norm, FloatBuffer err_bnds_comp,
                                 @ByVal lapack_int nparams, FloatBuffer params, FloatBuffer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_ssyrfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const float[] a,
                                 @ByVal lapack_int lda, @Const float[] af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const float[] s, @Const float[] b, @ByVal lapack_int ldb,
                                 float[] x, @ByVal lapack_int ldx, float[] rcond,
                                 float[] berr, @ByVal lapack_int n_err_bnds,
                                 float[] err_bnds_norm, float[] err_bnds_comp,
                                 @ByVal lapack_int nparams, float[] params, float[] work,
                                 lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_ssysv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, FloatPointer a, @ByVal lapack_int lda,
                          lapack_int ipiv, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssysv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, FloatBuffer a, @ByVal lapack_int lda,
                          lapack_int ipiv, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssysv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, float[] a, @ByVal lapack_int lda,
                          lapack_int ipiv, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ssysv_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, FloatPointer a, @ByVal lapack_int lda,
                               lapack_int ipiv, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssysv_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, FloatBuffer a, @ByVal lapack_int lda,
                               lapack_int ipiv, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssysv_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, float[] a, @ByVal lapack_int lda,
                               lapack_int ipiv, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ssysv_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                    @ByVal lapack_int nrhs, FloatPointer a, @ByVal lapack_int lda,
                                    lapack_int ipiv, FloatPointer b, @ByVal lapack_int ldb,
                                    FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssysv_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                    @ByVal lapack_int nrhs, FloatBuffer a, @ByVal lapack_int lda,
                                    lapack_int ipiv, FloatBuffer b, @ByVal lapack_int ldb,
                                    FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssysv_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                    @ByVal lapack_int nrhs, float[] a, @ByVal lapack_int lda,
                                    lapack_int ipiv, float[] b, @ByVal lapack_int ldb,
                                    float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_ssysv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, FloatPointer a, @ByVal lapack_int lda,
                               lapack_int ipiv, FloatPointer b, @ByVal lapack_int ldb,
                               FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssysv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, FloatBuffer a, @ByVal lapack_int lda,
                               lapack_int ipiv, FloatBuffer b, @ByVal lapack_int ldb,
                               FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssysv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, float[] a, @ByVal lapack_int lda,
                               lapack_int ipiv, float[] b, @ByVal lapack_int ldb,
                               float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_ssysvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatPointer a, @ByVal lapack_int lda,
                           FloatPointer af, @ByVal lapack_int ldaf, lapack_int ipiv,
                           @Const FloatPointer b, @ByVal lapack_int ldb, FloatPointer x,
                           @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer ferr,
                           FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_ssysvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatBuffer a, @ByVal lapack_int lda,
                           FloatBuffer af, @ByVal lapack_int ldaf, lapack_int ipiv,
                           @Const FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer x,
                           @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer ferr,
                           FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_ssysvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const float[] a, @ByVal lapack_int lda,
                           float[] af, @ByVal lapack_int ldaf, lapack_int ipiv,
                           @Const float[] b, @ByVal lapack_int ldb, float[] x,
                           @ByVal lapack_int ldx, float[] rcond, float[] ferr,
                           float[] berr );

public static native @ByVal lapack_int LAPACKE_ssysvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatPointer a,
                                @ByVal lapack_int lda, FloatPointer af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Const FloatPointer b,
                                @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                                FloatPointer rcond, FloatPointer ferr, FloatPointer berr,
                                FloatPointer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_ssysvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatBuffer a,
                                @ByVal lapack_int lda, FloatBuffer af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Const FloatBuffer b,
                                @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                                FloatBuffer rcond, FloatBuffer ferr, FloatBuffer berr,
                                FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_ssysvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const float[] a,
                                @ByVal lapack_int lda, float[] af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Const float[] b,
                                @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                                float[] rcond, float[] ferr, float[] berr,
                                float[] work, @ByVal lapack_int lwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_ssysvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatPointer a,
                            @ByVal lapack_int lda, FloatPointer af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") BytePointer equed, FloatPointer s, FloatPointer b,
                            @ByVal lapack_int ldb, FloatPointer x, @ByVal lapack_int ldx,
                            FloatPointer rcond, FloatPointer rpvgrw, FloatPointer berr,
                            @ByVal lapack_int n_err_bnds, FloatPointer err_bnds_norm,
                            FloatPointer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatPointer params );
public static native @ByVal lapack_int LAPACKE_ssysvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatBuffer a,
                            @ByVal lapack_int lda, FloatBuffer af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") ByteBuffer equed, FloatBuffer s, FloatBuffer b,
                            @ByVal lapack_int ldb, FloatBuffer x, @ByVal lapack_int ldx,
                            FloatBuffer rcond, FloatBuffer rpvgrw, FloatBuffer berr,
                            @ByVal lapack_int n_err_bnds, FloatBuffer err_bnds_norm,
                            FloatBuffer err_bnds_comp, @ByVal lapack_int nparams,
                            FloatBuffer params );
public static native @ByVal lapack_int LAPACKE_ssysvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, float[] a,
                            @ByVal lapack_int lda, float[] af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") byte[] equed, float[] s, float[] b,
                            @ByVal lapack_int ldb, float[] x, @ByVal lapack_int ldx,
                            float[] rcond, float[] rpvgrw, float[] berr,
                            @ByVal lapack_int n_err_bnds, float[] err_bnds_norm,
                            float[] err_bnds_comp, @ByVal lapack_int nparams,
                            float[] params );

public static native @ByVal lapack_int LAPACKE_ssysvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatPointer a,
                                 @ByVal lapack_int lda, FloatPointer af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") BytePointer equed, FloatPointer s,
                                 FloatPointer b, @ByVal lapack_int ldb, FloatPointer x,
                                 @ByVal lapack_int ldx, FloatPointer rcond, FloatPointer rpvgrw,
                                 FloatPointer berr, @ByVal lapack_int n_err_bnds,
                                 FloatPointer err_bnds_norm, FloatPointer err_bnds_comp,
                                 @ByVal lapack_int nparams, FloatPointer params, FloatPointer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_ssysvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatBuffer a,
                                 @ByVal lapack_int lda, FloatBuffer af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") ByteBuffer equed, FloatBuffer s,
                                 FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer x,
                                 @ByVal lapack_int ldx, FloatBuffer rcond, FloatBuffer rpvgrw,
                                 FloatBuffer berr, @ByVal lapack_int n_err_bnds,
                                 FloatBuffer err_bnds_norm, FloatBuffer err_bnds_comp,
                                 @ByVal lapack_int nparams, FloatBuffer params, FloatBuffer work,
                                 lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_ssysvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, float[] a,
                                 @ByVal lapack_int lda, float[] af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") byte[] equed, float[] s,
                                 float[] b, @ByVal lapack_int ldb, float[] x,
                                 @ByVal lapack_int ldx, float[] rcond, float[] rpvgrw,
                                 float[] berr, @ByVal lapack_int n_err_bnds,
                                 float[] err_bnds_norm, float[] err_bnds_comp,
                                 @ByVal lapack_int nparams, float[] params, float[] work,
                                 lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_ssyswapr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             FloatPointer a, @ByVal lapack_int lda, @ByVal lapack_int i1, @ByVal lapack_int i2 );
public static native @ByVal lapack_int LAPACKE_ssyswapr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             FloatBuffer a, @ByVal lapack_int lda, @ByVal lapack_int i1, @ByVal lapack_int i2 );
public static native @ByVal lapack_int LAPACKE_ssyswapr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             float[] a, @ByVal lapack_int lda, @ByVal lapack_int i1, @ByVal lapack_int i2 );

public static native @ByVal lapack_int LAPACKE_ssyswapr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  FloatPointer a, @ByVal lapack_int lda,
                                  @ByVal lapack_int i1, @ByVal lapack_int i2 );
public static native @ByVal lapack_int LAPACKE_ssyswapr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  FloatBuffer a, @ByVal lapack_int lda,
                                  @ByVal lapack_int i1, @ByVal lapack_int i2 );
public static native @ByVal lapack_int LAPACKE_ssyswapr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  float[] a, @ByVal lapack_int lda,
                                  @ByVal lapack_int i1, @ByVal lapack_int i2 );

public static native @ByVal lapack_int LAPACKE_ssytrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda, FloatPointer d, FloatPointer e, FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_ssytrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda, FloatBuffer d, FloatBuffer e, FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_ssytrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda, float[] d, float[] e, float[] tau );

public static native @ByVal lapack_int LAPACKE_ssytrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda, FloatPointer d, FloatPointer e,
                                FloatPointer tau, FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssytrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda, FloatBuffer d, FloatBuffer e,
                                FloatBuffer tau, FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssytrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda, float[] d, float[] e,
                                float[] tau, float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_ssytrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_ssytrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_ssytrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_ssytrf_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_ssytrf_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_ssytrf_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_ssytrf_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda, lapack_int ipiv,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssytrf_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda, lapack_int ipiv,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssytrf_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda, lapack_int ipiv,
                                float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_ssytrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda, lapack_int ipiv,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssytrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda, lapack_int ipiv,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssytrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda, lapack_int ipiv,
                                float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_ssytri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_ssytri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_ssytri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_ssytri2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatPointer a,
                            @ByVal lapack_int lda, @Const lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_ssytri2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, FloatBuffer a,
                            @ByVal lapack_int lda, @Const lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_ssytri2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n, float[] a,
                            @ByVal lapack_int lda, @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_ssytri2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 FloatPointer a, @ByVal lapack_int lda,
                                 @Const lapack_int ipiv,
                                 FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssytri2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 FloatBuffer a, @ByVal lapack_int lda,
                                 @Const lapack_int ipiv,
                                 FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssytri2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 float[] a, @ByVal lapack_int lda,
                                 @Const lapack_int ipiv,
                                 float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_ssytri2x( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             FloatPointer a, @ByVal lapack_int lda, @Const lapack_int ipiv,
                             @ByVal lapack_int nb );
public static native @ByVal lapack_int LAPACKE_ssytri2x( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             FloatBuffer a, @ByVal lapack_int lda, @Const lapack_int ipiv,
                             @ByVal lapack_int nb );
public static native @ByVal lapack_int LAPACKE_ssytri2x( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             float[] a, @ByVal lapack_int lda, @Const lapack_int ipiv,
                             @ByVal lapack_int nb );

public static native @ByVal lapack_int LAPACKE_ssytri2x_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  FloatPointer a, @ByVal lapack_int lda,
                                  @Const lapack_int ipiv, FloatPointer work,
                                  @ByVal lapack_int nb );
public static native @ByVal lapack_int LAPACKE_ssytri2x_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  FloatBuffer a, @ByVal lapack_int lda,
                                  @Const lapack_int ipiv, FloatBuffer work,
                                  @ByVal lapack_int nb );
public static native @ByVal lapack_int LAPACKE_ssytri2x_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  float[] a, @ByVal lapack_int lda,
                                  @Const lapack_int ipiv, float[] work,
                                  @ByVal lapack_int nb );

public static native @ByVal lapack_int LAPACKE_ssytri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_ssytri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_ssytri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, float[] work );

public static native @ByVal lapack_int LAPACKE_ssytrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatPointer a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssytrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatBuffer a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssytrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const float[] a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ssytrs2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @ByVal lapack_int nrhs, @Const FloatPointer a, @ByVal lapack_int lda,
                            @Const lapack_int ipiv, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssytrs2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @ByVal lapack_int nrhs, @Const FloatBuffer a, @ByVal lapack_int lda,
                            @Const lapack_int ipiv, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssytrs2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @ByVal lapack_int nrhs, @Const float[] a, @ByVal lapack_int lda,
                            @Const lapack_int ipiv, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ssytrs2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @ByVal lapack_int nrhs, @Const FloatPointer a,
                                 @ByVal lapack_int lda, @Const lapack_int ipiv,
                                 FloatPointer b, @ByVal lapack_int ldb, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_ssytrs2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @ByVal lapack_int nrhs, @Const FloatBuffer a,
                                 @ByVal lapack_int lda, @Const lapack_int ipiv,
                                 FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_ssytrs2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @ByVal lapack_int nrhs, @Const float[] a,
                                 @ByVal lapack_int lda, @Const lapack_int ipiv,
                                 float[] b, @ByVal lapack_int ldb, float[] work );

public static native @ByVal lapack_int LAPACKE_ssytrs_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatPointer a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssytrs_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const FloatBuffer a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssytrs_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const float[] a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ssytrs_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatPointer a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, FloatPointer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssytrs_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatBuffer a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, FloatBuffer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssytrs_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const float[] a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, float[] b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ssytrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatPointer a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, FloatPointer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssytrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const FloatBuffer a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, FloatBuffer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssytrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const float[] a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, float[] b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_stbcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @Const FloatPointer ab,
                           @ByVal lapack_int ldab, FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_stbcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @Const FloatBuffer ab,
                           @ByVal lapack_int ldab, FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_stbcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @Const float[] ab,
                           @ByVal lapack_int ldab, float[] rcond );

public static native @ByVal lapack_int LAPACKE_stbcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @Const FloatPointer ab, @ByVal lapack_int ldab, FloatPointer rcond,
                                FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_stbcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @Const FloatBuffer ab, @ByVal lapack_int ldab, FloatBuffer rcond,
                                FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_stbcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @Const float[] ab, @ByVal lapack_int ldab, float[] rcond,
                                float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_stbrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const FloatPointer ab, @ByVal lapack_int ldab, @Const FloatPointer b,
                           @ByVal lapack_int ldb, @Const FloatPointer x, @ByVal lapack_int ldx,
                           FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_stbrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const FloatBuffer ab, @ByVal lapack_int ldab, @Const FloatBuffer b,
                           @ByVal lapack_int ldb, @Const FloatBuffer x, @ByVal lapack_int ldx,
                           FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_stbrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const float[] ab, @ByVal lapack_int ldab, @Const float[] b,
                           @ByVal lapack_int ldb, @Const float[] x, @ByVal lapack_int ldx,
                           float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_stbrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @ByVal lapack_int nrhs, @Const FloatPointer ab,
                                @ByVal lapack_int ldab, @Const FloatPointer b, @ByVal lapack_int ldb,
                                @Const FloatPointer x, @ByVal lapack_int ldx, FloatPointer ferr,
                                FloatPointer berr, FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_stbrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @ByVal lapack_int nrhs, @Const FloatBuffer ab,
                                @ByVal lapack_int ldab, @Const FloatBuffer b, @ByVal lapack_int ldb,
                                @Const FloatBuffer x, @ByVal lapack_int ldx, FloatBuffer ferr,
                                FloatBuffer berr, FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_stbrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @ByVal lapack_int nrhs, @Const float[] ab,
                                @ByVal lapack_int ldab, @Const float[] b, @ByVal lapack_int ldb,
                                @Const float[] x, @ByVal lapack_int ldx, float[] ferr,
                                float[] berr, float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_stbtrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const FloatPointer ab, @ByVal lapack_int ldab, FloatPointer b,
                           @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_stbtrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const FloatBuffer ab, @ByVal lapack_int ldab, FloatBuffer b,
                           @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_stbtrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const float[] ab, @ByVal lapack_int ldab, float[] b,
                           @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_stbtrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @ByVal lapack_int nrhs, @Const FloatPointer ab,
                                @ByVal lapack_int ldab, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_stbtrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @ByVal lapack_int nrhs, @Const FloatBuffer ab,
                                @ByVal lapack_int ldab, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_stbtrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @ByVal lapack_int nrhs, @Const float[] ab,
                                @ByVal lapack_int ldab, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_stfsm( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte side, @Cast("char") byte uplo,
                          @Cast("char") byte trans, @Cast("char") byte diag, @ByVal lapack_int m, @ByVal lapack_int n,
                          float alpha, @Const FloatPointer a, FloatPointer b,
                          @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_stfsm( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte side, @Cast("char") byte uplo,
                          @Cast("char") byte trans, @Cast("char") byte diag, @ByVal lapack_int m, @ByVal lapack_int n,
                          float alpha, @Const FloatBuffer a, FloatBuffer b,
                          @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_stfsm( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte side, @Cast("char") byte uplo,
                          @Cast("char") byte trans, @Cast("char") byte diag, @ByVal lapack_int m, @ByVal lapack_int n,
                          float alpha, @Const float[] a, float[] b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_stfsm_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte side,
                               @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag, @ByVal lapack_int m,
                               @ByVal lapack_int n, float alpha, @Const FloatPointer a,
                               FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_stfsm_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte side,
                               @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag, @ByVal lapack_int m,
                               @ByVal lapack_int n, float alpha, @Const FloatBuffer a,
                               FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_stfsm_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte side,
                               @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag, @ByVal lapack_int m,
                               @ByVal lapack_int n, float alpha, @Const float[] a,
                               float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_stftri( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, FloatPointer a );
public static native @ByVal lapack_int LAPACKE_stftri( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, FloatBuffer a );
public static native @ByVal lapack_int LAPACKE_stftri( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, float[] a );

public static native @ByVal lapack_int LAPACKE_stftri_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, FloatPointer a );
public static native @ByVal lapack_int LAPACKE_stftri_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, FloatBuffer a );
public static native @ByVal lapack_int LAPACKE_stftri_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, float[] a );

public static native @ByVal lapack_int LAPACKE_stfttp( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const FloatPointer arf, FloatPointer ap );
public static native @ByVal lapack_int LAPACKE_stfttp( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const FloatBuffer arf, FloatBuffer ap );
public static native @ByVal lapack_int LAPACKE_stfttp( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const float[] arf, float[] ap );

public static native @ByVal lapack_int LAPACKE_stfttp_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const FloatPointer arf, FloatPointer ap );
public static native @ByVal lapack_int LAPACKE_stfttp_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const FloatBuffer arf, FloatBuffer ap );
public static native @ByVal lapack_int LAPACKE_stfttp_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const float[] arf, float[] ap );

public static native @ByVal lapack_int LAPACKE_stfttr( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const FloatPointer arf, FloatPointer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_stfttr( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const FloatBuffer arf, FloatBuffer a,
                           @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_stfttr( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const float[] arf, float[] a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_stfttr_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const FloatPointer arf, FloatPointer a,
                                @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_stfttr_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const FloatBuffer arf, FloatBuffer a,
                                @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_stfttr_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const float[] arf, float[] a,
                                @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_stgevc( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const FloatPointer s, @ByVal lapack_int lds, @Const FloatPointer p,
                           @ByVal lapack_int ldp, FloatPointer vl, @ByVal lapack_int ldvl,
                           FloatPointer vr, @ByVal lapack_int ldvr, @ByVal lapack_int mm,
                           lapack_int m );
public static native @ByVal lapack_int LAPACKE_stgevc( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const FloatBuffer s, @ByVal lapack_int lds, @Const FloatBuffer p,
                           @ByVal lapack_int ldp, FloatBuffer vl, @ByVal lapack_int ldvl,
                           FloatBuffer vr, @ByVal lapack_int ldvr, @ByVal lapack_int mm,
                           lapack_int m );
public static native @ByVal lapack_int LAPACKE_stgevc( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const float[] s, @ByVal lapack_int lds, @Const float[] p,
                           @ByVal lapack_int ldp, float[] vl, @ByVal lapack_int ldvl,
                           float[] vr, @ByVal lapack_int ldvr, @ByVal lapack_int mm,
                           lapack_int m );

public static native @ByVal lapack_int LAPACKE_stgevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const FloatPointer s, @ByVal lapack_int lds, @Const FloatPointer p,
                                @ByVal lapack_int ldp, FloatPointer vl, @ByVal lapack_int ldvl,
                                FloatPointer vr, @ByVal lapack_int ldvr, @ByVal lapack_int mm,
                                lapack_int m, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_stgevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const FloatBuffer s, @ByVal lapack_int lds, @Const FloatBuffer p,
                                @ByVal lapack_int ldp, FloatBuffer vl, @ByVal lapack_int ldvl,
                                FloatBuffer vr, @ByVal lapack_int ldvr, @ByVal lapack_int mm,
                                lapack_int m, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_stgevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const float[] s, @ByVal lapack_int lds, @Const float[] p,
                                @ByVal lapack_int ldp, float[] vl, @ByVal lapack_int ldvl,
                                float[] vr, @ByVal lapack_int ldvr, @ByVal lapack_int mm,
                                lapack_int m, float[] work );

public static native @ByVal lapack_int LAPACKE_stgexc( int matrix_layout, @ByVal lapack_logical wantq,
                           @ByVal lapack_logical wantz, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb, FloatPointer q,
                           @ByVal lapack_int ldq, FloatPointer z, @ByVal lapack_int ldz,
                           lapack_int ifst, lapack_int ilst );
public static native @ByVal lapack_int LAPACKE_stgexc( int matrix_layout, @ByVal lapack_logical wantq,
                           @ByVal lapack_logical wantz, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer q,
                           @ByVal lapack_int ldq, FloatBuffer z, @ByVal lapack_int ldz,
                           lapack_int ifst, lapack_int ilst );
public static native @ByVal lapack_int LAPACKE_stgexc( int matrix_layout, @ByVal lapack_logical wantq,
                           @ByVal lapack_logical wantz, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb, float[] q,
                           @ByVal lapack_int ldq, float[] z, @ByVal lapack_int ldz,
                           lapack_int ifst, lapack_int ilst );

public static native @ByVal lapack_int LAPACKE_stgexc_work( int matrix_layout, @ByVal lapack_logical wantq,
                                @ByVal lapack_logical wantz, @ByVal lapack_int n, FloatPointer a,
                                @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb,
                                FloatPointer q, @ByVal lapack_int ldq, FloatPointer z,
                                @ByVal lapack_int ldz, lapack_int ifst,
                                lapack_int ilst, FloatPointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_stgexc_work( int matrix_layout, @ByVal lapack_logical wantq,
                                @ByVal lapack_logical wantz, @ByVal lapack_int n, FloatBuffer a,
                                @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb,
                                FloatBuffer q, @ByVal lapack_int ldq, FloatBuffer z,
                                @ByVal lapack_int ldz, lapack_int ifst,
                                lapack_int ilst, FloatBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_stgexc_work( int matrix_layout, @ByVal lapack_logical wantq,
                                @ByVal lapack_logical wantz, @ByVal lapack_int n, float[] a,
                                @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb,
                                float[] q, @ByVal lapack_int ldq, float[] z,
                                @ByVal lapack_int ldz, lapack_int ifst,
                                lapack_int ilst, float[] work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_stgsen( int matrix_layout, @ByVal lapack_int ijob,
                           @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                           @Const lapack_logical select, @ByVal lapack_int n, FloatPointer a,
                           @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb,
                           FloatPointer alphar, FloatPointer alphai, FloatPointer beta, FloatPointer q,
                           @ByVal lapack_int ldq, FloatPointer z, @ByVal lapack_int ldz,
                           lapack_int m, FloatPointer pl, FloatPointer pr, FloatPointer dif );
public static native @ByVal lapack_int LAPACKE_stgsen( int matrix_layout, @ByVal lapack_int ijob,
                           @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                           @Const lapack_logical select, @ByVal lapack_int n, FloatBuffer a,
                           @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb,
                           FloatBuffer alphar, FloatBuffer alphai, FloatBuffer beta, FloatBuffer q,
                           @ByVal lapack_int ldq, FloatBuffer z, @ByVal lapack_int ldz,
                           lapack_int m, FloatBuffer pl, FloatBuffer pr, FloatBuffer dif );
public static native @ByVal lapack_int LAPACKE_stgsen( int matrix_layout, @ByVal lapack_int ijob,
                           @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                           @Const lapack_logical select, @ByVal lapack_int n, float[] a,
                           @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb,
                           float[] alphar, float[] alphai, float[] beta, float[] q,
                           @ByVal lapack_int ldq, float[] z, @ByVal lapack_int ldz,
                           lapack_int m, float[] pl, float[] pr, float[] dif );

public static native @ByVal lapack_int LAPACKE_stgsen_work( int matrix_layout, @ByVal lapack_int ijob,
                                @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda, FloatPointer b,
                                @ByVal lapack_int ldb, FloatPointer alphar, FloatPointer alphai,
                                FloatPointer beta, FloatPointer q, @ByVal lapack_int ldq, FloatPointer z,
                                @ByVal lapack_int ldz, lapack_int m, FloatPointer pl,
                                FloatPointer pr, FloatPointer dif, FloatPointer work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_stgsen_work( int matrix_layout, @ByVal lapack_int ijob,
                                @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b,
                                @ByVal lapack_int ldb, FloatBuffer alphar, FloatBuffer alphai,
                                FloatBuffer beta, FloatBuffer q, @ByVal lapack_int ldq, FloatBuffer z,
                                @ByVal lapack_int ldz, lapack_int m, FloatBuffer pl,
                                FloatBuffer pr, FloatBuffer dif, FloatBuffer work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_stgsen_work( int matrix_layout, @ByVal lapack_int ijob,
                                @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda, float[] b,
                                @ByVal lapack_int ldb, float[] alphar, float[] alphai,
                                float[] beta, float[] q, @ByVal lapack_int ldq, float[] z,
                                @ByVal lapack_int ldz, lapack_int m, float[] pl,
                                float[] pr, float[] dif, float[] work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_stgsja( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n,
                           @ByVal lapack_int k, @ByVal lapack_int l, FloatPointer a, @ByVal lapack_int lda,
                           FloatPointer b, @ByVal lapack_int ldb, float tola, float tolb,
                           FloatPointer alpha, FloatPointer beta, FloatPointer u, @ByVal lapack_int ldu,
                           FloatPointer v, @ByVal lapack_int ldv, FloatPointer q, @ByVal lapack_int ldq,
                           lapack_int ncycle );
public static native @ByVal lapack_int LAPACKE_stgsja( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n,
                           @ByVal lapack_int k, @ByVal lapack_int l, FloatBuffer a, @ByVal lapack_int lda,
                           FloatBuffer b, @ByVal lapack_int ldb, float tola, float tolb,
                           FloatBuffer alpha, FloatBuffer beta, FloatBuffer u, @ByVal lapack_int ldu,
                           FloatBuffer v, @ByVal lapack_int ldv, FloatBuffer q, @ByVal lapack_int ldq,
                           lapack_int ncycle );
public static native @ByVal lapack_int LAPACKE_stgsja( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n,
                           @ByVal lapack_int k, @ByVal lapack_int l, float[] a, @ByVal lapack_int lda,
                           float[] b, @ByVal lapack_int ldb, float tola, float tolb,
                           float[] alpha, float[] beta, float[] u, @ByVal lapack_int ldu,
                           float[] v, @ByVal lapack_int ldv, float[] q, @ByVal lapack_int ldq,
                           lapack_int ncycle );

public static native @ByVal lapack_int LAPACKE_stgsja_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, @ByVal lapack_int k, @ByVal lapack_int l,
                                FloatPointer a, @ByVal lapack_int lda, FloatPointer b,
                                @ByVal lapack_int ldb, float tola, float tolb,
                                FloatPointer alpha, FloatPointer beta, FloatPointer u,
                                @ByVal lapack_int ldu, FloatPointer v, @ByVal lapack_int ldv,
                                FloatPointer q, @ByVal lapack_int ldq, FloatPointer work,
                                lapack_int ncycle );
public static native @ByVal lapack_int LAPACKE_stgsja_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, @ByVal lapack_int k, @ByVal lapack_int l,
                                FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b,
                                @ByVal lapack_int ldb, float tola, float tolb,
                                FloatBuffer alpha, FloatBuffer beta, FloatBuffer u,
                                @ByVal lapack_int ldu, FloatBuffer v, @ByVal lapack_int ldv,
                                FloatBuffer q, @ByVal lapack_int ldq, FloatBuffer work,
                                lapack_int ncycle );
public static native @ByVal lapack_int LAPACKE_stgsja_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, @ByVal lapack_int k, @ByVal lapack_int l,
                                float[] a, @ByVal lapack_int lda, float[] b,
                                @ByVal lapack_int ldb, float tola, float tolb,
                                float[] alpha, float[] beta, float[] u,
                                @ByVal lapack_int ldu, float[] v, @ByVal lapack_int ldv,
                                float[] q, @ByVal lapack_int ldq, float[] work,
                                lapack_int ncycle );

public static native @ByVal lapack_int LAPACKE_stgsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const FloatPointer a, @ByVal lapack_int lda, @Const FloatPointer b,
                           @ByVal lapack_int ldb, @Const FloatPointer vl, @ByVal lapack_int ldvl,
                           @Const FloatPointer vr, @ByVal lapack_int ldvr, FloatPointer s,
                           FloatPointer dif, @ByVal lapack_int mm, lapack_int m );
public static native @ByVal lapack_int LAPACKE_stgsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const FloatBuffer a, @ByVal lapack_int lda, @Const FloatBuffer b,
                           @ByVal lapack_int ldb, @Const FloatBuffer vl, @ByVal lapack_int ldvl,
                           @Const FloatBuffer vr, @ByVal lapack_int ldvr, FloatBuffer s,
                           FloatBuffer dif, @ByVal lapack_int mm, lapack_int m );
public static native @ByVal lapack_int LAPACKE_stgsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const float[] a, @ByVal lapack_int lda, @Const float[] b,
                           @ByVal lapack_int ldb, @Const float[] vl, @ByVal lapack_int ldvl,
                           @Const float[] vr, @ByVal lapack_int ldvr, float[] s,
                           float[] dif, @ByVal lapack_int mm, lapack_int m );

public static native @ByVal lapack_int LAPACKE_stgsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const FloatPointer a, @ByVal lapack_int lda, @Const FloatPointer b,
                                @ByVal lapack_int ldb, @Const FloatPointer vl,
                                @ByVal lapack_int ldvl, @Const FloatPointer vr,
                                @ByVal lapack_int ldvr, FloatPointer s, FloatPointer dif,
                                @ByVal lapack_int mm, lapack_int m, FloatPointer work,
                                @ByVal lapack_int lwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_stgsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const FloatBuffer a, @ByVal lapack_int lda, @Const FloatBuffer b,
                                @ByVal lapack_int ldb, @Const FloatBuffer vl,
                                @ByVal lapack_int ldvl, @Const FloatBuffer vr,
                                @ByVal lapack_int ldvr, FloatBuffer s, FloatBuffer dif,
                                @ByVal lapack_int mm, lapack_int m, FloatBuffer work,
                                @ByVal lapack_int lwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_stgsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const float[] a, @ByVal lapack_int lda, @Const float[] b,
                                @ByVal lapack_int ldb, @Const float[] vl,
                                @ByVal lapack_int ldvl, @Const float[] vr,
                                @ByVal lapack_int ldvr, float[] s, float[] dif,
                                @ByVal lapack_int mm, lapack_int m, float[] work,
                                @ByVal lapack_int lwork, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_stgsyl( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const FloatPointer a,
                           @ByVal lapack_int lda, @Const FloatPointer b, @ByVal lapack_int ldb,
                           FloatPointer c, @ByVal lapack_int ldc, @Const FloatPointer d,
                           @ByVal lapack_int ldd, @Const FloatPointer e, @ByVal lapack_int lde,
                           FloatPointer f, @ByVal lapack_int ldf, FloatPointer scale, FloatPointer dif );
public static native @ByVal lapack_int LAPACKE_stgsyl( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const FloatBuffer a,
                           @ByVal lapack_int lda, @Const FloatBuffer b, @ByVal lapack_int ldb,
                           FloatBuffer c, @ByVal lapack_int ldc, @Const FloatBuffer d,
                           @ByVal lapack_int ldd, @Const FloatBuffer e, @ByVal lapack_int lde,
                           FloatBuffer f, @ByVal lapack_int ldf, FloatBuffer scale, FloatBuffer dif );
public static native @ByVal lapack_int LAPACKE_stgsyl( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                           @ByVal lapack_int m, @ByVal lapack_int n, @Const float[] a,
                           @ByVal lapack_int lda, @Const float[] b, @ByVal lapack_int ldb,
                           float[] c, @ByVal lapack_int ldc, @Const float[] d,
                           @ByVal lapack_int ldd, @Const float[] e, @ByVal lapack_int lde,
                           float[] f, @ByVal lapack_int ldf, float[] scale, float[] dif );

public static native @ByVal lapack_int LAPACKE_stgsyl_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                                @ByVal lapack_int m, @ByVal lapack_int n, @Const FloatPointer a,
                                @ByVal lapack_int lda, @Const FloatPointer b, @ByVal lapack_int ldb,
                                FloatPointer c, @ByVal lapack_int ldc, @Const FloatPointer d,
                                @ByVal lapack_int ldd, @Const FloatPointer e, @ByVal lapack_int lde,
                                FloatPointer f, @ByVal lapack_int ldf, FloatPointer scale,
                                FloatPointer dif, FloatPointer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_stgsyl_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                                @ByVal lapack_int m, @ByVal lapack_int n, @Const FloatBuffer a,
                                @ByVal lapack_int lda, @Const FloatBuffer b, @ByVal lapack_int ldb,
                                FloatBuffer c, @ByVal lapack_int ldc, @Const FloatBuffer d,
                                @ByVal lapack_int ldd, @Const FloatBuffer e, @ByVal lapack_int lde,
                                FloatBuffer f, @ByVal lapack_int ldf, FloatBuffer scale,
                                FloatBuffer dif, FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_stgsyl_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                                @ByVal lapack_int m, @ByVal lapack_int n, @Const float[] a,
                                @ByVal lapack_int lda, @Const float[] b, @ByVal lapack_int ldb,
                                float[] c, @ByVal lapack_int ldc, @Const float[] d,
                                @ByVal lapack_int ldd, @Const float[] e, @ByVal lapack_int lde,
                                float[] f, @ByVal lapack_int ldf, float[] scale,
                                float[] dif, float[] work, @ByVal lapack_int lwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_stpcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const FloatPointer ap, FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_stpcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const FloatBuffer ap, FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_stpcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const float[] ap, float[] rcond );

public static native @ByVal lapack_int LAPACKE_stpcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @Const FloatPointer ap,
                                FloatPointer rcond, FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_stpcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @Const FloatBuffer ap,
                                FloatBuffer rcond, FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_stpcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @Const float[] ap,
                                float[] rcond, float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_stpmqrt( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                            @ByVal lapack_int l, @ByVal lapack_int nb, @Const FloatPointer v,
                            @ByVal lapack_int ldv, @Const FloatPointer t, @ByVal lapack_int ldt,
                            FloatPointer a, @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_stpmqrt( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                            @ByVal lapack_int l, @ByVal lapack_int nb, @Const FloatBuffer v,
                            @ByVal lapack_int ldv, @Const FloatBuffer t, @ByVal lapack_int ldt,
                            FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_stpmqrt( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                            @ByVal lapack_int l, @ByVal lapack_int nb, @Const float[] v,
                            @ByVal lapack_int ldv, @Const float[] t, @ByVal lapack_int ldt,
                            float[] a, @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_stpmqrt_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                 @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                 @ByVal lapack_int l, @ByVal lapack_int nb, @Const FloatPointer v,
                                 @ByVal lapack_int ldv, @Const FloatPointer t, @ByVal lapack_int ldt,
                                 FloatPointer a, @ByVal lapack_int lda, FloatPointer b,
                                 @ByVal lapack_int ldb, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_stpmqrt_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                 @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                 @ByVal lapack_int l, @ByVal lapack_int nb, @Const FloatBuffer v,
                                 @ByVal lapack_int ldv, @Const FloatBuffer t, @ByVal lapack_int ldt,
                                 FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b,
                                 @ByVal lapack_int ldb, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_stpmqrt_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                 @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                 @ByVal lapack_int l, @ByVal lapack_int nb, @Const float[] v,
                                 @ByVal lapack_int ldv, @Const float[] t, @ByVal lapack_int ldt,
                                 float[] a, @ByVal lapack_int lda, float[] b,
                                 @ByVal lapack_int ldb, float[] work );

public static native @ByVal lapack_int LAPACKE_stpqrt( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int l, @ByVal lapack_int nb, FloatPointer a,
                           @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb, FloatPointer t,
                           @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_stpqrt( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int l, @ByVal lapack_int nb, FloatBuffer a,
                           @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer t,
                           @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_stpqrt( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int l, @ByVal lapack_int nb, float[] a,
                           @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb, float[] t,
                           @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_stpqrt2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @ByVal lapack_int l,
                            FloatPointer a, @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb,
                            FloatPointer t, @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_stpqrt2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @ByVal lapack_int l,
                            FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb,
                            FloatBuffer t, @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_stpqrt2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @ByVal lapack_int l,
                            float[] a, @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb,
                            float[] t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_stpqrt2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int l, FloatPointer a, @ByVal lapack_int lda, FloatPointer b,
                                 @ByVal lapack_int ldb, FloatPointer t, @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_stpqrt2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int l, FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b,
                                 @ByVal lapack_int ldb, FloatBuffer t, @ByVal lapack_int ldt );
public static native @ByVal lapack_int LAPACKE_stpqrt2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int l, float[] a, @ByVal lapack_int lda, float[] b,
                                 @ByVal lapack_int ldb, float[] t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_stpqrt_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int l, @ByVal lapack_int nb, FloatPointer a,
                                @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb,
                                FloatPointer t, @ByVal lapack_int ldt, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_stpqrt_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int l, @ByVal lapack_int nb, FloatBuffer a,
                                @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb,
                                FloatBuffer t, @ByVal lapack_int ldt, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_stpqrt_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int l, @ByVal lapack_int nb, float[] a,
                                @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb,
                                float[] t, @ByVal lapack_int ldt, float[] work );

public static native @ByVal lapack_int LAPACKE_stprfb( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans, @Cast("char") byte direct,
                           @Cast("char") byte storev, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, @ByVal lapack_int l, @Const FloatPointer v,
                           @ByVal lapack_int ldv, @Const FloatPointer t, @ByVal lapack_int ldt,
                           FloatPointer a, @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb);
public static native @ByVal lapack_int LAPACKE_stprfb( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans, @Cast("char") byte direct,
                           @Cast("char") byte storev, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, @ByVal lapack_int l, @Const FloatBuffer v,
                           @ByVal lapack_int ldv, @Const FloatBuffer t, @ByVal lapack_int ldt,
                           FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb);
public static native @ByVal lapack_int LAPACKE_stprfb( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans, @Cast("char") byte direct,
                           @Cast("char") byte storev, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, @ByVal lapack_int l, @Const float[] v,
                           @ByVal lapack_int ldv, @Const float[] t, @ByVal lapack_int ldt,
                           float[] a, @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb);

public static native @ByVal lapack_int LAPACKE_stprfb_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @Cast("char") byte direct, @Cast("char") byte storev, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k, @ByVal lapack_int l,
                                @Const FloatPointer v, @ByVal lapack_int ldv, @Const FloatPointer t,
                                @ByVal lapack_int ldt, FloatPointer a, @ByVal lapack_int lda,
                                FloatPointer b, @ByVal lapack_int ldb, FloatPointer work,
                                @ByVal lapack_int ldwork );
public static native @ByVal lapack_int LAPACKE_stprfb_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @Cast("char") byte direct, @Cast("char") byte storev, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k, @ByVal lapack_int l,
                                @Const FloatBuffer v, @ByVal lapack_int ldv, @Const FloatBuffer t,
                                @ByVal lapack_int ldt, FloatBuffer a, @ByVal lapack_int lda,
                                FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer work,
                                @ByVal lapack_int ldwork );
public static native @ByVal lapack_int LAPACKE_stprfb_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @Cast("char") byte direct, @Cast("char") byte storev, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k, @ByVal lapack_int l,
                                @Const float[] v, @ByVal lapack_int ldv, @Const float[] t,
                                @ByVal lapack_int ldt, float[] a, @ByVal lapack_int lda,
                                float[] b, @ByVal lapack_int ldb, float[] work,
                                @ByVal lapack_int ldwork );

public static native @ByVal lapack_int LAPACKE_stprfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatPointer ap,
                           @Const FloatPointer b, @ByVal lapack_int ldb, @Const FloatPointer x,
                           @ByVal lapack_int ldx, FloatPointer ferr, FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_stprfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatBuffer ap,
                           @Const FloatBuffer b, @ByVal lapack_int ldb, @Const FloatBuffer x,
                           @ByVal lapack_int ldx, FloatBuffer ferr, FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_stprfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const float[] ap,
                           @Const float[] b, @ByVal lapack_int ldb, @Const float[] x,
                           @ByVal lapack_int ldx, float[] ferr, float[] berr );

public static native @ByVal lapack_int LAPACKE_stprfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const FloatPointer ap, @Const FloatPointer b, @ByVal lapack_int ldb,
                                @Const FloatPointer x, @ByVal lapack_int ldx, FloatPointer ferr,
                                FloatPointer berr, FloatPointer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_stprfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const FloatBuffer ap, @Const FloatBuffer b, @ByVal lapack_int ldb,
                                @Const FloatBuffer x, @ByVal lapack_int ldx, FloatBuffer ferr,
                                FloatBuffer berr, FloatBuffer work, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_stprfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const float[] ap, @Const float[] b, @ByVal lapack_int ldb,
                                @Const float[] x, @ByVal lapack_int ldx, float[] ferr,
                                float[] berr, float[] work, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_stptri( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag, @ByVal lapack_int n,
                           FloatPointer ap );
public static native @ByVal lapack_int LAPACKE_stptri( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag, @ByVal lapack_int n,
                           FloatBuffer ap );
public static native @ByVal lapack_int LAPACKE_stptri( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag, @ByVal lapack_int n,
                           float[] ap );

public static native @ByVal lapack_int LAPACKE_stptri_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag,
                                @ByVal lapack_int n, FloatPointer ap );
public static native @ByVal lapack_int LAPACKE_stptri_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag,
                                @ByVal lapack_int n, FloatBuffer ap );
public static native @ByVal lapack_int LAPACKE_stptri_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag,
                                @ByVal lapack_int n, float[] ap );

public static native @ByVal lapack_int LAPACKE_stptrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatPointer ap,
                           FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_stptrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatBuffer ap,
                           FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_stptrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const float[] ap,
                           float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_stptrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const FloatPointer ap, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_stptrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const FloatBuffer ap, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_stptrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const float[] ap, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_stpttf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const FloatPointer ap, FloatPointer arf );
public static native @ByVal lapack_int LAPACKE_stpttf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const FloatBuffer ap, FloatBuffer arf );
public static native @ByVal lapack_int LAPACKE_stpttf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const float[] ap, float[] arf );

public static native @ByVal lapack_int LAPACKE_stpttf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const FloatPointer ap, FloatPointer arf );
public static native @ByVal lapack_int LAPACKE_stpttf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const FloatBuffer ap, FloatBuffer arf );
public static native @ByVal lapack_int LAPACKE_stpttf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const float[] ap, float[] arf );

public static native @ByVal lapack_int LAPACKE_stpttr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const FloatPointer ap, FloatPointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_stpttr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const FloatBuffer ap, FloatBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_stpttr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const float[] ap, float[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_stpttr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const FloatPointer ap, FloatPointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_stpttr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const FloatBuffer ap, FloatBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_stpttr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const float[] ap, float[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_strcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const FloatPointer a, @ByVal lapack_int lda,
                           FloatPointer rcond );
public static native @ByVal lapack_int LAPACKE_strcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const FloatBuffer a, @ByVal lapack_int lda,
                           FloatBuffer rcond );
public static native @ByVal lapack_int LAPACKE_strcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const float[] a, @ByVal lapack_int lda,
                           float[] rcond );

public static native @ByVal lapack_int LAPACKE_strcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @Const FloatPointer a,
                                @ByVal lapack_int lda, FloatPointer rcond, FloatPointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_strcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @Const FloatBuffer a,
                                @ByVal lapack_int lda, FloatBuffer rcond, FloatBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_strcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @Const float[] a,
                                @ByVal lapack_int lda, float[] rcond, float[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_strevc( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                           lapack_logical select, @ByVal lapack_int n, @Const FloatPointer t,
                           @ByVal lapack_int ldt, FloatPointer vl, @ByVal lapack_int ldvl,
                           FloatPointer vr, @ByVal lapack_int ldvr, @ByVal lapack_int mm,
                           lapack_int m );
public static native @ByVal lapack_int LAPACKE_strevc( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                           lapack_logical select, @ByVal lapack_int n, @Const FloatBuffer t,
                           @ByVal lapack_int ldt, FloatBuffer vl, @ByVal lapack_int ldvl,
                           FloatBuffer vr, @ByVal lapack_int ldvr, @ByVal lapack_int mm,
                           lapack_int m );
public static native @ByVal lapack_int LAPACKE_strevc( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                           lapack_logical select, @ByVal lapack_int n, @Const float[] t,
                           @ByVal lapack_int ldt, float[] vl, @ByVal lapack_int ldvl,
                           float[] vr, @ByVal lapack_int ldvr, @ByVal lapack_int mm,
                           lapack_int m );

public static native @ByVal lapack_int LAPACKE_strevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                lapack_logical select, @ByVal lapack_int n,
                                @Const FloatPointer t, @ByVal lapack_int ldt, FloatPointer vl,
                                @ByVal lapack_int ldvl, FloatPointer vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_strevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                lapack_logical select, @ByVal lapack_int n,
                                @Const FloatBuffer t, @ByVal lapack_int ldt, FloatBuffer vl,
                                @ByVal lapack_int ldvl, FloatBuffer vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_strevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                lapack_logical select, @ByVal lapack_int n,
                                @Const float[] t, @ByVal lapack_int ldt, float[] vl,
                                @ByVal lapack_int ldvl, float[] vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m, float[] work );

public static native @ByVal lapack_int LAPACKE_strexc( int matrix_layout, @Cast("char") byte compq, @ByVal lapack_int n, FloatPointer t,
                           @ByVal lapack_int ldt, FloatPointer q, @ByVal lapack_int ldq,
                           lapack_int ifst, lapack_int ilst );
public static native @ByVal lapack_int LAPACKE_strexc( int matrix_layout, @Cast("char") byte compq, @ByVal lapack_int n, FloatBuffer t,
                           @ByVal lapack_int ldt, FloatBuffer q, @ByVal lapack_int ldq,
                           lapack_int ifst, lapack_int ilst );
public static native @ByVal lapack_int LAPACKE_strexc( int matrix_layout, @Cast("char") byte compq, @ByVal lapack_int n, float[] t,
                           @ByVal lapack_int ldt, float[] q, @ByVal lapack_int ldq,
                           lapack_int ifst, lapack_int ilst );

public static native @ByVal lapack_int LAPACKE_strexc_work( int matrix_layout, @Cast("char") byte compq, @ByVal lapack_int n,
                                FloatPointer t, @ByVal lapack_int ldt, FloatPointer q,
                                @ByVal lapack_int ldq, lapack_int ifst,
                                lapack_int ilst, FloatPointer work );
public static native @ByVal lapack_int LAPACKE_strexc_work( int matrix_layout, @Cast("char") byte compq, @ByVal lapack_int n,
                                FloatBuffer t, @ByVal lapack_int ldt, FloatBuffer q,
                                @ByVal lapack_int ldq, lapack_int ifst,
                                lapack_int ilst, FloatBuffer work );
public static native @ByVal lapack_int LAPACKE_strexc_work( int matrix_layout, @Cast("char") byte compq, @ByVal lapack_int n,
                                float[] t, @ByVal lapack_int ldt, float[] q,
                                @ByVal lapack_int ldq, lapack_int ifst,
                                lapack_int ilst, float[] work );

public static native @ByVal lapack_int LAPACKE_strrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatPointer a,
                           @ByVal lapack_int lda, @Const FloatPointer b, @ByVal lapack_int ldb,
                           @Const FloatPointer x, @ByVal lapack_int ldx, FloatPointer ferr,
                           FloatPointer berr );
public static native @ByVal lapack_int LAPACKE_strrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatBuffer a,
                           @ByVal lapack_int lda, @Const FloatBuffer b, @ByVal lapack_int ldb,
                           @Const FloatBuffer x, @ByVal lapack_int ldx, FloatBuffer ferr,
                           FloatBuffer berr );
public static native @ByVal lapack_int LAPACKE_strrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const float[] a,
                           @ByVal lapack_int lda, @Const float[] b, @ByVal lapack_int ldb,
                           @Const float[] x, @ByVal lapack_int ldx, float[] ferr,
                           float[] berr );

public static native @ByVal lapack_int LAPACKE_strrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const FloatPointer a, @ByVal lapack_int lda, @Const FloatPointer b,
                                @ByVal lapack_int ldb, @Const FloatPointer x, @ByVal lapack_int ldx,
                                FloatPointer ferr, FloatPointer berr, FloatPointer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_strrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const FloatBuffer a, @ByVal lapack_int lda, @Const FloatBuffer b,
                                @ByVal lapack_int ldb, @Const FloatBuffer x, @ByVal lapack_int ldx,
                                FloatBuffer ferr, FloatBuffer berr, FloatBuffer work,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_strrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const float[] a, @ByVal lapack_int lda, @Const float[] b,
                                @ByVal lapack_int ldb, @Const float[] x, @ByVal lapack_int ldx,
                                float[] ferr, float[] berr, float[] work,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_strsen( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                           @Const lapack_logical select, @ByVal lapack_int n, FloatPointer t,
                           @ByVal lapack_int ldt, FloatPointer q, @ByVal lapack_int ldq, FloatPointer wr,
                           FloatPointer wi, lapack_int m, FloatPointer s, FloatPointer sep );
public static native @ByVal lapack_int LAPACKE_strsen( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                           @Const lapack_logical select, @ByVal lapack_int n, FloatBuffer t,
                           @ByVal lapack_int ldt, FloatBuffer q, @ByVal lapack_int ldq, FloatBuffer wr,
                           FloatBuffer wi, lapack_int m, FloatBuffer s, FloatBuffer sep );
public static native @ByVal lapack_int LAPACKE_strsen( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                           @Const lapack_logical select, @ByVal lapack_int n, float[] t,
                           @ByVal lapack_int ldt, float[] q, @ByVal lapack_int ldq, float[] wr,
                           float[] wi, lapack_int m, float[] s, float[] sep );

public static native @ByVal lapack_int LAPACKE_strsen_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                FloatPointer t, @ByVal lapack_int ldt, FloatPointer q,
                                @ByVal lapack_int ldq, FloatPointer wr, FloatPointer wi,
                                lapack_int m, FloatPointer s, FloatPointer sep,
                                FloatPointer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_strsen_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                FloatBuffer t, @ByVal lapack_int ldt, FloatBuffer q,
                                @ByVal lapack_int ldq, FloatBuffer wr, FloatBuffer wi,
                                lapack_int m, FloatBuffer s, FloatBuffer sep,
                                FloatBuffer work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_strsen_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                float[] t, @ByVal lapack_int ldt, float[] q,
                                @ByVal lapack_int ldq, float[] wr, float[] wi,
                                lapack_int m, float[] s, float[] sep,
                                float[] work, @ByVal lapack_int lwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_strsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const FloatPointer t, @ByVal lapack_int ldt, @Const FloatPointer vl,
                           @ByVal lapack_int ldvl, @Const FloatPointer vr, @ByVal lapack_int ldvr,
                           FloatPointer s, FloatPointer sep, @ByVal lapack_int mm, lapack_int m );
public static native @ByVal lapack_int LAPACKE_strsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const FloatBuffer t, @ByVal lapack_int ldt, @Const FloatBuffer vl,
                           @ByVal lapack_int ldvl, @Const FloatBuffer vr, @ByVal lapack_int ldvr,
                           FloatBuffer s, FloatBuffer sep, @ByVal lapack_int mm, lapack_int m );
public static native @ByVal lapack_int LAPACKE_strsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const float[] t, @ByVal lapack_int ldt, @Const float[] vl,
                           @ByVal lapack_int ldvl, @Const float[] vr, @ByVal lapack_int ldvr,
                           float[] s, float[] sep, @ByVal lapack_int mm, lapack_int m );

public static native @ByVal lapack_int LAPACKE_strsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const FloatPointer t, @ByVal lapack_int ldt, @Const FloatPointer vl,
                                @ByVal lapack_int ldvl, @Const FloatPointer vr,
                                @ByVal lapack_int ldvr, FloatPointer s, FloatPointer sep,
                                @ByVal lapack_int mm, lapack_int m, FloatPointer work,
                                @ByVal lapack_int ldwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_strsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const FloatBuffer t, @ByVal lapack_int ldt, @Const FloatBuffer vl,
                                @ByVal lapack_int ldvl, @Const FloatBuffer vr,
                                @ByVal lapack_int ldvr, FloatBuffer s, FloatBuffer sep,
                                @ByVal lapack_int mm, lapack_int m, FloatBuffer work,
                                @ByVal lapack_int ldwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_strsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const float[] t, @ByVal lapack_int ldt, @Const float[] vl,
                                @ByVal lapack_int ldvl, @Const float[] vr,
                                @ByVal lapack_int ldvr, float[] s, float[] sep,
                                @ByVal lapack_int mm, lapack_int m, float[] work,
                                @ByVal lapack_int ldwork, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_strsyl( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                           @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const FloatPointer a, @ByVal lapack_int lda, @Const FloatPointer b,
                           @ByVal lapack_int ldb, FloatPointer c, @ByVal lapack_int ldc,
                           FloatPointer scale );
public static native @ByVal lapack_int LAPACKE_strsyl( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                           @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const FloatBuffer a, @ByVal lapack_int lda, @Const FloatBuffer b,
                           @ByVal lapack_int ldb, FloatBuffer c, @ByVal lapack_int ldc,
                           FloatBuffer scale );
public static native @ByVal lapack_int LAPACKE_strsyl( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                           @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const float[] a, @ByVal lapack_int lda, @Const float[] b,
                           @ByVal lapack_int ldb, float[] c, @ByVal lapack_int ldc,
                           float[] scale );

public static native @ByVal lapack_int LAPACKE_strsyl_work( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                                @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const FloatPointer a, @ByVal lapack_int lda, @Const FloatPointer b,
                                @ByVal lapack_int ldb, FloatPointer c, @ByVal lapack_int ldc,
                                FloatPointer scale );
public static native @ByVal lapack_int LAPACKE_strsyl_work( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                                @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const FloatBuffer a, @ByVal lapack_int lda, @Const FloatBuffer b,
                                @ByVal lapack_int ldb, FloatBuffer c, @ByVal lapack_int ldc,
                                FloatBuffer scale );
public static native @ByVal lapack_int LAPACKE_strsyl_work( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                                @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const float[] a, @ByVal lapack_int lda, @Const float[] b,
                                @ByVal lapack_int ldb, float[] c, @ByVal lapack_int ldc,
                                float[] scale );

public static native @ByVal lapack_int LAPACKE_strtri( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag, @ByVal lapack_int n,
                           FloatPointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_strtri( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag, @ByVal lapack_int n,
                           FloatBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_strtri( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag, @ByVal lapack_int n,
                           float[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_strtri_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag,
                                @ByVal lapack_int n, FloatPointer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_strtri_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag,
                                @ByVal lapack_int n, FloatBuffer a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_strtri_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag,
                                @ByVal lapack_int n, float[] a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_strtrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatPointer a,
                           @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_strtrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const FloatBuffer a,
                           @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_strtrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs, @Const float[] a,
                           @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_strtrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const FloatPointer a, @ByVal lapack_int lda, FloatPointer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_strtrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const FloatBuffer a, @ByVal lapack_int lda, FloatBuffer b,
                                @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_strtrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const float[] a, @ByVal lapack_int lda, float[] b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_strttf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const FloatPointer a, @ByVal lapack_int lda,
                           FloatPointer arf );
public static native @ByVal lapack_int LAPACKE_strttf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const FloatBuffer a, @ByVal lapack_int lda,
                           FloatBuffer arf );
public static native @ByVal lapack_int LAPACKE_strttf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const float[] a, @ByVal lapack_int lda,
                           float[] arf );

public static native @ByVal lapack_int LAPACKE_strttf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const FloatPointer a, @ByVal lapack_int lda,
                                FloatPointer arf );
public static native @ByVal lapack_int LAPACKE_strttf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const FloatBuffer a, @ByVal lapack_int lda,
                                FloatBuffer arf );
public static native @ByVal lapack_int LAPACKE_strttf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const float[] a, @ByVal lapack_int lda,
                                float[] arf );

public static native @ByVal lapack_int LAPACKE_strttp( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const FloatPointer a, @ByVal lapack_int lda, FloatPointer ap );
public static native @ByVal lapack_int LAPACKE_strttp( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const FloatBuffer a, @ByVal lapack_int lda, FloatBuffer ap );
public static native @ByVal lapack_int LAPACKE_strttp( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const float[] a, @ByVal lapack_int lda, float[] ap );

public static native @ByVal lapack_int LAPACKE_strttp_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const FloatPointer a, @ByVal lapack_int lda, FloatPointer ap );
public static native @ByVal lapack_int LAPACKE_strttp_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const FloatBuffer a, @ByVal lapack_int lda, FloatBuffer ap );
public static native @ByVal lapack_int LAPACKE_strttp_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const float[] a, @ByVal lapack_int lda, float[] ap );

public static native @ByVal lapack_int LAPACKE_stzrzf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatPointer a, @ByVal lapack_int lda, FloatPointer tau );
public static native @ByVal lapack_int LAPACKE_stzrzf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           FloatBuffer a, @ByVal lapack_int lda, FloatBuffer tau );
public static native @ByVal lapack_int LAPACKE_stzrzf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           float[] a, @ByVal lapack_int lda, float[] tau );

public static native @ByVal lapack_int LAPACKE_stzrzf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatPointer a, @ByVal lapack_int lda, FloatPointer tau,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_stzrzf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                FloatBuffer a, @ByVal lapack_int lda, FloatBuffer tau,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_stzrzf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                float[] a, @ByVal lapack_int lda, float[] tau,
                                float[] work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zbbcsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @ByVal lapack_int m,
                           @ByVal lapack_int p, @ByVal lapack_int q, DoublePointer theta,
                           DoublePointer phi, lapack_complex_double u1,
                           @ByVal lapack_int ldu1, lapack_complex_double u2,
                           @ByVal lapack_int ldu2, lapack_complex_double v1t,
                           @ByVal lapack_int ldv1t, lapack_complex_double v2t,
                           @ByVal lapack_int ldv2t, DoublePointer b11d, DoublePointer b11e,
                           DoublePointer b12d, DoublePointer b12e, DoublePointer b21d,
                           DoublePointer b21e, DoublePointer b22d, DoublePointer b22e );
public static native @ByVal lapack_int LAPACKE_zbbcsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @ByVal lapack_int m,
                           @ByVal lapack_int p, @ByVal lapack_int q, DoubleBuffer theta,
                           DoubleBuffer phi, lapack_complex_double u1,
                           @ByVal lapack_int ldu1, lapack_complex_double u2,
                           @ByVal lapack_int ldu2, lapack_complex_double v1t,
                           @ByVal lapack_int ldv1t, lapack_complex_double v2t,
                           @ByVal lapack_int ldv2t, DoubleBuffer b11d, DoubleBuffer b11e,
                           DoubleBuffer b12d, DoubleBuffer b12e, DoubleBuffer b21d,
                           DoubleBuffer b21e, DoubleBuffer b22d, DoubleBuffer b22e );
public static native @ByVal lapack_int LAPACKE_zbbcsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @ByVal lapack_int m,
                           @ByVal lapack_int p, @ByVal lapack_int q, double[] theta,
                           double[] phi, lapack_complex_double u1,
                           @ByVal lapack_int ldu1, lapack_complex_double u2,
                           @ByVal lapack_int ldu2, lapack_complex_double v1t,
                           @ByVal lapack_int ldv1t, lapack_complex_double v2t,
                           @ByVal lapack_int ldv2t, double[] b11d, double[] b11e,
                           double[] b12d, double[] b12e, double[] b21d,
                           double[] b21e, double[] b22d, double[] b22e );

public static native @ByVal lapack_int LAPACKE_zbbcsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                DoublePointer theta, DoublePointer phi,
                                lapack_complex_double u1, @ByVal lapack_int ldu1,
                                lapack_complex_double u2, @ByVal lapack_int ldu2,
                                lapack_complex_double v1t, @ByVal lapack_int ldv1t,
                                lapack_complex_double v2t, @ByVal lapack_int ldv2t,
                                DoublePointer b11d, DoublePointer b11e, DoublePointer b12d,
                                DoublePointer b12e, DoublePointer b21d, DoublePointer b21e,
                                DoublePointer b22d, DoublePointer b22e, DoublePointer rwork,
                                @ByVal lapack_int lrwork );
public static native @ByVal lapack_int LAPACKE_zbbcsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                DoubleBuffer theta, DoubleBuffer phi,
                                lapack_complex_double u1, @ByVal lapack_int ldu1,
                                lapack_complex_double u2, @ByVal lapack_int ldu2,
                                lapack_complex_double v1t, @ByVal lapack_int ldv1t,
                                lapack_complex_double v2t, @ByVal lapack_int ldv2t,
                                DoubleBuffer b11d, DoubleBuffer b11e, DoubleBuffer b12d,
                                DoubleBuffer b12e, DoubleBuffer b21d, DoubleBuffer b21e,
                                DoubleBuffer b22d, DoubleBuffer b22e, DoubleBuffer rwork,
                                @ByVal lapack_int lrwork );
public static native @ByVal lapack_int LAPACKE_zbbcsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                double[] theta, double[] phi,
                                lapack_complex_double u1, @ByVal lapack_int ldu1,
                                lapack_complex_double u2, @ByVal lapack_int ldu2,
                                lapack_complex_double v1t, @ByVal lapack_int ldv1t,
                                lapack_complex_double v2t, @ByVal lapack_int ldv2t,
                                double[] b11d, double[] b11e, double[] b12d,
                                double[] b12e, double[] b21d, double[] b21e,
                                double[] b22d, double[] b22e, double[] rwork,
                                @ByVal lapack_int lrwork );

public static native @ByVal lapack_int LAPACKE_zbdsqr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                           DoublePointer d, DoublePointer e, lapack_complex_double vt,
                           @ByVal lapack_int ldvt, lapack_complex_double u,
                           @ByVal lapack_int ldu, lapack_complex_double c,
                           @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_zbdsqr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                           DoubleBuffer d, DoubleBuffer e, lapack_complex_double vt,
                           @ByVal lapack_int ldvt, lapack_complex_double u,
                           @ByVal lapack_int ldu, lapack_complex_double c,
                           @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_zbdsqr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                           double[] d, double[] e, lapack_complex_double vt,
                           @ByVal lapack_int ldvt, lapack_complex_double u,
                           @ByVal lapack_int ldu, lapack_complex_double c,
                           @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_zbdsqr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                                DoublePointer d, DoublePointer e, lapack_complex_double vt,
                                @ByVal lapack_int ldvt, lapack_complex_double u,
                                @ByVal lapack_int ldu, lapack_complex_double c,
                                @ByVal lapack_int ldc, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_zbdsqr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                                DoubleBuffer d, DoubleBuffer e, lapack_complex_double vt,
                                @ByVal lapack_int ldvt, lapack_complex_double u,
                                @ByVal lapack_int ldu, lapack_complex_double c,
                                @ByVal lapack_int ldc, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_zbdsqr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int ncvt, @ByVal lapack_int nru, @ByVal lapack_int ncc,
                                double[] d, double[] e, lapack_complex_double vt,
                                @ByVal lapack_int ldvt, lapack_complex_double u,
                                @ByVal lapack_int ldu, lapack_complex_double c,
                                @ByVal lapack_int ldc, double[] work );

public static native @ByVal lapack_int LAPACKE_zcgesv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_int ipiv, lapack_complex_double b,
                           @ByVal lapack_int ldb, lapack_complex_double x,
                           @ByVal lapack_int ldx, lapack_int iter );

public static native @ByVal lapack_int LAPACKE_zcgesv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int ipiv, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_complex_double x,
                                @ByVal lapack_int ldx, lapack_complex_double work,
                                lapack_complex_float swork, DoublePointer rwork,
                                lapack_int iter );
public static native @ByVal lapack_int LAPACKE_zcgesv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int ipiv, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_complex_double x,
                                @ByVal lapack_int ldx, lapack_complex_double work,
                                lapack_complex_float swork, DoubleBuffer rwork,
                                lapack_int iter );
public static native @ByVal lapack_int LAPACKE_zcgesv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int ipiv, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_complex_double x,
                                @ByVal lapack_int ldx, lapack_complex_double work,
                                lapack_complex_float swork, double[] rwork,
                                lapack_int iter );

public static native @ByVal lapack_int LAPACKE_zcposv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double b,
                           @ByVal lapack_int ldb, lapack_complex_double x,
                           @ByVal lapack_int ldx, lapack_int iter );

public static native @ByVal lapack_int LAPACKE_zcposv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_complex_double x,
                                @ByVal lapack_int ldx, lapack_complex_double work,
                                lapack_complex_float swork, DoublePointer rwork,
                                lapack_int iter );
public static native @ByVal lapack_int LAPACKE_zcposv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_complex_double x,
                                @ByVal lapack_int ldx, lapack_complex_double work,
                                lapack_complex_float swork, DoubleBuffer rwork,
                                lapack_int iter );
public static native @ByVal lapack_int LAPACKE_zcposv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_complex_double x,
                                @ByVal lapack_int ldx, lapack_complex_double work,
                                lapack_complex_float swork, double[] rwork,
                                lapack_int iter );

public static native @ByVal lapack_int LAPACKE_zgbbrd( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, lapack_complex_double ab,
                           @ByVal lapack_int ldab, DoublePointer d, DoublePointer e,
                           lapack_complex_double q, @ByVal lapack_int ldq,
                           lapack_complex_double pt, @ByVal lapack_int ldpt,
                           lapack_complex_double c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_zgbbrd( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, lapack_complex_double ab,
                           @ByVal lapack_int ldab, DoubleBuffer d, DoubleBuffer e,
                           lapack_complex_double q, @ByVal lapack_int ldq,
                           lapack_complex_double pt, @ByVal lapack_int ldpt,
                           lapack_complex_double c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_zgbbrd( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, lapack_complex_double ab,
                           @ByVal lapack_int ldab, double[] d, double[] e,
                           lapack_complex_double q, @ByVal lapack_int ldq,
                           lapack_complex_double pt, @ByVal lapack_int ldpt,
                           lapack_complex_double c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_zgbbrd_work( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                                @ByVal lapack_int ku, lapack_complex_double ab,
                                @ByVal lapack_int ldab, DoublePointer d, DoublePointer e,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_complex_double pt, @ByVal lapack_int ldpt,
                                lapack_complex_double c, @ByVal lapack_int ldc,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zgbbrd_work( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                                @ByVal lapack_int ku, lapack_complex_double ab,
                                @ByVal lapack_int ldab, DoubleBuffer d, DoubleBuffer e,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_complex_double pt, @ByVal lapack_int ldpt,
                                lapack_complex_double c, @ByVal lapack_int ldc,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zgbbrd_work( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int ncc, @ByVal lapack_int kl,
                                @ByVal lapack_int ku, lapack_complex_double ab,
                                @ByVal lapack_int ldab, double[] d, double[] e,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_complex_double pt, @ByVal lapack_int ldpt,
                                lapack_complex_double c, @ByVal lapack_int ldc,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zgbcon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                           @Const lapack_int ipiv, double anorm, DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_zgbcon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                           @Const lapack_int ipiv, double anorm, DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_zgbcon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                           @Const lapack_int ipiv, double anorm, double[] rcond );

public static native @ByVal lapack_int LAPACKE_zgbcon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab, @Const lapack_int ipiv,
                                double anorm, DoublePointer rcond,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zgbcon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab, @Const lapack_int ipiv,
                                double anorm, DoubleBuffer rcond,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zgbcon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab, @Const lapack_int ipiv,
                                double anorm, double[] rcond,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zgbequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                           DoublePointer r, DoublePointer c, DoublePointer rowcnd, DoublePointer colcnd,
                           DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_zgbequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                           DoubleBuffer r, DoubleBuffer c, DoubleBuffer rowcnd, DoubleBuffer colcnd,
                           DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_zgbequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                           double[] r, double[] c, double[] rowcnd, double[] colcnd,
                           double[] amax );

public static native @ByVal lapack_int LAPACKE_zgbequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab, DoublePointer r, DoublePointer c,
                                DoublePointer rowcnd, DoublePointer colcnd, DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_zgbequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab, DoubleBuffer r, DoubleBuffer c,
                                DoubleBuffer rowcnd, DoubleBuffer colcnd, DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_zgbequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab, double[] r, double[] c,
                                double[] rowcnd, double[] colcnd, double[] amax );

public static native @ByVal lapack_int LAPACKE_zgbequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                            DoublePointer r, DoublePointer c, DoublePointer rowcnd,
                            DoublePointer colcnd, DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_zgbequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                            DoubleBuffer r, DoubleBuffer c, DoubleBuffer rowcnd,
                            DoubleBuffer colcnd, DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_zgbequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                            double[] r, double[] c, double[] rowcnd,
                            double[] colcnd, double[] amax );

public static native @ByVal lapack_int LAPACKE_zgbequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @Const lapack_complex_double ab,
                                 @ByVal lapack_int ldab, DoublePointer r, DoublePointer c,
                                 DoublePointer rowcnd, DoublePointer colcnd, DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_zgbequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @Const lapack_complex_double ab,
                                 @ByVal lapack_int ldab, DoubleBuffer r, DoubleBuffer c,
                                 DoubleBuffer rowcnd, DoubleBuffer colcnd, DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_zgbequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @Const lapack_complex_double ab,
                                 @ByVal lapack_int ldab, double[] r, double[] c,
                                 double[] rowcnd, double[] colcnd, double[] amax );

public static native @ByVal lapack_int LAPACKE_zgbrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                           @Const lapack_complex_double afb, @ByVal lapack_int ldafb,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_zgbrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                           @Const lapack_complex_double afb, @ByVal lapack_int ldafb,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_zgbrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                           @Const lapack_complex_double afb, @ByVal lapack_int ldafb,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_zgbrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab,
                                @Const lapack_complex_double afb,
                                @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zgbrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab,
                                @Const lapack_complex_double afb,
                                @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zgbrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab,
                                @Const lapack_complex_double afb,
                                @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                double[] ferr, double[] berr,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zgbrfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, @Const lapack_complex_double ab,
                            @ByVal lapack_int ldab, @Const lapack_complex_double afb,
                            @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                            @Const DoublePointer r, @Const DoublePointer c,
                            @Const lapack_complex_double b, @ByVal lapack_int ldb,
                            lapack_complex_double x, @ByVal lapack_int ldx,
                            DoublePointer rcond, DoublePointer berr, @ByVal lapack_int n_err_bnds,
                            DoublePointer err_bnds_norm, DoublePointer err_bnds_comp,
                            @ByVal lapack_int nparams, DoublePointer params );
public static native @ByVal lapack_int LAPACKE_zgbrfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, @Const lapack_complex_double ab,
                            @ByVal lapack_int ldab, @Const lapack_complex_double afb,
                            @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                            @Const DoubleBuffer r, @Const DoubleBuffer c,
                            @Const lapack_complex_double b, @ByVal lapack_int ldb,
                            lapack_complex_double x, @ByVal lapack_int ldx,
                            DoubleBuffer rcond, DoubleBuffer berr, @ByVal lapack_int n_err_bnds,
                            DoubleBuffer err_bnds_norm, DoubleBuffer err_bnds_comp,
                            @ByVal lapack_int nparams, DoubleBuffer params );
public static native @ByVal lapack_int LAPACKE_zgbrfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, @Const lapack_complex_double ab,
                            @ByVal lapack_int ldab, @Const lapack_complex_double afb,
                            @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                            @Const double[] r, @Const double[] c,
                            @Const lapack_complex_double b, @ByVal lapack_int ldb,
                            lapack_complex_double x, @ByVal lapack_int ldx,
                            double[] rcond, double[] berr, @ByVal lapack_int n_err_bnds,
                            double[] err_bnds_norm, double[] err_bnds_comp,
                            @ByVal lapack_int nparams, double[] params );

public static native @ByVal lapack_int LAPACKE_zgbrfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs,
                                 @Const lapack_complex_double ab,
                                 @ByVal lapack_int ldab,
                                 @Const lapack_complex_double afb,
                                 @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                                 @Const DoublePointer r, @Const DoublePointer c,
                                 @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 DoublePointer rcond, DoublePointer berr,
                                 @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                                 DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoublePointer params, lapack_complex_double work,
                                 DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zgbrfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs,
                                 @Const lapack_complex_double ab,
                                 @ByVal lapack_int ldab,
                                 @Const lapack_complex_double afb,
                                 @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                                 @Const DoubleBuffer r, @Const DoubleBuffer c,
                                 @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 DoubleBuffer rcond, DoubleBuffer berr,
                                 @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                                 DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoubleBuffer params, lapack_complex_double work,
                                 DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zgbrfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs,
                                 @Const lapack_complex_double ab,
                                 @ByVal lapack_int ldab,
                                 @Const lapack_complex_double afb,
                                 @ByVal lapack_int ldafb, @Const lapack_int ipiv,
                                 @Const double[] r, @Const double[] c,
                                 @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 double[] rcond, double[] berr,
                                 @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                                 double[] err_bnds_comp, @ByVal lapack_int nparams,
                                 double[] params, lapack_complex_double work,
                                 double[] rwork );

public static native @ByVal lapack_int LAPACKE_zgbsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int kl,
                          @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                          lapack_complex_double ab, @ByVal lapack_int ldab,
                          lapack_int ipiv, lapack_complex_double b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zgbsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int kl,
                               @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                               lapack_complex_double ab, @ByVal lapack_int ldab,
                               lapack_int ipiv, lapack_complex_double b,
                               @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zgbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @ByVal lapack_int nrhs, lapack_complex_double ab,
                           @ByVal lapack_int ldab, lapack_complex_double afb,
                           @ByVal lapack_int ldafb, lapack_int ipiv, @Cast("char*") BytePointer equed,
                           DoublePointer r, DoublePointer c, lapack_complex_double b,
                           @ByVal lapack_int ldb, lapack_complex_double x,
                           @ByVal lapack_int ldx, DoublePointer rcond, DoublePointer ferr,
                           DoublePointer berr, DoublePointer rpivot );
public static native @ByVal lapack_int LAPACKE_zgbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @ByVal lapack_int nrhs, lapack_complex_double ab,
                           @ByVal lapack_int ldab, lapack_complex_double afb,
                           @ByVal lapack_int ldafb, lapack_int ipiv, @Cast("char*") ByteBuffer equed,
                           DoubleBuffer r, DoubleBuffer c, lapack_complex_double b,
                           @ByVal lapack_int ldb, lapack_complex_double x,
                           @ByVal lapack_int ldx, DoubleBuffer rcond, DoubleBuffer ferr,
                           DoubleBuffer berr, DoubleBuffer rpivot );
public static native @ByVal lapack_int LAPACKE_zgbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                           @ByVal lapack_int nrhs, lapack_complex_double ab,
                           @ByVal lapack_int ldab, lapack_complex_double afb,
                           @ByVal lapack_int ldafb, lapack_int ipiv, @Cast("char*") byte[] equed,
                           double[] r, double[] c, lapack_complex_double b,
                           @ByVal lapack_int ldb, lapack_complex_double x,
                           @ByVal lapack_int ldx, double[] rcond, double[] ferr,
                           double[] berr, double[] rpivot );

public static native @ByVal lapack_int LAPACKE_zgbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @ByVal lapack_int nrhs, lapack_complex_double ab,
                                @ByVal lapack_int ldab, lapack_complex_double afb,
                                @ByVal lapack_int ldafb, lapack_int ipiv, @Cast("char*") BytePointer equed,
                                DoublePointer r, DoublePointer c, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_complex_double x,
                                @ByVal lapack_int ldx, DoublePointer rcond, DoublePointer ferr,
                                DoublePointer berr, lapack_complex_double work,
                                DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zgbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @ByVal lapack_int nrhs, lapack_complex_double ab,
                                @ByVal lapack_int ldab, lapack_complex_double afb,
                                @ByVal lapack_int ldafb, lapack_int ipiv, @Cast("char*") ByteBuffer equed,
                                DoubleBuffer r, DoubleBuffer c, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_complex_double x,
                                @ByVal lapack_int ldx, DoubleBuffer rcond, DoubleBuffer ferr,
                                DoubleBuffer berr, lapack_complex_double work,
                                DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zgbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @ByVal lapack_int nrhs, lapack_complex_double ab,
                                @ByVal lapack_int ldab, lapack_complex_double afb,
                                @ByVal lapack_int ldafb, lapack_int ipiv, @Cast("char*") byte[] equed,
                                double[] r, double[] c, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_complex_double x,
                                @ByVal lapack_int ldx, double[] rcond, double[] ferr,
                                double[] berr, lapack_complex_double work,
                                double[] rwork );

public static native @ByVal lapack_int LAPACKE_zgbsvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, lapack_complex_double ab,
                            @ByVal lapack_int ldab, lapack_complex_double afb,
                            @ByVal lapack_int ldafb, lapack_int ipiv, @Cast("char*") BytePointer equed,
                            DoublePointer r, DoublePointer c, lapack_complex_double b,
                            @ByVal lapack_int ldb, lapack_complex_double x,
                            @ByVal lapack_int ldx, DoublePointer rcond, DoublePointer rpvgrw,
                            DoublePointer berr, @ByVal lapack_int n_err_bnds,
                            DoublePointer err_bnds_norm, DoublePointer err_bnds_comp,
                            @ByVal lapack_int nparams, DoublePointer params );
public static native @ByVal lapack_int LAPACKE_zgbsvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, lapack_complex_double ab,
                            @ByVal lapack_int ldab, lapack_complex_double afb,
                            @ByVal lapack_int ldafb, lapack_int ipiv, @Cast("char*") ByteBuffer equed,
                            DoubleBuffer r, DoubleBuffer c, lapack_complex_double b,
                            @ByVal lapack_int ldb, lapack_complex_double x,
                            @ByVal lapack_int ldx, DoubleBuffer rcond, DoubleBuffer rpvgrw,
                            DoubleBuffer berr, @ByVal lapack_int n_err_bnds,
                            DoubleBuffer err_bnds_norm, DoubleBuffer err_bnds_comp,
                            @ByVal lapack_int nparams, DoubleBuffer params );
public static native @ByVal lapack_int LAPACKE_zgbsvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                            @ByVal lapack_int nrhs, lapack_complex_double ab,
                            @ByVal lapack_int ldab, lapack_complex_double afb,
                            @ByVal lapack_int ldafb, lapack_int ipiv, @Cast("char*") byte[] equed,
                            double[] r, double[] c, lapack_complex_double b,
                            @ByVal lapack_int ldb, lapack_complex_double x,
                            @ByVal lapack_int ldx, double[] rcond, double[] rpvgrw,
                            double[] berr, @ByVal lapack_int n_err_bnds,
                            double[] err_bnds_norm, double[] err_bnds_comp,
                            @ByVal lapack_int nparams, double[] params );

public static native @ByVal lapack_int LAPACKE_zgbsvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs, lapack_complex_double ab,
                                 @ByVal lapack_int ldab, lapack_complex_double afb,
                                 @ByVal lapack_int ldafb, lapack_int ipiv,
                                 @Cast("char*") BytePointer equed, DoublePointer r, DoublePointer c,
                                 lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 DoublePointer rcond, DoublePointer rpvgrw, DoublePointer berr,
                                 @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                                 DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoublePointer params, lapack_complex_double work,
                                 DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zgbsvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs, lapack_complex_double ab,
                                 @ByVal lapack_int ldab, lapack_complex_double afb,
                                 @ByVal lapack_int ldafb, lapack_int ipiv,
                                 @Cast("char*") ByteBuffer equed, DoubleBuffer r, DoubleBuffer c,
                                 lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 DoubleBuffer rcond, DoubleBuffer rpvgrw, DoubleBuffer berr,
                                 @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                                 DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoubleBuffer params, lapack_complex_double work,
                                 DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zgbsvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                 @ByVal lapack_int nrhs, lapack_complex_double ab,
                                 @ByVal lapack_int ldab, lapack_complex_double afb,
                                 @ByVal lapack_int ldafb, lapack_int ipiv,
                                 @Cast("char*") byte[] equed, double[] r, double[] c,
                                 lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 double[] rcond, double[] rpvgrw, double[] berr,
                                 @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                                 double[] err_bnds_comp, @ByVal lapack_int nparams,
                                 double[] params, lapack_complex_double work,
                                 double[] rwork );

public static native @ByVal lapack_int LAPACKE_zgbtrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku,
                           lapack_complex_double ab, @ByVal lapack_int ldab,
                           lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zgbtrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku,
                                lapack_complex_double ab, @ByVal lapack_int ldab,
                                lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zgbtrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                           @Const lapack_int ipiv, lapack_complex_double b,
                           @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zgbtrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab, @Const lapack_int ipiv,
                                lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zgebak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const DoublePointer scale,
                           @ByVal lapack_int m, lapack_complex_double v,
                           @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_zgebak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const DoubleBuffer scale,
                           @ByVal lapack_int m, lapack_complex_double v,
                           @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_zgebak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const double[] scale,
                           @ByVal lapack_int m, lapack_complex_double v,
                           @ByVal lapack_int ldv );

public static native @ByVal lapack_int LAPACKE_zgebak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const DoublePointer scale, @ByVal lapack_int m,
                                lapack_complex_double v, @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_zgebak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const DoubleBuffer scale, @ByVal lapack_int m,
                                lapack_complex_double v, @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_zgebak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const double[] scale, @ByVal lapack_int m,
                                lapack_complex_double v, @ByVal lapack_int ldv );

public static native @ByVal lapack_int LAPACKE_zgebal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_int ilo, lapack_int ihi, DoublePointer scale );
public static native @ByVal lapack_int LAPACKE_zgebal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_int ilo, lapack_int ihi, DoubleBuffer scale );
public static native @ByVal lapack_int LAPACKE_zgebal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_int ilo, lapack_int ihi, double[] scale );

public static native @ByVal lapack_int LAPACKE_zgebal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int ilo, lapack_int ihi,
                                DoublePointer scale );
public static native @ByVal lapack_int LAPACKE_zgebal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int ilo, lapack_int ihi,
                                DoubleBuffer scale );
public static native @ByVal lapack_int LAPACKE_zgebal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int ilo, lapack_int ihi,
                                double[] scale );

public static native @ByVal lapack_int LAPACKE_zgebrd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda, DoublePointer d,
                           DoublePointer e, lapack_complex_double tauq,
                           lapack_complex_double taup );
public static native @ByVal lapack_int LAPACKE_zgebrd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda, DoubleBuffer d,
                           DoubleBuffer e, lapack_complex_double tauq,
                           lapack_complex_double taup );
public static native @ByVal lapack_int LAPACKE_zgebrd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda, double[] d,
                           double[] e, lapack_complex_double tauq,
                           lapack_complex_double taup );

public static native @ByVal lapack_int LAPACKE_zgebrd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                DoublePointer d, DoublePointer e,
                                lapack_complex_double tauq,
                                lapack_complex_double taup,
                                lapack_complex_double work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_zgebrd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                DoubleBuffer d, DoubleBuffer e,
                                lapack_complex_double tauq,
                                lapack_complex_double taup,
                                lapack_complex_double work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_zgebrd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                double[] d, double[] e,
                                lapack_complex_double tauq,
                                lapack_complex_double taup,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zgecon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           double anorm, DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_zgecon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           double anorm, DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_zgecon( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           double anorm, double[] rcond );

public static native @ByVal lapack_int LAPACKE_zgecon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                double anorm, DoublePointer rcond,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zgecon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                double anorm, DoubleBuffer rcond,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zgecon_work( int matrix_layout, @Cast("char") byte norm, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                double anorm, double[] rcond,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zgeequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           DoublePointer r, DoublePointer c, DoublePointer rowcnd, DoublePointer colcnd,
                           DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_zgeequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           DoubleBuffer r, DoubleBuffer c, DoubleBuffer rowcnd, DoubleBuffer colcnd,
                           DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_zgeequ( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           double[] r, double[] c, double[] rowcnd, double[] colcnd,
                           double[] amax );

public static native @ByVal lapack_int LAPACKE_zgeequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                DoublePointer r, DoublePointer c, DoublePointer rowcnd,
                                DoublePointer colcnd, DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_zgeequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                DoubleBuffer r, DoubleBuffer c, DoubleBuffer rowcnd,
                                DoubleBuffer colcnd, DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_zgeequ_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                double[] r, double[] c, double[] rowcnd,
                                double[] colcnd, double[] amax );

public static native @ByVal lapack_int LAPACKE_zgeequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            DoublePointer r, DoublePointer c, DoublePointer rowcnd,
                            DoublePointer colcnd, DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_zgeequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            DoubleBuffer r, DoubleBuffer c, DoubleBuffer rowcnd,
                            DoubleBuffer colcnd, DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_zgeequb( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            double[] r, double[] c, double[] rowcnd,
                            double[] colcnd, double[] amax );

public static native @ByVal lapack_int LAPACKE_zgeequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 DoublePointer r, DoublePointer c, DoublePointer rowcnd,
                                 DoublePointer colcnd, DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_zgeequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 DoubleBuffer r, DoubleBuffer c, DoubleBuffer rowcnd,
                                 DoubleBuffer colcnd, DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_zgeequb_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 double[] r, double[] c, double[] rowcnd,
                                 double[] colcnd, double[] amax );

public static native @ByVal lapack_int LAPACKE_zgees( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                          LAPACK_Z_SELECT1 select, @ByVal lapack_int n,
                          lapack_complex_double a, @ByVal lapack_int lda,
                          lapack_int sdim, lapack_complex_double w,
                          lapack_complex_double vs, @ByVal lapack_int ldvs );

public static native @ByVal lapack_int LAPACKE_zgees_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                               LAPACK_Z_SELECT1 select, @ByVal lapack_int n,
                               lapack_complex_double a, @ByVal lapack_int lda,
                               lapack_int sdim, lapack_complex_double w,
                               lapack_complex_double vs, @ByVal lapack_int ldvs,
                               lapack_complex_double work, @ByVal lapack_int lwork,
                               DoublePointer rwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_zgees_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                               LAPACK_Z_SELECT1 select, @ByVal lapack_int n,
                               lapack_complex_double a, @ByVal lapack_int lda,
                               lapack_int sdim, lapack_complex_double w,
                               lapack_complex_double vs, @ByVal lapack_int ldvs,
                               lapack_complex_double work, @ByVal lapack_int lwork,
                               DoubleBuffer rwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_zgees_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                               LAPACK_Z_SELECT1 select, @ByVal lapack_int n,
                               lapack_complex_double a, @ByVal lapack_int lda,
                               lapack_int sdim, lapack_complex_double w,
                               lapack_complex_double vs, @ByVal lapack_int ldvs,
                               lapack_complex_double work, @ByVal lapack_int lwork,
                               double[] rwork, lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_zgeesx( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                           LAPACK_Z_SELECT1 select, @Cast("char") byte sense, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_int sdim, lapack_complex_double w,
                           lapack_complex_double vs, @ByVal lapack_int ldvs,
                           DoublePointer rconde, DoublePointer rcondv );
public static native @ByVal lapack_int LAPACKE_zgeesx( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                           LAPACK_Z_SELECT1 select, @Cast("char") byte sense, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_int sdim, lapack_complex_double w,
                           lapack_complex_double vs, @ByVal lapack_int ldvs,
                           DoubleBuffer rconde, DoubleBuffer rcondv );
public static native @ByVal lapack_int LAPACKE_zgeesx( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                           LAPACK_Z_SELECT1 select, @Cast("char") byte sense, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_int sdim, lapack_complex_double w,
                           lapack_complex_double vs, @ByVal lapack_int ldvs,
                           double[] rconde, double[] rcondv );

public static native @ByVal lapack_int LAPACKE_zgeesx_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                                LAPACK_Z_SELECT1 select, @Cast("char") byte sense,
                                @ByVal lapack_int n, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_int sdim,
                                lapack_complex_double w,
                                lapack_complex_double vs, @ByVal lapack_int ldvs,
                                DoublePointer rconde, DoublePointer rcondv,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoublePointer rwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_zgeesx_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                                LAPACK_Z_SELECT1 select, @Cast("char") byte sense,
                                @ByVal lapack_int n, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_int sdim,
                                lapack_complex_double w,
                                lapack_complex_double vs, @ByVal lapack_int ldvs,
                                DoubleBuffer rconde, DoubleBuffer rcondv,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoubleBuffer rwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_zgeesx_work( int matrix_layout, @Cast("char") byte jobvs, @Cast("char") byte sort,
                                LAPACK_Z_SELECT1 select, @Cast("char") byte sense,
                                @ByVal lapack_int n, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_int sdim,
                                lapack_complex_double w,
                                lapack_complex_double vs, @ByVal lapack_int ldvs,
                                double[] rconde, double[] rcondv,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                double[] rwork, lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_zgeev( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                          @ByVal lapack_int n, lapack_complex_double a,
                          @ByVal lapack_int lda, lapack_complex_double w,
                          lapack_complex_double vl, @ByVal lapack_int ldvl,
                          lapack_complex_double vr, @ByVal lapack_int ldvr );

public static native @ByVal lapack_int LAPACKE_zgeev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, lapack_complex_double a,
                               @ByVal lapack_int lda, lapack_complex_double w,
                               lapack_complex_double vl, @ByVal lapack_int ldvl,
                               lapack_complex_double vr, @ByVal lapack_int ldvr,
                               lapack_complex_double work, @ByVal lapack_int lwork,
                               DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zgeev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, lapack_complex_double a,
                               @ByVal lapack_int lda, lapack_complex_double w,
                               lapack_complex_double vl, @ByVal lapack_int ldvl,
                               lapack_complex_double vr, @ByVal lapack_int ldvr,
                               lapack_complex_double work, @ByVal lapack_int lwork,
                               DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zgeev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, lapack_complex_double a,
                               @ByVal lapack_int lda, lapack_complex_double w,
                               lapack_complex_double vl, @ByVal lapack_int ldvl,
                               lapack_complex_double vr, @ByVal lapack_int ldvr,
                               lapack_complex_double work, @ByVal lapack_int lwork,
                               double[] rwork );

public static native @ByVal lapack_int LAPACKE_zgeevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double w, lapack_complex_double vl,
                           @ByVal lapack_int ldvl, lapack_complex_double vr,
                           @ByVal lapack_int ldvr, lapack_int ilo, lapack_int ihi,
                           DoublePointer scale, DoublePointer abnrm, DoublePointer rconde,
                           DoublePointer rcondv );
public static native @ByVal lapack_int LAPACKE_zgeevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double w, lapack_complex_double vl,
                           @ByVal lapack_int ldvl, lapack_complex_double vr,
                           @ByVal lapack_int ldvr, lapack_int ilo, lapack_int ihi,
                           DoubleBuffer scale, DoubleBuffer abnrm, DoubleBuffer rconde,
                           DoubleBuffer rcondv );
public static native @ByVal lapack_int LAPACKE_zgeevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double w, lapack_complex_double vl,
                           @ByVal lapack_int ldvl, lapack_complex_double vr,
                           @ByVal lapack_int ldvr, lapack_int ilo, lapack_int ihi,
                           double[] scale, double[] abnrm, double[] rconde,
                           double[] rcondv );

public static native @ByVal lapack_int LAPACKE_zgeevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double w,
                                lapack_complex_double vl, @ByVal lapack_int ldvl,
                                lapack_complex_double vr, @ByVal lapack_int ldvr,
                                lapack_int ilo, lapack_int ihi, DoublePointer scale,
                                DoublePointer abnrm, DoublePointer rconde, DoublePointer rcondv,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zgeevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double w,
                                lapack_complex_double vl, @ByVal lapack_int ldvl,
                                lapack_complex_double vr, @ByVal lapack_int ldvr,
                                lapack_int ilo, lapack_int ihi, DoubleBuffer scale,
                                DoubleBuffer abnrm, DoubleBuffer rconde, DoubleBuffer rcondv,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zgeevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double w,
                                lapack_complex_double vl, @ByVal lapack_int ldvl,
                                lapack_complex_double vr, @ByVal lapack_int ldvr,
                                lapack_int ilo, lapack_int ihi, double[] scale,
                                double[] abnrm, double[] rconde, double[] rcondv,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                double[] rwork );

public static native @ByVal lapack_int LAPACKE_zgehrd( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zgehrd_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double tau,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zgejsv( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp, @ByVal lapack_int m,
                           @ByVal lapack_int n, lapack_complex_double a, @ByVal lapack_int lda, DoublePointer sva,
                           lapack_complex_double u, @ByVal lapack_int ldu, lapack_complex_double v, @ByVal lapack_int ldv,
                           DoublePointer stat, lapack_int istat );
public static native @ByVal lapack_int LAPACKE_zgejsv( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp, @ByVal lapack_int m,
                           @ByVal lapack_int n, lapack_complex_double a, @ByVal lapack_int lda, DoubleBuffer sva,
                           lapack_complex_double u, @ByVal lapack_int ldu, lapack_complex_double v, @ByVal lapack_int ldv,
                           DoubleBuffer stat, lapack_int istat );
public static native @ByVal lapack_int LAPACKE_zgejsv( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp, @ByVal lapack_int m,
                           @ByVal lapack_int n, lapack_complex_double a, @ByVal lapack_int lda, double[] sva,
                           lapack_complex_double u, @ByVal lapack_int ldu, lapack_complex_double v, @ByVal lapack_int ldv,
                           double[] stat, lapack_int istat );

public static native @ByVal lapack_int LAPACKE_zgejsv_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp,
                                @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_double a,
                                @ByVal lapack_int lda, DoublePointer sva, lapack_complex_double u,
                                @ByVal lapack_int ldu, lapack_complex_double v, @ByVal lapack_int ldv,
                                lapack_complex_double cwork, @ByVal lapack_int lwork,
                                DoublePointer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_zgejsv_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp,
                                @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_double a,
                                @ByVal lapack_int lda, DoubleBuffer sva, lapack_complex_double u,
                                @ByVal lapack_int ldu, lapack_complex_double v, @ByVal lapack_int ldv,
                                lapack_complex_double cwork, @ByVal lapack_int lwork,
                                DoubleBuffer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_zgejsv_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @Cast("char") byte jobr, @Cast("char") byte jobt, @Cast("char") byte jobp,
                                @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_double a,
                                @ByVal lapack_int lda, double[] sva, lapack_complex_double u,
                                @ByVal lapack_int ldu, lapack_complex_double v, @ByVal lapack_int ldv,
                                lapack_complex_double cwork, @ByVal lapack_int lwork,
                                double[] rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_zgelq2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zgelq2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double tau,
                                lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zgelqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zgelqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double tau,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zgels( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                          @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          lapack_complex_double a, @ByVal lapack_int lda,
                          lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zgels_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                               @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               lapack_complex_double a, @ByVal lapack_int lda,
                               lapack_complex_double b, @ByVal lapack_int ldb,
                               lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zgelsd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double b,
                           @ByVal lapack_int ldb, DoublePointer s, double rcond,
                           lapack_int rank );
public static native @ByVal lapack_int LAPACKE_zgelsd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double b,
                           @ByVal lapack_int ldb, DoubleBuffer s, double rcond,
                           lapack_int rank );
public static native @ByVal lapack_int LAPACKE_zgelsd( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double b,
                           @ByVal lapack_int ldb, double[] s, double rcond,
                           lapack_int rank );

public static native @ByVal lapack_int LAPACKE_zgelsd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb, DoublePointer s, double rcond,
                                lapack_int rank, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoublePointer rwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_zgelsd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb, DoubleBuffer s, double rcond,
                                lapack_int rank, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoubleBuffer rwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_zgelsd_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb, double[] s, double rcond,
                                lapack_int rank, lapack_complex_double work,
                                @ByVal lapack_int lwork, double[] rwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_zgelss( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double b,
                           @ByVal lapack_int ldb, DoublePointer s, double rcond,
                           lapack_int rank );
public static native @ByVal lapack_int LAPACKE_zgelss( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double b,
                           @ByVal lapack_int ldb, DoubleBuffer s, double rcond,
                           lapack_int rank );
public static native @ByVal lapack_int LAPACKE_zgelss( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double b,
                           @ByVal lapack_int ldb, double[] s, double rcond,
                           lapack_int rank );

public static native @ByVal lapack_int LAPACKE_zgelss_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb, DoublePointer s, double rcond,
                                lapack_int rank, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zgelss_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb, DoubleBuffer s, double rcond,
                                lapack_int rank, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zgelss_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb, double[] s, double rcond,
                                lapack_int rank, lapack_complex_double work,
                                @ByVal lapack_int lwork, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zgelsy( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double b,
                           @ByVal lapack_int ldb, lapack_int jpvt, double rcond,
                           lapack_int rank );

public static native @ByVal lapack_int LAPACKE_zgelsy_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_int jpvt, double rcond,
                                lapack_int rank, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zgelsy_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_int jpvt, double rcond,
                                lapack_int rank, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zgelsy_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_int jpvt, double rcond,
                                lapack_int rank, lapack_complex_double work,
                                @ByVal lapack_int lwork, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zgemqrt( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                            @ByVal lapack_int nb, @Const lapack_complex_double v,
                            @ByVal lapack_int ldv, @Const lapack_complex_double t,
                            @ByVal lapack_int ldt, lapack_complex_double c,
                            @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_zgemqrt_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                 @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                 @ByVal lapack_int nb, @Const lapack_complex_double v,
                                 @ByVal lapack_int ldv, @Const lapack_complex_double t,
                                 @ByVal lapack_int ldt, lapack_complex_double c,
                                 @ByVal lapack_int ldc, lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zgeqlf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zgeqlf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double tau,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zgeqp3( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_int jpvt, lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zgeqp3_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int jpvt, lapack_complex_double tau,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zgeqp3_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int jpvt, lapack_complex_double tau,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zgeqp3_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int jpvt, lapack_complex_double tau,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                double[] rwork );

public static native @ByVal lapack_int LAPACKE_zgeqpf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_int jpvt, lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zgeqpf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int jpvt, lapack_complex_double tau,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zgeqpf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int jpvt, lapack_complex_double tau,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zgeqpf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int jpvt, lapack_complex_double tau,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zgeqr2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zgeqr2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double tau,
                                lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zgeqrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zgeqrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double tau,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zgeqrfp( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zgeqrfp_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 lapack_complex_double tau,
                                 lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zgeqrt( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int nb, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double t,
                           @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_zgeqrt2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_zgeqrt2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 lapack_complex_double t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_zgeqrt3( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_zgeqrt3_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 lapack_complex_double t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_zgeqrt_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int nb, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double t,
                                @ByVal lapack_int ldt, lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zgerfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_complex_double af,
                           @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_zgerfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_complex_double af,
                           @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_zgerfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_complex_double af,
                           @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_zgerfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, @Const lapack_complex_double af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zgerfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, @Const lapack_complex_double af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zgerfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, @Const lapack_complex_double af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                double[] ferr, double[] berr,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zgerfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            @Const lapack_complex_double af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const DoublePointer r,
                            @Const DoublePointer c, @Const lapack_complex_double b,
                            @ByVal lapack_int ldb, lapack_complex_double x,
                            @ByVal lapack_int ldx, DoublePointer rcond, DoublePointer berr,
                            @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                            DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                            DoublePointer params );
public static native @ByVal lapack_int LAPACKE_zgerfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            @Const lapack_complex_double af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const DoubleBuffer r,
                            @Const DoubleBuffer c, @Const lapack_complex_double b,
                            @ByVal lapack_int ldb, lapack_complex_double x,
                            @ByVal lapack_int ldx, DoubleBuffer rcond, DoubleBuffer berr,
                            @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                            DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                            DoubleBuffer params );
public static native @ByVal lapack_int LAPACKE_zgerfsx( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            @Const lapack_complex_double af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const double[] r,
                            @Const double[] c, @Const lapack_complex_double b,
                            @ByVal lapack_int ldb, lapack_complex_double x,
                            @ByVal lapack_int ldx, double[] rcond, double[] berr,
                            @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                            double[] err_bnds_comp, @ByVal lapack_int nparams,
                            double[] params );

public static native @ByVal lapack_int LAPACKE_zgerfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 @Const lapack_complex_double af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const DoublePointer r, @Const DoublePointer c,
                                 @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 DoublePointer rcond, DoublePointer berr,
                                 @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                                 DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoublePointer params, lapack_complex_double work,
                                 DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zgerfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 @Const lapack_complex_double af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const DoubleBuffer r, @Const DoubleBuffer c,
                                 @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 DoubleBuffer rcond, DoubleBuffer berr,
                                 @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                                 DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoubleBuffer params, lapack_complex_double work,
                                 DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zgerfsx_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 @Const lapack_complex_double af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const double[] r, @Const double[] c,
                                 @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 double[] rcond, double[] berr,
                                 @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                                 double[] err_bnds_comp, @ByVal lapack_int nparams,
                                 double[] params, lapack_complex_double work,
                                 double[] rwork );

public static native @ByVal lapack_int LAPACKE_zgerqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zgerqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double tau,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zgesdd( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                           @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, DoublePointer s, lapack_complex_double u,
                           @ByVal lapack_int ldu, lapack_complex_double vt,
                           @ByVal lapack_int ldvt );
public static native @ByVal lapack_int LAPACKE_zgesdd( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                           @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, DoubleBuffer s, lapack_complex_double u,
                           @ByVal lapack_int ldu, lapack_complex_double vt,
                           @ByVal lapack_int ldvt );
public static native @ByVal lapack_int LAPACKE_zgesdd( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                           @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, double[] s, lapack_complex_double u,
                           @ByVal lapack_int ldu, lapack_complex_double vt,
                           @ByVal lapack_int ldvt );

public static native @ByVal lapack_int LAPACKE_zgesdd_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                                @ByVal lapack_int n, lapack_complex_double a,
                                @ByVal lapack_int lda, DoublePointer s,
                                lapack_complex_double u, @ByVal lapack_int ldu,
                                lapack_complex_double vt, @ByVal lapack_int ldvt,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoublePointer rwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_zgesdd_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                                @ByVal lapack_int n, lapack_complex_double a,
                                @ByVal lapack_int lda, DoubleBuffer s,
                                lapack_complex_double u, @ByVal lapack_int ldu,
                                lapack_complex_double vt, @ByVal lapack_int ldvt,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoubleBuffer rwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_zgesdd_work( int matrix_layout, @Cast("char") byte jobz, @ByVal lapack_int m,
                                @ByVal lapack_int n, lapack_complex_double a,
                                @ByVal lapack_int lda, double[] s,
                                lapack_complex_double u, @ByVal lapack_int ldu,
                                lapack_complex_double vt, @ByVal lapack_int ldvt,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                double[] rwork, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_zgesv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          lapack_complex_double a, @ByVal lapack_int lda,
                          lapack_int ipiv, lapack_complex_double b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zgesv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               lapack_complex_double a, @ByVal lapack_int lda,
                               lapack_int ipiv, lapack_complex_double b,
                               @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zgesvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                           @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, DoublePointer s, lapack_complex_double u,
                           @ByVal lapack_int ldu, lapack_complex_double vt,
                           @ByVal lapack_int ldvt, DoublePointer superb );
public static native @ByVal lapack_int LAPACKE_zgesvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                           @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, DoubleBuffer s, lapack_complex_double u,
                           @ByVal lapack_int ldu, lapack_complex_double vt,
                           @ByVal lapack_int ldvt, DoubleBuffer superb );
public static native @ByVal lapack_int LAPACKE_zgesvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                           @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, double[] s, lapack_complex_double u,
                           @ByVal lapack_int ldu, lapack_complex_double vt,
                           @ByVal lapack_int ldvt, double[] superb );

public static native @ByVal lapack_int LAPACKE_zgesvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                                @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                DoublePointer s, lapack_complex_double u,
                                @ByVal lapack_int ldu, lapack_complex_double vt,
                                @ByVal lapack_int ldvt, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zgesvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                                @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                DoubleBuffer s, lapack_complex_double u,
                                @ByVal lapack_int ldu, lapack_complex_double vt,
                                @ByVal lapack_int ldvt, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zgesvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt,
                                @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                double[] s, lapack_complex_double u,
                                @ByVal lapack_int ldu, lapack_complex_double vt,
                                @ByVal lapack_int ldvt, lapack_complex_double work,
                                @ByVal lapack_int lwork, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zgesvdx( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                           @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, double vl, double vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                           DoublePointer s, lapack_complex_double u, @ByVal lapack_int ldu,
                           lapack_complex_double vt, @ByVal lapack_int ldvt,
                           lapack_int superb );
public static native @ByVal lapack_int LAPACKE_zgesvdx( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                           @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, double vl, double vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                           DoubleBuffer s, lapack_complex_double u, @ByVal lapack_int ldu,
                           lapack_complex_double vt, @ByVal lapack_int ldvt,
                           lapack_int superb );
public static native @ByVal lapack_int LAPACKE_zgesvdx( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                           @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, double vl, double vu,
                           @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                           double[] s, lapack_complex_double u, @ByVal lapack_int ldu,
                           lapack_complex_double vt, @ByVal lapack_int ldvt,
                           lapack_int superb );

public static native @ByVal lapack_int LAPACKE_zgesvdx_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                              @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_double a,
                              @ByVal lapack_int lda, double vl, double vu,
                              @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                              DoublePointer s, lapack_complex_double u, @ByVal lapack_int ldu,
                              lapack_complex_double vt, @ByVal lapack_int ldvt,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoublePointer rwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_zgesvdx_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                              @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_double a,
                              @ByVal lapack_int lda, double vl, double vu,
                              @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                              DoubleBuffer s, lapack_complex_double u, @ByVal lapack_int ldu,
                              lapack_complex_double vt, @ByVal lapack_int ldvt,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoubleBuffer rwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_zgesvdx_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobvt, @Cast("char") byte range,
                              @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_double a,
                              @ByVal lapack_int lda, double vl, double vu,
                              @ByVal lapack_int il, @ByVal lapack_int iu, lapack_int ns,
                              double[] s, lapack_complex_double u, @ByVal lapack_int ldu,
                              lapack_complex_double vt, @ByVal lapack_int ldvt,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                double[] rwork, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_zgesvj( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           DoublePointer sva, @ByVal lapack_int mv,
                           lapack_complex_double v, @ByVal lapack_int ldv, DoublePointer stat );
public static native @ByVal lapack_int LAPACKE_zgesvj( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           DoubleBuffer sva, @ByVal lapack_int mv,
                           lapack_complex_double v, @ByVal lapack_int ldv, DoubleBuffer stat );
public static native @ByVal lapack_int LAPACKE_zgesvj( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu, @Cast("char") byte jobv,
                           @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           double[] sva, @ByVal lapack_int mv,
                           lapack_complex_double v, @ByVal lapack_int ldv, double[] stat );

public static native @ByVal lapack_int LAPACKE_zgesvj_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                DoublePointer sva, @ByVal lapack_int mv,
                                lapack_complex_double v, @ByVal lapack_int ldv,
                                lapack_complex_double cwork, @ByVal lapack_int lwork,
                                DoublePointer rwork, @ByVal lapack_int lrwork );
public static native @ByVal lapack_int LAPACKE_zgesvj_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                DoubleBuffer sva, @ByVal lapack_int mv,
                                lapack_complex_double v, @ByVal lapack_int ldv,
                                lapack_complex_double cwork, @ByVal lapack_int lwork,
                                DoubleBuffer rwork, @ByVal lapack_int lrwork );
public static native @ByVal lapack_int LAPACKE_zgesvj_work( int matrix_layout, @Cast("char") byte joba, @Cast("char") byte jobu,
                                @Cast("char") byte jobv, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                double[] sva, @ByVal lapack_int mv,
                                lapack_complex_double v, @ByVal lapack_int ldv,
                                lapack_complex_double cwork, @ByVal lapack_int lwork,
                                double[] rwork, @ByVal lapack_int lrwork );

public static native @ByVal lapack_int LAPACKE_zgesvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double af, @ByVal lapack_int ldaf,
                           lapack_int ipiv, @Cast("char*") BytePointer equed, DoublePointer r, DoublePointer c,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer rcond, DoublePointer ferr, DoublePointer berr,
                           DoublePointer rpivot );
public static native @ByVal lapack_int LAPACKE_zgesvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double af, @ByVal lapack_int ldaf,
                           lapack_int ipiv, @Cast("char*") ByteBuffer equed, DoubleBuffer r, DoubleBuffer c,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr,
                           DoubleBuffer rpivot );
public static native @ByVal lapack_int LAPACKE_zgesvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double af, @ByVal lapack_int ldaf,
                           lapack_int ipiv, @Cast("char*") byte[] equed, double[] r, double[] c,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] rcond, double[] ferr, double[] berr,
                           double[] rpivot );

public static native @ByVal lapack_int LAPACKE_zgesvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Cast("char*") BytePointer equed, DoublePointer r,
                                DoublePointer c, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_complex_double x,
                                @ByVal lapack_int ldx, DoublePointer rcond, DoublePointer ferr,
                                DoublePointer berr, lapack_complex_double work,
                                DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zgesvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Cast("char*") ByteBuffer equed, DoubleBuffer r,
                                DoubleBuffer c, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_complex_double x,
                                @ByVal lapack_int ldx, DoubleBuffer rcond, DoubleBuffer ferr,
                                DoubleBuffer berr, lapack_complex_double work,
                                DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zgesvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double af, @ByVal lapack_int ldaf,
                                lapack_int ipiv, @Cast("char*") byte[] equed, double[] r,
                                double[] c, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_complex_double x,
                                @ByVal lapack_int ldx, double[] rcond, double[] ferr,
                                double[] berr, lapack_complex_double work,
                                double[] rwork );

public static native @ByVal lapack_int LAPACKE_zgesvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") BytePointer equed, DoublePointer r, DoublePointer c,
                            lapack_complex_double b, @ByVal lapack_int ldb,
                            lapack_complex_double x, @ByVal lapack_int ldx,
                            DoublePointer rcond, DoublePointer rpvgrw, DoublePointer berr,
                            @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                            DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                            DoublePointer params );
public static native @ByVal lapack_int LAPACKE_zgesvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") ByteBuffer equed, DoubleBuffer r, DoubleBuffer c,
                            lapack_complex_double b, @ByVal lapack_int ldb,
                            lapack_complex_double x, @ByVal lapack_int ldx,
                            DoubleBuffer rcond, DoubleBuffer rpvgrw, DoubleBuffer berr,
                            @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                            DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                            DoubleBuffer params );
public static native @ByVal lapack_int LAPACKE_zgesvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") byte[] equed, double[] r, double[] c,
                            lapack_complex_double b, @ByVal lapack_int ldb,
                            lapack_complex_double x, @ByVal lapack_int ldx,
                            double[] rcond, double[] rpvgrw, double[] berr,
                            @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                            double[] err_bnds_comp, @ByVal lapack_int nparams,
                            double[] params );

public static native @ByVal lapack_int LAPACKE_zgesvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 lapack_complex_double af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") BytePointer equed, DoublePointer r,
                                 DoublePointer c, lapack_complex_double b,
                                 @ByVal lapack_int ldb, lapack_complex_double x,
                                 @ByVal lapack_int ldx, DoublePointer rcond, DoublePointer rpvgrw,
                                 DoublePointer berr, @ByVal lapack_int n_err_bnds,
                                 DoublePointer err_bnds_norm, DoublePointer err_bnds_comp,
                                 @ByVal lapack_int nparams, DoublePointer params,
                                 lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zgesvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 lapack_complex_double af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") ByteBuffer equed, DoubleBuffer r,
                                 DoubleBuffer c, lapack_complex_double b,
                                 @ByVal lapack_int ldb, lapack_complex_double x,
                                 @ByVal lapack_int ldx, DoubleBuffer rcond, DoubleBuffer rpvgrw,
                                 DoubleBuffer berr, @ByVal lapack_int n_err_bnds,
                                 DoubleBuffer err_bnds_norm, DoubleBuffer err_bnds_comp,
                                 @ByVal lapack_int nparams, DoubleBuffer params,
                                 lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zgesvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 lapack_complex_double af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") byte[] equed, double[] r,
                                 double[] c, lapack_complex_double b,
                                 @ByVal lapack_int ldb, lapack_complex_double x,
                                 @ByVal lapack_int ldx, double[] rcond, double[] rpvgrw,
                                 double[] berr, @ByVal lapack_int n_err_bnds,
                                 double[] err_bnds_norm, double[] err_bnds_comp,
                                 @ByVal lapack_int nparams, double[] params,
                                 lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zgetf2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zgetf2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zgetrf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zgetrf2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zgetrf2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zgetrf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zgetri( int matrix_layout, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zgetri_work( int matrix_layout, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zgetrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv,
                           lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zgetrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zggbak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const DoublePointer lscale,
                           @Const DoublePointer rscale, @ByVal lapack_int m,
                           lapack_complex_double v, @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_zggbak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const DoubleBuffer lscale,
                           @Const DoubleBuffer rscale, @ByVal lapack_int m,
                           lapack_complex_double v, @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_zggbak( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi, @Const double[] lscale,
                           @Const double[] rscale, @ByVal lapack_int m,
                           lapack_complex_double v, @ByVal lapack_int ldv );

public static native @ByVal lapack_int LAPACKE_zggbak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const DoublePointer lscale, @Const DoublePointer rscale,
                                @ByVal lapack_int m, lapack_complex_double v,
                                @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_zggbak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const DoubleBuffer lscale, @Const DoubleBuffer rscale,
                                @ByVal lapack_int m, lapack_complex_double v,
                                @ByVal lapack_int ldv );
public static native @ByVal lapack_int LAPACKE_zggbak_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte side,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                @Const double[] lscale, @Const double[] rscale,
                                @ByVal lapack_int m, lapack_complex_double v,
                                @ByVal lapack_int ldv );

public static native @ByVal lapack_int LAPACKE_zggbal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_int ilo, lapack_int ihi, DoublePointer lscale,
                           DoublePointer rscale );
public static native @ByVal lapack_int LAPACKE_zggbal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_int ilo, lapack_int ihi, DoubleBuffer lscale,
                           DoubleBuffer rscale );
public static native @ByVal lapack_int LAPACKE_zggbal( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_int ilo, lapack_int ihi, double[] lscale,
                           double[] rscale );

public static native @ByVal lapack_int LAPACKE_zggbal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_int ilo, lapack_int ihi,
                                DoublePointer lscale, DoublePointer rscale, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_zggbal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_int ilo, lapack_int ihi,
                                DoubleBuffer lscale, DoubleBuffer rscale, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_zggbal_work( int matrix_layout, @Cast("char") byte job, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_int ilo, lapack_int ihi,
                                double[] lscale, double[] rscale, double[] work );

public static native @ByVal lapack_int LAPACKE_zgges( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr, @Cast("char") byte sort,
                          LAPACK_Z_SELECT2 selctg, @ByVal lapack_int n,
                          lapack_complex_double a, @ByVal lapack_int lda,
                          lapack_complex_double b, @ByVal lapack_int ldb,
                          lapack_int sdim, lapack_complex_double alpha,
                          lapack_complex_double beta,
                          lapack_complex_double vsl, @ByVal lapack_int ldvsl,
                          lapack_complex_double vsr, @ByVal lapack_int ldvsr );

public static native @ByVal lapack_int LAPACKE_zgges3( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                           @Cast("char") byte sort, LAPACK_Z_SELECT2 selctg, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_int sdim, lapack_complex_double alpha,
                           lapack_complex_double beta,
                           lapack_complex_double vsl, @ByVal lapack_int ldvsl,
                           lapack_complex_double vsr, @ByVal lapack_int ldvsr );

public static native @ByVal lapack_int LAPACKE_zgges3_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                                @Cast("char") byte sort, LAPACK_Z_SELECT2 selctg,
                                @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_int sdim, lapack_complex_double alpha,
                                lapack_complex_double beta,
                                lapack_complex_double vsl, @ByVal lapack_int ldvsl,
                                lapack_complex_double vsr, @ByVal lapack_int ldvsr,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoublePointer rwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_zgges3_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                                @Cast("char") byte sort, LAPACK_Z_SELECT2 selctg,
                                @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_int sdim, lapack_complex_double alpha,
                                lapack_complex_double beta,
                                lapack_complex_double vsl, @ByVal lapack_int ldvsl,
                                lapack_complex_double vsr, @ByVal lapack_int ldvsr,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoubleBuffer rwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_zgges3_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                                @Cast("char") byte sort, LAPACK_Z_SELECT2 selctg,
                                @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_int sdim, lapack_complex_double alpha,
                                lapack_complex_double beta,
                                lapack_complex_double vsl, @ByVal lapack_int ldvsl,
                                lapack_complex_double vsr, @ByVal lapack_int ldvsr,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                double[] rwork, lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_zgges_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                               @Cast("char") byte sort, LAPACK_Z_SELECT2 selctg, @ByVal lapack_int n,
                               lapack_complex_double a, @ByVal lapack_int lda,
                               lapack_complex_double b, @ByVal lapack_int ldb,
                               lapack_int sdim, lapack_complex_double alpha,
                               lapack_complex_double beta,
                               lapack_complex_double vsl, @ByVal lapack_int ldvsl,
                               lapack_complex_double vsr, @ByVal lapack_int ldvsr,
                               lapack_complex_double work, @ByVal lapack_int lwork,
                               DoublePointer rwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_zgges_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                               @Cast("char") byte sort, LAPACK_Z_SELECT2 selctg, @ByVal lapack_int n,
                               lapack_complex_double a, @ByVal lapack_int lda,
                               lapack_complex_double b, @ByVal lapack_int ldb,
                               lapack_int sdim, lapack_complex_double alpha,
                               lapack_complex_double beta,
                               lapack_complex_double vsl, @ByVal lapack_int ldvsl,
                               lapack_complex_double vsr, @ByVal lapack_int ldvsr,
                               lapack_complex_double work, @ByVal lapack_int lwork,
                               DoubleBuffer rwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_zgges_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                               @Cast("char") byte sort, LAPACK_Z_SELECT2 selctg, @ByVal lapack_int n,
                               lapack_complex_double a, @ByVal lapack_int lda,
                               lapack_complex_double b, @ByVal lapack_int ldb,
                               lapack_int sdim, lapack_complex_double alpha,
                               lapack_complex_double beta,
                               lapack_complex_double vsl, @ByVal lapack_int ldvsl,
                               lapack_complex_double vsr, @ByVal lapack_int ldvsr,
                               lapack_complex_double work, @ByVal lapack_int lwork,
                               double[] rwork, lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_zggesx( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                           @Cast("char") byte sort, LAPACK_Z_SELECT2 selctg, @Cast("char") byte sense,
                           @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double b,
                           @ByVal lapack_int ldb, lapack_int sdim,
                           lapack_complex_double alpha,
                           lapack_complex_double beta,
                           lapack_complex_double vsl, @ByVal lapack_int ldvsl,
                           lapack_complex_double vsr, @ByVal lapack_int ldvsr,
                           DoublePointer rconde, DoublePointer rcondv );
public static native @ByVal lapack_int LAPACKE_zggesx( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                           @Cast("char") byte sort, LAPACK_Z_SELECT2 selctg, @Cast("char") byte sense,
                           @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double b,
                           @ByVal lapack_int ldb, lapack_int sdim,
                           lapack_complex_double alpha,
                           lapack_complex_double beta,
                           lapack_complex_double vsl, @ByVal lapack_int ldvsl,
                           lapack_complex_double vsr, @ByVal lapack_int ldvsr,
                           DoubleBuffer rconde, DoubleBuffer rcondv );
public static native @ByVal lapack_int LAPACKE_zggesx( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                           @Cast("char") byte sort, LAPACK_Z_SELECT2 selctg, @Cast("char") byte sense,
                           @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double b,
                           @ByVal lapack_int ldb, lapack_int sdim,
                           lapack_complex_double alpha,
                           lapack_complex_double beta,
                           lapack_complex_double vsl, @ByVal lapack_int ldvsl,
                           lapack_complex_double vsr, @ByVal lapack_int ldvsr,
                           double[] rconde, double[] rcondv );

public static native @ByVal lapack_int LAPACKE_zggesx_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                                @Cast("char") byte sort, LAPACK_Z_SELECT2 selctg, @Cast("char") byte sense,
                                @ByVal lapack_int n, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_int sdim,
                                lapack_complex_double alpha,
                                lapack_complex_double beta,
                                lapack_complex_double vsl, @ByVal lapack_int ldvsl,
                                lapack_complex_double vsr, @ByVal lapack_int ldvsr,
                                DoublePointer rconde, DoublePointer rcondv,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoublePointer rwork, lapack_int iwork,
                                @ByVal lapack_int liwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_zggesx_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                                @Cast("char") byte sort, LAPACK_Z_SELECT2 selctg, @Cast("char") byte sense,
                                @ByVal lapack_int n, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_int sdim,
                                lapack_complex_double alpha,
                                lapack_complex_double beta,
                                lapack_complex_double vsl, @ByVal lapack_int ldvsl,
                                lapack_complex_double vsr, @ByVal lapack_int ldvsr,
                                DoubleBuffer rconde, DoubleBuffer rcondv,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoubleBuffer rwork, lapack_int iwork,
                                @ByVal lapack_int liwork, lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_zggesx_work( int matrix_layout, @Cast("char") byte jobvsl, @Cast("char") byte jobvsr,
                                @Cast("char") byte sort, LAPACK_Z_SELECT2 selctg, @Cast("char") byte sense,
                                @ByVal lapack_int n, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_int sdim,
                                lapack_complex_double alpha,
                                lapack_complex_double beta,
                                lapack_complex_double vsl, @ByVal lapack_int ldvsl,
                                lapack_complex_double vsr, @ByVal lapack_int ldvsr,
                                double[] rconde, double[] rcondv,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                double[] rwork, lapack_int iwork,
                                @ByVal lapack_int liwork, lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_zggev( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                          @ByVal lapack_int n, lapack_complex_double a,
                          @ByVal lapack_int lda, lapack_complex_double b,
                          @ByVal lapack_int ldb, lapack_complex_double alpha,
                          lapack_complex_double beta,
                          lapack_complex_double vl, @ByVal lapack_int ldvl,
                          lapack_complex_double vr, @ByVal lapack_int ldvr );

public static native @ByVal lapack_int LAPACKE_zggev3( int matrix_layout,
                           @Cast("char") byte jobvl, @Cast("char") byte jobvr, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double alpha,
                           lapack_complex_double beta,
                           lapack_complex_double vl, @ByVal lapack_int ldvl,
                           lapack_complex_double vr, @ByVal lapack_int ldvr );

public static native @ByVal lapack_int LAPACKE_zggev3_work( int matrix_layout,
                                @Cast("char") byte jobvl, @Cast("char") byte jobvr, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double alpha,
                                lapack_complex_double beta,
                                lapack_complex_double vl, @ByVal lapack_int ldvl,
                                lapack_complex_double vr, @ByVal lapack_int ldvr,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zggev3_work( int matrix_layout,
                                @Cast("char") byte jobvl, @Cast("char") byte jobvr, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double alpha,
                                lapack_complex_double beta,
                                lapack_complex_double vl, @ByVal lapack_int ldvl,
                                lapack_complex_double vr, @ByVal lapack_int ldvr,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zggev3_work( int matrix_layout,
                                @Cast("char") byte jobvl, @Cast("char") byte jobvr, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double alpha,
                                lapack_complex_double beta,
                                lapack_complex_double vl, @ByVal lapack_int ldvl,
                                lapack_complex_double vr, @ByVal lapack_int ldvr,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                double[] rwork );

public static native @ByVal lapack_int LAPACKE_zggev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, lapack_complex_double a,
                               @ByVal lapack_int lda, lapack_complex_double b,
                               @ByVal lapack_int ldb, lapack_complex_double alpha,
                               lapack_complex_double beta,
                               lapack_complex_double vl, @ByVal lapack_int ldvl,
                               lapack_complex_double vr, @ByVal lapack_int ldvr,
                               lapack_complex_double work, @ByVal lapack_int lwork,
                               DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zggev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, lapack_complex_double a,
                               @ByVal lapack_int lda, lapack_complex_double b,
                               @ByVal lapack_int ldb, lapack_complex_double alpha,
                               lapack_complex_double beta,
                               lapack_complex_double vl, @ByVal lapack_int ldvl,
                               lapack_complex_double vr, @ByVal lapack_int ldvr,
                               lapack_complex_double work, @ByVal lapack_int lwork,
                               DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zggev_work( int matrix_layout, @Cast("char") byte jobvl, @Cast("char") byte jobvr,
                               @ByVal lapack_int n, lapack_complex_double a,
                               @ByVal lapack_int lda, lapack_complex_double b,
                               @ByVal lapack_int ldb, lapack_complex_double alpha,
                               lapack_complex_double beta,
                               lapack_complex_double vl, @ByVal lapack_int ldvl,
                               lapack_complex_double vr, @ByVal lapack_int ldvr,
                               lapack_complex_double work, @ByVal lapack_int lwork,
                               double[] rwork );

public static native @ByVal lapack_int LAPACKE_zggevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double alpha,
                           lapack_complex_double beta,
                           lapack_complex_double vl, @ByVal lapack_int ldvl,
                           lapack_complex_double vr, @ByVal lapack_int ldvr,
                           lapack_int ilo, lapack_int ihi, DoublePointer lscale,
                           DoublePointer rscale, DoublePointer abnrm, DoublePointer bbnrm,
                           DoublePointer rconde, DoublePointer rcondv );
public static native @ByVal lapack_int LAPACKE_zggevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double alpha,
                           lapack_complex_double beta,
                           lapack_complex_double vl, @ByVal lapack_int ldvl,
                           lapack_complex_double vr, @ByVal lapack_int ldvr,
                           lapack_int ilo, lapack_int ihi, DoubleBuffer lscale,
                           DoubleBuffer rscale, DoubleBuffer abnrm, DoubleBuffer bbnrm,
                           DoubleBuffer rconde, DoubleBuffer rcondv );
public static native @ByVal lapack_int LAPACKE_zggevx( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                           @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double alpha,
                           lapack_complex_double beta,
                           lapack_complex_double vl, @ByVal lapack_int ldvl,
                           lapack_complex_double vr, @ByVal lapack_int ldvr,
                           lapack_int ilo, lapack_int ihi, double[] lscale,
                           double[] rscale, double[] abnrm, double[] bbnrm,
                           double[] rconde, double[] rcondv );

public static native @ByVal lapack_int LAPACKE_zggevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double alpha,
                                lapack_complex_double beta,
                                lapack_complex_double vl, @ByVal lapack_int ldvl,
                                lapack_complex_double vr, @ByVal lapack_int ldvr,
                                lapack_int ilo, lapack_int ihi,
                                DoublePointer lscale, DoublePointer rscale, DoublePointer abnrm,
                                DoublePointer bbnrm, DoublePointer rconde, DoublePointer rcondv,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoublePointer rwork, lapack_int iwork,
                                lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_zggevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double alpha,
                                lapack_complex_double beta,
                                lapack_complex_double vl, @ByVal lapack_int ldvl,
                                lapack_complex_double vr, @ByVal lapack_int ldvr,
                                lapack_int ilo, lapack_int ihi,
                                DoubleBuffer lscale, DoubleBuffer rscale, DoubleBuffer abnrm,
                                DoubleBuffer bbnrm, DoubleBuffer rconde, DoubleBuffer rcondv,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoubleBuffer rwork, lapack_int iwork,
                                lapack_logical bwork );
public static native @ByVal lapack_int LAPACKE_zggevx_work( int matrix_layout, @Cast("char") byte balanc, @Cast("char") byte jobvl,
                                @Cast("char") byte jobvr, @Cast("char") byte sense, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double alpha,
                                lapack_complex_double beta,
                                lapack_complex_double vl, @ByVal lapack_int ldvl,
                                lapack_complex_double vr, @ByVal lapack_int ldvr,
                                lapack_int ilo, lapack_int ihi,
                                double[] lscale, double[] rscale, double[] abnrm,
                                double[] bbnrm, double[] rconde, double[] rcondv,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                double[] rwork, lapack_int iwork,
                                lapack_logical bwork );

public static native @ByVal lapack_int LAPACKE_zggglm( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                           @ByVal lapack_int p, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double b,
                           @ByVal lapack_int ldb, lapack_complex_double d,
                           lapack_complex_double x, lapack_complex_double y );

public static native @ByVal lapack_int LAPACKE_zggglm_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                                @ByVal lapack_int p, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_complex_double d,
                                lapack_complex_double x,
                                lapack_complex_double y,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zgghd3( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double q, @ByVal lapack_int ldq,
                           lapack_complex_double z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_zgghd3_work( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_complex_double work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zgghrd( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double q, @ByVal lapack_int ldq,
                           lapack_complex_double z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_zgghrd_work( int matrix_layout, @Cast("char") byte compq, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_complex_double z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_zgglse( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int p, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double b,
                           @ByVal lapack_int ldb, lapack_complex_double c,
                           lapack_complex_double d, lapack_complex_double x );

public static native @ByVal lapack_int LAPACKE_zgglse_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int p, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_complex_double c,
                                lapack_complex_double d,
                                lapack_complex_double x,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zggqrf( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                           @ByVal lapack_int p, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double taua,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double taub );

public static native @ByVal lapack_int LAPACKE_zggqrf_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int m,
                                @ByVal lapack_int p, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double taua,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double taub,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zggrqf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int p,
                           @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double taua,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double taub );

public static native @ByVal lapack_int LAPACKE_zggrqf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double taua,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double taub,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zggsvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                           lapack_int k, lapack_int l,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           DoublePointer alpha, DoublePointer beta,
                           lapack_complex_double u, @ByVal lapack_int ldu,
                           lapack_complex_double v, @ByVal lapack_int ldv,
                           lapack_complex_double q, @ByVal lapack_int ldq,
                           lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_zggsvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                           lapack_int k, lapack_int l,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           DoubleBuffer alpha, DoubleBuffer beta,
                           lapack_complex_double u, @ByVal lapack_int ldu,
                           lapack_complex_double v, @ByVal lapack_int ldv,
                           lapack_complex_double q, @ByVal lapack_int ldq,
                           lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_zggsvd( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                           lapack_int k, lapack_int l,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           double[] alpha, double[] beta,
                           lapack_complex_double u, @ByVal lapack_int ldu,
                           lapack_complex_double v, @ByVal lapack_int ldv,
                           lapack_complex_double q, @ByVal lapack_int ldq,
                           lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_zggsvd3( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                            lapack_int k, lapack_int l,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double b, @ByVal lapack_int ldb,
                            DoublePointer alpha, DoublePointer beta,
                            lapack_complex_double u, @ByVal lapack_int ldu,
                            lapack_complex_double v, @ByVal lapack_int ldv,
                            lapack_complex_double q, @ByVal lapack_int ldq,
                            lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_zggsvd3( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                            lapack_int k, lapack_int l,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double b, @ByVal lapack_int ldb,
                            DoubleBuffer alpha, DoubleBuffer beta,
                            lapack_complex_double u, @ByVal lapack_int ldu,
                            lapack_complex_double v, @ByVal lapack_int ldv,
                            lapack_complex_double q, @ByVal lapack_int ldq,
                            lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_zggsvd3( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int p,
                            lapack_int k, lapack_int l,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double b, @ByVal lapack_int ldb,
                            double[] alpha, double[] beta,
                            lapack_complex_double u, @ByVal lapack_int ldu,
                            lapack_complex_double v, @ByVal lapack_int ldv,
                            lapack_complex_double q, @ByVal lapack_int ldq,
                            lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_zggsvd3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                 @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int p, lapack_int k, lapack_int l,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 lapack_complex_double b, @ByVal lapack_int ldb,
                                 DoublePointer alpha, DoublePointer beta,
                                 lapack_complex_double u, @ByVal lapack_int ldu,
                                 lapack_complex_double v, @ByVal lapack_int ldv,
                                 lapack_complex_double q, @ByVal lapack_int ldq,
                                 lapack_complex_double work, @ByVal lapack_int lwork,
                                 DoublePointer rwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_zggsvd3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                 @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int p, lapack_int k, lapack_int l,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 lapack_complex_double b, @ByVal lapack_int ldb,
                                 DoubleBuffer alpha, DoubleBuffer beta,
                                 lapack_complex_double u, @ByVal lapack_int ldu,
                                 lapack_complex_double v, @ByVal lapack_int ldv,
                                 lapack_complex_double q, @ByVal lapack_int ldq,
                                 lapack_complex_double work, @ByVal lapack_int lwork,
                                 DoubleBuffer rwork, lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_zggsvd3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                 @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int p, lapack_int k, lapack_int l,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 lapack_complex_double b, @ByVal lapack_int ldb,
                                 double[] alpha, double[] beta,
                                 lapack_complex_double u, @ByVal lapack_int ldu,
                                 lapack_complex_double v, @ByVal lapack_int ldv,
                                 lapack_complex_double q, @ByVal lapack_int ldq,
                                 lapack_complex_double work, @ByVal lapack_int lwork,
                                 double[] rwork, lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_zggsvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int p, lapack_int k, lapack_int l,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                DoublePointer alpha, DoublePointer beta,
                                lapack_complex_double u, @ByVal lapack_int ldu,
                                lapack_complex_double v, @ByVal lapack_int ldv,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_complex_double work, DoublePointer rwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_zggsvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int p, lapack_int k, lapack_int l,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                DoubleBuffer alpha, DoubleBuffer beta,
                                lapack_complex_double u, @ByVal lapack_int ldu,
                                lapack_complex_double v, @ByVal lapack_int ldv,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_complex_double work, DoubleBuffer rwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_zggsvd_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int p, lapack_int k, lapack_int l,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                double[] alpha, double[] beta,
                                lapack_complex_double u, @ByVal lapack_int ldu,
                                lapack_complex_double v, @ByVal lapack_int ldv,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_complex_double work, double[] rwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_zggsvp( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           double tola, double tolb, lapack_int k,
                           lapack_int l, lapack_complex_double u,
                           @ByVal lapack_int ldu, lapack_complex_double v,
                           @ByVal lapack_int ldv, lapack_complex_double q,
                           @ByVal lapack_int ldq );

public static native @ByVal lapack_int LAPACKE_zggsvp3( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                            @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double b, @ByVal lapack_int ldb,
                            double tola, double tolb, lapack_int k,
                            lapack_int l, lapack_complex_double u,
                            @ByVal lapack_int ldu, lapack_complex_double v,
                            @ByVal lapack_int ldv, lapack_complex_double q,
                            @ByVal lapack_int ldq );

public static native @ByVal lapack_int LAPACKE_zggsvp3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                 @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                 @ByVal lapack_int n, lapack_complex_double a,
                                 @ByVal lapack_int lda, lapack_complex_double b,
                                 @ByVal lapack_int ldb, double tola, double tolb,
                                 lapack_int k, lapack_int l,
                                 lapack_complex_double u, @ByVal lapack_int ldu,
                                 lapack_complex_double v, @ByVal lapack_int ldv,
                                 lapack_complex_double q, @ByVal lapack_int ldq,
                                 lapack_int iwork, DoublePointer rwork,
                                 lapack_complex_double tau,
                                 lapack_complex_double work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_zggsvp3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                 @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                 @ByVal lapack_int n, lapack_complex_double a,
                                 @ByVal lapack_int lda, lapack_complex_double b,
                                 @ByVal lapack_int ldb, double tola, double tolb,
                                 lapack_int k, lapack_int l,
                                 lapack_complex_double u, @ByVal lapack_int ldu,
                                 lapack_complex_double v, @ByVal lapack_int ldv,
                                 lapack_complex_double q, @ByVal lapack_int ldq,
                                 lapack_int iwork, DoubleBuffer rwork,
                                 lapack_complex_double tau,
                                 lapack_complex_double work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_zggsvp3_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                 @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                 @ByVal lapack_int n, lapack_complex_double a,
                                 @ByVal lapack_int lda, lapack_complex_double b,
                                 @ByVal lapack_int ldb, double tola, double tolb,
                                 lapack_int k, lapack_int l,
                                 lapack_complex_double u, @ByVal lapack_int ldu,
                                 lapack_complex_double v, @ByVal lapack_int ldv,
                                 lapack_complex_double q, @ByVal lapack_int ldq,
                                 lapack_int iwork, double[] rwork,
                                 lapack_complex_double tau,
                                 lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zggsvp_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb, double tola, double tolb,
                                lapack_int k, lapack_int l,
                                lapack_complex_double u, @ByVal lapack_int ldu,
                                lapack_complex_double v, @ByVal lapack_int ldv,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_int iwork, DoublePointer rwork,
                                lapack_complex_double tau,
                                lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zggsvp_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb, double tola, double tolb,
                                lapack_int k, lapack_int l,
                                lapack_complex_double u, @ByVal lapack_int ldu,
                                lapack_complex_double v, @ByVal lapack_int ldv,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_int iwork, DoubleBuffer rwork,
                                lapack_complex_double tau,
                                lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zggsvp_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb, double tola, double tolb,
                                lapack_int k, lapack_int l,
                                lapack_complex_double u, @ByVal lapack_int ldu,
                                lapack_complex_double v, @ByVal lapack_int ldv,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_int iwork, double[] rwork,
                                lapack_complex_double tau,
                                lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zgtcon( @Cast("char") byte norm, @ByVal lapack_int n,
                           @Const lapack_complex_double dl,
                           @Const lapack_complex_double d,
                           @Const lapack_complex_double du,
                           @Const lapack_complex_double du2,
                           @Const lapack_int ipiv, double anorm, DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_zgtcon( @Cast("char") byte norm, @ByVal lapack_int n,
                           @Const lapack_complex_double dl,
                           @Const lapack_complex_double d,
                           @Const lapack_complex_double du,
                           @Const lapack_complex_double du2,
                           @Const lapack_int ipiv, double anorm, DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_zgtcon( @Cast("char") byte norm, @ByVal lapack_int n,
                           @Const lapack_complex_double dl,
                           @Const lapack_complex_double d,
                           @Const lapack_complex_double du,
                           @Const lapack_complex_double du2,
                           @Const lapack_int ipiv, double anorm, double[] rcond );

public static native @ByVal lapack_int LAPACKE_zgtcon_work( @Cast("char") byte norm, @ByVal lapack_int n,
                                @Const lapack_complex_double dl,
                                @Const lapack_complex_double d,
                                @Const lapack_complex_double du,
                                @Const lapack_complex_double du2,
                                @Const lapack_int ipiv, double anorm,
                                DoublePointer rcond, lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zgtcon_work( @Cast("char") byte norm, @ByVal lapack_int n,
                                @Const lapack_complex_double dl,
                                @Const lapack_complex_double d,
                                @Const lapack_complex_double du,
                                @Const lapack_complex_double du2,
                                @Const lapack_int ipiv, double anorm,
                                DoubleBuffer rcond, lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zgtcon_work( @Cast("char") byte norm, @ByVal lapack_int n,
                                @Const lapack_complex_double dl,
                                @Const lapack_complex_double d,
                                @Const lapack_complex_double du,
                                @Const lapack_complex_double du2,
                                @Const lapack_int ipiv, double anorm,
                                double[] rcond, lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zgtrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double dl,
                           @Const lapack_complex_double d,
                           @Const lapack_complex_double du,
                           @Const lapack_complex_double dlf,
                           @Const lapack_complex_double df,
                           @Const lapack_complex_double duf,
                           @Const lapack_complex_double du2,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_zgtrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double dl,
                           @Const lapack_complex_double d,
                           @Const lapack_complex_double du,
                           @Const lapack_complex_double dlf,
                           @Const lapack_complex_double df,
                           @Const lapack_complex_double duf,
                           @Const lapack_complex_double du2,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_zgtrfs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double dl,
                           @Const lapack_complex_double d,
                           @Const lapack_complex_double du,
                           @Const lapack_complex_double dlf,
                           @Const lapack_complex_double df,
                           @Const lapack_complex_double duf,
                           @Const lapack_complex_double du2,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_zgtrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs,
                                @Const lapack_complex_double dl,
                                @Const lapack_complex_double d,
                                @Const lapack_complex_double du,
                                @Const lapack_complex_double dlf,
                                @Const lapack_complex_double df,
                                @Const lapack_complex_double duf,
                                @Const lapack_complex_double du2,
                                @Const lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zgtrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs,
                                @Const lapack_complex_double dl,
                                @Const lapack_complex_double d,
                                @Const lapack_complex_double du,
                                @Const lapack_complex_double dlf,
                                @Const lapack_complex_double df,
                                @Const lapack_complex_double duf,
                                @Const lapack_complex_double du2,
                                @Const lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zgtrfs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs,
                                @Const lapack_complex_double dl,
                                @Const lapack_complex_double d,
                                @Const lapack_complex_double du,
                                @Const lapack_complex_double dlf,
                                @Const lapack_complex_double df,
                                @Const lapack_complex_double duf,
                                @Const lapack_complex_double du2,
                                @Const lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                double[] ferr, double[] berr,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zgtsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          lapack_complex_double dl, lapack_complex_double d,
                          lapack_complex_double du, lapack_complex_double b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zgtsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               lapack_complex_double dl,
                               lapack_complex_double d,
                               lapack_complex_double du,
                               lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zgtsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double dl,
                           @Const lapack_complex_double d,
                           @Const lapack_complex_double du,
                           lapack_complex_double dlf,
                           lapack_complex_double df,
                           lapack_complex_double duf,
                           lapack_complex_double du2, lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer rcond, DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_zgtsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double dl,
                           @Const lapack_complex_double d,
                           @Const lapack_complex_double du,
                           lapack_complex_double dlf,
                           lapack_complex_double df,
                           lapack_complex_double duf,
                           lapack_complex_double du2, lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_zgtsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double dl,
                           @Const lapack_complex_double d,
                           @Const lapack_complex_double du,
                           lapack_complex_double dlf,
                           lapack_complex_double df,
                           lapack_complex_double duf,
                           lapack_complex_double du2, lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] rcond, double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_zgtsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double dl,
                                @Const lapack_complex_double d,
                                @Const lapack_complex_double du,
                                lapack_complex_double dlf,
                                lapack_complex_double df,
                                lapack_complex_double duf,
                                lapack_complex_double du2, lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoublePointer rcond, DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zgtsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double dl,
                                @Const lapack_complex_double d,
                                @Const lapack_complex_double du,
                                lapack_complex_double dlf,
                                lapack_complex_double df,
                                lapack_complex_double duf,
                                lapack_complex_double du2, lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zgtsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte trans,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double dl,
                                @Const lapack_complex_double d,
                                @Const lapack_complex_double du,
                                lapack_complex_double dlf,
                                lapack_complex_double df,
                                lapack_complex_double duf,
                                lapack_complex_double du2, lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                double[] rcond, double[] ferr, double[] berr,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zgttrf( @ByVal lapack_int n, lapack_complex_double dl,
                           lapack_complex_double d, lapack_complex_double du,
                           lapack_complex_double du2, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zgttrf_work( @ByVal lapack_int n, lapack_complex_double dl,
                                lapack_complex_double d,
                                lapack_complex_double du,
                                lapack_complex_double du2, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zgttrs( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double dl,
                           @Const lapack_complex_double d,
                           @Const lapack_complex_double du,
                           @Const lapack_complex_double du2,
                           @Const lapack_int ipiv, lapack_complex_double b,
                           @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zgttrs_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs,
                                @Const lapack_complex_double dl,
                                @Const lapack_complex_double d,
                                @Const lapack_complex_double du,
                                @Const lapack_complex_double du2,
                                @Const lapack_int ipiv,
                                lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zhbev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int kd, lapack_complex_double ab,
                          @ByVal lapack_int ldab, DoublePointer w, lapack_complex_double z,
                          @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zhbev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int kd, lapack_complex_double ab,
                          @ByVal lapack_int ldab, DoubleBuffer w, lapack_complex_double z,
                          @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zhbev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int kd, lapack_complex_double ab,
                          @ByVal lapack_int ldab, double[] w, lapack_complex_double z,
                          @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_zhbev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int kd,
                               lapack_complex_double ab, @ByVal lapack_int ldab,
                               DoublePointer w, lapack_complex_double z,
                               @ByVal lapack_int ldz, lapack_complex_double work,
                               DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zhbev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int kd,
                               lapack_complex_double ab, @ByVal lapack_int ldab,
                               DoubleBuffer w, lapack_complex_double z,
                               @ByVal lapack_int ldz, lapack_complex_double work,
                               DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zhbev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int kd,
                               lapack_complex_double ab, @ByVal lapack_int ldab,
                               double[] w, lapack_complex_double z,
                               @ByVal lapack_int ldz, lapack_complex_double work,
                               double[] rwork );

public static native @ByVal lapack_int LAPACKE_zhbevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, lapack_complex_double ab,
                           @ByVal lapack_int ldab, DoublePointer w, lapack_complex_double z,
                           @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zhbevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, lapack_complex_double ab,
                           @ByVal lapack_int ldab, DoubleBuffer w, lapack_complex_double z,
                           @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zhbevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, lapack_complex_double ab,
                           @ByVal lapack_int ldab, double[] w, lapack_complex_double z,
                           @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_zhbevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd,
                                lapack_complex_double ab, @ByVal lapack_int ldab,
                                DoublePointer w, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoublePointer rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_zhbevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd,
                                lapack_complex_double ab, @ByVal lapack_int ldab,
                                DoubleBuffer w, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoubleBuffer rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_zhbevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd,
                                lapack_complex_double ab, @ByVal lapack_int ldab,
                                double[] w, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_complex_double work,
                                @ByVal lapack_int lwork, double[] rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_zhbevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int kd,
                           lapack_complex_double ab, @ByVal lapack_int ldab,
                           lapack_complex_double q, @ByVal lapack_int ldq, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoublePointer w,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zhbevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int kd,
                           lapack_complex_double ab, @ByVal lapack_int ldab,
                           lapack_complex_double q, @ByVal lapack_int ldq, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoubleBuffer w,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zhbevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int kd,
                           lapack_complex_double ab, @ByVal lapack_int ldab,
                           lapack_complex_double q, @ByVal lapack_int ldq, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, double[] w,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_zhbevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int kd,
                                lapack_complex_double ab, @ByVal lapack_int ldab,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                double vl, double vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, double abstol, lapack_int m,
                                DoublePointer w, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_complex_double work,
                                DoublePointer rwork, lapack_int iwork,
                                lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zhbevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int kd,
                                lapack_complex_double ab, @ByVal lapack_int ldab,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                double vl, double vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, double abstol, lapack_int m,
                                DoubleBuffer w, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_complex_double work,
                                DoubleBuffer rwork, lapack_int iwork,
                                lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zhbevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int kd,
                                lapack_complex_double ab, @ByVal lapack_int ldab,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                double vl, double vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, double abstol, lapack_int m,
                                double[] w, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_complex_double work,
                                double[] rwork, lapack_int iwork,
                                lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_zhbgst( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ka, @ByVal lapack_int kb,
                           lapack_complex_double ab, @ByVal lapack_int ldab,
                           @Const lapack_complex_double bb, @ByVal lapack_int ldbb,
                           lapack_complex_double x, @ByVal lapack_int ldx );

public static native @ByVal lapack_int LAPACKE_zhbgst_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                lapack_complex_double ab, @ByVal lapack_int ldab,
                                @Const lapack_complex_double bb,
                                @ByVal lapack_int ldbb, lapack_complex_double x,
                                @ByVal lapack_int ldx, lapack_complex_double work,
                                DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zhbgst_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                lapack_complex_double ab, @ByVal lapack_int ldab,
                                @Const lapack_complex_double bb,
                                @ByVal lapack_int ldbb, lapack_complex_double x,
                                @ByVal lapack_int ldx, lapack_complex_double work,
                                DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zhbgst_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                lapack_complex_double ab, @ByVal lapack_int ldab,
                                @Const lapack_complex_double bb,
                                @ByVal lapack_int ldbb, lapack_complex_double x,
                                @ByVal lapack_int ldx, lapack_complex_double work,
                                double[] rwork );

public static native @ByVal lapack_int LAPACKE_zhbgv( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int ka, @ByVal lapack_int kb,
                          lapack_complex_double ab, @ByVal lapack_int ldab,
                          lapack_complex_double bb, @ByVal lapack_int ldbb, DoublePointer w,
                          lapack_complex_double z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zhbgv( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int ka, @ByVal lapack_int kb,
                          lapack_complex_double ab, @ByVal lapack_int ldab,
                          lapack_complex_double bb, @ByVal lapack_int ldbb, DoubleBuffer w,
                          lapack_complex_double z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zhbgv( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int ka, @ByVal lapack_int kb,
                          lapack_complex_double ab, @ByVal lapack_int ldab,
                          lapack_complex_double bb, @ByVal lapack_int ldbb, double[] w,
                          lapack_complex_double z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_zhbgv_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                               lapack_complex_double ab, @ByVal lapack_int ldab,
                               lapack_complex_double bb, @ByVal lapack_int ldbb,
                               DoublePointer w, lapack_complex_double z,
                               @ByVal lapack_int ldz, lapack_complex_double work,
                               DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zhbgv_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                               lapack_complex_double ab, @ByVal lapack_int ldab,
                               lapack_complex_double bb, @ByVal lapack_int ldbb,
                               DoubleBuffer w, lapack_complex_double z,
                               @ByVal lapack_int ldz, lapack_complex_double work,
                               DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zhbgv_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                               lapack_complex_double ab, @ByVal lapack_int ldab,
                               lapack_complex_double bb, @ByVal lapack_int ldbb,
                               double[] w, lapack_complex_double z,
                               @ByVal lapack_int ldz, lapack_complex_double work,
                               double[] rwork );

public static native @ByVal lapack_int LAPACKE_zhbgvd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ka, @ByVal lapack_int kb,
                           lapack_complex_double ab, @ByVal lapack_int ldab,
                           lapack_complex_double bb, @ByVal lapack_int ldbb,
                           DoublePointer w, lapack_complex_double z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zhbgvd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ka, @ByVal lapack_int kb,
                           lapack_complex_double ab, @ByVal lapack_int ldab,
                           lapack_complex_double bb, @ByVal lapack_int ldbb,
                           DoubleBuffer w, lapack_complex_double z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zhbgvd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int ka, @ByVal lapack_int kb,
                           lapack_complex_double ab, @ByVal lapack_int ldab,
                           lapack_complex_double bb, @ByVal lapack_int ldbb,
                           double[] w, lapack_complex_double z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_zhbgvd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                lapack_complex_double ab, @ByVal lapack_int ldab,
                                lapack_complex_double bb, @ByVal lapack_int ldbb,
                                DoublePointer w, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoublePointer rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_zhbgvd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                lapack_complex_double ab, @ByVal lapack_int ldab,
                                lapack_complex_double bb, @ByVal lapack_int ldbb,
                                DoubleBuffer w, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoubleBuffer rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_zhbgvd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                                lapack_complex_double ab, @ByVal lapack_int ldab,
                                lapack_complex_double bb, @ByVal lapack_int ldbb,
                                double[] w, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_complex_double work,
                                @ByVal lapack_int lwork, double[] rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_zhbgvx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                           lapack_complex_double ab, @ByVal lapack_int ldab,
                           lapack_complex_double bb, @ByVal lapack_int ldbb,
                           lapack_complex_double q, @ByVal lapack_int ldq, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoublePointer w,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zhbgvx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                           lapack_complex_double ab, @ByVal lapack_int ldab,
                           lapack_complex_double bb, @ByVal lapack_int ldbb,
                           lapack_complex_double q, @ByVal lapack_int ldq, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoubleBuffer w,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zhbgvx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int ka, @ByVal lapack_int kb,
                           lapack_complex_double ab, @ByVal lapack_int ldab,
                           lapack_complex_double bb, @ByVal lapack_int ldbb,
                           lapack_complex_double q, @ByVal lapack_int ldq, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, double[] w,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_zhbgvx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int ka,
                                @ByVal lapack_int kb, lapack_complex_double ab,
                                @ByVal lapack_int ldab, lapack_complex_double bb,
                                @ByVal lapack_int ldbb, lapack_complex_double q,
                                @ByVal lapack_int ldq, double vl, double vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                                lapack_int m, DoublePointer w,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_complex_double work, DoublePointer rwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zhbgvx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int ka,
                                @ByVal lapack_int kb, lapack_complex_double ab,
                                @ByVal lapack_int ldab, lapack_complex_double bb,
                                @ByVal lapack_int ldbb, lapack_complex_double q,
                                @ByVal lapack_int ldq, double vl, double vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                                lapack_int m, DoubleBuffer w,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_complex_double work, DoubleBuffer rwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zhbgvx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n, @ByVal lapack_int ka,
                                @ByVal lapack_int kb, lapack_complex_double ab,
                                @ByVal lapack_int ldab, lapack_complex_double bb,
                                @ByVal lapack_int ldbb, lapack_complex_double q,
                                @ByVal lapack_int ldq, double vl, double vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                                lapack_int m, double[] w,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_complex_double work, double[] rwork,
                                lapack_int iwork, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_zhbtrd( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, lapack_complex_double ab,
                           @ByVal lapack_int ldab, DoublePointer d, DoublePointer e,
                           lapack_complex_double q, @ByVal lapack_int ldq );
public static native @ByVal lapack_int LAPACKE_zhbtrd( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, lapack_complex_double ab,
                           @ByVal lapack_int ldab, DoubleBuffer d, DoubleBuffer e,
                           lapack_complex_double q, @ByVal lapack_int ldq );
public static native @ByVal lapack_int LAPACKE_zhbtrd( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, lapack_complex_double ab,
                           @ByVal lapack_int ldab, double[] d, double[] e,
                           lapack_complex_double q, @ByVal lapack_int ldq );

public static native @ByVal lapack_int LAPACKE_zhbtrd_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd,
                                lapack_complex_double ab, @ByVal lapack_int ldab,
                                DoublePointer d, DoublePointer e, lapack_complex_double q,
                                @ByVal lapack_int ldq, lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zhbtrd_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd,
                                lapack_complex_double ab, @ByVal lapack_int ldab,
                                DoubleBuffer d, DoubleBuffer e, lapack_complex_double q,
                                @ByVal lapack_int ldq, lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zhbtrd_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd,
                                lapack_complex_double ab, @ByVal lapack_int ldab,
                                double[] d, double[] e, lapack_complex_double q,
                                @ByVal lapack_int ldq, lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zhecon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, double anorm, DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_zhecon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, double anorm, DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_zhecon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, double anorm, double[] rcond );

public static native @ByVal lapack_int LAPACKE_zhecon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, double anorm,
                                DoublePointer rcond, lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zhecon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, double anorm,
                                DoubleBuffer rcond, lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zhecon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, double anorm,
                                double[] rcond, lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zheequb( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            DoublePointer s, DoublePointer scond, DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_zheequb( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            DoubleBuffer s, DoubleBuffer scond, DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_zheequb( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            double[] s, double[] scond, double[] amax );

public static native @ByVal lapack_int LAPACKE_zheequb_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 DoublePointer s, DoublePointer scond, DoublePointer amax,
                                 lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zheequb_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 DoubleBuffer s, DoubleBuffer scond, DoubleBuffer amax,
                                 lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zheequb_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 double[] s, double[] scond, double[] amax,
                                 lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zheev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          lapack_complex_double a, @ByVal lapack_int lda, DoublePointer w );
public static native @ByVal lapack_int LAPACKE_zheev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          lapack_complex_double a, @ByVal lapack_int lda, DoubleBuffer w );
public static native @ByVal lapack_int LAPACKE_zheev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          lapack_complex_double a, @ByVal lapack_int lda, double[] w );

public static native @ByVal lapack_int LAPACKE_zheev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, lapack_complex_double a,
                               @ByVal lapack_int lda, DoublePointer w,
                               lapack_complex_double work, @ByVal lapack_int lwork,
                               DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zheev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, lapack_complex_double a,
                               @ByVal lapack_int lda, DoubleBuffer w,
                               lapack_complex_double work, @ByVal lapack_int lwork,
                               DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zheev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, lapack_complex_double a,
                               @ByVal lapack_int lda, double[] w,
                               lapack_complex_double work, @ByVal lapack_int lwork,
                               double[] rwork );

public static native @ByVal lapack_int LAPACKE_zheevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda, DoublePointer w );
public static native @ByVal lapack_int LAPACKE_zheevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda, DoubleBuffer w );
public static native @ByVal lapack_int LAPACKE_zheevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda, double[] w );

public static native @ByVal lapack_int LAPACKE_zheevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, lapack_complex_double a,
                                @ByVal lapack_int lda, DoublePointer w,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoublePointer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_zheevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, lapack_complex_double a,
                                @ByVal lapack_int lda, DoubleBuffer w,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoubleBuffer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_zheevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, lapack_complex_double a,
                                @ByVal lapack_int lda, double[] w,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                double[] rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_zheevr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, double vl, double vu, @ByVal lapack_int il,
                           @ByVal lapack_int iu, double abstol, lapack_int m,
                           DoublePointer w, lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int isuppz );
public static native @ByVal lapack_int LAPACKE_zheevr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, double vl, double vu, @ByVal lapack_int il,
                           @ByVal lapack_int iu, double abstol, lapack_int m,
                           DoubleBuffer w, lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int isuppz );
public static native @ByVal lapack_int LAPACKE_zheevr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, double vl, double vu, @ByVal lapack_int il,
                           @ByVal lapack_int iu, double abstol, lapack_int m,
                           double[] w, lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int isuppz );

public static native @ByVal lapack_int LAPACKE_zheevr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                double vl, double vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, double abstol, lapack_int m,
                                DoublePointer w, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_int isuppz,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoublePointer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_zheevr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                double vl, double vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, double abstol, lapack_int m,
                                DoubleBuffer w, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_int isuppz,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoubleBuffer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_zheevr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                double vl, double vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, double abstol, lapack_int m,
                                double[] w, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_int isuppz,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                double[] rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_zheevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, double vl, double vu, @ByVal lapack_int il,
                           @ByVal lapack_int iu, double abstol, lapack_int m,
                           DoublePointer w, lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zheevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, double vl, double vu, @ByVal lapack_int il,
                           @ByVal lapack_int iu, double abstol, lapack_int m,
                           DoubleBuffer w, lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zheevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, double vl, double vu, @ByVal lapack_int il,
                           @ByVal lapack_int iu, double abstol, lapack_int m,
                           double[] w, lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_zheevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                double vl, double vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, double abstol, lapack_int m,
                                DoublePointer w, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoublePointer rwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zheevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                double vl, double vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, double abstol, lapack_int m,
                                DoubleBuffer w, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoubleBuffer rwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zheevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                double vl, double vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, double abstol, lapack_int m,
                                double[] w, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_complex_double work,
                                @ByVal lapack_int lwork, double[] rwork,
                                lapack_int iwork, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_zhegst( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_complex_double b,
                           @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zhegst_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                                @ByVal lapack_int n, lapack_complex_double a,
                                @ByVal lapack_int lda, @Const lapack_complex_double b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zhegv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_double a,
                          @ByVal lapack_int lda, lapack_complex_double b,
                          @ByVal lapack_int ldb, DoublePointer w );
public static native @ByVal lapack_int LAPACKE_zhegv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_double a,
                          @ByVal lapack_int lda, lapack_complex_double b,
                          @ByVal lapack_int ldb, DoubleBuffer w );
public static native @ByVal lapack_int LAPACKE_zhegv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_double a,
                          @ByVal lapack_int lda, lapack_complex_double b,
                          @ByVal lapack_int ldb, double[] w );

public static native @ByVal lapack_int LAPACKE_zhegv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n,
                               lapack_complex_double a, @ByVal lapack_int lda,
                               lapack_complex_double b, @ByVal lapack_int ldb,
                               DoublePointer w, lapack_complex_double work,
                               @ByVal lapack_int lwork, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zhegv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n,
                               lapack_complex_double a, @ByVal lapack_int lda,
                               lapack_complex_double b, @ByVal lapack_int ldb,
                               DoubleBuffer w, lapack_complex_double work,
                               @ByVal lapack_int lwork, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zhegv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n,
                               lapack_complex_double a, @ByVal lapack_int lda,
                               lapack_complex_double b, @ByVal lapack_int ldb,
                               double[] w, lapack_complex_double work,
                               @ByVal lapack_int lwork, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zhegvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double b,
                           @ByVal lapack_int ldb, DoublePointer w );
public static native @ByVal lapack_int LAPACKE_zhegvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double b,
                           @ByVal lapack_int ldb, DoubleBuffer w );
public static native @ByVal lapack_int LAPACKE_zhegvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double b,
                           @ByVal lapack_int ldb, double[] w );

public static native @ByVal lapack_int LAPACKE_zhegvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                DoublePointer w, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoublePointer rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_zhegvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                DoubleBuffer w, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoubleBuffer rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_zhegvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                double[] w, lapack_complex_double work,
                                @ByVal lapack_int lwork, double[] rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_zhegvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoublePointer w,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zhegvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoubleBuffer w,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zhegvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, double[] w,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_zhegvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                double vl, double vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, double abstol, lapack_int m,
                                DoublePointer w, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoublePointer rwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zhegvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                double vl, double vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, double abstol, lapack_int m,
                                DoubleBuffer w, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoubleBuffer rwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zhegvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                double vl, double vu, @ByVal lapack_int il,
                                @ByVal lapack_int iu, double abstol, lapack_int m,
                                double[] w, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_complex_double work,
                                @ByVal lapack_int lwork, double[] rwork,
                                lapack_int iwork, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_zherfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_complex_double af,
                           @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_zherfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_complex_double af,
                           @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_zherfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_complex_double af,
                           @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_zherfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, @Const lapack_complex_double af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zherfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, @Const lapack_complex_double af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zherfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, @Const lapack_complex_double af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                double[] ferr, double[] berr,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zherfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            @Const lapack_complex_double af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const DoublePointer s,
                            @Const lapack_complex_double b, @ByVal lapack_int ldb,
                            lapack_complex_double x, @ByVal lapack_int ldx,
                            DoublePointer rcond, DoublePointer berr, @ByVal lapack_int n_err_bnds,
                            DoublePointer err_bnds_norm, DoublePointer err_bnds_comp,
                            @ByVal lapack_int nparams, DoublePointer params );
public static native @ByVal lapack_int LAPACKE_zherfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            @Const lapack_complex_double af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const DoubleBuffer s,
                            @Const lapack_complex_double b, @ByVal lapack_int ldb,
                            lapack_complex_double x, @ByVal lapack_int ldx,
                            DoubleBuffer rcond, DoubleBuffer berr, @ByVal lapack_int n_err_bnds,
                            DoubleBuffer err_bnds_norm, DoubleBuffer err_bnds_comp,
                            @ByVal lapack_int nparams, DoubleBuffer params );
public static native @ByVal lapack_int LAPACKE_zherfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            @Const lapack_complex_double af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const double[] s,
                            @Const lapack_complex_double b, @ByVal lapack_int ldb,
                            lapack_complex_double x, @ByVal lapack_int ldx,
                            double[] rcond, double[] berr, @ByVal lapack_int n_err_bnds,
                            double[] err_bnds_norm, double[] err_bnds_comp,
                            @ByVal lapack_int nparams, double[] params );

public static native @ByVal lapack_int LAPACKE_zherfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 @Const lapack_complex_double af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const DoublePointer s,
                                 @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 DoublePointer rcond, DoublePointer berr,
                                 @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                                 DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoublePointer params, lapack_complex_double work,
                                 DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zherfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 @Const lapack_complex_double af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const DoubleBuffer s,
                                 @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 DoubleBuffer rcond, DoubleBuffer berr,
                                 @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                                 DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoubleBuffer params, lapack_complex_double work,
                                 DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zherfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 @Const lapack_complex_double af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const double[] s,
                                 @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 double[] rcond, double[] berr,
                                 @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                                 double[] err_bnds_comp, @ByVal lapack_int nparams,
                                 double[] params, lapack_complex_double work,
                                 double[] rwork );

public static native @ByVal lapack_int LAPACKE_zhesv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, lapack_complex_double a,
                          @ByVal lapack_int lda, lapack_int ipiv,
                          lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zhesv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, lapack_complex_double a,
                               @ByVal lapack_int lda, lapack_int ipiv,
                               lapack_complex_double b, @ByVal lapack_int ldb,
                               lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zhesvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double af,
                           @ByVal lapack_int ldaf, lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer rcond, DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_zhesvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double af,
                           @ByVal lapack_int ldaf, lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_zhesvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double af,
                           @ByVal lapack_int ldaf, lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] rcond, double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_zhesvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double af, @ByVal lapack_int ldaf,
                                lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoublePointer rcond, DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zhesvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double af, @ByVal lapack_int ldaf,
                                lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zhesvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double af, @ByVal lapack_int ldaf,
                                lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                double[] rcond, double[] ferr, double[] berr,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                double[] rwork );

public static native @ByVal lapack_int LAPACKE_zhesvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") BytePointer equed, DoublePointer s,
                            lapack_complex_double b, @ByVal lapack_int ldb,
                            lapack_complex_double x, @ByVal lapack_int ldx,
                            DoublePointer rcond, DoublePointer rpvgrw, DoublePointer berr,
                            @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                            DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                            DoublePointer params );
public static native @ByVal lapack_int LAPACKE_zhesvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") ByteBuffer equed, DoubleBuffer s,
                            lapack_complex_double b, @ByVal lapack_int ldb,
                            lapack_complex_double x, @ByVal lapack_int ldx,
                            DoubleBuffer rcond, DoubleBuffer rpvgrw, DoubleBuffer berr,
                            @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                            DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                            DoubleBuffer params );
public static native @ByVal lapack_int LAPACKE_zhesvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") byte[] equed, double[] s,
                            lapack_complex_double b, @ByVal lapack_int ldb,
                            lapack_complex_double x, @ByVal lapack_int ldx,
                            double[] rcond, double[] rpvgrw, double[] berr,
                            @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                            double[] err_bnds_comp, @ByVal lapack_int nparams,
                            double[] params );

public static native @ByVal lapack_int LAPACKE_zhesvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 lapack_complex_double af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") BytePointer equed, DoublePointer s,
                                 lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 DoublePointer rcond, DoublePointer rpvgrw, DoublePointer berr,
                                 @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                                 DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoublePointer params, lapack_complex_double work,
                                 DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zhesvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 lapack_complex_double af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") ByteBuffer equed, DoubleBuffer s,
                                 lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 DoubleBuffer rcond, DoubleBuffer rpvgrw, DoubleBuffer berr,
                                 @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                                 DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoubleBuffer params, lapack_complex_double work,
                                 DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zhesvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 lapack_complex_double af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") byte[] equed, double[] s,
                                 lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 double[] rcond, double[] rpvgrw, double[] berr,
                                 @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                                 double[] err_bnds_comp, @ByVal lapack_int nparams,
                                 double[] params, lapack_complex_double work,
                                 double[] rwork );

public static native @ByVal lapack_int LAPACKE_zheswapr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             lapack_complex_double a, @ByVal lapack_int lda,
                             @ByVal lapack_int i1, @ByVal lapack_int i2 );

public static native @ByVal lapack_int LAPACKE_zheswapr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  lapack_complex_double a, @ByVal lapack_int lda,
                                  @ByVal lapack_int i1, @ByVal lapack_int i2 );

public static native @ByVal lapack_int LAPACKE_zhetrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda, DoublePointer d,
                           DoublePointer e, lapack_complex_double tau );
public static native @ByVal lapack_int LAPACKE_zhetrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda, DoubleBuffer d,
                           DoubleBuffer e, lapack_complex_double tau );
public static native @ByVal lapack_int LAPACKE_zhetrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda, double[] d,
                           double[] e, lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zhetrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                DoublePointer d, DoublePointer e,
                                lapack_complex_double tau,
                                lapack_complex_double work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_zhetrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                DoubleBuffer d, DoubleBuffer e,
                                lapack_complex_double tau,
                                lapack_complex_double work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_zhetrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                double[] d, double[] e,
                                lapack_complex_double tau,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zhetrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zhetrf_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zhetrf_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int ipiv, lapack_complex_double work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zhetrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int ipiv, lapack_complex_double work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zhetri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zhetri2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zhetri2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 @Const lapack_int ipiv,
                                 lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zhetri2x( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             lapack_complex_double a, @ByVal lapack_int lda,
                             @Const lapack_int ipiv, @ByVal lapack_int nb );

public static native @ByVal lapack_int LAPACKE_zhetri2x_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  lapack_complex_double a, @ByVal lapack_int lda,
                                  @Const lapack_int ipiv,
                                  lapack_complex_double work, @ByVal lapack_int nb );

public static native @ByVal lapack_int LAPACKE_zhetri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv,
                                lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zhetrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv,
                           lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zhetrs2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                            @ByVal lapack_int lda, @Const lapack_int ipiv,
                            lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zhetrs2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @ByVal lapack_int nrhs,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 @Const lapack_int ipiv,
                                 lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zhetrs_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv,
                           lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zhetrs_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zhetrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zhfrk( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo, @Cast("char") byte trans,
                          @ByVal lapack_int n, @ByVal lapack_int k, double alpha,
                          @Const lapack_complex_double a, @ByVal lapack_int lda,
                          double beta, lapack_complex_double c );

public static native @ByVal lapack_int LAPACKE_zhfrk_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                               @Cast("char") byte trans, @ByVal lapack_int n, @ByVal lapack_int k,
                               double alpha, @Const lapack_complex_double a,
                               @ByVal lapack_int lda, double beta,
                               lapack_complex_double c );

public static native @ByVal lapack_int LAPACKE_zhgeqz( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq, @Cast("char") byte compz,
                           @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           lapack_complex_double h, @ByVal lapack_int ldh,
                           lapack_complex_double t, @ByVal lapack_int ldt,
                           lapack_complex_double alpha,
                           lapack_complex_double beta,
                           lapack_complex_double q, @ByVal lapack_int ldq,
                           lapack_complex_double z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_zhgeqz_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Cast("char") byte compz, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, lapack_complex_double h,
                                @ByVal lapack_int ldh, lapack_complex_double t,
                                @ByVal lapack_int ldt, lapack_complex_double alpha,
                                lapack_complex_double beta,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zhgeqz_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Cast("char") byte compz, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, lapack_complex_double h,
                                @ByVal lapack_int ldh, lapack_complex_double t,
                                @ByVal lapack_int ldt, lapack_complex_double alpha,
                                lapack_complex_double beta,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zhgeqz_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Cast("char") byte compz, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, lapack_complex_double h,
                                @ByVal lapack_int ldh, lapack_complex_double t,
                                @ByVal lapack_int ldt, lapack_complex_double alpha,
                                lapack_complex_double beta,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                double[] rwork );

public static native @ByVal lapack_int LAPACKE_zhpcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double ap,
                           @Const lapack_int ipiv, double anorm, DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_zhpcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double ap,
                           @Const lapack_int ipiv, double anorm, DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_zhpcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double ap,
                           @Const lapack_int ipiv, double anorm, double[] rcond );

public static native @ByVal lapack_int LAPACKE_zhpcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double ap,
                                @Const lapack_int ipiv, double anorm,
                                DoublePointer rcond, lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zhpcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double ap,
                                @Const lapack_int ipiv, double anorm,
                                DoubleBuffer rcond, lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zhpcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double ap,
                                @Const lapack_int ipiv, double anorm,
                                double[] rcond, lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zhpev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          lapack_complex_double ap, DoublePointer w,
                          lapack_complex_double z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zhpev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          lapack_complex_double ap, DoubleBuffer w,
                          lapack_complex_double z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zhpev( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                          lapack_complex_double ap, double[] w,
                          lapack_complex_double z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_zhpev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, lapack_complex_double ap,
                               DoublePointer w, lapack_complex_double z,
                               @ByVal lapack_int ldz, lapack_complex_double work,
                               DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zhpev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, lapack_complex_double ap,
                               DoubleBuffer w, lapack_complex_double z,
                               @ByVal lapack_int ldz, lapack_complex_double work,
                               DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zhpev_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                               @ByVal lapack_int n, lapack_complex_double ap,
                               double[] w, lapack_complex_double z,
                               @ByVal lapack_int ldz, lapack_complex_double work,
                               double[] rwork );

public static native @ByVal lapack_int LAPACKE_zhpevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double ap, DoublePointer w,
                           lapack_complex_double z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zhpevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double ap, DoubleBuffer w,
                           lapack_complex_double z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zhpevd( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double ap, double[] w,
                           lapack_complex_double z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_zhpevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, lapack_complex_double ap,
                                DoublePointer w, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoublePointer rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_zhpevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, lapack_complex_double ap,
                                DoubleBuffer w, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoubleBuffer rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_zhpevd_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte uplo,
                                @ByVal lapack_int n, lapack_complex_double ap,
                                double[] w, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_complex_double work,
                                @ByVal lapack_int lwork, double[] rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_zhpevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_double ap, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoublePointer w,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zhpevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_double ap, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoubleBuffer w,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zhpevx( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_double ap, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, double[] w,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_zhpevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double ap, double vl, double vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                                lapack_int m, DoublePointer w,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_complex_double work, DoublePointer rwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zhpevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double ap, double vl, double vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                                lapack_int m, DoubleBuffer w,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_complex_double work, DoubleBuffer rwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zhpevx_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double ap, double vl, double vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                                lapack_int m, double[] w,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_complex_double work, double[] rwork,
                                lapack_int iwork, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_zhpgst( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_double ap,
                           @Const lapack_complex_double bp );

public static native @ByVal lapack_int LAPACKE_zhpgst_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte uplo,
                                @ByVal lapack_int n, lapack_complex_double ap,
                                @Const lapack_complex_double bp );

public static native @ByVal lapack_int LAPACKE_zhpgv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_double ap,
                          lapack_complex_double bp, DoublePointer w,
                          lapack_complex_double z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zhpgv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_double ap,
                          lapack_complex_double bp, DoubleBuffer w,
                          lapack_complex_double z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zhpgv( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                          @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_double ap,
                          lapack_complex_double bp, double[] w,
                          lapack_complex_double z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_zhpgv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n,
                               lapack_complex_double ap,
                               lapack_complex_double bp, DoublePointer w,
                               lapack_complex_double z, @ByVal lapack_int ldz,
                               lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zhpgv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n,
                               lapack_complex_double ap,
                               lapack_complex_double bp, DoubleBuffer w,
                               lapack_complex_double z, @ByVal lapack_int ldz,
                               lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zhpgv_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                               @Cast("char") byte uplo, @ByVal lapack_int n,
                               lapack_complex_double ap,
                               lapack_complex_double bp, double[] w,
                               lapack_complex_double z, @ByVal lapack_int ldz,
                               lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zhpgvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_double ap,
                           lapack_complex_double bp, DoublePointer w,
                           lapack_complex_double z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zhpgvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_double ap,
                           lapack_complex_double bp, DoubleBuffer w,
                           lapack_complex_double z, @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zhpgvd( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte uplo, @ByVal lapack_int n, lapack_complex_double ap,
                           lapack_complex_double bp, double[] w,
                           lapack_complex_double z, @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_zhpgvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double ap,
                                lapack_complex_double bp, DoublePointer w,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoublePointer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_zhpgvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double ap,
                                lapack_complex_double bp, DoubleBuffer w,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoubleBuffer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork, @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_zhpgvd_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double ap,
                                lapack_complex_double bp, double[] w,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                double[] rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork, @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_zhpgvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double ap, lapack_complex_double bp,
                           double vl, double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoublePointer w,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zhpgvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double ap, lapack_complex_double bp,
                           double vl, double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoubleBuffer w,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zhpgvx( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                           @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double ap, lapack_complex_double bp,
                           double vl, double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, double[] w,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_zhpgvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double ap,
                                lapack_complex_double bp, double vl, double vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                                lapack_int m, DoublePointer w,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_complex_double work, DoublePointer rwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zhpgvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double ap,
                                lapack_complex_double bp, double vl, double vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                                lapack_int m, DoubleBuffer w,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_complex_double work, DoubleBuffer rwork,
                                lapack_int iwork, lapack_int ifail );
public static native @ByVal lapack_int LAPACKE_zhpgvx_work( int matrix_layout, @ByVal lapack_int itype, @Cast("char") byte jobz,
                                @Cast("char") byte range, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double ap,
                                lapack_complex_double bp, double vl, double vu,
                                @ByVal lapack_int il, @ByVal lapack_int iu, double abstol,
                                lapack_int m, double[] w,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_complex_double work, double[] rwork,
                                lapack_int iwork, lapack_int ifail );

public static native @ByVal lapack_int LAPACKE_zhprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double ap,
                           @Const lapack_complex_double afp,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_zhprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double ap,
                           @Const lapack_complex_double afp,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_zhprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double ap,
                           @Const lapack_complex_double afp,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_zhprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                @Const lapack_complex_double afp,
                                @Const lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zhprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                @Const lapack_complex_double afp,
                                @Const lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zhprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                @Const lapack_complex_double afp,
                                @Const lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                double[] ferr, double[] berr,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zhpsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, lapack_complex_double ap,
                          lapack_int ipiv, lapack_complex_double b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zhpsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, lapack_complex_double ap,
                               lapack_int ipiv, lapack_complex_double b,
                               @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zhpsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double ap,
                           lapack_complex_double afp, lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer rcond, DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_zhpsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double ap,
                           lapack_complex_double afp, lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_zhpsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double ap,
                           lapack_complex_double afp, lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] rcond, double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_zhpsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                lapack_complex_double afp, lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoublePointer rcond, DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zhpsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                lapack_complex_double afp, lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zhpsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                lapack_complex_double afp, lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                double[] rcond, double[] ferr, double[] berr,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zhptrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double ap, DoublePointer d, DoublePointer e,
                           lapack_complex_double tau );
public static native @ByVal lapack_int LAPACKE_zhptrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double ap, DoubleBuffer d, DoubleBuffer e,
                           lapack_complex_double tau );
public static native @ByVal lapack_int LAPACKE_zhptrd( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double ap, double[] d, double[] e,
                           lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zhptrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double ap, DoublePointer d, DoublePointer e,
                                lapack_complex_double tau );
public static native @ByVal lapack_int LAPACKE_zhptrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double ap, DoubleBuffer d, DoubleBuffer e,
                                lapack_complex_double tau );
public static native @ByVal lapack_int LAPACKE_zhptrd_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double ap, double[] d, double[] e,
                                lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zhptrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double ap, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zhptrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double ap, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zhptri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double ap, @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zhptri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double ap,
                                @Const lapack_int ipiv,
                                lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zhptrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double ap,
                           @Const lapack_int ipiv, lapack_complex_double b,
                           @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zhptrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                @Const lapack_int ipiv,
                                lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zhsein( int matrix_layout, @Cast("char") byte job, @Cast("char") byte eigsrc, @Cast("char") byte initv,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const lapack_complex_double h, @ByVal lapack_int ldh,
                           lapack_complex_double w, lapack_complex_double vl,
                           @ByVal lapack_int ldvl, lapack_complex_double vr,
                           @ByVal lapack_int ldvr, @ByVal lapack_int mm, lapack_int m,
                           lapack_int ifaill, lapack_int ifailr );

public static native @ByVal lapack_int LAPACKE_zhsein_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte eigsrc,
                                @Cast("char") byte initv, @Const lapack_logical select,
                                @ByVal lapack_int n, @Const lapack_complex_double h,
                                @ByVal lapack_int ldh, lapack_complex_double w,
                                lapack_complex_double vl, @ByVal lapack_int ldvl,
                                lapack_complex_double vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_double work, DoublePointer rwork,
                                lapack_int ifaill, lapack_int ifailr );
public static native @ByVal lapack_int LAPACKE_zhsein_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte eigsrc,
                                @Cast("char") byte initv, @Const lapack_logical select,
                                @ByVal lapack_int n, @Const lapack_complex_double h,
                                @ByVal lapack_int ldh, lapack_complex_double w,
                                lapack_complex_double vl, @ByVal lapack_int ldvl,
                                lapack_complex_double vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_double work, DoubleBuffer rwork,
                                lapack_int ifaill, lapack_int ifailr );
public static native @ByVal lapack_int LAPACKE_zhsein_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte eigsrc,
                                @Cast("char") byte initv, @Const lapack_logical select,
                                @ByVal lapack_int n, @Const lapack_complex_double h,
                                @ByVal lapack_int ldh, lapack_complex_double w,
                                lapack_complex_double vl, @ByVal lapack_int ldvl,
                                lapack_complex_double vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_double work, double[] rwork,
                                lapack_int ifaill, lapack_int ifailr );

public static native @ByVal lapack_int LAPACKE_zhseqr( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compz, @ByVal lapack_int n,
                           @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                           lapack_complex_double h, @ByVal lapack_int ldh,
                           lapack_complex_double w, lapack_complex_double z,
                           @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_zhseqr_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compz,
                                @ByVal lapack_int n, @ByVal lapack_int ilo, @ByVal lapack_int ihi,
                                lapack_complex_double h, @ByVal lapack_int ldh,
                                lapack_complex_double w,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zlacgv( @ByVal lapack_int n, lapack_complex_double x,
                           @ByVal lapack_int incx );

public static native @ByVal lapack_int LAPACKE_zlacgv_work( @ByVal lapack_int n, lapack_complex_double x,
                                @ByVal lapack_int incx );

public static native @ByVal lapack_int LAPACKE_zlacn2( @ByVal lapack_int n, lapack_complex_double v,
                           lapack_complex_double x,
                           DoublePointer est, lapack_int kase, lapack_int isave );
public static native @ByVal lapack_int LAPACKE_zlacn2( @ByVal lapack_int n, lapack_complex_double v,
                           lapack_complex_double x,
                           DoubleBuffer est, lapack_int kase, lapack_int isave );
public static native @ByVal lapack_int LAPACKE_zlacn2( @ByVal lapack_int n, lapack_complex_double v,
                           lapack_complex_double x,
                           double[] est, lapack_int kase, lapack_int isave );

public static native @ByVal lapack_int LAPACKE_zlacn2_work( @ByVal lapack_int n, lapack_complex_double v,
                                lapack_complex_double x,
                                DoublePointer est, lapack_int kase,
                                lapack_int isave );
public static native @ByVal lapack_int LAPACKE_zlacn2_work( @ByVal lapack_int n, lapack_complex_double v,
                                lapack_complex_double x,
                                DoubleBuffer est, lapack_int kase,
                                lapack_int isave );
public static native @ByVal lapack_int LAPACKE_zlacn2_work( @ByVal lapack_int n, lapack_complex_double v,
                                lapack_complex_double x,
                                double[] est, lapack_int kase,
                                lapack_int isave );

public static native @ByVal lapack_int LAPACKE_zlacp2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const DoublePointer a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_zlacp2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const DoubleBuffer a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_zlacp2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const double[] a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zlacp2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const DoublePointer a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_zlacp2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const DoubleBuffer a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_zlacp2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const double[] a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zlacpy( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double b,
                           @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zlacpy_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zlag2c( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_float sa, @ByVal lapack_int ldsa );

public static native @ByVal lapack_int LAPACKE_zlag2c_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_float sa, @ByVal lapack_int ldsa );

public static native @ByVal lapack_int LAPACKE_zlagge( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const DoublePointer d,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_int iseed );
public static native @ByVal lapack_int LAPACKE_zlagge( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const DoubleBuffer d,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_int iseed );
public static native @ByVal lapack_int LAPACKE_zlagge( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Const double[] d,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_int iseed );

public static native @ByVal lapack_int LAPACKE_zlagge_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const DoublePointer d,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int iseed, lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zlagge_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const DoubleBuffer d,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int iseed, lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zlagge_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int kl, @ByVal lapack_int ku, @Const double[] d,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int iseed, lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zlaghe( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const DoublePointer d, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_int iseed );
public static native @ByVal lapack_int LAPACKE_zlaghe( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const DoubleBuffer d, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_int iseed );
public static native @ByVal lapack_int LAPACKE_zlaghe( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const double[] d, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_int iseed );

public static native @ByVal lapack_int LAPACKE_zlaghe_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const DoublePointer d, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_int iseed,
                                lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zlaghe_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const DoubleBuffer d, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_int iseed,
                                lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zlaghe_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const double[] d, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_int iseed,
                                lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zlagsy( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const DoublePointer d, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_int iseed );
public static native @ByVal lapack_int LAPACKE_zlagsy( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const DoubleBuffer d, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_int iseed );
public static native @ByVal lapack_int LAPACKE_zlagsy( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const double[] d, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_int iseed );

public static native @ByVal lapack_int LAPACKE_zlagsy_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const DoublePointer d, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_int iseed,
                                lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zlagsy_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const DoubleBuffer d, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_int iseed,
                                lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zlagsy_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const double[] d, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_int iseed,
                                lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zlapmr( int matrix_layout, @ByVal lapack_logical forwrd,
                           @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_double x,
                           @ByVal lapack_int ldx, lapack_int k );

public static native @ByVal lapack_int LAPACKE_zlapmr_work( int matrix_layout, @ByVal lapack_logical forwrd,
                                @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                lapack_int k );

public static native @ByVal lapack_int LAPACKE_zlapmt( int matrix_layout, @ByVal lapack_logical forwrd,
                           @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_double x,
                           @ByVal lapack_int ldx, lapack_int k );

public static native @ByVal lapack_int LAPACKE_zlapmt_work( int matrix_layout, @ByVal lapack_logical forwrd,
                                @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                lapack_int k );

public static native @ByVal lapack_int LAPACKE_zlarfb( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans, @Cast("char") byte direct,
                           @Cast("char") byte storev, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, @Const lapack_complex_double v,
                           @ByVal lapack_int ldv, @Const lapack_complex_double t,
                           @ByVal lapack_int ldt, lapack_complex_double c,
                           @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_zlarfb_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @Cast("char") byte direct, @Cast("char") byte storev, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const lapack_complex_double v, @ByVal lapack_int ldv,
                                @Const lapack_complex_double t, @ByVal lapack_int ldt,
                                lapack_complex_double c, @ByVal lapack_int ldc,
                                lapack_complex_double work, @ByVal lapack_int ldwork );

public static native @ByVal lapack_int LAPACKE_zlarfg( @ByVal lapack_int n, lapack_complex_double alpha,
                           lapack_complex_double x, @ByVal lapack_int incx,
                           lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zlarfg_work( @ByVal lapack_int n, lapack_complex_double alpha,
                                lapack_complex_double x, @ByVal lapack_int incx,
                                lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zlarft( int matrix_layout, @Cast("char") byte direct, @Cast("char") byte storev,
                           @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const lapack_complex_double v, @ByVal lapack_int ldv,
                           @Const lapack_complex_double tau,
                           lapack_complex_double t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_zlarft_work( int matrix_layout, @Cast("char") byte direct, @Cast("char") byte storev,
                                @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const lapack_complex_double v, @ByVal lapack_int ldv,
                                @Const lapack_complex_double tau,
                                lapack_complex_double t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_zlarfx( int matrix_layout, @Cast("char") byte side, @ByVal lapack_int m,
                           @ByVal lapack_int n, @Const lapack_complex_double v,
                           @ByVal lapack_complex_double tau, lapack_complex_double c,
                           @ByVal lapack_int ldc, lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zlarfx_work( int matrix_layout, @Cast("char") byte side, @ByVal lapack_int m,
                                @ByVal lapack_int n, @Const lapack_complex_double v,
                                @ByVal lapack_complex_double tau,
                                lapack_complex_double c, @ByVal lapack_int ldc,
                                lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zlarnv( @ByVal lapack_int idist, lapack_int iseed, @ByVal lapack_int n,
                           lapack_complex_double x );

public static native @ByVal lapack_int LAPACKE_zlarnv_work( @ByVal lapack_int idist, lapack_int iseed,
                                @ByVal lapack_int n, lapack_complex_double x );

public static native @ByVal lapack_int LAPACKE_zlascl( int matrix_layout, @Cast("char") byte type, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, double cfrom, double cto,
                           @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_zlascl_work( int matrix_layout, @Cast("char") byte type, @ByVal lapack_int kl,
                           @ByVal lapack_int ku, double cfrom, double cto,
                           @ByVal lapack_int m, @ByVal lapack_int n, lapack_complex_double a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_zlaset( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_complex_double alpha,
                           @ByVal lapack_complex_double beta, lapack_complex_double a,
                           @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_zlaset_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_complex_double alpha,
                                @ByVal lapack_complex_double beta,
                                lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_zlaswp( int matrix_layout, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           @ByVal lapack_int k1, @ByVal lapack_int k2, @Const lapack_int ipiv,
                           @ByVal lapack_int incx );

public static native @ByVal lapack_int LAPACKE_zlaswp_work( int matrix_layout, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                @ByVal lapack_int k1, @ByVal lapack_int k2,
                                @Const lapack_int ipiv, @ByVal lapack_int incx );

public static native @ByVal lapack_int LAPACKE_zlatms( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym, DoublePointer d,
                           @ByVal lapack_int mode, double cond, double dmax,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Cast("char") byte pack,
                           lapack_complex_double a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_zlatms( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym, DoubleBuffer d,
                           @ByVal lapack_int mode, double cond, double dmax,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Cast("char") byte pack,
                           lapack_complex_double a, @ByVal lapack_int lda );
public static native @ByVal lapack_int LAPACKE_zlatms( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym, double[] d,
                           @ByVal lapack_int mode, double cond, double dmax,
                           @ByVal lapack_int kl, @ByVal lapack_int ku, @Cast("char") byte pack,
                           lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_zlatms_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym,
                                DoublePointer d, @ByVal lapack_int mode, double cond,
                                double dmax, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Cast("char") byte pack, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zlatms_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym,
                                DoubleBuffer d, @ByVal lapack_int mode, double cond,
                                double dmax, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Cast("char") byte pack, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zlatms_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Cast("char") byte dist, lapack_int iseed, @Cast("char") byte sym,
                                double[] d, @ByVal lapack_int mode, double cond,
                                double dmax, @ByVal lapack_int kl, @ByVal lapack_int ku,
                                @Cast("char") byte pack, lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zlauum( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_zlauum_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_zpbcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const lapack_complex_double ab,
                           @ByVal lapack_int ldab, double anorm, DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_zpbcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const lapack_complex_double ab,
                           @ByVal lapack_int ldab, double anorm, DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_zpbcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const lapack_complex_double ab,
                           @ByVal lapack_int ldab, double anorm, double[] rcond );

public static native @ByVal lapack_int LAPACKE_zpbcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab, double anorm, DoublePointer rcond,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zpbcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab, double anorm, DoubleBuffer rcond,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zpbcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab, double anorm, double[] rcond,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zpbequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const lapack_complex_double ab,
                           @ByVal lapack_int ldab, DoublePointer s, DoublePointer scond,
                           DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_zpbequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const lapack_complex_double ab,
                           @ByVal lapack_int ldab, DoubleBuffer s, DoubleBuffer scond,
                           DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_zpbequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @Const lapack_complex_double ab,
                           @ByVal lapack_int ldab, double[] s, double[] scond,
                           double[] amax );

public static native @ByVal lapack_int LAPACKE_zpbequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab, DoublePointer s, DoublePointer scond,
                                DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_zpbequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab, DoubleBuffer s, DoubleBuffer scond,
                                DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_zpbequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab, double[] s, double[] scond,
                                double[] amax );

public static native @ByVal lapack_int LAPACKE_zpbrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                           @Const lapack_complex_double afb, @ByVal lapack_int ldafb,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_zpbrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                           @Const lapack_complex_double afb, @ByVal lapack_int ldafb,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_zpbrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                           @Const lapack_complex_double afb, @ByVal lapack_int ldafb,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_zpbrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab,
                                @Const lapack_complex_double afb,
                                @ByVal lapack_int ldafb,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zpbrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab,
                                @Const lapack_complex_double afb,
                                @ByVal lapack_int ldafb,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zpbrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab,
                                @Const lapack_complex_double afb,
                                @ByVal lapack_int ldafb,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                double[] ferr, double[] berr,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zpbstf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kb, lapack_complex_double bb,
                           @ByVal lapack_int ldbb );

public static native @ByVal lapack_int LAPACKE_zpbstf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kb, lapack_complex_double bb,
                                @ByVal lapack_int ldbb );

public static native @ByVal lapack_int LAPACKE_zpbsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                          lapack_complex_double ab, @ByVal lapack_int ldab,
                          lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zpbsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                               lapack_complex_double ab, @ByVal lapack_int ldab,
                               lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zpbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           lapack_complex_double ab, @ByVal lapack_int ldab,
                           lapack_complex_double afb, @ByVal lapack_int ldafb,
                           @Cast("char*") BytePointer equed, DoublePointer s, lapack_complex_double b,
                           @ByVal lapack_int ldb, lapack_complex_double x,
                           @ByVal lapack_int ldx, DoublePointer rcond, DoublePointer ferr,
                           DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_zpbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           lapack_complex_double ab, @ByVal lapack_int ldab,
                           lapack_complex_double afb, @ByVal lapack_int ldafb,
                           @Cast("char*") ByteBuffer equed, DoubleBuffer s, lapack_complex_double b,
                           @ByVal lapack_int ldb, lapack_complex_double x,
                           @ByVal lapack_int ldx, DoubleBuffer rcond, DoubleBuffer ferr,
                           DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_zpbsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           lapack_complex_double ab, @ByVal lapack_int ldab,
                           lapack_complex_double afb, @ByVal lapack_int ldafb,
                           @Cast("char*") byte[] equed, double[] s, lapack_complex_double b,
                           @ByVal lapack_int ldb, lapack_complex_double x,
                           @ByVal lapack_int ldx, double[] rcond, double[] ferr,
                           double[] berr );

public static native @ByVal lapack_int LAPACKE_zpbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                lapack_complex_double ab, @ByVal lapack_int ldab,
                                lapack_complex_double afb, @ByVal lapack_int ldafb,
                                @Cast("char*") BytePointer equed, DoublePointer s,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoublePointer rcond, DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zpbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                lapack_complex_double ab, @ByVal lapack_int ldab,
                                lapack_complex_double afb, @ByVal lapack_int ldafb,
                                @Cast("char*") ByteBuffer equed, DoubleBuffer s,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zpbsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                lapack_complex_double ab, @ByVal lapack_int ldab,
                                lapack_complex_double afb, @ByVal lapack_int ldafb,
                                @Cast("char*") byte[] equed, double[] s,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                double[] rcond, double[] ferr, double[] berr,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zpbtrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, lapack_complex_double ab,
                           @ByVal lapack_int ldab );

public static native @ByVal lapack_int LAPACKE_zpbtrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, lapack_complex_double ab,
                                @ByVal lapack_int ldab );

public static native @ByVal lapack_int LAPACKE_zpbtrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                           lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zpbtrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab, lapack_complex_double b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zpftrf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_double a );

public static native @ByVal lapack_int LAPACKE_zpftrf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, lapack_complex_double a );

public static native @ByVal lapack_int LAPACKE_zpftri( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, lapack_complex_double a );

public static native @ByVal lapack_int LAPACKE_zpftri_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, lapack_complex_double a );

public static native @ByVal lapack_int LAPACKE_zpftrs( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double a,
                           lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zpftrs_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double a,
                                lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zpocon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           double anorm, DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_zpocon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           double anorm, DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_zpocon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           double anorm, double[] rcond );

public static native @ByVal lapack_int LAPACKE_zpocon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                double anorm, DoublePointer rcond,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zpocon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                double anorm, DoubleBuffer rcond,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zpocon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                double anorm, double[] rcond,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zpoequ( int matrix_layout, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           DoublePointer s, DoublePointer scond, DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_zpoequ( int matrix_layout, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           DoubleBuffer s, DoubleBuffer scond, DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_zpoequ( int matrix_layout, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           double[] s, double[] scond, double[] amax );

public static native @ByVal lapack_int LAPACKE_zpoequ_work( int matrix_layout, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                DoublePointer s, DoublePointer scond, DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_zpoequ_work( int matrix_layout, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                DoubleBuffer s, DoubleBuffer scond, DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_zpoequ_work( int matrix_layout, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                double[] s, double[] scond, double[] amax );

public static native @ByVal lapack_int LAPACKE_zpoequb( int matrix_layout, @ByVal lapack_int n,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            DoublePointer s, DoublePointer scond, DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_zpoequb( int matrix_layout, @ByVal lapack_int n,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            DoubleBuffer s, DoubleBuffer scond, DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_zpoequb( int matrix_layout, @ByVal lapack_int n,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            double[] s, double[] scond, double[] amax );

public static native @ByVal lapack_int LAPACKE_zpoequb_work( int matrix_layout, @ByVal lapack_int n,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 DoublePointer s, DoublePointer scond, DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_zpoequb_work( int matrix_layout, @ByVal lapack_int n,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 DoubleBuffer s, DoubleBuffer scond, DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_zpoequb_work( int matrix_layout, @ByVal lapack_int n,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 double[] s, double[] scond, double[] amax );

public static native @ByVal lapack_int LAPACKE_zporfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_complex_double af,
                           @ByVal lapack_int ldaf, @Const lapack_complex_double b,
                           @ByVal lapack_int ldb, lapack_complex_double x,
                           @ByVal lapack_int ldx, DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_zporfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_complex_double af,
                           @ByVal lapack_int ldaf, @Const lapack_complex_double b,
                           @ByVal lapack_int ldb, lapack_complex_double x,
                           @ByVal lapack_int ldx, DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_zporfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_complex_double af,
                           @ByVal lapack_int ldaf, @Const lapack_complex_double b,
                           @ByVal lapack_int ldb, lapack_complex_double x,
                           @ByVal lapack_int ldx, double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_zporfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, @Const lapack_complex_double af,
                                @ByVal lapack_int ldaf, @Const lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_complex_double x,
                                @ByVal lapack_int ldx, DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zporfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, @Const lapack_complex_double af,
                                @ByVal lapack_int ldaf, @Const lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_complex_double x,
                                @ByVal lapack_int ldx, DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zporfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, @Const lapack_complex_double af,
                                @ByVal lapack_int ldaf, @Const lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_complex_double x,
                                @ByVal lapack_int ldx, double[] ferr, double[] berr,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zporfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            @Const lapack_complex_double af, @ByVal lapack_int ldaf,
                            @Const DoublePointer s, @Const lapack_complex_double b,
                            @ByVal lapack_int ldb, lapack_complex_double x,
                            @ByVal lapack_int ldx, DoublePointer rcond, DoublePointer berr,
                            @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                            DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                            DoublePointer params );
public static native @ByVal lapack_int LAPACKE_zporfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            @Const lapack_complex_double af, @ByVal lapack_int ldaf,
                            @Const DoubleBuffer s, @Const lapack_complex_double b,
                            @ByVal lapack_int ldb, lapack_complex_double x,
                            @ByVal lapack_int ldx, DoubleBuffer rcond, DoubleBuffer berr,
                            @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                            DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                            DoubleBuffer params );
public static native @ByVal lapack_int LAPACKE_zporfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            @Const lapack_complex_double af, @ByVal lapack_int ldaf,
                            @Const double[] s, @Const lapack_complex_double b,
                            @ByVal lapack_int ldb, lapack_complex_double x,
                            @ByVal lapack_int ldx, double[] rcond, double[] berr,
                            @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                            double[] err_bnds_comp, @ByVal lapack_int nparams,
                            double[] params );

public static native @ByVal lapack_int LAPACKE_zporfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 @Const lapack_complex_double af,
                                 @ByVal lapack_int ldaf, @Const DoublePointer s,
                                 @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 DoublePointer rcond, DoublePointer berr,
                                 @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                                 DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoublePointer params, lapack_complex_double work,
                                 DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zporfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 @Const lapack_complex_double af,
                                 @ByVal lapack_int ldaf, @Const DoubleBuffer s,
                                 @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 DoubleBuffer rcond, DoubleBuffer berr,
                                 @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                                 DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoubleBuffer params, lapack_complex_double work,
                                 DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zporfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 @Const lapack_complex_double af,
                                 @ByVal lapack_int ldaf, @Const double[] s,
                                 @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 double[] rcond, double[] berr,
                                 @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                                 double[] err_bnds_comp, @ByVal lapack_int nparams,
                                 double[] params, lapack_complex_double work,
                                 double[] rwork );

public static native @ByVal lapack_int LAPACKE_zposv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, lapack_complex_double a,
                          @ByVal lapack_int lda, lapack_complex_double b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zposv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, lapack_complex_double a,
                               @ByVal lapack_int lda, lapack_complex_double b,
                               @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zposvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double af,
                           @ByVal lapack_int ldaf, @Cast("char*") BytePointer equed, DoublePointer s,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer rcond, DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_zposvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double af,
                           @ByVal lapack_int ldaf, @Cast("char*") ByteBuffer equed, DoubleBuffer s,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_zposvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double af,
                           @ByVal lapack_int ldaf, @Cast("char*") byte[] equed, double[] s,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] rcond, double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_zposvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double af, @ByVal lapack_int ldaf,
                                @Cast("char*") BytePointer equed, DoublePointer s,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoublePointer rcond, DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zposvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double af, @ByVal lapack_int ldaf,
                                @Cast("char*") ByteBuffer equed, DoubleBuffer s,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zposvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double af, @ByVal lapack_int ldaf,
                                @Cast("char*") byte[] equed, double[] s,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                double[] rcond, double[] ferr, double[] berr,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zposvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double af, @ByVal lapack_int ldaf,
                            @Cast("char*") BytePointer equed, DoublePointer s, lapack_complex_double b,
                            @ByVal lapack_int ldb, lapack_complex_double x,
                            @ByVal lapack_int ldx, DoublePointer rcond, DoublePointer rpvgrw,
                            DoublePointer berr, @ByVal lapack_int n_err_bnds,
                            DoublePointer err_bnds_norm, DoublePointer err_bnds_comp,
                            @ByVal lapack_int nparams, DoublePointer params );
public static native @ByVal lapack_int LAPACKE_zposvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double af, @ByVal lapack_int ldaf,
                            @Cast("char*") ByteBuffer equed, DoubleBuffer s, lapack_complex_double b,
                            @ByVal lapack_int ldb, lapack_complex_double x,
                            @ByVal lapack_int ldx, DoubleBuffer rcond, DoubleBuffer rpvgrw,
                            DoubleBuffer berr, @ByVal lapack_int n_err_bnds,
                            DoubleBuffer err_bnds_norm, DoubleBuffer err_bnds_comp,
                            @ByVal lapack_int nparams, DoubleBuffer params );
public static native @ByVal lapack_int LAPACKE_zposvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double af, @ByVal lapack_int ldaf,
                            @Cast("char*") byte[] equed, double[] s, lapack_complex_double b,
                            @ByVal lapack_int ldb, lapack_complex_double x,
                            @ByVal lapack_int ldx, double[] rcond, double[] rpvgrw,
                            double[] berr, @ByVal lapack_int n_err_bnds,
                            double[] err_bnds_norm, double[] err_bnds_comp,
                            @ByVal lapack_int nparams, double[] params );

public static native @ByVal lapack_int LAPACKE_zposvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 lapack_complex_double af, @ByVal lapack_int ldaf,
                                 @Cast("char*") BytePointer equed, DoublePointer s,
                                 lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 DoublePointer rcond, DoublePointer rpvgrw, DoublePointer berr,
                                 @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                                 DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoublePointer params, lapack_complex_double work,
                                 DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zposvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 lapack_complex_double af, @ByVal lapack_int ldaf,
                                 @Cast("char*") ByteBuffer equed, DoubleBuffer s,
                                 lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 DoubleBuffer rcond, DoubleBuffer rpvgrw, DoubleBuffer berr,
                                 @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                                 DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoubleBuffer params, lapack_complex_double work,
                                 DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zposvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 lapack_complex_double af, @ByVal lapack_int ldaf,
                                 @Cast("char*") byte[] equed, double[] s,
                                 lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 double[] rcond, double[] rpvgrw, double[] berr,
                                 @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                                 double[] err_bnds_comp, @ByVal lapack_int nparams,
                                 double[] params, lapack_complex_double work,
                                 double[] rwork );

public static native @ByVal lapack_int LAPACKE_zpotrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_zpotrf2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_zpotrf2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_zpotrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_zpotri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_zpotri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_zpotrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double b,
                           @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zpotrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zppcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double ap, double anorm,
                           DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_zppcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double ap, double anorm,
                           DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_zppcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double ap, double anorm,
                           double[] rcond );

public static native @ByVal lapack_int LAPACKE_zppcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double ap, double anorm,
                                DoublePointer rcond, lapack_complex_double work,
                                DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zppcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double ap, double anorm,
                                DoubleBuffer rcond, lapack_complex_double work,
                                DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zppcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double ap, double anorm,
                                double[] rcond, lapack_complex_double work,
                                double[] rwork );

public static native @ByVal lapack_int LAPACKE_zppequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double ap, DoublePointer s,
                           DoublePointer scond, DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_zppequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double ap, DoubleBuffer s,
                           DoubleBuffer scond, DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_zppequ( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double ap, double[] s,
                           double[] scond, double[] amax );

public static native @ByVal lapack_int LAPACKE_zppequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double ap, DoublePointer s,
                                DoublePointer scond, DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_zppequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double ap, DoubleBuffer s,
                                DoubleBuffer scond, DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_zppequ_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double ap, double[] s,
                                double[] scond, double[] amax );

public static native @ByVal lapack_int LAPACKE_zpprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double ap,
                           @Const lapack_complex_double afp,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_zpprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double ap,
                           @Const lapack_complex_double afp,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_zpprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double ap,
                           @Const lapack_complex_double afp,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_zpprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                @Const lapack_complex_double afp,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zpprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                @Const lapack_complex_double afp,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zpprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                @Const lapack_complex_double afp,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                double[] ferr, double[] berr,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zppsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, lapack_complex_double ap,
                          lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zppsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, lapack_complex_double ap,
                               lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zppsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_double ap,
                           lapack_complex_double afp, @Cast("char*") BytePointer equed, DoublePointer s,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer rcond, DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_zppsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_double ap,
                           lapack_complex_double afp, @Cast("char*") ByteBuffer equed, DoubleBuffer s,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_zppsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, lapack_complex_double ap,
                           lapack_complex_double afp, @Cast("char*") byte[] equed, double[] s,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] rcond, double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_zppsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                lapack_complex_double ap,
                                lapack_complex_double afp, @Cast("char*") BytePointer equed,
                                DoublePointer s, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_complex_double x,
                                @ByVal lapack_int ldx, DoublePointer rcond, DoublePointer ferr,
                                DoublePointer berr, lapack_complex_double work,
                                DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zppsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                lapack_complex_double ap,
                                lapack_complex_double afp, @Cast("char*") ByteBuffer equed,
                                DoubleBuffer s, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_complex_double x,
                                @ByVal lapack_int ldx, DoubleBuffer rcond, DoubleBuffer ferr,
                                DoubleBuffer berr, lapack_complex_double work,
                                DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zppsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                lapack_complex_double ap,
                                lapack_complex_double afp, @Cast("char*") byte[] equed,
                                double[] s, lapack_complex_double b,
                                @ByVal lapack_int ldb, lapack_complex_double x,
                                @ByVal lapack_int ldx, double[] rcond, double[] ferr,
                                double[] berr, lapack_complex_double work,
                                double[] rwork );

public static native @ByVal lapack_int LAPACKE_zpptrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double ap );

public static native @ByVal lapack_int LAPACKE_zpptrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double ap );

public static native @ByVal lapack_int LAPACKE_zpptri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double ap );

public static native @ByVal lapack_int LAPACKE_zpptri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double ap );

public static native @ByVal lapack_int LAPACKE_zpptrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double ap,
                           lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zpptrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zpstrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_int piv, lapack_int rank, double tol );

public static native @ByVal lapack_int LAPACKE_zpstrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int piv, lapack_int rank, double tol,
                                DoublePointer work );
public static native @ByVal lapack_int LAPACKE_zpstrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int piv, lapack_int rank, double tol,
                                DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_zpstrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int piv, lapack_int rank, double tol,
                                double[] work );

public static native @ByVal lapack_int LAPACKE_zptcon( @ByVal lapack_int n, @Const DoublePointer d,
                           @Const lapack_complex_double e, double anorm,
                           DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_zptcon( @ByVal lapack_int n, @Const DoubleBuffer d,
                           @Const lapack_complex_double e, double anorm,
                           DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_zptcon( @ByVal lapack_int n, @Const double[] d,
                           @Const lapack_complex_double e, double anorm,
                           double[] rcond );

public static native @ByVal lapack_int LAPACKE_zptcon_work( @ByVal lapack_int n, @Const DoublePointer d,
                                @Const lapack_complex_double e, double anorm,
                                DoublePointer rcond, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_zptcon_work( @ByVal lapack_int n, @Const DoubleBuffer d,
                                @Const lapack_complex_double e, double anorm,
                                DoubleBuffer rcond, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_zptcon_work( @ByVal lapack_int n, @Const double[] d,
                                @Const lapack_complex_double e, double anorm,
                                double[] rcond, double[] work );

public static native @ByVal lapack_int LAPACKE_zpteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                           DoublePointer d, DoublePointer e, lapack_complex_double z,
                           @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zpteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                           DoubleBuffer d, DoubleBuffer e, lapack_complex_double z,
                           @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zpteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                           double[] d, double[] e, lapack_complex_double z,
                           @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_zpteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                DoublePointer d, DoublePointer e, lapack_complex_double z,
                                @ByVal lapack_int ldz, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_zpteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                DoubleBuffer d, DoubleBuffer e, lapack_complex_double z,
                                @ByVal lapack_int ldz, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_zpteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                double[] d, double[] e, lapack_complex_double z,
                                @ByVal lapack_int ldz, double[] work );

public static native @ByVal lapack_int LAPACKE_zptrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoublePointer d,
                           @Const lapack_complex_double e, @Const DoublePointer df,
                           @Const lapack_complex_double ef,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_zptrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoubleBuffer d,
                           @Const lapack_complex_double e, @Const DoubleBuffer df,
                           @Const lapack_complex_double ef,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_zptrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const double[] d,
                           @Const lapack_complex_double e, @Const double[] df,
                           @Const lapack_complex_double ef,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_zptrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoublePointer d,
                                @Const lapack_complex_double e,
                                @Const DoublePointer df,
                                @Const lapack_complex_double ef,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zptrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoubleBuffer d,
                                @Const lapack_complex_double e,
                                @Const DoubleBuffer df,
                                @Const lapack_complex_double ef,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zptrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const double[] d,
                                @Const lapack_complex_double e,
                                @Const double[] df,
                                @Const lapack_complex_double ef,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                double[] ferr, double[] berr,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zptsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          DoublePointer d, lapack_complex_double e,
                          lapack_complex_double b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_zptsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          DoubleBuffer d, lapack_complex_double e,
                          lapack_complex_double b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_zptsv( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                          double[] d, lapack_complex_double e,
                          lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zptsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               DoublePointer d, lapack_complex_double e,
                               lapack_complex_double b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_zptsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               DoubleBuffer d, lapack_complex_double e,
                               lapack_complex_double b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_zptsv_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                               double[] d, lapack_complex_double e,
                               lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zptsvx( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoublePointer d,
                           @Const lapack_complex_double e, DoublePointer df,
                           lapack_complex_double ef,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer rcond, DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_zptsvx( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoubleBuffer d,
                           @Const lapack_complex_double e, DoubleBuffer df,
                           lapack_complex_double ef,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_zptsvx( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const double[] d,
                           @Const lapack_complex_double e, double[] df,
                           lapack_complex_double ef,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] rcond, double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_zptsvx_work( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoublePointer d,
                                @Const lapack_complex_double e, DoublePointer df,
                                lapack_complex_double ef,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoublePointer rcond, DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zptsvx_work( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoubleBuffer d,
                                @Const lapack_complex_double e, DoubleBuffer df,
                                lapack_complex_double ef,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zptsvx_work( int matrix_layout, @Cast("char") byte fact, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const double[] d,
                                @Const lapack_complex_double e, double[] df,
                                lapack_complex_double ef,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                double[] rcond, double[] ferr, double[] berr,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zpttrf( @ByVal lapack_int n, DoublePointer d, lapack_complex_double e );
public static native @ByVal lapack_int LAPACKE_zpttrf( @ByVal lapack_int n, DoubleBuffer d, lapack_complex_double e );
public static native @ByVal lapack_int LAPACKE_zpttrf( @ByVal lapack_int n, double[] d, lapack_complex_double e );

public static native @ByVal lapack_int LAPACKE_zpttrf_work( @ByVal lapack_int n, DoublePointer d,
                                lapack_complex_double e );
public static native @ByVal lapack_int LAPACKE_zpttrf_work( @ByVal lapack_int n, DoubleBuffer d,
                                lapack_complex_double e );
public static native @ByVal lapack_int LAPACKE_zpttrf_work( @ByVal lapack_int n, double[] d,
                                lapack_complex_double e );

public static native @ByVal lapack_int LAPACKE_zpttrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoublePointer d,
                           @Const lapack_complex_double e,
                           lapack_complex_double b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_zpttrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const DoubleBuffer d,
                           @Const lapack_complex_double e,
                           lapack_complex_double b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_zpttrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const double[] d,
                           @Const lapack_complex_double e,
                           lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zpttrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoublePointer d,
                                @Const lapack_complex_double e,
                                lapack_complex_double b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_zpttrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const DoubleBuffer d,
                                @Const lapack_complex_double e,
                                lapack_complex_double b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_zpttrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const double[] d,
                                @Const lapack_complex_double e,
                                lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zspcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double ap,
                           @Const lapack_int ipiv, double anorm, DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_zspcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double ap,
                           @Const lapack_int ipiv, double anorm, DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_zspcon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double ap,
                           @Const lapack_int ipiv, double anorm, double[] rcond );

public static native @ByVal lapack_int LAPACKE_zspcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double ap,
                                @Const lapack_int ipiv, double anorm,
                                DoublePointer rcond, lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zspcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double ap,
                                @Const lapack_int ipiv, double anorm,
                                DoubleBuffer rcond, lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zspcon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double ap,
                                @Const lapack_int ipiv, double anorm,
                                double[] rcond, lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zsprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double ap,
                           @Const lapack_complex_double afp,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_zsprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double ap,
                           @Const lapack_complex_double afp,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_zsprfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double ap,
                           @Const lapack_complex_double afp,
                           @Const lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_zsprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                @Const lapack_complex_double afp,
                                @Const lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zsprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                @Const lapack_complex_double afp,
                                @Const lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zsprfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                @Const lapack_complex_double afp,
                                @Const lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                double[] ferr, double[] berr,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zspsv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, lapack_complex_double ap,
                          lapack_int ipiv, lapack_complex_double b,
                          @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zspsv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, lapack_complex_double ap,
                               lapack_int ipiv, lapack_complex_double b,
                               @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zspsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double ap,
                           lapack_complex_double afp, lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer rcond, DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_zspsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double ap,
                           lapack_complex_double afp, lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_zspsvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double ap,
                           lapack_complex_double afp, lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] rcond, double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_zspsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                lapack_complex_double afp, lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoublePointer rcond, DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zspsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                lapack_complex_double afp, lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zspsvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                lapack_complex_double afp, lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                double[] rcond, double[] ferr, double[] berr,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zsptrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double ap, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zsptrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double ap, lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zsptri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double ap, @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zsptri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double ap,
                                @Const lapack_int ipiv,
                                lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zsptrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double ap,
                           @Const lapack_int ipiv, lapack_complex_double b,
                           @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zsptrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                @Const lapack_int ipiv,
                                lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zstedc( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                           DoublePointer d, DoublePointer e, lapack_complex_double z,
                           @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zstedc( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                           DoubleBuffer d, DoubleBuffer e, lapack_complex_double z,
                           @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zstedc( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                           double[] d, double[] e, lapack_complex_double z,
                           @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_zstedc_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                DoublePointer d, DoublePointer e, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoublePointer rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_zstedc_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                DoubleBuffer d, DoubleBuffer e, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoubleBuffer rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_zstedc_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                double[] d, double[] e, lapack_complex_double z,
                                @ByVal lapack_int ldz, lapack_complex_double work,
                                @ByVal lapack_int lwork, double[] rwork,
                                @ByVal lapack_int lrwork, lapack_int iwork,
                                @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_zstegr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, DoublePointer d, DoublePointer e, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoublePointer w,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int isuppz );
public static native @ByVal lapack_int LAPACKE_zstegr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, DoubleBuffer d, DoubleBuffer e, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, DoubleBuffer w,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int isuppz );
public static native @ByVal lapack_int LAPACKE_zstegr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, double[] d, double[] e, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           double abstol, lapack_int m, double[] w,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int isuppz );

public static native @ByVal lapack_int LAPACKE_zstegr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, DoublePointer d, DoublePointer e, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                double abstol, lapack_int m, DoublePointer w,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_int isuppz, DoublePointer work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_zstegr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, DoubleBuffer d, DoubleBuffer e, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                double abstol, lapack_int m, DoubleBuffer w,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_int isuppz, DoubleBuffer work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_zstegr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, double[] d, double[] e, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                double abstol, lapack_int m, double[] w,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_int isuppz, double[] work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_zstein( int matrix_layout, @ByVal lapack_int n, @Const DoublePointer d,
                           @Const DoublePointer e, @ByVal lapack_int m, @Const DoublePointer w,
                           @Const lapack_int iblock, @Const lapack_int isplit,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int ifailv );
public static native @ByVal lapack_int LAPACKE_zstein( int matrix_layout, @ByVal lapack_int n, @Const DoubleBuffer d,
                           @Const DoubleBuffer e, @ByVal lapack_int m, @Const DoubleBuffer w,
                           @Const lapack_int iblock, @Const lapack_int isplit,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int ifailv );
public static native @ByVal lapack_int LAPACKE_zstein( int matrix_layout, @ByVal lapack_int n, @Const double[] d,
                           @Const double[] e, @ByVal lapack_int m, @Const double[] w,
                           @Const lapack_int iblock, @Const lapack_int isplit,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int ifailv );

public static native @ByVal lapack_int LAPACKE_zstein_work( int matrix_layout, @ByVal lapack_int n, @Const DoublePointer d,
                                @Const DoublePointer e, @ByVal lapack_int m, @Const DoublePointer w,
                                @Const lapack_int iblock,
                                @Const lapack_int isplit,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                DoublePointer work, lapack_int iwork,
                                lapack_int ifailv );
public static native @ByVal lapack_int LAPACKE_zstein_work( int matrix_layout, @ByVal lapack_int n, @Const DoubleBuffer d,
                                @Const DoubleBuffer e, @ByVal lapack_int m, @Const DoubleBuffer w,
                                @Const lapack_int iblock,
                                @Const lapack_int isplit,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                DoubleBuffer work, lapack_int iwork,
                                lapack_int ifailv );
public static native @ByVal lapack_int LAPACKE_zstein_work( int matrix_layout, @ByVal lapack_int n, @Const double[] d,
                                @Const double[] e, @ByVal lapack_int m, @Const double[] w,
                                @Const lapack_int iblock,
                                @Const lapack_int isplit,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                double[] work, lapack_int iwork,
                                lapack_int ifailv );

public static native @ByVal lapack_int LAPACKE_zstemr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, DoublePointer d, DoublePointer e, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           lapack_int m, DoublePointer w, lapack_complex_double z,
                           @ByVal lapack_int ldz, @ByVal lapack_int nzc, lapack_int isuppz,
                           lapack_logical tryrac );
public static native @ByVal lapack_int LAPACKE_zstemr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, DoubleBuffer d, DoubleBuffer e, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           lapack_int m, DoubleBuffer w, lapack_complex_double z,
                           @ByVal lapack_int ldz, @ByVal lapack_int nzc, lapack_int isuppz,
                           lapack_logical tryrac );
public static native @ByVal lapack_int LAPACKE_zstemr( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                           @ByVal lapack_int n, double[] d, double[] e, double vl,
                           double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                           lapack_int m, double[] w, lapack_complex_double z,
                           @ByVal lapack_int ldz, @ByVal lapack_int nzc, lapack_int isuppz,
                           lapack_logical tryrac );

public static native @ByVal lapack_int LAPACKE_zstemr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, DoublePointer d, DoublePointer e, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                lapack_int m, DoublePointer w,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                @ByVal lapack_int nzc, lapack_int isuppz,
                                lapack_logical tryrac, DoublePointer work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_zstemr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, DoubleBuffer d, DoubleBuffer e, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                lapack_int m, DoubleBuffer w,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                @ByVal lapack_int nzc, lapack_int isuppz,
                                lapack_logical tryrac, DoubleBuffer work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_zstemr_work( int matrix_layout, @Cast("char") byte jobz, @Cast("char") byte range,
                                @ByVal lapack_int n, double[] d, double[] e, double vl,
                                double vu, @ByVal lapack_int il, @ByVal lapack_int iu,
                                lapack_int m, double[] w,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                @ByVal lapack_int nzc, lapack_int isuppz,
                                lapack_logical tryrac, double[] work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_zsteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                           DoublePointer d, DoublePointer e, lapack_complex_double z,
                           @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zsteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                           DoubleBuffer d, DoubleBuffer e, lapack_complex_double z,
                           @ByVal lapack_int ldz );
public static native @ByVal lapack_int LAPACKE_zsteqr( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                           double[] d, double[] e, lapack_complex_double z,
                           @ByVal lapack_int ldz );

public static native @ByVal lapack_int LAPACKE_zsteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                DoublePointer d, DoublePointer e, lapack_complex_double z,
                                @ByVal lapack_int ldz, DoublePointer work );
public static native @ByVal lapack_int LAPACKE_zsteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                DoubleBuffer d, DoubleBuffer e, lapack_complex_double z,
                                @ByVal lapack_int ldz, DoubleBuffer work );
public static native @ByVal lapack_int LAPACKE_zsteqr_work( int matrix_layout, @Cast("char") byte compz, @ByVal lapack_int n,
                                double[] d, double[] e, lapack_complex_double z,
                                @ByVal lapack_int ldz, double[] work );

public static native @ByVal lapack_int LAPACKE_zsycon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, double anorm, DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_zsycon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, double anorm, DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_zsycon( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv, double anorm, double[] rcond );

public static native @ByVal lapack_int LAPACKE_zsycon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, double anorm,
                                DoublePointer rcond, lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zsycon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, double anorm,
                                DoubleBuffer rcond, lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zsycon_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv, double anorm,
                                double[] rcond, lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zsyconv( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte way, @ByVal lapack_int n,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            @Const lapack_int ipiv, lapack_complex_double e );

public static native @ByVal lapack_int LAPACKE_zsyconv_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte way,
                                 @ByVal lapack_int n, lapack_complex_double a,
                                 @ByVal lapack_int lda, @Const lapack_int ipiv,
                                 lapack_complex_double e );

public static native @ByVal lapack_int LAPACKE_zsyequb( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            DoublePointer s, DoublePointer scond, DoublePointer amax );
public static native @ByVal lapack_int LAPACKE_zsyequb( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            DoubleBuffer s, DoubleBuffer scond, DoubleBuffer amax );
public static native @ByVal lapack_int LAPACKE_zsyequb( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            double[] s, double[] scond, double[] amax );

public static native @ByVal lapack_int LAPACKE_zsyequb_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 DoublePointer s, DoublePointer scond, DoublePointer amax,
                                 lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zsyequb_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 DoubleBuffer s, DoubleBuffer scond, DoubleBuffer amax,
                                 lapack_complex_double work );
public static native @ByVal lapack_int LAPACKE_zsyequb_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 double[] s, double[] scond, double[] amax,
                                 lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zsyr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             @ByVal lapack_complex_double alpha,
                             @Const lapack_complex_double x, @ByVal lapack_int incx,
                             lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_zsyr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  @ByVal lapack_complex_double alpha,
                                  @Const lapack_complex_double x,
                                  @ByVal lapack_int incx, lapack_complex_double a,
                                  @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_zsyrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_complex_double af,
                           @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_zsyrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_complex_double af,
                           @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_zsyrfs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_complex_double af,
                           @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_zsyrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, @Const lapack_complex_double af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zsyrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, @Const lapack_complex_double af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zsyrfs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, @Const lapack_complex_double af,
                                @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                double[] ferr, double[] berr,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_zsyrfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            @Const lapack_complex_double af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const DoublePointer s,
                            @Const lapack_complex_double b, @ByVal lapack_int ldb,
                            lapack_complex_double x, @ByVal lapack_int ldx,
                            DoublePointer rcond, DoublePointer berr, @ByVal lapack_int n_err_bnds,
                            DoublePointer err_bnds_norm, DoublePointer err_bnds_comp,
                            @ByVal lapack_int nparams, DoublePointer params );
public static native @ByVal lapack_int LAPACKE_zsyrfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            @Const lapack_complex_double af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const DoubleBuffer s,
                            @Const lapack_complex_double b, @ByVal lapack_int ldb,
                            lapack_complex_double x, @ByVal lapack_int ldx,
                            DoubleBuffer rcond, DoubleBuffer berr, @ByVal lapack_int n_err_bnds,
                            DoubleBuffer err_bnds_norm, DoubleBuffer err_bnds_comp,
                            @ByVal lapack_int nparams, DoubleBuffer params );
public static native @ByVal lapack_int LAPACKE_zsyrfsx( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            @Const lapack_complex_double a, @ByVal lapack_int lda,
                            @Const lapack_complex_double af, @ByVal lapack_int ldaf,
                            @Const lapack_int ipiv, @Const double[] s,
                            @Const lapack_complex_double b, @ByVal lapack_int ldb,
                            lapack_complex_double x, @ByVal lapack_int ldx,
                            double[] rcond, double[] berr, @ByVal lapack_int n_err_bnds,
                            double[] err_bnds_norm, double[] err_bnds_comp,
                            @ByVal lapack_int nparams, double[] params );

public static native @ByVal lapack_int LAPACKE_zsyrfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 @Const lapack_complex_double af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const DoublePointer s,
                                 @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 DoublePointer rcond, DoublePointer berr,
                                 @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                                 DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoublePointer params, lapack_complex_double work,
                                 DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zsyrfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 @Const lapack_complex_double af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const DoubleBuffer s,
                                 @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 DoubleBuffer rcond, DoubleBuffer berr,
                                 @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                                 DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoubleBuffer params, lapack_complex_double work,
                                 DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zsyrfsx_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte equed,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 @Const lapack_complex_double af,
                                 @ByVal lapack_int ldaf, @Const lapack_int ipiv,
                                 @Const double[] s,
                                 @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 double[] rcond, double[] berr,
                                 @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                                 double[] err_bnds_comp, @ByVal lapack_int nparams,
                                 double[] params, lapack_complex_double work,
                                 double[] rwork );

public static native @ByVal lapack_int LAPACKE_zsysv( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                          @ByVal lapack_int nrhs, lapack_complex_double a,
                          @ByVal lapack_int lda, lapack_int ipiv,
                          lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zsysv_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, lapack_complex_double a,
                               @ByVal lapack_int lda, lapack_int ipiv,
                               lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zsysv_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                    @ByVal lapack_int nrhs, lapack_complex_double a,
                                    @ByVal lapack_int lda, lapack_int ipiv,
                                    lapack_complex_double b, @ByVal lapack_int ldb,
                                    lapack_complex_double work,
                                    @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zsysv_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                               @ByVal lapack_int nrhs, lapack_complex_double a,
                               @ByVal lapack_int lda, lapack_int ipiv,
                               lapack_complex_double b, @ByVal lapack_int ldb,
                               lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zsysvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double af,
                           @ByVal lapack_int ldaf, lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer rcond, DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_zsysvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double af,
                           @ByVal lapack_int ldaf, lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_zsysvx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double af,
                           @ByVal lapack_int ldaf, lapack_int ipiv,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] rcond, double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_zsysvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double af, @ByVal lapack_int ldaf,
                                lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoublePointer rcond, DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zsysvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double af, @ByVal lapack_int ldaf,
                                lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                DoubleBuffer rcond, DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zsysvx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double af, @ByVal lapack_int ldaf,
                                lapack_int ipiv,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double x, @ByVal lapack_int ldx,
                                double[] rcond, double[] ferr, double[] berr,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                double[] rwork );

public static native @ByVal lapack_int LAPACKE_zsysvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") BytePointer equed, DoublePointer s,
                            lapack_complex_double b, @ByVal lapack_int ldb,
                            lapack_complex_double x, @ByVal lapack_int ldx,
                            DoublePointer rcond, DoublePointer rpvgrw, DoublePointer berr,
                            @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                            DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                            DoublePointer params );
public static native @ByVal lapack_int LAPACKE_zsysvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") ByteBuffer equed, DoubleBuffer s,
                            lapack_complex_double b, @ByVal lapack_int ldb,
                            lapack_complex_double x, @ByVal lapack_int ldx,
                            DoubleBuffer rcond, DoubleBuffer rpvgrw, DoubleBuffer berr,
                            @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                            DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                            DoubleBuffer params );
public static native @ByVal lapack_int LAPACKE_zsysvxx( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double af, @ByVal lapack_int ldaf,
                            lapack_int ipiv, @Cast("char*") byte[] equed, double[] s,
                            lapack_complex_double b, @ByVal lapack_int ldb,
                            lapack_complex_double x, @ByVal lapack_int ldx,
                            double[] rcond, double[] rpvgrw, double[] berr,
                            @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                            double[] err_bnds_comp, @ByVal lapack_int nparams,
                            double[] params );

public static native @ByVal lapack_int LAPACKE_zsysvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 lapack_complex_double af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") BytePointer equed, DoublePointer s,
                                 lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 DoublePointer rcond, DoublePointer rpvgrw, DoublePointer berr,
                                 @ByVal lapack_int n_err_bnds, DoublePointer err_bnds_norm,
                                 DoublePointer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoublePointer params, lapack_complex_double work,
                                 DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_zsysvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 lapack_complex_double af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") ByteBuffer equed, DoubleBuffer s,
                                 lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 DoubleBuffer rcond, DoubleBuffer rpvgrw, DoubleBuffer berr,
                                 @ByVal lapack_int n_err_bnds, DoubleBuffer err_bnds_norm,
                                 DoubleBuffer err_bnds_comp, @ByVal lapack_int nparams,
                                 DoubleBuffer params, lapack_complex_double work,
                                 DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_zsysvxx_work( int matrix_layout, @Cast("char") byte fact, @Cast("char") byte uplo,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 lapack_complex_double af, @ByVal lapack_int ldaf,
                                 lapack_int ipiv, @Cast("char*") byte[] equed, double[] s,
                                 lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double x, @ByVal lapack_int ldx,
                                 double[] rcond, double[] rpvgrw, double[] berr,
                                 @ByVal lapack_int n_err_bnds, double[] err_bnds_norm,
                                 double[] err_bnds_comp, @ByVal lapack_int nparams,
                                 double[] params, lapack_complex_double work,
                                 double[] rwork );

public static native @ByVal lapack_int LAPACKE_zsyswapr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             lapack_complex_double a, @ByVal lapack_int lda,
                             @ByVal lapack_int i1, @ByVal lapack_int i2 );

public static native @ByVal lapack_int LAPACKE_zsyswapr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  lapack_complex_double a, @ByVal lapack_int lda,
                                  @ByVal lapack_int i1, @ByVal lapack_int i2 );

public static native @ByVal lapack_int LAPACKE_zsytrf( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zsytrf_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zsytrf_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int ipiv, lapack_complex_double work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zsytrf_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_int ipiv, lapack_complex_double work,
                                @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zsytri( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zsytri2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            @Const lapack_int ipiv );

public static native @ByVal lapack_int LAPACKE_zsytri2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 @Const lapack_int ipiv,
                                 lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zsytri2x( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             lapack_complex_double a, @ByVal lapack_int lda,
                             @Const lapack_int ipiv, @ByVal lapack_int nb );

public static native @ByVal lapack_int LAPACKE_zsytri2x_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  lapack_complex_double a, @ByVal lapack_int lda,
                                  @Const lapack_int ipiv,
                                  lapack_complex_double work, @ByVal lapack_int nb );

public static native @ByVal lapack_int LAPACKE_zsytri_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_int ipiv,
                                lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zsytrs( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv,
                           lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zsytrs2( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                            @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                            @ByVal lapack_int lda, @Const lapack_int ipiv,
                            lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zsytrs2_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                 @ByVal lapack_int nrhs,
                                 @Const lapack_complex_double a, @ByVal lapack_int lda,
                                 @Const lapack_int ipiv,
                                 lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zsytrs_rook( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_int ipiv,
                           lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zsytrs_rook_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_zsytrs_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, @Const lapack_int ipiv,
                                lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ztbcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd,
                           @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                           DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_ztbcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd,
                           @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                           DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_ztbcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd,
                           @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                           double[] rcond );

public static native @ByVal lapack_int LAPACKE_ztbcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab, DoublePointer rcond,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_ztbcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab, DoubleBuffer rcond,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_ztbcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab, double[] rcond,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_ztbrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           @Const lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_ztbrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           @Const lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_ztbrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           @Const lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_ztbrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab, @Const lapack_complex_double b,
                                @ByVal lapack_int ldb, @Const lapack_complex_double x,
                                @ByVal lapack_int ldx, DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_ztbrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab, @Const lapack_complex_double b,
                                @ByVal lapack_int ldb, @Const lapack_complex_double x,
                                @ByVal lapack_int ldx, DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_ztbrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab, @Const lapack_complex_double b,
                                @ByVal lapack_int ldb, @Const lapack_complex_double x,
                                @ByVal lapack_int ldx, double[] ferr, double[] berr,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_ztbtrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int kd, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double ab, @ByVal lapack_int ldab,
                           lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ztbtrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int kd,
                                @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ab,
                                @ByVal lapack_int ldab, lapack_complex_double b,
                                @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ztfsm( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte side, @Cast("char") byte uplo,
                          @Cast("char") byte trans, @Cast("char") byte diag, @ByVal lapack_int m, @ByVal lapack_int n,
                          @ByVal lapack_complex_double alpha,
                          @Const lapack_complex_double a,
                          lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ztfsm_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte side,
                               @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag, @ByVal lapack_int m,
                               @ByVal lapack_int n, @ByVal lapack_complex_double alpha,
                               @Const lapack_complex_double a,
                               lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ztftri( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, lapack_complex_double a );

public static native @ByVal lapack_int LAPACKE_ztftri_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n,
                                lapack_complex_double a );

public static native @ByVal lapack_int LAPACKE_ztfttp( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const lapack_complex_double arf,
                           lapack_complex_double ap );

public static native @ByVal lapack_int LAPACKE_ztfttp_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const lapack_complex_double arf,
                                lapack_complex_double ap );

public static native @ByVal lapack_int LAPACKE_ztfttr( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const lapack_complex_double arf,
                           lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_ztfttr_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const lapack_complex_double arf,
                                lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_ztgevc( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const lapack_complex_double s, @ByVal lapack_int lds,
                           @Const lapack_complex_double p, @ByVal lapack_int ldp,
                           lapack_complex_double vl, @ByVal lapack_int ldvl,
                           lapack_complex_double vr, @ByVal lapack_int ldvr,
                           @ByVal lapack_int mm, lapack_int m );

public static native @ByVal lapack_int LAPACKE_ztgevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const lapack_complex_double s, @ByVal lapack_int lds,
                                @Const lapack_complex_double p, @ByVal lapack_int ldp,
                                lapack_complex_double vl, @ByVal lapack_int ldvl,
                                lapack_complex_double vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_ztgevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const lapack_complex_double s, @ByVal lapack_int lds,
                                @Const lapack_complex_double p, @ByVal lapack_int ldp,
                                lapack_complex_double vl, @ByVal lapack_int ldvl,
                                lapack_complex_double vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_ztgevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const lapack_complex_double s, @ByVal lapack_int lds,
                                @Const lapack_complex_double p, @ByVal lapack_int ldp,
                                lapack_complex_double vl, @ByVal lapack_int ldvl,
                                lapack_complex_double vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_ztgexc( int matrix_layout, @ByVal lapack_logical wantq,
                           @ByVal lapack_logical wantz, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double q, @ByVal lapack_int ldq,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           @ByVal lapack_int ifst, @ByVal lapack_int ilst );

public static native @ByVal lapack_int LAPACKE_ztgexc_work( int matrix_layout, @ByVal lapack_logical wantq,
                                @ByVal lapack_logical wantz, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                @ByVal lapack_int ifst, @ByVal lapack_int ilst );

public static native @ByVal lapack_int LAPACKE_ztgsen( int matrix_layout, @ByVal lapack_int ijob,
                           @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double alpha,
                           lapack_complex_double beta,
                           lapack_complex_double q, @ByVal lapack_int ldq,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int m, DoublePointer pl, DoublePointer pr, DoublePointer dif );
public static native @ByVal lapack_int LAPACKE_ztgsen( int matrix_layout, @ByVal lapack_int ijob,
                           @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double alpha,
                           lapack_complex_double beta,
                           lapack_complex_double q, @ByVal lapack_int ldq,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int m, DoubleBuffer pl, DoubleBuffer pr, DoubleBuffer dif );
public static native @ByVal lapack_int LAPACKE_ztgsen( int matrix_layout, @ByVal lapack_int ijob,
                           @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double alpha,
                           lapack_complex_double beta,
                           lapack_complex_double q, @ByVal lapack_int ldq,
                           lapack_complex_double z, @ByVal lapack_int ldz,
                           lapack_int m, double[] pl, double[] pr, double[] dif );

public static native @ByVal lapack_int LAPACKE_ztgsen_work( int matrix_layout, @ByVal lapack_int ijob,
                                @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double alpha,
                                lapack_complex_double beta,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_int m, DoublePointer pl, DoublePointer pr,
                                DoublePointer dif, lapack_complex_double work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_ztgsen_work( int matrix_layout, @ByVal lapack_int ijob,
                                @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double alpha,
                                lapack_complex_double beta,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_int m, DoubleBuffer pl, DoubleBuffer pr,
                                DoubleBuffer dif, lapack_complex_double work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );
public static native @ByVal lapack_int LAPACKE_ztgsen_work( int matrix_layout, @ByVal lapack_int ijob,
                                @ByVal lapack_logical wantq, @ByVal lapack_logical wantz,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double alpha,
                                lapack_complex_double beta,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_complex_double z, @ByVal lapack_int ldz,
                                lapack_int m, double[] pl, double[] pr,
                                double[] dif, lapack_complex_double work,
                                @ByVal lapack_int lwork, lapack_int iwork,
                                @ByVal lapack_int liwork );

public static native @ByVal lapack_int LAPACKE_ztgsja( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n,
                           @ByVal lapack_int k, @ByVal lapack_int l, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double b,
                           @ByVal lapack_int ldb, double tola, double tolb,
                           DoublePointer alpha, DoublePointer beta,
                           lapack_complex_double u, @ByVal lapack_int ldu,
                           lapack_complex_double v, @ByVal lapack_int ldv,
                           lapack_complex_double q, @ByVal lapack_int ldq,
                           lapack_int ncycle );
public static native @ByVal lapack_int LAPACKE_ztgsja( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n,
                           @ByVal lapack_int k, @ByVal lapack_int l, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double b,
                           @ByVal lapack_int ldb, double tola, double tolb,
                           DoubleBuffer alpha, DoubleBuffer beta,
                           lapack_complex_double u, @ByVal lapack_int ldu,
                           lapack_complex_double v, @ByVal lapack_int ldv,
                           lapack_complex_double q, @ByVal lapack_int ldq,
                           lapack_int ncycle );
public static native @ByVal lapack_int LAPACKE_ztgsja( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv, @Cast("char") byte jobq,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int n,
                           @ByVal lapack_int k, @ByVal lapack_int l, lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double b,
                           @ByVal lapack_int ldb, double tola, double tolb,
                           double[] alpha, double[] beta,
                           lapack_complex_double u, @ByVal lapack_int ldu,
                           lapack_complex_double v, @ByVal lapack_int ldv,
                           lapack_complex_double q, @ByVal lapack_int ldq,
                           lapack_int ncycle );

public static native @ByVal lapack_int LAPACKE_ztgsja_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, @ByVal lapack_int k, @ByVal lapack_int l,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                double tola, double tolb, DoublePointer alpha,
                                DoublePointer beta, lapack_complex_double u,
                                @ByVal lapack_int ldu, lapack_complex_double v,
                                @ByVal lapack_int ldv, lapack_complex_double q,
                                @ByVal lapack_int ldq, lapack_complex_double work,
                                lapack_int ncycle );
public static native @ByVal lapack_int LAPACKE_ztgsja_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, @ByVal lapack_int k, @ByVal lapack_int l,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                double tola, double tolb, DoubleBuffer alpha,
                                DoubleBuffer beta, lapack_complex_double u,
                                @ByVal lapack_int ldu, lapack_complex_double v,
                                @ByVal lapack_int ldv, lapack_complex_double q,
                                @ByVal lapack_int ldq, lapack_complex_double work,
                                lapack_int ncycle );
public static native @ByVal lapack_int LAPACKE_ztgsja_work( int matrix_layout, @Cast("char") byte jobu, @Cast("char") byte jobv,
                                @Cast("char") byte jobq, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int n, @ByVal lapack_int k, @ByVal lapack_int l,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                double tola, double tolb, double[] alpha,
                                double[] beta, lapack_complex_double u,
                                @ByVal lapack_int ldu, lapack_complex_double v,
                                @ByVal lapack_int ldv, lapack_complex_double q,
                                @ByVal lapack_int ldq, lapack_complex_double work,
                                lapack_int ncycle );

public static native @ByVal lapack_int LAPACKE_ztgsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           @Const lapack_complex_double vl, @ByVal lapack_int ldvl,
                           @Const lapack_complex_double vr, @ByVal lapack_int ldvr,
                           DoublePointer s, DoublePointer dif, @ByVal lapack_int mm,
                           lapack_int m );
public static native @ByVal lapack_int LAPACKE_ztgsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           @Const lapack_complex_double vl, @ByVal lapack_int ldvl,
                           @Const lapack_complex_double vr, @ByVal lapack_int ldvr,
                           DoubleBuffer s, DoubleBuffer dif, @ByVal lapack_int mm,
                           lapack_int m );
public static native @ByVal lapack_int LAPACKE_ztgsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           @Const lapack_complex_double vl, @ByVal lapack_int ldvl,
                           @Const lapack_complex_double vr, @ByVal lapack_int ldvr,
                           double[] s, double[] dif, @ByVal lapack_int mm,
                           lapack_int m );

public static native @ByVal lapack_int LAPACKE_ztgsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                @Const lapack_complex_double vl,
                                @ByVal lapack_int ldvl,
                                @Const lapack_complex_double vr,
                                @ByVal lapack_int ldvr, DoublePointer s, DoublePointer dif,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_ztgsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                @Const lapack_complex_double vl,
                                @ByVal lapack_int ldvl,
                                @Const lapack_complex_double vr,
                                @ByVal lapack_int ldvr, DoubleBuffer s, DoubleBuffer dif,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_ztgsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                @Const lapack_complex_double vl,
                                @ByVal lapack_int ldvl,
                                @Const lapack_complex_double vr,
                                @ByVal lapack_int ldvr, double[] s, double[] dif,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_ztgsyl( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                           @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double c, @ByVal lapack_int ldc,
                           @Const lapack_complex_double d, @ByVal lapack_int ldd,
                           @Const lapack_complex_double e, @ByVal lapack_int lde,
                           lapack_complex_double f, @ByVal lapack_int ldf,
                           DoublePointer scale, DoublePointer dif );
public static native @ByVal lapack_int LAPACKE_ztgsyl( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                           @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double c, @ByVal lapack_int ldc,
                           @Const lapack_complex_double d, @ByVal lapack_int ldd,
                           @Const lapack_complex_double e, @ByVal lapack_int lde,
                           lapack_complex_double f, @ByVal lapack_int ldf,
                           DoubleBuffer scale, DoubleBuffer dif );
public static native @ByVal lapack_int LAPACKE_ztgsyl( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                           @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double c, @ByVal lapack_int ldc,
                           @Const lapack_complex_double d, @ByVal lapack_int ldd,
                           @Const lapack_complex_double e, @ByVal lapack_int lde,
                           lapack_complex_double f, @ByVal lapack_int ldf,
                           double[] scale, double[] dif );

public static native @ByVal lapack_int LAPACKE_ztgsyl_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                                @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double c, @ByVal lapack_int ldc,
                                @Const lapack_complex_double d, @ByVal lapack_int ldd,
                                @Const lapack_complex_double e, @ByVal lapack_int lde,
                                lapack_complex_double f, @ByVal lapack_int ldf,
                                DoublePointer scale, DoublePointer dif,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_ztgsyl_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                                @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double c, @ByVal lapack_int ldc,
                                @Const lapack_complex_double d, @ByVal lapack_int ldd,
                                @Const lapack_complex_double e, @ByVal lapack_int lde,
                                lapack_complex_double f, @ByVal lapack_int ldf,
                                DoubleBuffer scale, DoubleBuffer dif,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_ztgsyl_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int ijob,
                                @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double c, @ByVal lapack_int ldc,
                                @Const lapack_complex_double d, @ByVal lapack_int ldd,
                                @Const lapack_complex_double e, @ByVal lapack_int lde,
                                lapack_complex_double f, @ByVal lapack_int ldf,
                                double[] scale, double[] dif,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_ztpcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const lapack_complex_double ap,
                           DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_ztpcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const lapack_complex_double ap,
                           DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_ztpcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const lapack_complex_double ap,
                           double[] rcond );

public static native @ByVal lapack_int LAPACKE_ztpcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n,
                                @Const lapack_complex_double ap, DoublePointer rcond,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_ztpcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n,
                                @Const lapack_complex_double ap, DoubleBuffer rcond,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_ztpcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n,
                                @Const lapack_complex_double ap, double[] rcond,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_ztpmqrt( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                            @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                            @ByVal lapack_int l, @ByVal lapack_int nb,
                            @Const lapack_complex_double v, @ByVal lapack_int ldv,
                            @Const lapack_complex_double t, @ByVal lapack_int ldt,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ztpmqrt_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                 @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                 @ByVal lapack_int l, @ByVal lapack_int nb,
                                 @Const lapack_complex_double v, @ByVal lapack_int ldv,
                                 @Const lapack_complex_double t, @ByVal lapack_int ldt,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_ztpqrt( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int l, @ByVal lapack_int nb,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_ztpqrt2( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                            @ByVal lapack_int l,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double b, @ByVal lapack_int ldb,
                            lapack_complex_double t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_ztpqrt2_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                 @ByVal lapack_int l,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double t, @ByVal lapack_int ldt );

public static native @ByVal lapack_int LAPACKE_ztpqrt_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int l, @ByVal lapack_int nb,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double t, @ByVal lapack_int ldt,
                                lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_ztprfb( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans, @Cast("char") byte direct,
                           @Cast("char") byte storev, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, @ByVal lapack_int l,
                           @Const lapack_complex_double v, @ByVal lapack_int ldv,
                           @Const lapack_complex_double t, @ByVal lapack_int ldt,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb);

public static native @ByVal lapack_int LAPACKE_ztprfb_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @Cast("char") byte direct, @Cast("char") byte storev, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k, @ByVal lapack_int l,
                                @Const lapack_complex_double v, @ByVal lapack_int ldv,
                                @Const lapack_complex_double t, @ByVal lapack_int ldt,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double work, @ByVal lapack_int ldwork );

public static native @ByVal lapack_int LAPACKE_ztprfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double ap,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           @Const lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_ztprfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double ap,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           @Const lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_ztprfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double ap,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           @Const lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_ztprfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                @Const lapack_complex_double x, @ByVal lapack_int ldx,
                                DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_ztprfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                @Const lapack_complex_double x, @ByVal lapack_int ldx,
                                DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_ztprfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                @Const lapack_complex_double x, @ByVal lapack_int ldx,
                                double[] ferr, double[] berr,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_ztptri( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag, @ByVal lapack_int n,
                           lapack_complex_double ap );

public static native @ByVal lapack_int LAPACKE_ztptri_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag,
                                @ByVal lapack_int n, lapack_complex_double ap );

public static native @ByVal lapack_int LAPACKE_ztptrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double ap,
                           lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ztptrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double ap,
                                lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ztpttf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const lapack_complex_double ap,
                           lapack_complex_double arf );

public static native @ByVal lapack_int LAPACKE_ztpttf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const lapack_complex_double ap,
                                lapack_complex_double arf );

public static native @ByVal lapack_int LAPACKE_ztpttr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double ap,
                           lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_ztpttr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double ap,
                                lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_ztrcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, DoublePointer rcond );
public static native @ByVal lapack_int LAPACKE_ztrcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, DoubleBuffer rcond );
public static native @ByVal lapack_int LAPACKE_ztrcon( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo, @Cast("char") byte diag,
                           @ByVal lapack_int n, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, double[] rcond );

public static native @ByVal lapack_int LAPACKE_ztrcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                DoublePointer rcond, lapack_complex_double work,
                                DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_ztrcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                DoubleBuffer rcond, lapack_complex_double work,
                                DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_ztrcon_work( int matrix_layout, @Cast("char") byte norm, @Cast("char") byte uplo,
                                @Cast("char") byte diag, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                double[] rcond, lapack_complex_double work,
                                double[] rwork );

public static native @ByVal lapack_int LAPACKE_ztrevc( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           lapack_complex_double t, @ByVal lapack_int ldt,
                           lapack_complex_double vl, @ByVal lapack_int ldvl,
                           lapack_complex_double vr, @ByVal lapack_int ldvr,
                           @ByVal lapack_int mm, lapack_int m );

public static native @ByVal lapack_int LAPACKE_ztrevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                lapack_complex_double t, @ByVal lapack_int ldt,
                                lapack_complex_double vl, @ByVal lapack_int ldvl,
                                lapack_complex_double vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_ztrevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                lapack_complex_double t, @ByVal lapack_int ldt,
                                lapack_complex_double vl, @ByVal lapack_int ldvl,
                                lapack_complex_double vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_ztrevc_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                lapack_complex_double t, @ByVal lapack_int ldt,
                                lapack_complex_double vl, @ByVal lapack_int ldvl,
                                lapack_complex_double vr, @ByVal lapack_int ldvr,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_ztrexc( int matrix_layout, @Cast("char") byte compq, @ByVal lapack_int n,
                           lapack_complex_double t, @ByVal lapack_int ldt,
                           lapack_complex_double q, @ByVal lapack_int ldq,
                           @ByVal lapack_int ifst, @ByVal lapack_int ilst );

public static native @ByVal lapack_int LAPACKE_ztrexc_work( int matrix_layout, @Cast("char") byte compq, @ByVal lapack_int n,
                                lapack_complex_double t, @ByVal lapack_int ldt,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                @ByVal lapack_int ifst, @ByVal lapack_int ilst );

public static native @ByVal lapack_int LAPACKE_ztrrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           @Const lapack_complex_double x, @ByVal lapack_int ldx,
                           DoublePointer ferr, DoublePointer berr );
public static native @ByVal lapack_int LAPACKE_ztrrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           @Const lapack_complex_double x, @ByVal lapack_int ldx,
                           DoubleBuffer ferr, DoubleBuffer berr );
public static native @ByVal lapack_int LAPACKE_ztrrfs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           @Const lapack_complex_double x, @ByVal lapack_int ldx,
                           double[] ferr, double[] berr );

public static native @ByVal lapack_int LAPACKE_ztrrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                @Const lapack_complex_double x, @ByVal lapack_int ldx,
                                DoublePointer ferr, DoublePointer berr,
                                lapack_complex_double work, DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_ztrrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                @Const lapack_complex_double x, @ByVal lapack_int ldx,
                                DoubleBuffer ferr, DoubleBuffer berr,
                                lapack_complex_double work, DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_ztrrfs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                @Const lapack_complex_double x, @ByVal lapack_int ldx,
                                double[] ferr, double[] berr,
                                lapack_complex_double work, double[] rwork );

public static native @ByVal lapack_int LAPACKE_ztrsen( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           lapack_complex_double t, @ByVal lapack_int ldt,
                           lapack_complex_double q, @ByVal lapack_int ldq,
                           lapack_complex_double w, lapack_int m, DoublePointer s,
                           DoublePointer sep );
public static native @ByVal lapack_int LAPACKE_ztrsen( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           lapack_complex_double t, @ByVal lapack_int ldt,
                           lapack_complex_double q, @ByVal lapack_int ldq,
                           lapack_complex_double w, lapack_int m, DoubleBuffer s,
                           DoubleBuffer sep );
public static native @ByVal lapack_int LAPACKE_ztrsen( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           lapack_complex_double t, @ByVal lapack_int ldt,
                           lapack_complex_double q, @ByVal lapack_int ldq,
                           lapack_complex_double w, lapack_int m, double[] s,
                           double[] sep );

public static native @ByVal lapack_int LAPACKE_ztrsen_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                lapack_complex_double t, @ByVal lapack_int ldt,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_complex_double w, lapack_int m,
                                DoublePointer s, DoublePointer sep,
                                lapack_complex_double work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ztrsen_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                lapack_complex_double t, @ByVal lapack_int ldt,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_complex_double w, lapack_int m,
                                DoubleBuffer s, DoubleBuffer sep,
                                lapack_complex_double work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ztrsen_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte compq,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                lapack_complex_double t, @ByVal lapack_int ldt,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_complex_double w, lapack_int m,
                                double[] s, double[] sep,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_ztrsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const lapack_complex_double t, @ByVal lapack_int ldt,
                           @Const lapack_complex_double vl, @ByVal lapack_int ldvl,
                           @Const lapack_complex_double vr, @ByVal lapack_int ldvr,
                           DoublePointer s, DoublePointer sep, @ByVal lapack_int mm,
                           lapack_int m );
public static native @ByVal lapack_int LAPACKE_ztrsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const lapack_complex_double t, @ByVal lapack_int ldt,
                           @Const lapack_complex_double vl, @ByVal lapack_int ldvl,
                           @Const lapack_complex_double vr, @ByVal lapack_int ldvr,
                           DoubleBuffer s, DoubleBuffer sep, @ByVal lapack_int mm,
                           lapack_int m );
public static native @ByVal lapack_int LAPACKE_ztrsna( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                           @Const lapack_logical select, @ByVal lapack_int n,
                           @Const lapack_complex_double t, @ByVal lapack_int ldt,
                           @Const lapack_complex_double vl, @ByVal lapack_int ldvl,
                           @Const lapack_complex_double vr, @ByVal lapack_int ldvr,
                           double[] s, double[] sep, @ByVal lapack_int mm,
                           lapack_int m );

public static native @ByVal lapack_int LAPACKE_ztrsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const lapack_complex_double t, @ByVal lapack_int ldt,
                                @Const lapack_complex_double vl,
                                @ByVal lapack_int ldvl,
                                @Const lapack_complex_double vr,
                                @ByVal lapack_int ldvr, DoublePointer s, DoublePointer sep,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_double work, @ByVal lapack_int ldwork,
                                DoublePointer rwork );
public static native @ByVal lapack_int LAPACKE_ztrsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const lapack_complex_double t, @ByVal lapack_int ldt,
                                @Const lapack_complex_double vl,
                                @ByVal lapack_int ldvl,
                                @Const lapack_complex_double vr,
                                @ByVal lapack_int ldvr, DoubleBuffer s, DoubleBuffer sep,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_double work, @ByVal lapack_int ldwork,
                                DoubleBuffer rwork );
public static native @ByVal lapack_int LAPACKE_ztrsna_work( int matrix_layout, @Cast("char") byte job, @Cast("char") byte howmny,
                                @Const lapack_logical select, @ByVal lapack_int n,
                                @Const lapack_complex_double t, @ByVal lapack_int ldt,
                                @Const lapack_complex_double vl,
                                @ByVal lapack_int ldvl,
                                @Const lapack_complex_double vr,
                                @ByVal lapack_int ldvr, double[] s, double[] sep,
                                @ByVal lapack_int mm, lapack_int m,
                                lapack_complex_double work, @ByVal lapack_int ldwork,
                                double[] rwork );

public static native @ByVal lapack_int LAPACKE_ztrsyl( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                           @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double c, @ByVal lapack_int ldc,
                           DoublePointer scale );
public static native @ByVal lapack_int LAPACKE_ztrsyl( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                           @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double c, @ByVal lapack_int ldc,
                           DoubleBuffer scale );
public static native @ByVal lapack_int LAPACKE_ztrsyl( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                           @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_complex_double b, @ByVal lapack_int ldb,
                           lapack_complex_double c, @ByVal lapack_int ldc,
                           double[] scale );

public static native @ByVal lapack_int LAPACKE_ztrsyl_work( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                                @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double c, @ByVal lapack_int ldc,
                                DoublePointer scale );
public static native @ByVal lapack_int LAPACKE_ztrsyl_work( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                                @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double c, @ByVal lapack_int ldc,
                                DoubleBuffer scale );
public static native @ByVal lapack_int LAPACKE_ztrsyl_work( int matrix_layout, @Cast("char") byte trana, @Cast("char") byte tranb,
                                @ByVal lapack_int isgn, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_complex_double b, @ByVal lapack_int ldb,
                                lapack_complex_double c, @ByVal lapack_int ldc,
                                double[] scale );

public static native @ByVal lapack_int LAPACKE_ztrtri( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_ztrtri_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte diag,
                                @ByVal lapack_int n, lapack_complex_double a,
                                @ByVal lapack_int lda );

public static native @ByVal lapack_int LAPACKE_ztrtrs( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans, @Cast("char") byte diag,
                           @ByVal lapack_int n, @ByVal lapack_int nrhs,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ztrtrs_work( int matrix_layout, @Cast("char") byte uplo, @Cast("char") byte trans,
                                @Cast("char") byte diag, @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double b, @ByVal lapack_int ldb );

public static native @ByVal lapack_int LAPACKE_ztrttf( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                           @ByVal lapack_int n, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, lapack_complex_double arf );

public static native @ByVal lapack_int LAPACKE_ztrttf_work( int matrix_layout, @Cast("char") byte transr, @Cast("char") byte uplo,
                                @ByVal lapack_int n, @Const lapack_complex_double a,
                                @ByVal lapack_int lda, lapack_complex_double arf );

public static native @ByVal lapack_int LAPACKE_ztrttp( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double ap );

public static native @ByVal lapack_int LAPACKE_ztrttp_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double ap );

public static native @ByVal lapack_int LAPACKE_ztzrzf( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_ztzrzf_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                lapack_complex_double tau,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zunbdb( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           lapack_complex_double x11, @ByVal lapack_int ldx11,
                           lapack_complex_double x12, @ByVal lapack_int ldx12,
                           lapack_complex_double x21, @ByVal lapack_int ldx21,
                           lapack_complex_double x22, @ByVal lapack_int ldx22,
                           DoublePointer theta, DoublePointer phi,
                           lapack_complex_double taup1,
                           lapack_complex_double taup2,
                           lapack_complex_double tauq1,
                           lapack_complex_double tauq2 );
public static native @ByVal lapack_int LAPACKE_zunbdb( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           lapack_complex_double x11, @ByVal lapack_int ldx11,
                           lapack_complex_double x12, @ByVal lapack_int ldx12,
                           lapack_complex_double x21, @ByVal lapack_int ldx21,
                           lapack_complex_double x22, @ByVal lapack_int ldx22,
                           DoubleBuffer theta, DoubleBuffer phi,
                           lapack_complex_double taup1,
                           lapack_complex_double taup2,
                           lapack_complex_double tauq1,
                           lapack_complex_double tauq2 );
public static native @ByVal lapack_int LAPACKE_zunbdb( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           lapack_complex_double x11, @ByVal lapack_int ldx11,
                           lapack_complex_double x12, @ByVal lapack_int ldx12,
                           lapack_complex_double x21, @ByVal lapack_int ldx21,
                           lapack_complex_double x22, @ByVal lapack_int ldx22,
                           double[] theta, double[] phi,
                           lapack_complex_double taup1,
                           lapack_complex_double taup2,
                           lapack_complex_double tauq1,
                           lapack_complex_double tauq2 );

public static native @ByVal lapack_int LAPACKE_zunbdb_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                lapack_complex_double x11, @ByVal lapack_int ldx11,
                                lapack_complex_double x12, @ByVal lapack_int ldx12,
                                lapack_complex_double x21, @ByVal lapack_int ldx21,
                                lapack_complex_double x22, @ByVal lapack_int ldx22,
                                DoublePointer theta, DoublePointer phi,
                                lapack_complex_double taup1,
                                lapack_complex_double taup2,
                                lapack_complex_double tauq1,
                                lapack_complex_double tauq2,
                                lapack_complex_double work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_zunbdb_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                lapack_complex_double x11, @ByVal lapack_int ldx11,
                                lapack_complex_double x12, @ByVal lapack_int ldx12,
                                lapack_complex_double x21, @ByVal lapack_int ldx21,
                                lapack_complex_double x22, @ByVal lapack_int ldx22,
                                DoubleBuffer theta, DoubleBuffer phi,
                                lapack_complex_double taup1,
                                lapack_complex_double taup2,
                                lapack_complex_double tauq1,
                                lapack_complex_double tauq2,
                                lapack_complex_double work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_zunbdb_work( int matrix_layout, @Cast("char") byte trans, @Cast("char") byte signs,
                                @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                                lapack_complex_double x11, @ByVal lapack_int ldx11,
                                lapack_complex_double x12, @ByVal lapack_int ldx12,
                                lapack_complex_double x21, @ByVal lapack_int ldx21,
                                lapack_complex_double x22, @ByVal lapack_int ldx22,
                                double[] theta, double[] phi,
                                lapack_complex_double taup1,
                                lapack_complex_double taup2,
                                lapack_complex_double tauq1,
                                lapack_complex_double tauq2,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zuncsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           lapack_complex_double x11, @ByVal lapack_int ldx11,
                           lapack_complex_double x12, @ByVal lapack_int ldx12,
                           lapack_complex_double x21, @ByVal lapack_int ldx21,
                           lapack_complex_double x22, @ByVal lapack_int ldx22,
                           DoublePointer theta, lapack_complex_double u1,
                           @ByVal lapack_int ldu1, lapack_complex_double u2,
                           @ByVal lapack_int ldu2, lapack_complex_double v1t,
                           @ByVal lapack_int ldv1t, lapack_complex_double v2t,
                           @ByVal lapack_int ldv2t );
public static native @ByVal lapack_int LAPACKE_zuncsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           lapack_complex_double x11, @ByVal lapack_int ldx11,
                           lapack_complex_double x12, @ByVal lapack_int ldx12,
                           lapack_complex_double x21, @ByVal lapack_int ldx21,
                           lapack_complex_double x22, @ByVal lapack_int ldx22,
                           DoubleBuffer theta, lapack_complex_double u1,
                           @ByVal lapack_int ldu1, lapack_complex_double u2,
                           @ByVal lapack_int ldu2, lapack_complex_double v1t,
                           @ByVal lapack_int ldv1t, lapack_complex_double v2t,
                           @ByVal lapack_int ldv2t );
public static native @ByVal lapack_int LAPACKE_zuncsd( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans, @Cast("char") byte signs,
                           @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           lapack_complex_double x11, @ByVal lapack_int ldx11,
                           lapack_complex_double x12, @ByVal lapack_int ldx12,
                           lapack_complex_double x21, @ByVal lapack_int ldx21,
                           lapack_complex_double x22, @ByVal lapack_int ldx22,
                           double[] theta, lapack_complex_double u1,
                           @ByVal lapack_int ldu1, lapack_complex_double u2,
                           @ByVal lapack_int ldu2, lapack_complex_double v1t,
                           @ByVal lapack_int ldv1t, lapack_complex_double v2t,
                           @ByVal lapack_int ldv2t );

public static native @ByVal lapack_int LAPACKE_zuncsd2by1( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           lapack_complex_double x11, @ByVal lapack_int ldx11,
                           lapack_complex_double x21, @ByVal lapack_int ldx21,
                           DoublePointer theta, lapack_complex_double u1,
                           @ByVal lapack_int ldu1, lapack_complex_double u2,
                           @ByVal lapack_int ldu2, lapack_complex_double v1t, @ByVal lapack_int ldv1t );
public static native @ByVal lapack_int LAPACKE_zuncsd2by1( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           lapack_complex_double x11, @ByVal lapack_int ldx11,
                           lapack_complex_double x21, @ByVal lapack_int ldx21,
                           DoubleBuffer theta, lapack_complex_double u1,
                           @ByVal lapack_int ldu1, lapack_complex_double u2,
                           @ByVal lapack_int ldu2, lapack_complex_double v1t, @ByVal lapack_int ldv1t );
public static native @ByVal lapack_int LAPACKE_zuncsd2by1( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                           @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p, @ByVal lapack_int q,
                           lapack_complex_double x11, @ByVal lapack_int ldx11,
                           lapack_complex_double x21, @ByVal lapack_int ldx21,
                           double[] theta, lapack_complex_double u1,
                           @ByVal lapack_int ldu1, lapack_complex_double u2,
                           @ByVal lapack_int ldu2, lapack_complex_double v1t, @ByVal lapack_int ldv1t );

public static native @ByVal lapack_int LAPACKE_zuncsd2by1_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, lapack_complex_double x11, @ByVal lapack_int ldx11,
                                lapack_complex_double x21, @ByVal lapack_int ldx21,
                                DoublePointer theta, lapack_complex_double u1,
                                @ByVal lapack_int ldu1, lapack_complex_double u2,
                                @ByVal lapack_int ldu2, lapack_complex_double v1t,
                                @ByVal lapack_int ldv1t, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoublePointer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_zuncsd2by1_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, lapack_complex_double x11, @ByVal lapack_int ldx11,
                                lapack_complex_double x21, @ByVal lapack_int ldx21,
                                DoubleBuffer theta, lapack_complex_double u1,
                                @ByVal lapack_int ldu1, lapack_complex_double u2,
                                @ByVal lapack_int ldu2, lapack_complex_double v1t,
                                @ByVal lapack_int ldv1t, lapack_complex_double work,
                                @ByVal lapack_int lwork, DoubleBuffer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_zuncsd2by1_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, lapack_complex_double x11, @ByVal lapack_int ldx11,
                                lapack_complex_double x21, @ByVal lapack_int ldx21,
                                double[] theta, lapack_complex_double u1,
                                @ByVal lapack_int ldu1, lapack_complex_double u2,
                                @ByVal lapack_int ldu2, lapack_complex_double v1t,
                                @ByVal lapack_int ldv1t, lapack_complex_double work,
                                @ByVal lapack_int lwork, double[] rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_zuncsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @Cast("char") byte signs, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, lapack_complex_double x11,
                                @ByVal lapack_int ldx11, lapack_complex_double x12,
                                @ByVal lapack_int ldx12, lapack_complex_double x21,
                                @ByVal lapack_int ldx21, lapack_complex_double x22,
                                @ByVal lapack_int ldx22, DoublePointer theta,
                                lapack_complex_double u1, @ByVal lapack_int ldu1,
                                lapack_complex_double u2, @ByVal lapack_int ldu2,
                                lapack_complex_double v1t, @ByVal lapack_int ldv1t,
                                lapack_complex_double v2t, @ByVal lapack_int ldv2t,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoublePointer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_zuncsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @Cast("char") byte signs, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, lapack_complex_double x11,
                                @ByVal lapack_int ldx11, lapack_complex_double x12,
                                @ByVal lapack_int ldx12, lapack_complex_double x21,
                                @ByVal lapack_int ldx21, lapack_complex_double x22,
                                @ByVal lapack_int ldx22, DoubleBuffer theta,
                                lapack_complex_double u1, @ByVal lapack_int ldu1,
                                lapack_complex_double u2, @ByVal lapack_int ldu2,
                                lapack_complex_double v1t, @ByVal lapack_int ldv1t,
                                lapack_complex_double v2t, @ByVal lapack_int ldv2t,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                DoubleBuffer rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork );
public static native @ByVal lapack_int LAPACKE_zuncsd_work( int matrix_layout, @Cast("char") byte jobu1, @Cast("char") byte jobu2,
                                @Cast("char") byte jobv1t, @Cast("char") byte jobv2t, @Cast("char") byte trans,
                                @Cast("char") byte signs, @ByVal lapack_int m, @ByVal lapack_int p,
                                @ByVal lapack_int q, lapack_complex_double x11,
                                @ByVal lapack_int ldx11, lapack_complex_double x12,
                                @ByVal lapack_int ldx12, lapack_complex_double x21,
                                @ByVal lapack_int ldx21, lapack_complex_double x22,
                                @ByVal lapack_int ldx22, double[] theta,
                                lapack_complex_double u1, @ByVal lapack_int ldu1,
                                lapack_complex_double u2, @ByVal lapack_int ldu2,
                                lapack_complex_double v1t, @ByVal lapack_int ldv1t,
                                lapack_complex_double v2t, @ByVal lapack_int ldv2t,
                                lapack_complex_double work, @ByVal lapack_int lwork,
                                double[] rwork, @ByVal lapack_int lrwork,
                                lapack_int iwork );

public static native @ByVal lapack_int LAPACKE_zungbr( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                           @ByVal lapack_int n, @ByVal lapack_int k, lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zungbr_work( int matrix_layout, @Cast("char") byte vect, @ByVal lapack_int m,
                                @ByVal lapack_int n, @ByVal lapack_int k,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_complex_double tau,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zunghr( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zunghr_work( int matrix_layout, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, lapack_complex_double a,
                                @ByVal lapack_int lda,
                                @Const lapack_complex_double tau,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zunglq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zunglq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, lapack_complex_double a,
                                @ByVal lapack_int lda,
                                @Const lapack_complex_double tau,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zungql( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zungql_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, lapack_complex_double a,
                                @ByVal lapack_int lda,
                                @Const lapack_complex_double tau,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zungqr( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zungqr_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, lapack_complex_double a,
                                @ByVal lapack_int lda,
                                @Const lapack_complex_double tau,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zungrq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                           @ByVal lapack_int k, lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zungrq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, lapack_complex_double a,
                                @ByVal lapack_int lda,
                                @Const lapack_complex_double tau,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zungtr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_complex_double tau );

public static native @ByVal lapack_int LAPACKE_zungtr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_complex_double tau,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zunmbr( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_complex_double tau,
                           lapack_complex_double c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_zunmbr_work( int matrix_layout, @Cast("char") byte vect, @Cast("char") byte side,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @ByVal lapack_int k, @Const lapack_complex_double a,
                                @ByVal lapack_int lda,
                                @Const lapack_complex_double tau,
                                lapack_complex_double c, @ByVal lapack_int ldc,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zunmhr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int ilo,
                           @ByVal lapack_int ihi, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_complex_double tau,
                           lapack_complex_double c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_zunmhr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int ilo,
                                @ByVal lapack_int ihi, @Const lapack_complex_double a,
                                @ByVal lapack_int lda,
                                @Const lapack_complex_double tau,
                                lapack_complex_double c, @ByVal lapack_int ldc,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zunmlq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_complex_double tau,
                           lapack_complex_double c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_zunmlq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_complex_double tau,
                                lapack_complex_double c, @ByVal lapack_int ldc,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zunmql( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_complex_double tau,
                           lapack_complex_double c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_zunmql_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_complex_double tau,
                                lapack_complex_double c, @ByVal lapack_int ldc,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zunmqr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_complex_double tau,
                           lapack_complex_double c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_zunmqr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_complex_double tau,
                                lapack_complex_double c, @ByVal lapack_int ldc,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zunmrq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_complex_double tau,
                           lapack_complex_double c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_zunmrq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_complex_double tau,
                                lapack_complex_double c, @ByVal lapack_int ldc,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zunmrz( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @ByVal lapack_int l, @Const lapack_complex_double a,
                           @ByVal lapack_int lda, @Const lapack_complex_double tau,
                           lapack_complex_double c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_zunmrz_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @ByVal lapack_int l, @Const lapack_complex_double a,
                                @ByVal lapack_int lda,
                                @Const lapack_complex_double tau,
                                lapack_complex_double c, @ByVal lapack_int ldc,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zunmtr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_complex_double tau,
                           lapack_complex_double c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_zunmtr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_complex_double tau,
                                lapack_complex_double c, @ByVal lapack_int ldc,
                                lapack_complex_double work, @ByVal lapack_int lwork );

public static native @ByVal lapack_int LAPACKE_zupgtr( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                           @Const lapack_complex_double ap,
                           @Const lapack_complex_double tau,
                           lapack_complex_double q, @ByVal lapack_int ldq );

public static native @ByVal lapack_int LAPACKE_zupgtr_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                @Const lapack_complex_double ap,
                                @Const lapack_complex_double tau,
                                lapack_complex_double q, @ByVal lapack_int ldq,
                                lapack_complex_double work );

public static native @ByVal lapack_int LAPACKE_zupmtr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n,
                           @Const lapack_complex_double ap,
                           @Const lapack_complex_double tau,
                           lapack_complex_double c, @ByVal lapack_int ldc );

public static native @ByVal lapack_int LAPACKE_zupmtr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte uplo,
                                @Cast("char") byte trans, @ByVal lapack_int m, @ByVal lapack_int n,
                                @Const lapack_complex_double ap,
                                @Const lapack_complex_double tau,
                                lapack_complex_double c, @ByVal lapack_int ldc,
                                lapack_complex_double work );

public static native void LAPACKE_ilaver( lapack_int vers_major,
                     lapack_int vers_minor,
                     lapack_int vers_patch );


public static native void LAPACKE_xerbla( @Cast("const char*") BytePointer name, @ByVal lapack_int info );
public static native void LAPACKE_xerbla( String name, @ByVal lapack_int info );

public static native @ByVal lapack_int LAPACKE_chesv_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             @ByVal lapack_int nrhs, lapack_complex_float a,
                             @ByVal lapack_int lda, lapack_int ipiv,
                             lapack_complex_float b, @ByVal lapack_int ldb );


public static native @ByVal lapack_int LAPACKE_chesv_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  @ByVal lapack_int nrhs, lapack_complex_float a,
                                  @ByVal lapack_int lda, lapack_int ipiv,
                                  lapack_complex_float b, @ByVal lapack_int ldb,
                                  lapack_complex_float work,
                                  @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_chetrf_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                              lapack_complex_float a, @ByVal lapack_int lda,
                              lapack_int ipiv );


public static native @ByVal lapack_int LAPACKE_chetrf_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                   lapack_complex_float a, @ByVal lapack_int lda,
                                   lapack_int ipiv,
                                   lapack_complex_float work,
                                   @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_chetrs_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                              @ByVal lapack_int nrhs, @Const lapack_complex_float a,
                              @ByVal lapack_int lda, @Const lapack_int ipiv,
                              lapack_complex_float b, @ByVal lapack_int ldb );


public static native @ByVal lapack_int LAPACKE_chetrs_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                   @ByVal lapack_int nrhs,
                                   @Const lapack_complex_float a,
                                   @ByVal lapack_int lda, @Const lapack_int ipiv,
                                   lapack_complex_float b, @ByVal lapack_int ldb,
                                   lapack_complex_float work,
                                   @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_dsysv_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             @ByVal lapack_int nrhs, DoublePointer a, @ByVal lapack_int lda,
                             lapack_int ipiv, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsysv_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             @ByVal lapack_int nrhs, DoubleBuffer a, @ByVal lapack_int lda,
                             lapack_int ipiv, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsysv_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             @ByVal lapack_int nrhs, double[] a, @ByVal lapack_int lda,
                             lapack_int ipiv, double[] b, @ByVal lapack_int ldb );


public static native @ByVal lapack_int LAPACKE_dsysv_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  @ByVal lapack_int nrhs, DoublePointer a, @ByVal lapack_int lda,
                                  lapack_int ipiv, DoublePointer b, @ByVal lapack_int ldb,
                                  DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsysv_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  @ByVal lapack_int nrhs, DoubleBuffer a, @ByVal lapack_int lda,
                                  lapack_int ipiv, DoubleBuffer b, @ByVal lapack_int ldb,
                                  DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsysv_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  @ByVal lapack_int nrhs, double[] a, @ByVal lapack_int lda,
                                  lapack_int ipiv, double[] b, @ByVal lapack_int ldb,
                                  double[] work, @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_dsytrf_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                              DoublePointer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dsytrf_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                              DoubleBuffer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_dsytrf_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                              double[] a, @ByVal lapack_int lda, lapack_int ipiv );


public static native @ByVal lapack_int LAPACKE_dsytrf_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                   DoublePointer a, @ByVal lapack_int lda, lapack_int ipiv,
                                   DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsytrf_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                   DoubleBuffer a, @ByVal lapack_int lda, lapack_int ipiv,
                                   DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsytrf_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                   double[] a, @ByVal lapack_int lda, lapack_int ipiv,
                                   double[] work, @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_dsytrs_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                              @ByVal lapack_int nrhs, @Const DoublePointer a, @ByVal lapack_int lda,
                              @Const lapack_int ipiv, DoublePointer b,
                              @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsytrs_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                              @ByVal lapack_int nrhs, @Const DoubleBuffer a, @ByVal lapack_int lda,
                              @Const lapack_int ipiv, DoubleBuffer b,
                              @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dsytrs_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                              @ByVal lapack_int nrhs, @Const double[] a, @ByVal lapack_int lda,
                              @Const lapack_int ipiv, double[] b,
                              @ByVal lapack_int ldb );


public static native @ByVal lapack_int LAPACKE_dsytrs_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                   @ByVal lapack_int nrhs, @Const DoublePointer a,
                                   @ByVal lapack_int lda, @Const lapack_int ipiv,
                                   DoublePointer b, @ByVal lapack_int ldb, DoublePointer work,
                                   @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsytrs_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                   @ByVal lapack_int nrhs, @Const DoubleBuffer a,
                                   @ByVal lapack_int lda, @Const lapack_int ipiv,
                                   DoubleBuffer b, @ByVal lapack_int ldb, DoubleBuffer work,
                                   @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dsytrs_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                   @ByVal lapack_int nrhs, @Const double[] a,
                                   @ByVal lapack_int lda, @Const lapack_int ipiv,
                                   double[] b, @ByVal lapack_int ldb, double[] work,
                                   @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_ssysv_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             @ByVal lapack_int nrhs, FloatPointer a, @ByVal lapack_int lda,
                             lapack_int ipiv, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssysv_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             @ByVal lapack_int nrhs, FloatBuffer a, @ByVal lapack_int lda,
                             lapack_int ipiv, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssysv_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             @ByVal lapack_int nrhs, float[] a, @ByVal lapack_int lda,
                             lapack_int ipiv, float[] b, @ByVal lapack_int ldb );


public static native @ByVal lapack_int LAPACKE_ssysv_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  @ByVal lapack_int nrhs, FloatPointer a, @ByVal lapack_int lda,
                                  lapack_int ipiv, FloatPointer b, @ByVal lapack_int ldb,
                                  FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssysv_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  @ByVal lapack_int nrhs, FloatBuffer a, @ByVal lapack_int lda,
                                  lapack_int ipiv, FloatBuffer b, @ByVal lapack_int ldb,
                                  FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssysv_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  @ByVal lapack_int nrhs, float[] a, @ByVal lapack_int lda,
                                  lapack_int ipiv, float[] b, @ByVal lapack_int ldb,
                                  float[] work, @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_ssytrf_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                              FloatPointer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_ssytrf_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                              FloatBuffer a, @ByVal lapack_int lda, lapack_int ipiv );
public static native @ByVal lapack_int LAPACKE_ssytrf_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                              float[] a, @ByVal lapack_int lda, lapack_int ipiv );


public static native @ByVal lapack_int LAPACKE_ssytrf_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                   FloatPointer a, @ByVal lapack_int lda, lapack_int ipiv,
                                   FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssytrf_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                   FloatBuffer a, @ByVal lapack_int lda, lapack_int ipiv,
                                   FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssytrf_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                   float[] a, @ByVal lapack_int lda, lapack_int ipiv,
                                   float[] work, @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_ssytrs_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                              @ByVal lapack_int nrhs, @Const FloatPointer a, @ByVal lapack_int lda,
                              @Const lapack_int ipiv, FloatPointer b,
                              @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssytrs_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                              @ByVal lapack_int nrhs, @Const FloatBuffer a, @ByVal lapack_int lda,
                              @Const lapack_int ipiv, FloatBuffer b,
                              @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_ssytrs_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                              @ByVal lapack_int nrhs, @Const float[] a, @ByVal lapack_int lda,
                              @Const lapack_int ipiv, float[] b,
                              @ByVal lapack_int ldb );


public static native @ByVal lapack_int LAPACKE_ssytrs_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                   @ByVal lapack_int nrhs, @Const FloatPointer a,
                                   @ByVal lapack_int lda, @Const lapack_int ipiv,
                                   FloatPointer b, @ByVal lapack_int ldb, FloatPointer work,
                                   @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssytrs_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                   @ByVal lapack_int nrhs, @Const FloatBuffer a,
                                   @ByVal lapack_int lda, @Const lapack_int ipiv,
                                   FloatBuffer b, @ByVal lapack_int ldb, FloatBuffer work,
                                   @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_ssytrs_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                   @ByVal lapack_int nrhs, @Const float[] a,
                                   @ByVal lapack_int lda, @Const lapack_int ipiv,
                                   float[] b, @ByVal lapack_int ldb, float[] work,
                                   @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_zhesv_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                             @ByVal lapack_int nrhs, lapack_complex_double a,
                             @ByVal lapack_int lda, lapack_int ipiv,
                             lapack_complex_double b, @ByVal lapack_int ldb );


public static native @ByVal lapack_int LAPACKE_zhesv_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                  @ByVal lapack_int nrhs, lapack_complex_double a,
                                  @ByVal lapack_int lda, lapack_int ipiv,
                                  lapack_complex_double b, @ByVal lapack_int ldb,
                                  lapack_complex_double work,
                                  @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_zhetrf_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                              lapack_complex_double a, @ByVal lapack_int lda,
                              lapack_int ipiv );


public static native @ByVal lapack_int LAPACKE_zhetrf_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                   lapack_complex_double a, @ByVal lapack_int lda,
                                   lapack_int ipiv,
                                   lapack_complex_double work,
                                   @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_zhetrs_aa( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                              @ByVal lapack_int nrhs, @Const lapack_complex_double a,
                              @ByVal lapack_int lda, @Const lapack_int ipiv,
                              lapack_complex_double b, @ByVal lapack_int ldb );


public static native @ByVal lapack_int LAPACKE_zhetrs_aa_work( int matrix_layout, @Cast("char") byte uplo, @ByVal lapack_int n,
                                   @ByVal lapack_int nrhs,
                                   @Const lapack_complex_double a,
                                   @ByVal lapack_int lda, @Const lapack_int ipiv,
                                   lapack_complex_double b, @ByVal lapack_int ldb,
                                   lapack_complex_double work,
                                   @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_cgemqr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_complex_float t,
                           @ByVal lapack_int tsize, lapack_complex_float c,
                           @ByVal lapack_int ldc );


public static native @ByVal lapack_int LAPACKE_cgemqr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_complex_float t,
                                @ByVal lapack_int tsize, lapack_complex_float c,
                                @ByVal lapack_int ldc, lapack_complex_float work,
                                @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_cgeqr( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                          lapack_complex_float a, @ByVal lapack_int lda,
                          lapack_complex_float t, @ByVal lapack_int tsize );


public static native @ByVal lapack_int LAPACKE_cgeqr_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                               lapack_complex_float a, @ByVal lapack_int lda,
                               lapack_complex_float t, @ByVal lapack_int tsize,
                               lapack_complex_float work, @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_dgemqr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const DoublePointer a, @ByVal lapack_int lda,
                           @Const DoublePointer t, @ByVal lapack_int tsize, DoublePointer c,
                           @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dgemqr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const DoubleBuffer a, @ByVal lapack_int lda,
                           @Const DoubleBuffer t, @ByVal lapack_int tsize, DoubleBuffer c,
                           @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dgemqr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const double[] a, @ByVal lapack_int lda,
                           @Const double[] t, @ByVal lapack_int tsize, double[] c,
                           @ByVal lapack_int ldc );


public static native @ByVal lapack_int LAPACKE_dgemqr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const DoublePointer a, @ByVal lapack_int lda,
                                @Const DoublePointer t, @ByVal lapack_int tsize,
                                DoublePointer c, @ByVal lapack_int ldc, DoublePointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgemqr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const DoubleBuffer a, @ByVal lapack_int lda,
                                @Const DoubleBuffer t, @ByVal lapack_int tsize,
                                DoubleBuffer c, @ByVal lapack_int ldc, DoubleBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgemqr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const double[] a, @ByVal lapack_int lda,
                                @Const double[] t, @ByVal lapack_int tsize,
                                double[] c, @ByVal lapack_int ldc, double[] work,
                                @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_dgeqr( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                          DoublePointer a, @ByVal lapack_int lda, DoublePointer t,
                          @ByVal lapack_int tsize );
public static native @ByVal lapack_int LAPACKE_dgeqr( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                          DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer t,
                          @ByVal lapack_int tsize );
public static native @ByVal lapack_int LAPACKE_dgeqr( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                          double[] a, @ByVal lapack_int lda, double[] t,
                          @ByVal lapack_int tsize );


public static native @ByVal lapack_int LAPACKE_dgeqr_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                               DoublePointer a, @ByVal lapack_int lda, DoublePointer t,
                               @ByVal lapack_int tsize, DoublePointer work,
                               @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgeqr_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                               DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer t,
                               @ByVal lapack_int tsize, DoubleBuffer work,
                               @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgeqr_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                               double[] a, @ByVal lapack_int lda, double[] t,
                               @ByVal lapack_int tsize, double[] work,
                               @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_sgemqr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const FloatPointer a, @ByVal lapack_int lda, @Const FloatPointer t,
                           @ByVal lapack_int tsize, FloatPointer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sgemqr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const FloatBuffer a, @ByVal lapack_int lda, @Const FloatBuffer t,
                           @ByVal lapack_int tsize, FloatBuffer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sgemqr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const float[] a, @ByVal lapack_int lda, @Const float[] t,
                           @ByVal lapack_int tsize, float[] c, @ByVal lapack_int ldc );


public static native @ByVal lapack_int LAPACKE_sgemqr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const FloatPointer a, @ByVal lapack_int lda,
                                @Const FloatPointer t, @ByVal lapack_int tsize,
                                FloatPointer c, @ByVal lapack_int ldc, FloatPointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgemqr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const FloatBuffer a, @ByVal lapack_int lda,
                                @Const FloatBuffer t, @ByVal lapack_int tsize,
                                FloatBuffer c, @ByVal lapack_int ldc, FloatBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgemqr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const float[] a, @ByVal lapack_int lda,
                                @Const float[] t, @ByVal lapack_int tsize,
                                float[] c, @ByVal lapack_int ldc, float[] work,
                                @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_sgeqr( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                          FloatPointer a, @ByVal lapack_int lda, FloatPointer t,
                          @ByVal lapack_int tsize );
public static native @ByVal lapack_int LAPACKE_sgeqr( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                          FloatBuffer a, @ByVal lapack_int lda, FloatBuffer t,
                          @ByVal lapack_int tsize );
public static native @ByVal lapack_int LAPACKE_sgeqr( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                          float[] a, @ByVal lapack_int lda, float[] t,
                          @ByVal lapack_int tsize );


public static native @ByVal lapack_int LAPACKE_sgeqr_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                               FloatPointer a, @ByVal lapack_int lda, FloatPointer t,
                               @ByVal lapack_int tsize, FloatPointer work,
                               @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgeqr_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                               FloatBuffer a, @ByVal lapack_int lda, FloatBuffer t,
                               @ByVal lapack_int tsize, FloatBuffer work,
                               @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgeqr_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                               float[] a, @ByVal lapack_int lda, float[] t,
                               @ByVal lapack_int tsize, float[] work,
                               @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_zgemqr( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_complex_double t,
                           @ByVal lapack_int tsize, lapack_complex_double c,
                           @ByVal lapack_int ldc );


public static native @ByVal lapack_int LAPACKE_zgemqr_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_complex_double t,
                                @ByVal lapack_int tsize, lapack_complex_double c,
                                @ByVal lapack_int ldc, lapack_complex_double work,
                                @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_zgeqr( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                          lapack_complex_double a, @ByVal lapack_int lda,
                          lapack_complex_double t, @ByVal lapack_int tsize );


public static native @ByVal lapack_int LAPACKE_zgeqr_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                               lapack_complex_double a, @ByVal lapack_int lda,
                               lapack_complex_double t, @ByVal lapack_int tsize,
                               lapack_complex_double work,
                               @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_cgelq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                          lapack_complex_float a, @ByVal lapack_int lda,
                          lapack_complex_float t, @ByVal lapack_int tsize );


public static native @ByVal lapack_int LAPACKE_cgelq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                               lapack_complex_float a, @ByVal lapack_int lda,
                               lapack_complex_float t, @ByVal lapack_int tsize,
                               lapack_complex_float work, @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_cgemlq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const lapack_complex_float a, @ByVal lapack_int lda,
                           @Const lapack_complex_float t, @ByVal lapack_int tsize,
                           lapack_complex_float c, @ByVal lapack_int ldc );


public static native @ByVal lapack_int LAPACKE_cgemlq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const lapack_complex_float a, @ByVal lapack_int lda,
                                @Const lapack_complex_float t,
                                @ByVal lapack_int tsize, lapack_complex_float c,
                                @ByVal lapack_int ldc, lapack_complex_float work,
                                @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_dgelq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                          DoublePointer a, @ByVal lapack_int lda, DoublePointer t,
                          @ByVal lapack_int tsize );
public static native @ByVal lapack_int LAPACKE_dgelq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                          DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer t,
                          @ByVal lapack_int tsize );
public static native @ByVal lapack_int LAPACKE_dgelq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                          double[] a, @ByVal lapack_int lda, double[] t,
                          @ByVal lapack_int tsize );


public static native @ByVal lapack_int LAPACKE_dgelq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                               DoublePointer a, @ByVal lapack_int lda, DoublePointer t,
                               @ByVal lapack_int tsize, DoublePointer work,
                               @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgelq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                               DoubleBuffer a, @ByVal lapack_int lda, DoubleBuffer t,
                               @ByVal lapack_int tsize, DoubleBuffer work,
                               @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgelq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                               double[] a, @ByVal lapack_int lda, double[] t,
                               @ByVal lapack_int tsize, double[] work,
                               @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_dgemlq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const DoublePointer a, @ByVal lapack_int lda, @Const DoublePointer t,
                           @ByVal lapack_int tsize, DoublePointer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dgemlq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const DoubleBuffer a, @ByVal lapack_int lda, @Const DoubleBuffer t,
                           @ByVal lapack_int tsize, DoubleBuffer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_dgemlq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const double[] a, @ByVal lapack_int lda, @Const double[] t,
                           @ByVal lapack_int tsize, double[] c, @ByVal lapack_int ldc );


public static native @ByVal lapack_int LAPACKE_dgemlq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const DoublePointer a, @ByVal lapack_int lda,
                                @Const DoublePointer t, @ByVal lapack_int tsize, DoublePointer c,
                                @ByVal lapack_int ldc, DoublePointer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgemlq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const DoubleBuffer a, @ByVal lapack_int lda,
                                @Const DoubleBuffer t, @ByVal lapack_int tsize, DoubleBuffer c,
                                @ByVal lapack_int ldc, DoubleBuffer work,
                                @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgemlq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const double[] a, @ByVal lapack_int lda,
                                @Const double[] t, @ByVal lapack_int tsize, double[] c,
                                @ByVal lapack_int ldc, double[] work,
                                @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_sgelq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                          FloatPointer a, @ByVal lapack_int lda, FloatPointer t,
                          @ByVal lapack_int tsize );
public static native @ByVal lapack_int LAPACKE_sgelq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                          FloatBuffer a, @ByVal lapack_int lda, FloatBuffer t,
                          @ByVal lapack_int tsize );
public static native @ByVal lapack_int LAPACKE_sgelq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                          float[] a, @ByVal lapack_int lda, float[] t,
                          @ByVal lapack_int tsize );


public static native @ByVal lapack_int LAPACKE_sgelq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                               FloatPointer a, @ByVal lapack_int lda, FloatPointer t,
                               @ByVal lapack_int tsize, FloatPointer work,
                               @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgelq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                               FloatBuffer a, @ByVal lapack_int lda, FloatBuffer t,
                               @ByVal lapack_int tsize, FloatBuffer work,
                               @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgelq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                               float[] a, @ByVal lapack_int lda, float[] t,
                               @ByVal lapack_int tsize, float[] work,
                               @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_sgemlq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const FloatPointer a, @ByVal lapack_int lda, @Const FloatPointer t,
                           @ByVal lapack_int tsize, FloatPointer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sgemlq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const FloatBuffer a, @ByVal lapack_int lda, @Const FloatBuffer t,
                           @ByVal lapack_int tsize, FloatBuffer c, @ByVal lapack_int ldc );
public static native @ByVal lapack_int LAPACKE_sgemlq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const float[] a, @ByVal lapack_int lda, @Const float[] t,
                           @ByVal lapack_int tsize, float[] c, @ByVal lapack_int ldc );


public static native @ByVal lapack_int LAPACKE_sgemlq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const FloatPointer a, @ByVal lapack_int lda, @Const FloatPointer t,
                                @ByVal lapack_int tsize, FloatPointer c, @ByVal lapack_int ldc,
                                FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgemlq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const FloatBuffer a, @ByVal lapack_int lda, @Const FloatBuffer t,
                                @ByVal lapack_int tsize, FloatBuffer c, @ByVal lapack_int ldc,
                                FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgemlq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const float[] a, @ByVal lapack_int lda, @Const float[] t,
                                @ByVal lapack_int tsize, float[] c, @ByVal lapack_int ldc,
                                float[] work, @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_zgelq( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                          lapack_complex_double a, @ByVal lapack_int lda,
                          lapack_complex_double t, @ByVal lapack_int tsize );


public static native @ByVal lapack_int LAPACKE_zgelq_work( int matrix_layout, @ByVal lapack_int m, @ByVal lapack_int n,
                               lapack_complex_double a, @ByVal lapack_int lda,
                               lapack_complex_double t, @ByVal lapack_int tsize,
                               lapack_complex_double work, @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_zgemlq( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                           @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                           @Const lapack_complex_double a, @ByVal lapack_int lda,
                           @Const lapack_complex_double t, @ByVal lapack_int tsize,
                           lapack_complex_double c, @ByVal lapack_int ldc );


public static native @ByVal lapack_int LAPACKE_zgemlq_work( int matrix_layout, @Cast("char") byte side, @Cast("char") byte trans,
                                @ByVal lapack_int m, @ByVal lapack_int n, @ByVal lapack_int k,
                                @Const lapack_complex_double a, @ByVal lapack_int lda,
                                @Const lapack_complex_double t,
                                @ByVal lapack_int tsize, lapack_complex_double c,
                                @ByVal lapack_int ldc, lapack_complex_double work,
                                @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_cgetsls( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_float a, @ByVal lapack_int lda,
                            lapack_complex_float b, @ByVal lapack_int ldb );


public static native @ByVal lapack_int LAPACKE_cgetsls_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_float a, @ByVal lapack_int lda,
                                 lapack_complex_float b, @ByVal lapack_int ldb,
                                 lapack_complex_float work, @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_dgetsls( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, DoublePointer a,
                            @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgetsls( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, DoubleBuffer a,
                            @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_dgetsls( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, double[] a,
                            @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb );


public static native @ByVal lapack_int LAPACKE_dgetsls_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, DoublePointer a,
                                 @ByVal lapack_int lda, DoublePointer b, @ByVal lapack_int ldb,
                                 DoublePointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgetsls_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, DoubleBuffer a,
                                 @ByVal lapack_int lda, DoubleBuffer b, @ByVal lapack_int ldb,
                                 DoubleBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_dgetsls_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, double[] a,
                                 @ByVal lapack_int lda, double[] b, @ByVal lapack_int ldb,
                                 double[] work, @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_sgetsls( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatPointer a,
                            @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgetsls( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatBuffer a,
                            @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb );
public static native @ByVal lapack_int LAPACKE_sgetsls( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs, float[] a,
                            @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb );


public static native @ByVal lapack_int LAPACKE_sgetsls_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatPointer a,
                                 @ByVal lapack_int lda, FloatPointer b, @ByVal lapack_int ldb,
                                 FloatPointer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgetsls_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, FloatBuffer a,
                                 @ByVal lapack_int lda, FloatBuffer b, @ByVal lapack_int ldb,
                                 FloatBuffer work, @ByVal lapack_int lwork );
public static native @ByVal lapack_int LAPACKE_sgetsls_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs, float[] a,
                                 @ByVal lapack_int lda, float[] b, @ByVal lapack_int ldb,
                                 float[] work, @ByVal lapack_int lwork );


public static native @ByVal lapack_int LAPACKE_zgetsls( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                            @ByVal lapack_int n, @ByVal lapack_int nrhs,
                            lapack_complex_double a, @ByVal lapack_int lda,
                            lapack_complex_double b, @ByVal lapack_int ldb );


public static native @ByVal lapack_int LAPACKE_zgetsls_work( int matrix_layout, @Cast("char") byte trans, @ByVal lapack_int m,
                                 @ByVal lapack_int n, @ByVal lapack_int nrhs,
                                 lapack_complex_double a, @ByVal lapack_int lda,
                                 lapack_complex_double b, @ByVal lapack_int ldb,
                                 lapack_complex_double work,
                                 @ByVal lapack_int lwork );


// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif /* _MKL_LAPACKE_H_ */


// Parsed from mkl_dss.h

/*******************************************************************************
* Copyright 2004-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
*   Content:
*           Intel(R) Math Kernel Library (Intel(R) MKL) DSS C header file
*
*           Contains main datatypes, prototypes and constants definition
*
********************************************************************************
*/
// #if !defined( __MKL_DSS_H )

// #define __MKL_DSS_H

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #include "mkl_types.h"
/*
** Basic data types
*/

@Namespace @Name("void") @Opaque public static class _MKL_DSS_HANDLE_t extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public _MKL_DSS_HANDLE_t() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public _MKL_DSS_HANDLE_t(Pointer p) { super(p); }
}
/*
** _INTEGER_t will be deprecated
*/
public static final int _INTEGER_t = MKL_INT;

// #if !defined( _WIN64 )
// #else
// #endif
public static native @MemberGetter int _DoubleComplexType();
public static final int _DoubleComplexType = _DoubleComplexType();

/*
** MKL_DSS_DEFAULTS
*/

public static final int MKL_DSS_DEFAULTS =   0;



/*
** Out-of-core level option definitions
*/

public static final int MKL_DSS_OOC_VARIABLE = 1024;
public static final int MKL_DSS_OOC_STRONG =   2048;

/*
** Refinement steps on / off
*/

public static final int MKL_DSS_REFINEMENT_OFF = 4096;
public static final int MKL_DSS_REFINEMENT_ON =  8192;

/*
** Solver step's substitution
*/

public static final int MKL_DSS_FORWARD_SOLVE =		16384;
public static final int MKL_DSS_DIAGONAL_SOLVE =		32768;
public static final int MKL_DSS_BACKWARD_SOLVE =		49152;
public static final int MKL_DSS_TRANSPOSE_SOLVE =		262144;
public static final int MKL_DSS_CONJUGATE_SOLVE =		524288;

/*
** Single precision
*/

public static final int MKL_DSS_SINGLE_PRECISION =		65536;

/*
** Zero-based indexing
*/

public static final int MKL_DSS_ZERO_BASED_INDEXING =		131072;

/*
** Message level option definitions
*/

public static final int MKL_DSS_MSG_LVL_SUCCESS =	-2147483647;
public static final int MKL_DSS_MSG_LVL_DEBUG =  	-2147483646;
public static final int MKL_DSS_MSG_LVL_INFO =   	-2147483645;
public static final int MKL_DSS_MSG_LVL_WARNING =	-2147483644;
public static final int MKL_DSS_MSG_LVL_ERROR =  	-2147483643;
public static final int MKL_DSS_MSG_LVL_FATAL =  	-2147483642;

/*
** Termination level option definitions
*/

public static final int MKL_DSS_TERM_LVL_SUCCESS =	1073741832;
public static final int MKL_DSS_TERM_LVL_DEBUG =  	1073741840;
public static final int MKL_DSS_TERM_LVL_INFO =   	1073741848;
public static final int MKL_DSS_TERM_LVL_WARNING =	1073741856;
public static final int MKL_DSS_TERM_LVL_ERROR =  	1073741864;
public static final int MKL_DSS_TERM_LVL_FATAL =  	1073741872;

/*
** Structure option definitions
*/

public static final int MKL_DSS_SYMMETRIC =                     536870976;
public static final int MKL_DSS_SYMMETRIC_STRUCTURE =           536871040;
public static final int MKL_DSS_NON_SYMMETRIC =                 536871104;
public static final int MKL_DSS_SYMMETRIC_COMPLEX =             536871168;
public static final int MKL_DSS_SYMMETRIC_STRUCTURE_COMPLEX =   536871232;
public static final int MKL_DSS_NON_SYMMETRIC_COMPLEX =         536871296;

/*
** Reordering option definitions
*/

public static final int MKL_DSS_AUTO_ORDER =   	        268435520;
public static final int MKL_DSS_MY_ORDER =     	        268435584;
public static final int MKL_DSS_OPTION1_ORDER =	        268435648;
public static final int MKL_DSS_GET_ORDER =     	        268435712;
public static final int MKL_DSS_METIS_ORDER =	        268435776;
public static final int MKL_DSS_METIS_OPENMP_ORDER =	268435840;

/*
** Factorization option definitions
*/

public static final int MKL_DSS_POSITIVE_DEFINITE =          	134217792;
public static final int MKL_DSS_INDEFINITE =                 	134217856;
public static final int MKL_DSS_HERMITIAN_POSITIVE_DEFINITE =	134217920;
public static final int MKL_DSS_HERMITIAN_INDEFINITE =       	134217984;

/*
** Return status values
*/

public static final int MKL_DSS_SUCCESS =        	0;
public static final int MKL_DSS_ZERO_PIVOT =     	-1;
public static final int MKL_DSS_OUT_OF_MEMORY =  	-2;
public static final int MKL_DSS_FAILURE =        	-3;
public static final int MKL_DSS_ROW_ERR =        	-4;
public static final int MKL_DSS_COL_ERR =        	-5;
public static final int MKL_DSS_TOO_FEW_VALUES = 	-6;
public static final int MKL_DSS_TOO_MANY_VALUES =	-7;
public static final int MKL_DSS_NOT_SQUARE =     	-8;
public static final int MKL_DSS_STATE_ERR =      	-9;
public static final int MKL_DSS_INVALID_OPTION = 	-10;
public static final int MKL_DSS_OPTION_CONFLICT =	-11;
public static final int MKL_DSS_MSG_LVL_ERR =    	-12;
public static final int MKL_DSS_TERM_LVL_ERR =   	-13;
public static final int MKL_DSS_STRUCTURE_ERR =  	-14;
public static final int MKL_DSS_REORDER_ERR =    	-15;
public static final int MKL_DSS_VALUES_ERR =     	-16;
public static final int MKL_DSS_STATISTICS_INVALID_MATRIX =    	-17;
public static final int MKL_DSS_STATISTICS_INVALID_STATE =    	-18;
public static final int MKL_DSS_STATISTICS_INVALID_STRING =    	-19;
public static final int MKL_DSS_REORDER1_ERR =    -20;
public static final int MKL_DSS_PREORDER_ERR =    -21;
public static final int MKL_DSS_DIAG_ERR =        -22;
public static final int MKL_DSS_I32BIT_ERR =      -23;
public static final int MKL_DSS_OOC_MEM_ERR =     -24;
public static final int MKL_DSS_OOC_OC_ERR =      -25;
public static final int MKL_DSS_OOC_RW_ERR =      -26;

/*
** Function prototypes for DSS routines
*/

public static native @ByVal MKL_INT dss_create_(@ByPtrPtr _MKL_DSS_HANDLE_t arg0,
	 @Const({false, true}) MKL_INT arg1);
public static native @ByVal MKL_INT dss_define_structure_(@ByPtrPtr _MKL_DSS_HANDLE_t arg0,
	 @Const({false, true}) MKL_INT arg1, @Const({false, true}) MKL_INT arg2, @Const({false, true}) MKL_INT arg3,
	 @Const({false, true}) MKL_INT arg4, @Const({false, true}) MKL_INT arg5, @Const({false, true}) MKL_INT arg6);
public static native @ByVal MKL_INT dss_reorder_(@ByPtrPtr _MKL_DSS_HANDLE_t arg0, @Const({false, true}) MKL_INT arg1,
	 @Const({false, true}) MKL_INT arg2);
public static native @ByVal MKL_INT dss_factor_real_(@ByPtrPtr _MKL_DSS_HANDLE_t arg0,
	 @Const({false, true}) MKL_INT arg1, @Const({false, true}) Pointer arg2);
public static native @ByVal MKL_INT dss_factor_complex_(@ByPtrPtr _MKL_DSS_HANDLE_t arg0,
	 @Const({false, true}) MKL_INT arg1, @Const({false, true}) Pointer arg2);
public static native @ByVal MKL_INT dss_solve_real_(@ByPtrPtr _MKL_DSS_HANDLE_t arg0,
	 @Const({false, true}) MKL_INT arg1, @Const({false, true}) Pointer arg2, @Const({false, true}) MKL_INT arg3,
	 Pointer arg4);
public static native @ByVal MKL_INT dss_solve_complex_(@ByPtrPtr _MKL_DSS_HANDLE_t arg0,
	 @Const({false, true}) MKL_INT arg1, @Const({false, true}) Pointer arg2, @Const({false, true}) MKL_INT arg3,
	 Pointer arg4);
public static native @ByVal MKL_INT dss_statistics_( @ByPtrPtr _MKL_DSS_HANDLE_t arg0, @Const({false, true}) MKL_INT arg1,
	 @Cast("_CHARACTER_STR_t const*") BytePointer arg2, @Cast("_DOUBLE_PRECISION_t*") DoublePointer arg3);
public static native @ByVal MKL_INT dss_statistics_( @ByPtrPtr _MKL_DSS_HANDLE_t arg0, @Const({false, true}) MKL_INT arg1,
	 @Cast("_CHARACTER_STR_t const*") ByteBuffer arg2, @Cast("_DOUBLE_PRECISION_t*") DoubleBuffer arg3);
public static native @ByVal MKL_INT dss_statistics_( @ByPtrPtr _MKL_DSS_HANDLE_t arg0, @Const({false, true}) MKL_INT arg1,
	 @Cast("_CHARACTER_STR_t const*") byte[] arg2, @Cast("_DOUBLE_PRECISION_t*") double[] arg3);
public static native @ByVal MKL_INT dss_delete_(@Const({false, true}) @ByPtrPtr _MKL_DSS_HANDLE_t arg0,
	 @Const({false, true}) MKL_INT arg1);

/*
** In order to promote portability and to avoid having most users deal with these issues, the C header
** file mkl_dss.h provides a set of macros and type definitions that are intended to hide the
** inter-language calling conventions and provide an interface to the DSS that appears natural for
** C/C++.
*/

// #define dss_create(handle, opt) dss_create_(&(handle), &(opt))
// #define dss_define_structure(handle, opt, rowIndex, nRows, rCols,
// 	 columns, nNonZeros) dss_define_structure_(&(handle), &(opt),
// 	 (rowIndex), &(nRows), &(rCols), (columns), &(nNonZeros))
// #define dss_reorder(handle, opt, perm) dss_reorder_(&(handle), &(opt),
// 	 (perm))
// #define dss_factor_real(handle, opt,
// 	 rValues) dss_factor_real_(&(handle), &(opt), (rValues))
// #define dss_factor_complex(handle, opt,
// 	 rValues) dss_factor_complex_(&(handle), &(opt), (rValues))
// #define dss_solve_real(handle, opt, rRhsValues, nRhs,
// 	 rSolValues) dss_solve_real_(&(handle), &(opt), (rRhsValues), &(nRhs),
// 	 (rSolValues))
// #define dss_solve_complex(handle, opt, rRhsValues, nRhs,
// 	 rSolValues) dss_solve_complex_(&(handle), &(opt), (rRhsValues),
// 	 &(nRhs), (rSolValues))
// #define dss_statistics(handle, opt, stat, ret)
// 	 dss_statistics_(&(handle), &(opt), (stat), (ret))
// #define dss_delete(handle, opt) dss_delete_(&(handle), &(opt))


// #define DSS_CREATE(handle, opt) dss_create_(&(handle), &(opt))
// #define DSS_DEFINE_STRUCTURE(handle, opt, rowIndex, nRows, rCols,
// 	 columns, nNonZeros) dss_define_structure_(&(handle), &(opt),
// 	 (rowIndex), &(nRows), &(rCols), (columns), &(nNonZeros))
// #define DSS_REORDER(handle, opt, perm) dss_reorder_(&(handle), &(opt),
// 	 (perm))
// #define DSS_FACTOR_REAL(handle, opt,
// 	 rValues) dss_factor_real_(&(handle), &(opt), (rValues))
// #define DSS_FACTOR_COMPLEX(handle, opt,
// 	 rValues) dss_factor_complex_(&(handle), &(opt), (rValues))
// #define DSS_SOLVE_REAL(handle, opt, rRhsValues, nRhs,
// 	 rSolValues) dss_solve_real_(&(handle), &(opt), (rRhsValues), &(nRhs),
// 	 (rSolValues))
// #define DSS_SOLVE_COMPLEX(handle, opt, rRhsValues, nRhs,
// 	 rSolValues) dss_solve_complex_(&(handle), &(opt), (rRhsValues),
// 	 &(nRhs), (rSolValues))
// #define DSS_STATISTICS(handle, opt, stat, ret)
// 	 dss_statistics_(&(handle), &(opt), (stat), (ret))
// #define DSS_DELETE(handle, opt) dss_delete_(&(handle), &(opt))


// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif


// Parsed from mkl_pardiso.h

/*******************************************************************************
* Copyright 2004-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
*   Content: 
*           Intel(R) Math Kernel Library (Intel(R) MKL) PARDISO C header file
*
*           Contains interface to PARDISO.
*
********************************************************************************
*/
// #if !defined( __MKL_PARDISO_H )

// #define __MKL_PARDISO_H

// #include "mkl_dss.h"

// #ifdef __cplusplus
// #endif /* __cplusplus */

public static native void pardiso( _MKL_DSS_HANDLE_t arg0,    @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3,
                   @Const MKL_INT arg4, @Const MKL_INT arg5, @Const Pointer arg6,    @Const MKL_INT arg7,
                   @Const MKL_INT arg8, MKL_INT arg9, @Const MKL_INT arg10, MKL_INT arg11,
                   @Const MKL_INT arg12, Pointer arg13,    Pointer arg14,          MKL_INT arg15 );

public static native void PARDISO( _MKL_DSS_HANDLE_t arg0,    @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3,
                   @Const MKL_INT arg4, @Const MKL_INT arg5, @Const Pointer arg6,    @Const MKL_INT arg7,
                   @Const MKL_INT arg8, MKL_INT arg9, @Const MKL_INT arg10, MKL_INT arg11,
                   @Const MKL_INT arg12, Pointer arg13,    Pointer arg14,          MKL_INT arg15 );

public static native void pardisoinit( _MKL_DSS_HANDLE_t arg0, @Const MKL_INT arg1, MKL_INT arg2 );

public static native void PARDISOINIT( _MKL_DSS_HANDLE_t arg0, @Const MKL_INT arg1, MKL_INT arg2 );

public static native void pardiso_handle_store( _MKL_DSS_HANDLE_t arg0, @Cast("const char*") BytePointer arg1, _INTEGER_t arg2);
public static native void pardiso_handle_store( _MKL_DSS_HANDLE_t arg0, String arg1, _INTEGER_t arg2);
public static native void PARDISO_HANDLE_STORE( _MKL_DSS_HANDLE_t arg0, @Cast("const char*") BytePointer arg1, _INTEGER_t arg2);
public static native void PARDISO_HANDLE_STORE( _MKL_DSS_HANDLE_t arg0, String arg1, _INTEGER_t arg2);

public static native void pardiso_handle_restore( _MKL_DSS_HANDLE_t arg0, @Cast("const char*") BytePointer arg1, _INTEGER_t arg2);
public static native void pardiso_handle_restore( _MKL_DSS_HANDLE_t arg0, String arg1, _INTEGER_t arg2);
public static native void PARDISO_HANDLE_RESTORE( _MKL_DSS_HANDLE_t arg0, @Cast("const char*") BytePointer arg1, _INTEGER_t arg2);
public static native void PARDISO_HANDLE_RESTORE( _MKL_DSS_HANDLE_t arg0, String arg1, _INTEGER_t arg2);

public static native void pardiso_handle_delete( @Cast("const char*") BytePointer arg0, _INTEGER_t arg1);
public static native void pardiso_handle_delete( String arg0, _INTEGER_t arg1);
public static native void PARDISO_HANDLE_DELETE( @Cast("const char*") BytePointer arg0, _INTEGER_t arg1);
public static native void PARDISO_HANDLE_DELETE( String arg0, _INTEGER_t arg1);

/*
*  Note: The pardiso_64 interface is not supported on IA-32 architecture.
*        If called on IA-32, error = -12 is returned.
*/

public static native void pardiso_64( _MKL_DSS_HANDLE_t arg0,       @Const LongPointer arg1, @Const LongPointer arg2, @Const LongPointer arg3,
                   @Const LongPointer arg4, @Const LongPointer arg5, @Const Pointer arg6,          @Const LongPointer arg7,
                   @Const LongPointer arg8, LongPointer arg9, @Const LongPointer arg10, LongPointer arg11,
                   @Const LongPointer arg12, Pointer arg13,                Pointer arg14,                LongPointer arg15 );
public static native void pardiso_64( _MKL_DSS_HANDLE_t arg0,       @Const LongBuffer arg1, @Const LongBuffer arg2, @Const LongBuffer arg3,
                   @Const LongBuffer arg4, @Const LongBuffer arg5, @Const Pointer arg6,          @Const LongBuffer arg7,
                   @Const LongBuffer arg8, LongBuffer arg9, @Const LongBuffer arg10, LongBuffer arg11,
                   @Const LongBuffer arg12, Pointer arg13,                Pointer arg14,                LongBuffer arg15 );
public static native void pardiso_64( _MKL_DSS_HANDLE_t arg0,       @Const long[] arg1, @Const long[] arg2, @Const long[] arg3,
                   @Const long[] arg4, @Const long[] arg5, @Const Pointer arg6,          @Const long[] arg7,
                   @Const long[] arg8, long[] arg9, @Const long[] arg10, long[] arg11,
                   @Const long[] arg12, Pointer arg13,                Pointer arg14,                long[] arg15 );

public static native void PARDISO_64( _MKL_DSS_HANDLE_t arg0,       @Const LongPointer arg1, @Const LongPointer arg2, @Const LongPointer arg3,
                   @Const LongPointer arg4, @Const LongPointer arg5, @Const Pointer arg6,          @Const LongPointer arg7,
                   @Const LongPointer arg8, LongPointer arg9, @Const LongPointer arg10, LongPointer arg11,
                   @Const LongPointer arg12, Pointer arg13,                Pointer arg14,                LongPointer arg15 );
public static native void PARDISO_64( _MKL_DSS_HANDLE_t arg0,       @Const LongBuffer arg1, @Const LongBuffer arg2, @Const LongBuffer arg3,
                   @Const LongBuffer arg4, @Const LongBuffer arg5, @Const Pointer arg6,          @Const LongBuffer arg7,
                   @Const LongBuffer arg8, LongBuffer arg9, @Const LongBuffer arg10, LongBuffer arg11,
                   @Const LongBuffer arg12, Pointer arg13,                Pointer arg14,                LongBuffer arg15 );
public static native void PARDISO_64( _MKL_DSS_HANDLE_t arg0,       @Const long[] arg1, @Const long[] arg2, @Const long[] arg3,
                   @Const long[] arg4, @Const long[] arg5, @Const Pointer arg6,          @Const long[] arg7,
                   @Const long[] arg8, long[] arg9, @Const long[] arg10, long[] arg11,
                   @Const long[] arg12, Pointer arg13,                Pointer arg14,                long[] arg15 );

public static native void pardiso_handle_store_64( _MKL_DSS_HANDLE_t arg0, @Cast("const char*") BytePointer arg1, _INTEGER_t arg2);
public static native void pardiso_handle_store_64( _MKL_DSS_HANDLE_t arg0, String arg1, _INTEGER_t arg2);
public static native void PARDISO_HANDLE_STORE_64( _MKL_DSS_HANDLE_t arg0, @Cast("const char*") BytePointer arg1, _INTEGER_t arg2);
public static native void PARDISO_HANDLE_STORE_64( _MKL_DSS_HANDLE_t arg0, String arg1, _INTEGER_t arg2);

public static native void pardiso_handle_restore_64( _MKL_DSS_HANDLE_t arg0, @Cast("const char*") BytePointer arg1, _INTEGER_t arg2);
public static native void pardiso_handle_restore_64( _MKL_DSS_HANDLE_t arg0, String arg1, _INTEGER_t arg2);
public static native void PARDISO_HANDLE_RESTORE_64( _MKL_DSS_HANDLE_t arg0, @Cast("const char*") BytePointer arg1, _INTEGER_t arg2);
public static native void PARDISO_HANDLE_RESTORE_64( _MKL_DSS_HANDLE_t arg0, String arg1, _INTEGER_t arg2);

public static native void pardiso_handle_delete_64( @Cast("const char*") BytePointer arg0, _INTEGER_t arg1);
public static native void pardiso_handle_delete_64( String arg0, _INTEGER_t arg1);
public static native void PARDISO_HANDLE_DELETE_64( @Cast("const char*") BytePointer arg0, _INTEGER_t arg1);
public static native void PARDISO_HANDLE_DELETE_64( String arg0, _INTEGER_t arg1);

/** enum PARDISO_ENV_PARAM */
public static final int
       PARDISO_OOC_FILE_NAME = 1;

/* Error classes */
public static final int PARDISO_NO_ERROR =                 0;
public static final int PARDISO_UNIMPLEMENTED =         -101;
public static final int PARDISO_NULL_HANDLE =           -102;
public static final int PARDISO_MEMORY_ERROR =          -103;

public static native @ByVal MKL_INT pardiso_getenv( _MKL_DSS_HANDLE_t arg0, @Cast("const PARDISO_ENV_PARAM*") IntPointer arg1, @Cast("char*") BytePointer arg2 );
public static native @ByVal MKL_INT pardiso_getenv( _MKL_DSS_HANDLE_t arg0, @Cast("const PARDISO_ENV_PARAM*") IntBuffer arg1, @Cast("char*") ByteBuffer arg2 );
public static native @ByVal MKL_INT pardiso_getenv( _MKL_DSS_HANDLE_t arg0, @Cast("const PARDISO_ENV_PARAM*") int[] arg1, @Cast("char*") byte[] arg2 );
public static native @ByVal MKL_INT PARDISO_GETENV( _MKL_DSS_HANDLE_t arg0, @Cast("const PARDISO_ENV_PARAM*") IntPointer arg1, @Cast("char*") BytePointer arg2 );
public static native @ByVal MKL_INT PARDISO_GETENV( _MKL_DSS_HANDLE_t arg0, @Cast("const PARDISO_ENV_PARAM*") IntBuffer arg1, @Cast("char*") ByteBuffer arg2 );
public static native @ByVal MKL_INT PARDISO_GETENV( _MKL_DSS_HANDLE_t arg0, @Cast("const PARDISO_ENV_PARAM*") int[] arg1, @Cast("char*") byte[] arg2 );

public static native @ByVal MKL_INT pardiso_setenv( _MKL_DSS_HANDLE_t arg0, @Cast("const PARDISO_ENV_PARAM*") IntPointer arg1, @Cast("const char*") BytePointer arg2 );
public static native @ByVal MKL_INT pardiso_setenv( _MKL_DSS_HANDLE_t arg0, @Cast("const PARDISO_ENV_PARAM*") IntBuffer arg1, String arg2 );
public static native @ByVal MKL_INT pardiso_setenv( _MKL_DSS_HANDLE_t arg0, @Cast("const PARDISO_ENV_PARAM*") int[] arg1, @Cast("const char*") BytePointer arg2 );
public static native @ByVal MKL_INT pardiso_setenv( _MKL_DSS_HANDLE_t arg0, @Cast("const PARDISO_ENV_PARAM*") IntPointer arg1, String arg2 );
public static native @ByVal MKL_INT pardiso_setenv( _MKL_DSS_HANDLE_t arg0, @Cast("const PARDISO_ENV_PARAM*") IntBuffer arg1, @Cast("const char*") BytePointer arg2 );
public static native @ByVal MKL_INT pardiso_setenv( _MKL_DSS_HANDLE_t arg0, @Cast("const PARDISO_ENV_PARAM*") int[] arg1, String arg2 );
public static native @ByVal MKL_INT PARDISO_SETENV( _MKL_DSS_HANDLE_t arg0, @Cast("const PARDISO_ENV_PARAM*") IntPointer arg1, @Cast("const char*") BytePointer arg2 );
public static native @ByVal MKL_INT PARDISO_SETENV( _MKL_DSS_HANDLE_t arg0, @Cast("const PARDISO_ENV_PARAM*") IntBuffer arg1, String arg2 );
public static native @ByVal MKL_INT PARDISO_SETENV( _MKL_DSS_HANDLE_t arg0, @Cast("const PARDISO_ENV_PARAM*") int[] arg1, @Cast("const char*") BytePointer arg2 );
public static native @ByVal MKL_INT PARDISO_SETENV( _MKL_DSS_HANDLE_t arg0, @Cast("const PARDISO_ENV_PARAM*") IntPointer arg1, String arg2 );
public static native @ByVal MKL_INT PARDISO_SETENV( _MKL_DSS_HANDLE_t arg0, @Cast("const PARDISO_ENV_PARAM*") IntBuffer arg1, @Cast("const char*") BytePointer arg2 );
public static native @ByVal MKL_INT PARDISO_SETENV( _MKL_DSS_HANDLE_t arg0, @Cast("const PARDISO_ENV_PARAM*") int[] arg1, String arg2 );


/* Intel(R) MKL Progress routine */
// #ifndef _MKL_PARDISO_PIVOT_H_
// #define _MKL_PARDISO_PIVOT_H_
public static native int MKL_PARDISO_PIVOT( @Const DoublePointer aii, DoublePointer bii, @Const DoublePointer eps );
public static native int MKL_PARDISO_PIVOT( @Const DoubleBuffer aii, DoubleBuffer bii, @Const DoubleBuffer eps );
public static native int MKL_PARDISO_PIVOT( @Const double[] aii, double[] bii, @Const double[] eps );
public static native int MKL_PARDISO_PIVOT_( @Const DoublePointer aii, DoublePointer bii, @Const DoublePointer eps );
public static native int MKL_PARDISO_PIVOT_( @Const DoubleBuffer aii, DoubleBuffer bii, @Const DoubleBuffer eps );
public static native int MKL_PARDISO_PIVOT_( @Const double[] aii, double[] bii, @Const double[] eps );
public static native int mkl_pardiso_pivot( @Const DoublePointer aii, DoublePointer bii, @Const DoublePointer eps );
public static native int mkl_pardiso_pivot( @Const DoubleBuffer aii, DoubleBuffer bii, @Const DoubleBuffer eps );
public static native int mkl_pardiso_pivot( @Const double[] aii, double[] bii, @Const double[] eps );
public static native int mkl_pardiso_pivot_( @Const DoublePointer aii, DoublePointer bii, @Const DoublePointer eps );
public static native int mkl_pardiso_pivot_( @Const DoubleBuffer aii, DoubleBuffer bii, @Const DoubleBuffer eps );
public static native int mkl_pardiso_pivot_( @Const double[] aii, double[] bii, @Const double[] eps );
// #endif /* _MKL_PARDISO_PIVOT_H_ */

public static native void pardiso_getdiag( _MKL_DSS_HANDLE_t arg0, Pointer arg1,       Pointer arg2, @Const MKL_INT arg3, MKL_INT arg4  );


// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif


// Parsed from mkl_sparse_handle.h

/*******************************************************************************
* Copyright 2004-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
*   Content:
*           Intel(R) Math Kernel Library (Intel(R) MKL) DSS C header file
*
*           Contains more detailed information on internal datatypes and
*           constants used by DSS interface to PARDISO.
*
********************************************************************************
*/
// #ifndef __MKL_SPARSE_HANDLE_H
// #define __MKL_SPARSE_HANDLE_H

// #ifdef __cplusplus
// #endif

// #ifndef MKL_CALL_CONV
// #   if defined(_WIN32) & !defined(_WIN64)
// #       if defined(MKL_STDCALL)
public static final int MKL_CALL_CONV = __stdcall;
// #       else
// #       endif
// #   else
// #       define MKL_CALL_CONV
// #   endif
// #endif

/** enum sparse_matrix_indexing */
public static final int MKL_ZERO_BASED = 0, MKL_ONE_BASED = 1;
/** enum sparse_matrix_print_styles */
public static final int MKL_C_STYLE = 0, MKL_FORTRAN_STYLE = 1;
/** enum sparse_matrix_formats */
public static final int MKL_CSR = 0;
/** enum sparse_matrix_structures */
public static final int MKL_GENERAL_STRUCTURE = 0, MKL_UPPER_TRIANGULAR = 1, MKL_LOWER_TRIANGULAR = 2, MKL_STRUCTURAL_SYMMETRIC = 3;
/** enum sparse_matrix_message_levels */
public static final int MKL_NO_PRINT = 0, MKL_PRINT = 1;
/** enum sparse_checker_error_values */
public static final int MKL_SPARSE_CHECKER_SUCCESS = 0, MKL_SPARSE_CHECKER_NON_MONOTONIC = 21, MKL_SPARSE_CHECKER_OUT_OF_RANGE = 22, MKL_SPARSE_CHECKER_NONTRIANGULAR = 23, MKL_SPARSE_CHECKER_NONORDERED = 24;

public static class sparse_struct extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public sparse_struct() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public sparse_struct(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public sparse_struct(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public sparse_struct position(long position) {
        return (sparse_struct)super.position(position);
    }

    public native @ByRef MKL_INT n(); public native sparse_struct n(MKL_INT n);
    public native MKL_INT csr_ia(); public native sparse_struct csr_ia(MKL_INT csr_ia);
    public native MKL_INT csr_ja(); public native sparse_struct csr_ja(MKL_INT csr_ja);
    public native @ByRef MKL_INT check_result(int i); public native sparse_struct check_result(int i, MKL_INT check_result);
    @MemberGetter public native MKL_INT check_result();
    public native @Cast("sparse_matrix_indexing") int indexing(); public native sparse_struct indexing(int indexing);
    public native @Cast("sparse_matrix_structures") int matrix_structure(); public native sparse_struct matrix_structure(int matrix_structure);
    public native @Cast("sparse_matrix_formats") int matrix_format(); public native sparse_struct matrix_format(int matrix_format);
    public native @Cast("sparse_matrix_message_levels") int message_level(); public native sparse_struct message_level(int message_level);
    public native @Cast("sparse_matrix_print_styles") int print_style(); public native sparse_struct print_style(int print_style);
}

public static native void sparse_matrix_checker_init(sparse_struct arg0);
public static native @Cast("sparse_checker_error_values") int sparse_matrix_checker(sparse_struct arg0);

// #ifdef __cplusplus
// #endif

// #endif


// Parsed from mkl_service.h

/*******************************************************************************
* Copyright 1999-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
!  Content:
!      Intel(R) Math Kernel Library (Intel(R) MKL) interface for service routines
!******************************************************************************/

// #ifndef _MKL_SERVICE_H_
// #define _MKL_SERVICE_H_

// #include <stdlib.h>
// #include "mkl_types.h"

// #ifdef __cplusplus
// #endif /* __cplusplus */

public static native void MKL_Get_Version(MKLVersion ver); /* Returns information about the version of the Intel(R) MKL software */
public static final int mkl_get_version =             MKL_Get_Version;

public static native void MKL_Get_Version_String(@Cast("char*") BytePointer buffer, int len);
public static native void MKL_Get_Version_String(@Cast("char*") ByteBuffer buffer, int len);
public static native void MKL_Get_Version_String(@Cast("char*") byte[] buffer, int len); /* Returns a string that contains Intel(R) MKL library version information */
public static final int mkl_get_version_string =      MKL_Get_Version_String;

public static native void MKL_Free_Buffers(); /* Frees the memory allocated by the Intel(R) MKL Memory Allocator */
public static final int mkl_free_buffers =            MKL_Free_Buffers;

public static native void MKL_Thread_Free_Buffers(); /* Frees the memory allocated by the Intel(R) MKL Memory Allocator in the current thread only */
public static final int mkl_thread_free_buffers =     MKL_Thread_Free_Buffers;

public static native @ByVal MKL_INT64 MKL_Mem_Stat(IntPointer nbuffers);
public static native @ByVal MKL_INT64 MKL_Mem_Stat(IntBuffer nbuffers);
public static native @ByVal MKL_INT64 MKL_Mem_Stat(int[] nbuffers); /* Intel(R) MKL Memory Allocator statistical information. */
                                       /* Returns an amount of memory, allocated by the Intel(R) MKL Memory Allocator */
                                       /* in <nbuffers> buffers. */
public static final int mkl_mem_stat =                MKL_Mem_Stat;

public static final int MKL_PEAK_MEM_DISABLE =       0;
public static final int MKL_PEAK_MEM_ENABLE =        1;
public static final int MKL_PEAK_MEM_RESET =        -1;
public static final int MKL_PEAK_MEM =               2;
public static native @ByVal MKL_INT64 MKL_Peak_Mem_Usage(int reset); /* Returns the peak amount of memory, allocated by the Intel(R) MKL Memory Allocator */
public static final int mkl_peak_mem_usage =          MKL_Peak_Mem_Usage;

public static native Pointer MKL_malloc(@Cast("size_t") long size, int align); /* Allocates the aligned buffer */
public static final int mkl_malloc =                  MKL_malloc;

public static native Pointer MKL_calloc(@Cast("size_t") long num, @Cast("size_t") long size, int align); /* Allocates the aligned num*size - bytes memory buffer initialized by zeros */
public static final int mkl_calloc =                  MKL_calloc;

public static native Pointer MKL_realloc(Pointer ptr, @Cast("size_t") long size); /* Changes the size of memory buffer allocated by MKL_malloc/MKL_calloc */
public static final int mkl_realloc =                 MKL_realloc;

public static native void MKL_free(Pointer ptr); /* Frees the memory allocated by MKL_malloc() */
public static final int mkl_free =                    MKL_free;

public static native int MKL_Disable_Fast_MM(); /* Turns off the Intel(R) MKL Memory Allocator */
public static final int mkl_disable_fast_mm =        MKL_Disable_Fast_MM;

public static native void MKL_Get_Cpu_Clocks(@Cast("unsigned*") IntPointer arg0);
public static native void MKL_Get_Cpu_Clocks(@Cast("unsigned*") IntBuffer arg0);
public static native void MKL_Get_Cpu_Clocks(@Cast("unsigned*") int[] arg0); /* Gets CPU clocks */
public static final int mkl_get_cpu_clocks =          MKL_Get_Cpu_Clocks;

public static native double MKL_Get_Cpu_Frequency(); /* Gets CPU frequency in GHz */
public static final int mkl_get_cpu_frequency =       MKL_Get_Cpu_Frequency;

public static native double MKL_Get_Max_Cpu_Frequency(); /* Gets max CPU frequency in GHz */
public static final int mkl_get_max_cpu_frequency =   MKL_Get_Max_Cpu_Frequency;

public static native double MKL_Get_Clocks_Frequency(); /* Gets clocks frequency in GHz */
public static final int mkl_get_clocks_frequency =    MKL_Get_Clocks_Frequency;

public static native int MKL_Set_Num_Threads_Local(int nth);
public static final int mkl_set_num_threads_local =   MKL_Set_Num_Threads_Local;
public static native void MKL_Set_Num_Threads(int nth);
public static final int mkl_set_num_threads =         MKL_Set_Num_Threads;
public static native int MKL_Get_Max_Threads();
public static final int mkl_get_max_threads =         MKL_Get_Max_Threads;
public static native void MKL_Set_Num_Stripes(int nstripes);
public static final int mkl_set_num_stripes =         MKL_Set_Num_Stripes;
public static native int MKL_Get_Num_Stripes();
public static final int mkl_get_num_stripes =         MKL_Get_Num_Stripes;
public static native int MKL_Domain_Set_Num_Threads(int nth, int MKL_DOMAIN);
public static final int mkl_domain_set_num_threads =  MKL_Domain_Set_Num_Threads;
public static native int MKL_Domain_Get_Max_Threads(int MKL_DOMAIN);
public static final int mkl_domain_get_max_threads =  MKL_Domain_Get_Max_Threads;
public static native void MKL_Set_Dynamic(int bool_MKL_DYNAMIC);
public static final int mkl_set_dynamic =             MKL_Set_Dynamic;
public static native int MKL_Get_Dynamic();
public static final int mkl_get_dynamic =             MKL_Get_Dynamic;

/* Intel(R) MKL Progress routine */
// #ifndef _MKL_PROGRESS_H_
// #define _MKL_PROGRESS_H_
public static native int MKL_PROGRESS( IntPointer thread, IntPointer step, @Cast("char*") BytePointer stage, int lstage );
public static native int MKL_PROGRESS( IntBuffer thread, IntBuffer step, @Cast("char*") ByteBuffer stage, int lstage );
public static native int MKL_PROGRESS( int[] thread, int[] step, @Cast("char*") byte[] stage, int lstage );
public static native int MKL_PROGRESS_( IntPointer thread, IntPointer step, @Cast("char*") BytePointer stage, int lstage );
public static native int MKL_PROGRESS_( IntBuffer thread, IntBuffer step, @Cast("char*") ByteBuffer stage, int lstage );
public static native int MKL_PROGRESS_( int[] thread, int[] step, @Cast("char*") byte[] stage, int lstage );
public static native int mkl_progress( IntPointer thread, IntPointer step, @Cast("char*") BytePointer stage, int lstage );
public static native int mkl_progress( IntBuffer thread, IntBuffer step, @Cast("char*") ByteBuffer stage, int lstage );
public static native int mkl_progress( int[] thread, int[] step, @Cast("char*") byte[] stage, int lstage );
public static native int mkl_progress_( IntPointer thread, IntPointer step, @Cast("char*") BytePointer stage, int lstage );
public static native int mkl_progress_( IntBuffer thread, IntBuffer step, @Cast("char*") ByteBuffer stage, int lstage );
public static native int mkl_progress_( int[] thread, int[] step, @Cast("char*") byte[] stage, int lstage );
// #endif /* _MKL_PROGRESS_H_ */

public static native int MKL_Enable_Instructions(int arg0);
public static final int mkl_enable_instructions =    MKL_Enable_Instructions;
public static final int MKL_ENABLE_SSE4_2 =          0;
public static final int MKL_ENABLE_AVX =             1;
public static final int MKL_ENABLE_AVX2 =            2;
public static final int MKL_ENABLE_AVX512_MIC =      3;
public static final int MKL_ENABLE_AVX512 =          4;
public static final int MKL_ENABLE_AVX512_MIC_E1 =   5;
public static final int MKL_SINGLE_PATH_ENABLE =     0x0600;

/* Single Dynamic library interface */
public static final int MKL_INTERFACE_LP64 =          0;
public static final int MKL_INTERFACE_ILP64 =         1;
public static final int MKL_INTERFACE_GNU =           2;
public static native int MKL_Set_Interface_Layer(int code);
public static final int mkl_set_interface_layer =     MKL_Set_Interface_Layer;

/* Single Dynamic library threading */
public static final int MKL_THREADING_INTEL =         0;
public static final int MKL_THREADING_SEQUENTIAL =    1;
public static final int MKL_THREADING_PGI =           2;
public static final int MKL_THREADING_GNU =           3;
public static final int MKL_THREADING_TBB =           4;
public static native int MKL_Set_Threading_Layer(int code);
public static final int mkl_set_threading_layer =     MKL_Set_Threading_Layer;

public static class XerblaEntry extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    XerblaEntry(Pointer p) { super(p); }
    protected XerblaEntry() { allocate(); }
    private native void allocate();
    public native void call(@Cast("const char*") BytePointer Name, @Const IntPointer Num, int Len);
}
public static native XerblaEntry mkl_set_xerbla(XerblaEntry xerbla);

public static class ProgressEntry extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    ProgressEntry(Pointer p) { super(p); }
    protected ProgressEntry() { allocate(); }
    private native void allocate();
    public native int call(IntPointer thread, IntPointer step, @Cast("char*") BytePointer stage, int stage_len);
}
public static native ProgressEntry mkl_set_progress(ProgressEntry progress);

public static class PardisopivotEntry extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    PardisopivotEntry(Pointer p) { super(p); }
    protected PardisopivotEntry() { allocate(); }
    private native void allocate();
    public native int call(DoublePointer aii, DoublePointer bii, DoublePointer eps);
}
public static native PardisopivotEntry mkl_set_pardiso_pivot(PardisopivotEntry pardiso_pivot);

/* MIC service routines */
public static native int MKL_MIC_Enable();
public static final int mkl_mic_enable =              MKL_MIC_Enable;
public static native int MKL_MIC_Disable();
public static final int mkl_mic_disable =             MKL_MIC_Disable;

public static native int MKL_MIC_Get_Device_Count();
public static final int mkl_mic_get_device_count = MKL_MIC_Get_Device_Count;

/** enum MKL_MIC_TARGET_TYPE */
public static final int
    MKL_TARGET_NONE = 0, /* Undefine target */
    MKL_TARGET_HOST = 1, /* Host used as target */
    MKL_TARGET_MIC  = 2;  /* MIC target */

public static final int MKL_MIC_DEFAULT_TARGET_TYPE = MKL_TARGET_MIC;
public static final int MKL_MIC_DEFAULT_TARGET_NUMBER = 0;
public static final double MKL_MIC_AUTO_WORKDIVISION =   -1.0;
public static final double MKL_MPI_PPN = -1.0;

public static native int MKL_MIC_Get_Cpuinfo(@Cast("MKL_MIC_TARGET_TYPE") int target_type, int target_number, IntPointer ncores, IntPointer nthreads, DoublePointer freq );
public static native int MKL_MIC_Get_Cpuinfo(@Cast("MKL_MIC_TARGET_TYPE") int target_type, int target_number, IntBuffer ncores, IntBuffer nthreads, DoubleBuffer freq );
public static native int MKL_MIC_Get_Cpuinfo(@Cast("MKL_MIC_TARGET_TYPE") int target_type, int target_number, int[] ncores, int[] nthreads, double[] freq );
public static final int mkl_mic_get_cpuinfo = MKL_MIC_Get_Cpuinfo;

public static native int MKL_MIC_Get_Meminfo(@Cast("MKL_MIC_TARGET_TYPE") int target_type, int target_number, IntPointer totalmem, IntPointer freemem);
public static native int MKL_MIC_Get_Meminfo(@Cast("MKL_MIC_TARGET_TYPE") int target_type, int target_number, IntBuffer totalmem, IntBuffer freemem);
public static native int MKL_MIC_Get_Meminfo(@Cast("MKL_MIC_TARGET_TYPE") int target_type, int target_number, int[] totalmem, int[] freemem);
public static final int mkl_mic_get_meminfo = MKL_MIC_Get_Meminfo;

public static native int MKL_MIC_Set_Resource_Limit(double fraction);
public static final int mkl_mic_set_resource_limit =    MKL_MIC_Set_Resource_Limit;

public static native int MKL_MIC_Get_Resource_Limit(DoublePointer fraction);
public static native int MKL_MIC_Get_Resource_Limit(DoubleBuffer fraction);
public static native int MKL_MIC_Get_Resource_Limit(double[] fraction);
public static final int mkl_mic_get_resource_limit =    MKL_MIC_Get_Resource_Limit;

public static native int MKL_MIC_Set_Workdivision(@Cast("MKL_MIC_TARGET_TYPE") int target_type,
                                 int target_number, double wd);
public static final int mkl_mic_set_workdivision =    MKL_MIC_Set_Workdivision;

public static native int MKL_MIC_Get_Workdivision(@Cast("MKL_MIC_TARGET_TYPE") int target_type,
                                 int target_number, DoublePointer wd);
public static native int MKL_MIC_Get_Workdivision(@Cast("MKL_MIC_TARGET_TYPE") int target_type,
                                 int target_number, DoubleBuffer wd);
public static native int MKL_MIC_Get_Workdivision(@Cast("MKL_MIC_TARGET_TYPE") int target_type,
                                 int target_number, double[] wd);
public static final int mkl_mic_get_workdivision =    MKL_MIC_Get_Workdivision;

public static native int MKL_MIC_Set_Max_Memory(@Cast("MKL_MIC_TARGET_TYPE") int target_type,
                               int target_number, @Cast("size_t") long card_mem_mbytes);
public static final int mkl_mic_set_max_memory =      MKL_MIC_Set_Max_Memory;

public static native int MKL_MIC_Free_Memory(@Cast("MKL_MIC_TARGET_TYPE") int target_type,
                            int target_number);
public static final int mkl_mic_free_memory =         MKL_MIC_Free_Memory;

public static native int MKL_MIC_Set_Offload_Report(int enabled);
public static final int mkl_mic_set_offload_report =  MKL_MIC_Set_Offload_Report;

public static native int MKL_MIC_Set_Device_Num_Threads(@Cast("MKL_MIC_TARGET_TYPE") int target_type,
                                        int target_number, int num_threads);
public static final int mkl_mic_set_device_num_threads = MKL_MIC_Set_Device_Num_Threads;

public static final int MKL_MIC_DEFAULT_FLAGS =       (0);
public static final int MKL_MIC_DISABLE_HOST_FALLBACK =    (1 << 0);

public static native int MKL_MIC_Set_Flags(int flag);
public static final int mkl_mic_set_flags = MKL_MIC_Set_Flags;

public static native int MKL_MIC_Get_Flags();
public static final int mkl_mic_get_flags = MKL_MIC_Get_Flags;


public static final int MKL_MIC_SUCCESS =            0;
public static final int MKL_MIC_NOT_IMPL =           1;
public static final int MKL_MIC_HOST_FALLBACK =      2;
public static final int MKL_MIC_DISABLED =           3;
public static final int MKL_MIC_FAILED =             -1;
public static final int MKL_MIC_HOST_FALLBACK_DISABLED =  -2;

public static native int MKL_MIC_Get_Status();
public static final int mkl_mic_get_status = MKL_MIC_Get_Status;

public static native void MKL_MIC_Clear_Status();
public static final int mkl_mic_clear_status = MKL_MIC_Clear_Status;

/* Intel(R) MKL CBWR */
public static native int MKL_CBWR_Get(int arg0);
public static final int mkl_cbwr_get =                MKL_CBWR_Get;
public static native int MKL_CBWR_Set(int arg0);
public static final int mkl_cbwr_set =                MKL_CBWR_Set;
public static native int MKL_CBWR_Get_Auto_Branch();
public static final int mkl_cbwr_get_auto_branch =    MKL_CBWR_Get_Auto_Branch;

public static native int MKL_Set_Env_Mode(int arg0);
public static final int mkl_set_env_mode =            MKL_Set_Env_Mode;

public static native int MKL_Verbose(int arg0);
public static final int mkl_verbose =                 MKL_Verbose;

public static final int MKL_EXIT_UNSUPPORTED_CPU =    1;
public static final int MKL_EXIT_CORRUPTED_INSTALL =  2;
public static final int MKL_EXIT_NO_MEMORY =          3;

public static class MKLExitHandler extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    MKLExitHandler(Pointer p) { super(p); }
    protected MKLExitHandler() { allocate(); }
    private native void allocate();
    public native void call(int why);
}
public static native void MKL_Set_Exit_Handler(MKLExitHandler h);
public static final int mkl_set_exit_handler =       MKL_Set_Exit_Handler;

public static final int MKL_MIC_REGISTRATION_DISABLE = 0;
public static final int MKL_MIC_REGISTRATION_ENABLE =  1;
public static native void MKL_MIC_register_memory(int enable);
public static final int mkl_mic_register_memory =    MKL_MIC_register_memory;

/** enum  */
public static final int
	MKL_BLACS_CUSTOM = 0,
	MKL_BLACS_MSMPI = 1,
	MKL_BLACS_INTELMPI = 2,
	MKL_BLACS_MPICH2 = 3,
	MKL_BLACS_LASTMPI = 4;
public static native int MKL_Set_mpi(int vendor, @Cast("const char*") BytePointer custom_library_name);
public static native int MKL_Set_mpi(int vendor, String custom_library_name);
public static final int mkl_set_mpi = MKL_Set_mpi;

public static final int MKL_MEM_MCDRAM = 1;

public static native int MKL_Set_Memory_Limit(int mem_type, @Cast("size_t") long limit);
public static final int mkl_set_memory_limit = MKL_Set_Memory_Limit;

public static native void MKL_Finalize();
public static final int mkl_finalize = MKL_Finalize;

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif /* _MKL_SERVICE_H_ */


// Parsed from mkl_rci.h

/*******************************************************************************
* Copyright 2005-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
!  Content:
!   Intel(R) Math Kernel Library (Intel(R) MKL) interface for preconditioners, RCI ISS and
!   TR solvers routines
!******************************************************************************/

// #ifndef _MKL_RCISOLVER_H_
// #define _MKL_RCISOLVER_H_

// #include "mkl_types.h"
// #include "mkl_service.h"

// #ifdef __cplusplus
// #endif /* __cplusplus */

public static native void dcsrilu0(@Const MKL_INT n, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, DoublePointer alu, @Const MKL_INT ipar, @Const DoublePointer dpar,MKL_INT ierr);
public static native void dcsrilu0(@Const MKL_INT n, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, DoubleBuffer alu, @Const MKL_INT ipar, @Const DoubleBuffer dpar,MKL_INT ierr);
public static native void dcsrilu0(@Const MKL_INT n, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, double[] alu, @Const MKL_INT ipar, @Const double[] dpar,MKL_INT ierr);
public static native void dcsrilut(@Const MKL_INT n, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, DoublePointer alut, MKL_INT ialut, MKL_INT jalut, @Const DoublePointer tol, @Const MKL_INT maxfil, @Const MKL_INT ipar, @Const DoublePointer dpar,MKL_INT ierr);
public static native void dcsrilut(@Const MKL_INT n, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, DoubleBuffer alut, MKL_INT ialut, MKL_INT jalut, @Const DoubleBuffer tol, @Const MKL_INT maxfil, @Const MKL_INT ipar, @Const DoubleBuffer dpar,MKL_INT ierr);
public static native void dcsrilut(@Const MKL_INT n, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, double[] alut, MKL_INT ialut, MKL_INT jalut, @Const double[] tol, @Const MKL_INT maxfil, @Const MKL_INT ipar, @Const double[] dpar,MKL_INT ierr);

public static native void DCSRILU0(@Const MKL_INT n, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, DoublePointer alu, @Const MKL_INT ipar, @Const DoublePointer dpar,MKL_INT ierr);
public static native void DCSRILU0(@Const MKL_INT n, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, DoubleBuffer alu, @Const MKL_INT ipar, @Const DoubleBuffer dpar,MKL_INT ierr);
public static native void DCSRILU0(@Const MKL_INT n, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, double[] alu, @Const MKL_INT ipar, @Const double[] dpar,MKL_INT ierr);
public static native void DCSRILUT(@Const MKL_INT n, @Const DoublePointer a, @Const MKL_INT ia, @Const MKL_INT ja, DoublePointer alut, MKL_INT ialut, MKL_INT jalut, @Const DoublePointer tol, @Const MKL_INT maxfil, @Const MKL_INT ipar, @Const DoublePointer dpar,MKL_INT ierr);
public static native void DCSRILUT(@Const MKL_INT n, @Const DoubleBuffer a, @Const MKL_INT ia, @Const MKL_INT ja, DoubleBuffer alut, MKL_INT ialut, MKL_INT jalut, @Const DoubleBuffer tol, @Const MKL_INT maxfil, @Const MKL_INT ipar, @Const DoubleBuffer dpar,MKL_INT ierr);
public static native void DCSRILUT(@Const MKL_INT n, @Const double[] a, @Const MKL_INT ia, @Const MKL_INT ja, double[] alut, MKL_INT ialut, MKL_INT jalut, @Const double[] tol, @Const MKL_INT maxfil, @Const MKL_INT ipar, @Const double[] dpar,MKL_INT ierr);

/* PCG/PFGMRES Lower case */

public static native void dcg_init(@Const MKL_INT n, @Const DoublePointer x, @Const DoublePointer b, MKL_INT rci_request, MKL_INT ipar, DoublePointer dpar, DoublePointer tmp);
public static native void dcg_init(@Const MKL_INT n, @Const DoubleBuffer x, @Const DoubleBuffer b, MKL_INT rci_request, MKL_INT ipar, DoubleBuffer dpar, DoubleBuffer tmp);
public static native void dcg_init(@Const MKL_INT n, @Const double[] x, @Const double[] b, MKL_INT rci_request, MKL_INT ipar, double[] dpar, double[] tmp);
public static native void dcg_check(@Const MKL_INT n, @Const DoublePointer x, @Const DoublePointer b, MKL_INT rci_request, MKL_INT ipar, DoublePointer dpar, DoublePointer tmp);
public static native void dcg_check(@Const MKL_INT n, @Const DoubleBuffer x, @Const DoubleBuffer b, MKL_INT rci_request, MKL_INT ipar, DoubleBuffer dpar, DoubleBuffer tmp);
public static native void dcg_check(@Const MKL_INT n, @Const double[] x, @Const double[] b, MKL_INT rci_request, MKL_INT ipar, double[] dpar, double[] tmp);
public static native void dcg(@Const MKL_INT n, DoublePointer x, @Const DoublePointer b, MKL_INT rci_request, MKL_INT ipar, DoublePointer dpar, DoublePointer tmp);
public static native void dcg(@Const MKL_INT n, DoubleBuffer x, @Const DoubleBuffer b, MKL_INT rci_request, MKL_INT ipar, DoubleBuffer dpar, DoubleBuffer tmp);
public static native void dcg(@Const MKL_INT n, double[] x, @Const double[] b, MKL_INT rci_request, MKL_INT ipar, double[] dpar, double[] tmp);
public static native void dcg_get(@Const MKL_INT n, @Const DoublePointer x, @Const DoublePointer b, @Const MKL_INT rci_request, @Const MKL_INT ipar, @Const DoublePointer dpar, @Const DoublePointer tmp, MKL_INT itercount);
public static native void dcg_get(@Const MKL_INT n, @Const DoubleBuffer x, @Const DoubleBuffer b, @Const MKL_INT rci_request, @Const MKL_INT ipar, @Const DoubleBuffer dpar, @Const DoubleBuffer tmp, MKL_INT itercount);
public static native void dcg_get(@Const MKL_INT n, @Const double[] x, @Const double[] b, @Const MKL_INT rci_request, @Const MKL_INT ipar, @Const double[] dpar, @Const double[] tmp, MKL_INT itercount);

public static native void dcgmrhs_init(@Const MKL_INT n, @Const DoublePointer x, @Const MKL_INT nRhs, @Const DoublePointer b,@Const MKL_INT method, MKL_INT rci_request, MKL_INT ipar, DoublePointer dpar, DoublePointer tmp);
public static native void dcgmrhs_init(@Const MKL_INT n, @Const DoubleBuffer x, @Const MKL_INT nRhs, @Const DoubleBuffer b,@Const MKL_INT method, MKL_INT rci_request, MKL_INT ipar, DoubleBuffer dpar, DoubleBuffer tmp);
public static native void dcgmrhs_init(@Const MKL_INT n, @Const double[] x, @Const MKL_INT nRhs, @Const double[] b,@Const MKL_INT method, MKL_INT rci_request, MKL_INT ipar, double[] dpar, double[] tmp);
public static native void dcgmrhs_check(@Const MKL_INT n, @Const DoublePointer x, @Const MKL_INT nRhs, @Const DoublePointer b, MKL_INT rci_request, MKL_INT ipar, DoublePointer dpar, DoublePointer tmp);
public static native void dcgmrhs_check(@Const MKL_INT n, @Const DoubleBuffer x, @Const MKL_INT nRhs, @Const DoubleBuffer b, MKL_INT rci_request, MKL_INT ipar, DoubleBuffer dpar, DoubleBuffer tmp);
public static native void dcgmrhs_check(@Const MKL_INT n, @Const double[] x, @Const MKL_INT nRhs, @Const double[] b, MKL_INT rci_request, MKL_INT ipar, double[] dpar, double[] tmp);
public static native void dcgmrhs(@Const MKL_INT n, DoublePointer x, @Const MKL_INT nRhs, @Const DoublePointer b, MKL_INT rci_request, MKL_INT ipar, DoublePointer dpar, DoublePointer tmp);
public static native void dcgmrhs(@Const MKL_INT n, DoubleBuffer x, @Const MKL_INT nRhs, @Const DoubleBuffer b, MKL_INT rci_request, MKL_INT ipar, DoubleBuffer dpar, DoubleBuffer tmp);
public static native void dcgmrhs(@Const MKL_INT n, double[] x, @Const MKL_INT nRhs, @Const double[] b, MKL_INT rci_request, MKL_INT ipar, double[] dpar, double[] tmp);
public static native void dcgmrhs_get(@Const MKL_INT n, @Const DoublePointer x, @Const MKL_INT nRhs, @Const DoublePointer b, @Const MKL_INT rci_request, @Const MKL_INT ipar, @Const DoublePointer dpar, @Const DoublePointer tmp, MKL_INT itercount);
public static native void dcgmrhs_get(@Const MKL_INT n, @Const DoubleBuffer x, @Const MKL_INT nRhs, @Const DoubleBuffer b, @Const MKL_INT rci_request, @Const MKL_INT ipar, @Const DoubleBuffer dpar, @Const DoubleBuffer tmp, MKL_INT itercount);
public static native void dcgmrhs_get(@Const MKL_INT n, @Const double[] x, @Const MKL_INT nRhs, @Const double[] b, @Const MKL_INT rci_request, @Const MKL_INT ipar, @Const double[] dpar, @Const double[] tmp, MKL_INT itercount);

public static native void dfgmres_init(@Const MKL_INT n, @Const DoublePointer x, @Const DoublePointer b, MKL_INT RCI_request, MKL_INT ipar, DoublePointer dpar, DoublePointer tmp);
public static native void dfgmres_init(@Const MKL_INT n, @Const DoubleBuffer x, @Const DoubleBuffer b, MKL_INT RCI_request, MKL_INT ipar, DoubleBuffer dpar, DoubleBuffer tmp);
public static native void dfgmres_init(@Const MKL_INT n, @Const double[] x, @Const double[] b, MKL_INT RCI_request, MKL_INT ipar, double[] dpar, double[] tmp);
public static native void dfgmres_check(@Const MKL_INT n, @Const DoublePointer x, @Const DoublePointer b, MKL_INT RCI_request, MKL_INT ipar, DoublePointer dpar, DoublePointer tmp);
public static native void dfgmres_check(@Const MKL_INT n, @Const DoubleBuffer x, @Const DoubleBuffer b, MKL_INT RCI_request, MKL_INT ipar, DoubleBuffer dpar, DoubleBuffer tmp);
public static native void dfgmres_check(@Const MKL_INT n, @Const double[] x, @Const double[] b, MKL_INT RCI_request, MKL_INT ipar, double[] dpar, double[] tmp);
public static native void dfgmres(@Const MKL_INT n, DoublePointer x, DoublePointer b, MKL_INT RCI_request, MKL_INT ipar, DoublePointer dpar, DoublePointer tmp);
public static native void dfgmres(@Const MKL_INT n, DoubleBuffer x, DoubleBuffer b, MKL_INT RCI_request, MKL_INT ipar, DoubleBuffer dpar, DoubleBuffer tmp);
public static native void dfgmres(@Const MKL_INT n, double[] x, double[] b, MKL_INT RCI_request, MKL_INT ipar, double[] dpar, double[] tmp);
public static native void dfgmres_get(@Const MKL_INT n, DoublePointer x, DoublePointer b, MKL_INT RCI_request, @Const MKL_INT ipar, @Const DoublePointer dpar, DoublePointer tmp, MKL_INT itercount);
public static native void dfgmres_get(@Const MKL_INT n, DoubleBuffer x, DoubleBuffer b, MKL_INT RCI_request, @Const MKL_INT ipar, @Const DoubleBuffer dpar, DoubleBuffer tmp, MKL_INT itercount);
public static native void dfgmres_get(@Const MKL_INT n, double[] x, double[] b, MKL_INT RCI_request, @Const MKL_INT ipar, @Const double[] dpar, double[] tmp, MKL_INT itercount);

/* PCG/PFGMRES Upper case */

public static native void DCG_INIT(@Const MKL_INT n, @Const DoublePointer x, @Const DoublePointer b, MKL_INT rci_request, MKL_INT ipar, DoublePointer dpar, DoublePointer tmp);
public static native void DCG_INIT(@Const MKL_INT n, @Const DoubleBuffer x, @Const DoubleBuffer b, MKL_INT rci_request, MKL_INT ipar, DoubleBuffer dpar, DoubleBuffer tmp);
public static native void DCG_INIT(@Const MKL_INT n, @Const double[] x, @Const double[] b, MKL_INT rci_request, MKL_INT ipar, double[] dpar, double[] tmp);
public static native void DCG_CHECK(@Const MKL_INT n, @Const DoublePointer x, @Const DoublePointer b, MKL_INT rci_request, MKL_INT ipar, DoublePointer dpar, DoublePointer tmp);
public static native void DCG_CHECK(@Const MKL_INT n, @Const DoubleBuffer x, @Const DoubleBuffer b, MKL_INT rci_request, MKL_INT ipar, DoubleBuffer dpar, DoubleBuffer tmp);
public static native void DCG_CHECK(@Const MKL_INT n, @Const double[] x, @Const double[] b, MKL_INT rci_request, MKL_INT ipar, double[] dpar, double[] tmp);
public static native void DCG(@Const MKL_INT n, DoublePointer x, @Const DoublePointer b, MKL_INT rci_request, MKL_INT ipar, DoublePointer dpar, DoublePointer tmp);
public static native void DCG(@Const MKL_INT n, DoubleBuffer x, @Const DoubleBuffer b, MKL_INT rci_request, MKL_INT ipar, DoubleBuffer dpar, DoubleBuffer tmp);
public static native void DCG(@Const MKL_INT n, double[] x, @Const double[] b, MKL_INT rci_request, MKL_INT ipar, double[] dpar, double[] tmp);
public static native void DCG_GET(@Const MKL_INT n, @Const DoublePointer x, @Const DoublePointer b, @Const MKL_INT rci_request, @Const MKL_INT ipar, @Const DoublePointer dpar, @Const DoublePointer tmp, MKL_INT itercount);
public static native void DCG_GET(@Const MKL_INT n, @Const DoubleBuffer x, @Const DoubleBuffer b, @Const MKL_INT rci_request, @Const MKL_INT ipar, @Const DoubleBuffer dpar, @Const DoubleBuffer tmp, MKL_INT itercount);
public static native void DCG_GET(@Const MKL_INT n, @Const double[] x, @Const double[] b, @Const MKL_INT rci_request, @Const MKL_INT ipar, @Const double[] dpar, @Const double[] tmp, MKL_INT itercount);

public static native void DCGMRHS_INIT(@Const MKL_INT n, @Const DoublePointer x, @Const MKL_INT nRhs, @Const DoublePointer b, @Const MKL_INT method, MKL_INT rci_request, MKL_INT ipar, DoublePointer dpar, DoublePointer tmp);
public static native void DCGMRHS_INIT(@Const MKL_INT n, @Const DoubleBuffer x, @Const MKL_INT nRhs, @Const DoubleBuffer b, @Const MKL_INT method, MKL_INT rci_request, MKL_INT ipar, DoubleBuffer dpar, DoubleBuffer tmp);
public static native void DCGMRHS_INIT(@Const MKL_INT n, @Const double[] x, @Const MKL_INT nRhs, @Const double[] b, @Const MKL_INT method, MKL_INT rci_request, MKL_INT ipar, double[] dpar, double[] tmp);
public static native void DCGMRHS_CHECK(@Const MKL_INT n, @Const DoublePointer x, @Const MKL_INT nRhs, @Const DoublePointer b, MKL_INT rci_request, MKL_INT ipar, DoublePointer dpar, DoublePointer tmp);
public static native void DCGMRHS_CHECK(@Const MKL_INT n, @Const DoubleBuffer x, @Const MKL_INT nRhs, @Const DoubleBuffer b, MKL_INT rci_request, MKL_INT ipar, DoubleBuffer dpar, DoubleBuffer tmp);
public static native void DCGMRHS_CHECK(@Const MKL_INT n, @Const double[] x, @Const MKL_INT nRhs, @Const double[] b, MKL_INT rci_request, MKL_INT ipar, double[] dpar, double[] tmp);
public static native void DCGMRHS(@Const MKL_INT n, DoublePointer x, @Const MKL_INT nRhs, @Const DoublePointer b, MKL_INT rci_request, MKL_INT ipar, DoublePointer dpar, DoublePointer tmp);
public static native void DCGMRHS(@Const MKL_INT n, DoubleBuffer x, @Const MKL_INT nRhs, @Const DoubleBuffer b, MKL_INT rci_request, MKL_INT ipar, DoubleBuffer dpar, DoubleBuffer tmp);
public static native void DCGMRHS(@Const MKL_INT n, double[] x, @Const MKL_INT nRhs, @Const double[] b, MKL_INT rci_request, MKL_INT ipar, double[] dpar, double[] tmp);
public static native void DCGMRHS_GET(@Const MKL_INT n, @Const DoublePointer x, @Const MKL_INT nRhs, @Const DoublePointer b, @Const MKL_INT rci_request, @Const MKL_INT ipar, @Const DoublePointer dpar, @Const DoublePointer tmp, MKL_INT itercount);
public static native void DCGMRHS_GET(@Const MKL_INT n, @Const DoubleBuffer x, @Const MKL_INT nRhs, @Const DoubleBuffer b, @Const MKL_INT rci_request, @Const MKL_INT ipar, @Const DoubleBuffer dpar, @Const DoubleBuffer tmp, MKL_INT itercount);
public static native void DCGMRHS_GET(@Const MKL_INT n, @Const double[] x, @Const MKL_INT nRhs, @Const double[] b, @Const MKL_INT rci_request, @Const MKL_INT ipar, @Const double[] dpar, @Const double[] tmp, MKL_INT itercount);

public static native void DFGMRES_INIT(@Const MKL_INT n, @Const DoublePointer x, @Const DoublePointer b, MKL_INT RCI_request, MKL_INT ipar, DoublePointer dpar, DoublePointer tmp);
public static native void DFGMRES_INIT(@Const MKL_INT n, @Const DoubleBuffer x, @Const DoubleBuffer b, MKL_INT RCI_request, MKL_INT ipar, DoubleBuffer dpar, DoubleBuffer tmp);
public static native void DFGMRES_INIT(@Const MKL_INT n, @Const double[] x, @Const double[] b, MKL_INT RCI_request, MKL_INT ipar, double[] dpar, double[] tmp);
public static native void DFGMRES_CHECK(@Const MKL_INT n, @Const DoublePointer x, @Const DoublePointer b, MKL_INT RCI_request, MKL_INT ipar, DoublePointer dpar, DoublePointer tmp);
public static native void DFGMRES_CHECK(@Const MKL_INT n, @Const DoubleBuffer x, @Const DoubleBuffer b, MKL_INT RCI_request, MKL_INT ipar, DoubleBuffer dpar, DoubleBuffer tmp);
public static native void DFGMRES_CHECK(@Const MKL_INT n, @Const double[] x, @Const double[] b, MKL_INT RCI_request, MKL_INT ipar, double[] dpar, double[] tmp);
public static native void DFGMRES(@Const MKL_INT n, DoublePointer x, DoublePointer b, MKL_INT RCI_request, MKL_INT ipar, DoublePointer dpar, DoublePointer tmp);
public static native void DFGMRES(@Const MKL_INT n, DoubleBuffer x, DoubleBuffer b, MKL_INT RCI_request, MKL_INT ipar, DoubleBuffer dpar, DoubleBuffer tmp);
public static native void DFGMRES(@Const MKL_INT n, double[] x, double[] b, MKL_INT RCI_request, MKL_INT ipar, double[] dpar, double[] tmp);
public static native void DFGMRES_GET(@Const MKL_INT n, DoublePointer x, DoublePointer b, MKL_INT RCI_request, @Const MKL_INT ipar, @Const DoublePointer dpar, DoublePointer tmp, MKL_INT itercount);
public static native void DFGMRES_GET(@Const MKL_INT n, DoubleBuffer x, DoubleBuffer b, MKL_INT RCI_request, @Const MKL_INT ipar, @Const DoubleBuffer dpar, DoubleBuffer tmp, MKL_INT itercount);
public static native void DFGMRES_GET(@Const MKL_INT n, double[] x, double[] b, MKL_INT RCI_request, @Const MKL_INT ipar, @Const double[] dpar, double[] tmp, MKL_INT itercount);

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #ifdef __cplusplus
// #endif

/* Return status values */
public static final int TR_SUCCESS =        1501;
public static final int TR_INVALID_OPTION = 1502;
public static final int TR_OUT_OF_MEMORY =  1503;

/* Basic data types */
@Namespace @Name("void") @Opaque public static class _TRNSP_HANDLE_t extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public _TRNSP_HANDLE_t() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public _TRNSP_HANDLE_t(Pointer p) { super(p); }
}
@Namespace @Name("void") @Opaque public static class _TRNSPBC_HANDLE_t extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public _TRNSPBC_HANDLE_t() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public _TRNSPBC_HANDLE_t(Pointer p) { super(p); }
}
@Namespace @Name("void") @Opaque public static class _JACOBIMATRIX_HANDLE_t extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public _JACOBIMATRIX_HANDLE_t() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public _JACOBIMATRIX_HANDLE_t(Pointer p) { super(p); }
}

public static class USRFCND extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    USRFCND(Pointer p) { super(p); }
    protected USRFCND() { allocate(); }
    private native void allocate();
    public native void call(MKL_INT arg0,MKL_INT arg1,DoublePointer arg2,DoublePointer arg3);
}
public static class USRFCNXD extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    USRFCNXD(Pointer p) { super(p); }
    protected USRFCNXD() { allocate(); }
    private native void allocate();
    public native void call(MKL_INT arg0,MKL_INT arg1,DoublePointer arg2,DoublePointer arg3,Pointer arg4);
}

public static class USRFCNS extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    USRFCNS(Pointer p) { super(p); }
    protected USRFCNS() { allocate(); }
    private native void allocate();
    public native void call(MKL_INT arg0,MKL_INT arg1,FloatPointer arg2,FloatPointer arg3);
}
public static class USRFCNXS extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    USRFCNXS(Pointer p) { super(p); }
    protected USRFCNXS() { allocate(); }
    private native void allocate();
    public native void call(MKL_INT arg0,MKL_INT arg1,FloatPointer arg2,FloatPointer arg3,Pointer arg4);
}

/* Function prototypes */
public static native @ByVal MKL_INT dtrnlsp_init(@ByPtrPtr _TRNSP_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const DoublePointer arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const DoublePointer arg7);
public static native @ByVal MKL_INT dtrnlsp_init(@ByPtrPtr _TRNSP_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const DoubleBuffer arg7);
public static native @ByVal MKL_INT dtrnlsp_init(@ByPtrPtr _TRNSP_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const double[] arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const double[] arg7);
public static native @ByVal MKL_INT dtrnlsp_check(@ByPtrPtr _TRNSP_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5, MKL_INT arg6);
public static native @ByVal MKL_INT dtrnlsp_check(@ByPtrPtr _TRNSP_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5, MKL_INT arg6);
public static native @ByVal MKL_INT dtrnlsp_check(@ByPtrPtr _TRNSP_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const double[] arg4, @Const double[] arg5, MKL_INT arg6);
public static native @ByVal MKL_INT dtrnlsp_solve(@ByPtrPtr _TRNSP_HANDLE_t arg0, DoublePointer arg1, DoublePointer arg2, MKL_INT arg3);
public static native @ByVal MKL_INT dtrnlsp_solve(@ByPtrPtr _TRNSP_HANDLE_t arg0, DoubleBuffer arg1, DoubleBuffer arg2, MKL_INT arg3);
public static native @ByVal MKL_INT dtrnlsp_solve(@ByPtrPtr _TRNSP_HANDLE_t arg0, double[] arg1, double[] arg2, MKL_INT arg3);
public static native @ByVal MKL_INT dtrnlsp_get(@ByPtrPtr _TRNSP_HANDLE_t arg0, MKL_INT arg1, MKL_INT arg2, DoublePointer arg3, DoublePointer arg4);
public static native @ByVal MKL_INT dtrnlsp_get(@ByPtrPtr _TRNSP_HANDLE_t arg0, MKL_INT arg1, MKL_INT arg2, DoubleBuffer arg3, DoubleBuffer arg4);
public static native @ByVal MKL_INT dtrnlsp_get(@ByPtrPtr _TRNSP_HANDLE_t arg0, MKL_INT arg1, MKL_INT arg2, double[] arg3, double[] arg4);
public static native @ByVal MKL_INT dtrnlsp_delete(@ByPtrPtr _TRNSP_HANDLE_t arg0);

public static native @ByVal MKL_INT dtrnlspbc_init(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5, @Const DoublePointer arg6, @Const MKL_INT arg7, @Const MKL_INT arg8, @Const DoublePointer arg9);
public static native @ByVal MKL_INT dtrnlspbc_init(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5, @Const DoubleBuffer arg6, @Const MKL_INT arg7, @Const MKL_INT arg8, @Const DoubleBuffer arg9);
public static native @ByVal MKL_INT dtrnlspbc_init(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const double[] arg4, @Const double[] arg5, @Const double[] arg6, @Const MKL_INT arg7, @Const MKL_INT arg8, @Const double[] arg9);
public static native @ByVal MKL_INT dtrnlspbc_check(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5, @Const DoublePointer arg6, @Const DoublePointer arg7, MKL_INT arg8);
public static native @ByVal MKL_INT dtrnlspbc_check(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5, @Const DoubleBuffer arg6, @Const DoubleBuffer arg7, MKL_INT arg8);
public static native @ByVal MKL_INT dtrnlspbc_check(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const double[] arg4, @Const double[] arg5, @Const double[] arg6, @Const double[] arg7, MKL_INT arg8);
public static native @ByVal MKL_INT dtrnlspbc_solve(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, DoublePointer arg1, DoublePointer arg2, MKL_INT arg3);
public static native @ByVal MKL_INT dtrnlspbc_solve(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, DoubleBuffer arg1, DoubleBuffer arg2, MKL_INT arg3);
public static native @ByVal MKL_INT dtrnlspbc_solve(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, double[] arg1, double[] arg2, MKL_INT arg3);
public static native @ByVal MKL_INT dtrnlspbc_get(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, MKL_INT arg1, MKL_INT arg2, DoublePointer arg3, DoublePointer arg4);
public static native @ByVal MKL_INT dtrnlspbc_get(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, MKL_INT arg1, MKL_INT arg2, DoubleBuffer arg3, DoubleBuffer arg4);
public static native @ByVal MKL_INT dtrnlspbc_get(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, MKL_INT arg1, MKL_INT arg2, double[] arg3, double[] arg4);
public static native @ByVal MKL_INT dtrnlspbc_delete(@ByPtrPtr _TRNSPBC_HANDLE_t arg0);

public static native @ByVal MKL_INT djacobi_init(@ByPtrPtr _JACOBIMATRIX_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5);
public static native @ByVal MKL_INT djacobi_init(@ByPtrPtr _JACOBIMATRIX_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5);
public static native @ByVal MKL_INT djacobi_init(@ByPtrPtr _JACOBIMATRIX_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const double[] arg4, @Const double[] arg5);
public static native @ByVal MKL_INT djacobi_solve(@ByPtrPtr _JACOBIMATRIX_HANDLE_t arg0, DoublePointer arg1, DoublePointer arg2, MKL_INT arg3);
public static native @ByVal MKL_INT djacobi_solve(@ByPtrPtr _JACOBIMATRIX_HANDLE_t arg0, DoubleBuffer arg1, DoubleBuffer arg2, MKL_INT arg3);
public static native @ByVal MKL_INT djacobi_solve(@ByPtrPtr _JACOBIMATRIX_HANDLE_t arg0, double[] arg1, double[] arg2, MKL_INT arg3);
public static native @ByVal MKL_INT djacobi_delete(@ByPtrPtr _JACOBIMATRIX_HANDLE_t arg0);
public static native @ByVal MKL_INT djacobi(USRFCND fcn, @Const MKL_INT arg1, @Const MKL_INT arg2, DoublePointer arg3, DoublePointer arg4, DoublePointer arg5);
public static native @ByVal MKL_INT djacobi(USRFCND fcn, @Const MKL_INT arg1, @Const MKL_INT arg2, DoubleBuffer arg3, DoubleBuffer arg4, DoubleBuffer arg5);
public static native @ByVal MKL_INT djacobi(USRFCND fcn, @Const MKL_INT arg1, @Const MKL_INT arg2, double[] arg3, double[] arg4, double[] arg5);
public static native @ByVal MKL_INT djacobix(USRFCNXD fcn, @Const MKL_INT arg1, @Const MKL_INT arg2, DoublePointer arg3, DoublePointer arg4, DoublePointer arg5, Pointer arg6);
public static native @ByVal MKL_INT djacobix(USRFCNXD fcn, @Const MKL_INT arg1, @Const MKL_INT arg2, DoubleBuffer arg3, DoubleBuffer arg4, DoubleBuffer arg5, Pointer arg6);
public static native @ByVal MKL_INT djacobix(USRFCNXD fcn, @Const MKL_INT arg1, @Const MKL_INT arg2, double[] arg3, double[] arg4, double[] arg5, Pointer arg6);

public static native @ByVal MKL_INT strnlsp_init(@ByPtrPtr _TRNSP_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatPointer arg3, @Const FloatPointer arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const FloatPointer arg7);
public static native @ByVal MKL_INT strnlsp_init(@ByPtrPtr _TRNSP_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatBuffer arg3, @Const FloatBuffer arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const FloatBuffer arg7);
public static native @ByVal MKL_INT strnlsp_init(@ByPtrPtr _TRNSP_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const float[] arg3, @Const float[] arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const float[] arg7);
public static native @ByVal MKL_INT strnlsp_check(@ByPtrPtr _TRNSP_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatPointer arg3, @Const FloatPointer arg4, @Const FloatPointer arg5, MKL_INT arg6);
public static native @ByVal MKL_INT strnlsp_check(@ByPtrPtr _TRNSP_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatBuffer arg3, @Const FloatBuffer arg4, @Const FloatBuffer arg5, MKL_INT arg6);
public static native @ByVal MKL_INT strnlsp_check(@ByPtrPtr _TRNSP_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const float[] arg3, @Const float[] arg4, @Const float[] arg5, MKL_INT arg6);
public static native @ByVal MKL_INT strnlsp_solve(@ByPtrPtr _TRNSP_HANDLE_t arg0, FloatPointer arg1, FloatPointer arg2, MKL_INT arg3);
public static native @ByVal MKL_INT strnlsp_solve(@ByPtrPtr _TRNSP_HANDLE_t arg0, FloatBuffer arg1, FloatBuffer arg2, MKL_INT arg3);
public static native @ByVal MKL_INT strnlsp_solve(@ByPtrPtr _TRNSP_HANDLE_t arg0, float[] arg1, float[] arg2, MKL_INT arg3);
public static native @ByVal MKL_INT strnlsp_get(@ByPtrPtr _TRNSP_HANDLE_t arg0, MKL_INT arg1, MKL_INT arg2, FloatPointer arg3, FloatPointer arg4);
public static native @ByVal MKL_INT strnlsp_get(@ByPtrPtr _TRNSP_HANDLE_t arg0, MKL_INT arg1, MKL_INT arg2, FloatBuffer arg3, FloatBuffer arg4);
public static native @ByVal MKL_INT strnlsp_get(@ByPtrPtr _TRNSP_HANDLE_t arg0, MKL_INT arg1, MKL_INT arg2, float[] arg3, float[] arg4);
public static native @ByVal MKL_INT strnlsp_delete(@ByPtrPtr _TRNSP_HANDLE_t arg0);

public static native @ByVal MKL_INT strnlspbc_init(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatPointer arg3, @Const FloatPointer arg4, @Const FloatPointer arg5, @Const FloatPointer arg6, @Const MKL_INT arg7, @Const MKL_INT arg8, @Const FloatPointer arg9);
public static native @ByVal MKL_INT strnlspbc_init(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatBuffer arg3, @Const FloatBuffer arg4, @Const FloatBuffer arg5, @Const FloatBuffer arg6, @Const MKL_INT arg7, @Const MKL_INT arg8, @Const FloatBuffer arg9);
public static native @ByVal MKL_INT strnlspbc_init(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const float[] arg3, @Const float[] arg4, @Const float[] arg5, @Const float[] arg6, @Const MKL_INT arg7, @Const MKL_INT arg8, @Const float[] arg9);
public static native @ByVal MKL_INT strnlspbc_check(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatPointer arg3, @Const FloatPointer arg4, @Const FloatPointer arg5, @Const FloatPointer arg6, @Const FloatPointer arg7, MKL_INT arg8);
public static native @ByVal MKL_INT strnlspbc_check(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatBuffer arg3, @Const FloatBuffer arg4, @Const FloatBuffer arg5, @Const FloatBuffer arg6, @Const FloatBuffer arg7, MKL_INT arg8);
public static native @ByVal MKL_INT strnlspbc_check(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const float[] arg3, @Const float[] arg4, @Const float[] arg5, @Const float[] arg6, @Const float[] arg7, MKL_INT arg8);
public static native @ByVal MKL_INT strnlspbc_solve(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, FloatPointer arg1, FloatPointer arg2, MKL_INT arg3);
public static native @ByVal MKL_INT strnlspbc_solve(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, FloatBuffer arg1, FloatBuffer arg2, MKL_INT arg3);
public static native @ByVal MKL_INT strnlspbc_solve(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, float[] arg1, float[] arg2, MKL_INT arg3);
public static native @ByVal MKL_INT strnlspbc_get(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, MKL_INT arg1, MKL_INT arg2, FloatPointer arg3, FloatPointer arg4);
public static native @ByVal MKL_INT strnlspbc_get(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, MKL_INT arg1, MKL_INT arg2, FloatBuffer arg3, FloatBuffer arg4);
public static native @ByVal MKL_INT strnlspbc_get(@ByPtrPtr _TRNSPBC_HANDLE_t arg0, MKL_INT arg1, MKL_INT arg2, float[] arg3, float[] arg4);
public static native @ByVal MKL_INT strnlspbc_delete(@ByPtrPtr _TRNSPBC_HANDLE_t arg0);

public static native @ByVal MKL_INT sjacobi_init(@ByPtrPtr _JACOBIMATRIX_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatPointer arg3, @Const FloatPointer arg4, @Const FloatPointer arg5);
public static native @ByVal MKL_INT sjacobi_init(@ByPtrPtr _JACOBIMATRIX_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatBuffer arg3, @Const FloatBuffer arg4, @Const FloatBuffer arg5);
public static native @ByVal MKL_INT sjacobi_init(@ByPtrPtr _JACOBIMATRIX_HANDLE_t arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const float[] arg3, @Const float[] arg4, @Const float[] arg5);
public static native @ByVal MKL_INT sjacobi_solve(@ByPtrPtr _JACOBIMATRIX_HANDLE_t arg0, FloatPointer arg1, FloatPointer arg2, MKL_INT arg3);
public static native @ByVal MKL_INT sjacobi_solve(@ByPtrPtr _JACOBIMATRIX_HANDLE_t arg0, FloatBuffer arg1, FloatBuffer arg2, MKL_INT arg3);
public static native @ByVal MKL_INT sjacobi_solve(@ByPtrPtr _JACOBIMATRIX_HANDLE_t arg0, float[] arg1, float[] arg2, MKL_INT arg3);
public static native @ByVal MKL_INT sjacobi_delete(@ByPtrPtr _JACOBIMATRIX_HANDLE_t arg0);
public static native @ByVal MKL_INT sjacobi(USRFCNS fcn, @Const MKL_INT arg1, @Const MKL_INT arg2, FloatPointer arg3, FloatPointer arg4, FloatPointer arg5);
public static native @ByVal MKL_INT sjacobi(USRFCNS fcn, @Const MKL_INT arg1, @Const MKL_INT arg2, FloatBuffer arg3, FloatBuffer arg4, FloatBuffer arg5);
public static native @ByVal MKL_INT sjacobi(USRFCNS fcn, @Const MKL_INT arg1, @Const MKL_INT arg2, float[] arg3, float[] arg4, float[] arg5);
public static native @ByVal MKL_INT sjacobix(USRFCNXS fcn, @Const MKL_INT arg1, @Const MKL_INT arg2, FloatPointer arg3, FloatPointer arg4, FloatPointer arg5, Pointer arg6);
public static native @ByVal MKL_INT sjacobix(USRFCNXS fcn, @Const MKL_INT arg1, @Const MKL_INT arg2, FloatBuffer arg3, FloatBuffer arg4, FloatBuffer arg5, Pointer arg6);
public static native @ByVal MKL_INT sjacobix(USRFCNXS fcn, @Const MKL_INT arg1, @Const MKL_INT arg2, float[] arg3, float[] arg4, float[] arg5, Pointer arg6);

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif /* _MKL_RCISOLVER_H_ */


// Parsed from mkl_vml.h

/* file: mkl_vml.h */
/*******************************************************************************
* Copyright 2006-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
//++
//  VML main header file. To use VML it is sufficient to include
//  mkl_vml.h only.
//--
*/

// #ifndef __MKL_VML_H__
// #define __MKL_VML_H__

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #include "mkl_vml_defines.h"
// #include "mkl_vml_types.h"
// #include "mkl_vml_functions.h"

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif /* __MKL_VML_H__ */


// Parsed from mkl_vml_defines.h

/* file: mkl_vml_defines.h */
/*******************************************************************************
* Copyright 2006-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
//++
//  Macro definitions visible on user level.
//--
*/

// #ifndef __MKL_VML_DEFINES_H__
// #define __MKL_VML_DEFINES_H__

// #ifdef __cplusplus
// #endif /* __cplusplus */

/*
//++
//  MACRO DEFINITIONS
//  Macro definitions for VML mode and VML error status.
//
//  VML mode controls VML function accuracy, floating-point settings (rounding
//  mode and precision) and VML error handling options. Default VML mode is
//  VML_HA | VML_ERRMODE_DEFAULT, i.e. VML high accuracy functions are
//  called, and current floating-point precision and the rounding mode is used.
//
//  Error status macros are used for error classification.
//--
*/

/*
//  VML FUNCTION ACCURACY CONTROL
//  VML_HA - when VML_HA is set, high accuracy VML functions are called
//  VML_LA - when VML_LA is set, low accuracy VML functions are called
//  VML_EP - when VML_EP is set, enhanced performance VML functions are called
//
//  NOTE: VML_HA, VML_LA and VML_EP must not be used in combination
*/
public static final int VML_LA = 0x00000001;
public static final int VML_HA = 0x00000002;
public static final int VML_EP = 0x00000003;


/*
//  SETTING OPTIMAL FLOATING-POINT PRECISION AND ROUNDING MODE
//  Definitions below are to set optimal floating-point control word
//  (precision and rounding mode).
//
//  For their correct work, VML functions change floating-point precision and
//  rounding mode (if necessary). Since control word changing is typically
//  expensive operation, it is recommended to set precision and rounding mode
//  to optimal values before VML function calls.
//
//  VML_FLOAT_CONSISTENT  - use this value if the calls are typically to single
//                          precision VML functions
//  VML_DOUBLE_CONSISTENT - use this value if the calls are typically to double
//                          precision VML functions
//  VML_RESTORE           - restore original floating-point precision and
//                          rounding mode
//  VML_DEFAULT_PRECISION - use default (current) floating-point precision and
//                          rounding mode
//  NOTE: VML_FLOAT_CONSISTENT, VML_DOUBLE_CONSISTENT, VML_RESTORE and
//        VML_DEFAULT_PRECISION must not be used in combination
*/
public static final int VML_DEFAULT_PRECISION = 0x00000000;
public static final int VML_FLOAT_CONSISTENT =  0x00000010;
public static final int VML_DOUBLE_CONSISTENT = 0x00000020;
public static final int VML_RESTORE =           0x00000030;

/*
//  VML ERROR HANDLING CONTROL
//  Macros below are used to control VML error handler.
//
//  VML_ERRMODE_IGNORE   - ignore errors
//  VML_ERRMODE_ERRNO    - errno variable is set on error
//  VML_ERRMODE_STDERR   - error description text is written to stderr on error
//  VML_ERRMODE_EXCEPT   - exception is raised on error
//  VML_ERRMODE_CALLBACK - user's error handler function is called on error
//  VML_ERRMODE_DEFAULT  - errno variable is set, exceptions are raised and
//                         user's error handler is called on error
//  NOTE: VML_ERRMODE_IGNORE must not be used in combination with
//        VML_ERRMODE_ERRNO, VML_ERRMODE_STDERR, VML_ERRMODE_EXCEPT,
//        VML_ERRMODE_CALLBACK and VML_ERRMODE_DEFAULT.
*/
public static final int VML_ERRMODE_IGNORE =   0x00000100;
public static final int VML_ERRMODE_ERRNO =    0x00000200;
public static final int VML_ERRMODE_STDERR =   0x00000400;
public static final int VML_ERRMODE_EXCEPT =   0x00000800;
public static final int VML_ERRMODE_CALLBACK = 0x00001000;
public static final int VML_ERRMODE_DEFAULT =  
VML_ERRMODE_ERRNO | VML_ERRMODE_CALLBACK | VML_ERRMODE_EXCEPT;

/*
//  OpenMP(R) number of threads mode macros
//  VML_NUM_THREADS_OMP_AUTO   - Maximum number of threads is determined by
//                               environmental variable OPM_NUM_THREADS or
//                               omp_set_num_threads() function
//  VML_NUM_THREADS_OMP_FIXED  - Number of threads is determined by
//                               environmental variable OPM_NUM_THREADS
//                               omp_set_num_threads() functions
*/
public static final int VML_NUM_THREADS_OMP_AUTO =   0x00000000;
public static final int VML_NUM_THREADS_OMP_FIXED =  0x00010000;

/*
//  FTZ & DAZ mode macros
//  VML_FTZDAZ_ON   - FTZ & DAZ MXCSR mode enabled
//                    for faster (sub)denormal values processing
//  VML_FTZDAZ_OFF  - FTZ & DAZ MXCSR mode disabled
//                    for accurate (sub)denormal values processing
*/
public static final int VML_FTZDAZ_ON =   0x00280000;
public static final int VML_FTZDAZ_OFF =  0x00140000;

/*
//  ACCURACY, FLOATING-POINT CONTROL, FTZDAZ AND ERROR HANDLING MASKS
//  Accuracy, floating-point and error handling control are packed in
//  the VML mode variable. Macros below are useful to extract accuracy and/or
//  floating-point control and/or error handling control settings.
//
//  VML_ACCURACY_MASK           - extract accuracy bits
//  VML_FPUMODE_MASK            - extract floating-point control bits
//  VML_ERRMODE_MASK            - extract error handling control bits
//                                (including error callback bits)
//  VML_ERRMODE_STDHANDLER_MASK - extract error handling control bits
//                                (not including error callback bits)
//  VML_ERRMODE_CALLBACK_MASK   - extract error callback bits
//  VML_NUM_THREADS_OMP_MASK    - extract OpenMP(R) number of threads mode bits
//  VML_FTZDAZ_MASK             - extract FTZ & DAZ bits
*/
public static final int VML_ACCURACY_MASK =           0x0000000F;
public static final int VML_FPUMODE_MASK =            0x000000F0;
public static final int VML_ERRMODE_MASK =            0x0000FF00;
public static final int VML_ERRMODE_STDHANDLER_MASK = 0x00000F00;
public static final int VML_ERRMODE_CALLBACK_MASK =   0x0000F000;
public static final int VML_NUM_THREADS_OMP_MASK =    0x00030000;
public static final int VML_FTZDAZ_MASK =             0x003C0000;

/*
//  ERROR STATUS MACROS
//  VML_STATUS_OK        - no errors
//  VML_STATUS_BADSIZE   - array dimension is not positive
//  VML_STATUS_BADMEM    - invalid pointer passed
//  VML_STATUS_ERRDOM    - at least one of arguments is out of function domain
//  VML_STATUS_SING      - at least one of arguments caused singularity
//  VML_STATUS_OVERFLOW  - at least one of arguments caused overflow
//  VML_STATUS_UNDERFLOW - at least one of arguments caused underflow
//  VML_STATUS_ACCURACYWARNING - function doesn't support set accuracy mode,
//                               lower accuracy mode was used instead
*/
public static final int VML_STATUS_OK =                    0;
public static final int VML_STATUS_BADSIZE =              -1;
public static final int VML_STATUS_BADMEM =               -2;
public static final int VML_STATUS_ERRDOM =                1;
public static final int VML_STATUS_SING =                  2;
public static final int VML_STATUS_OVERFLOW =              3;
public static final int VML_STATUS_UNDERFLOW =             4;
public static final int VML_STATUS_ACCURACYWARNING =       1000;

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif /* __MKL_VML_DEFINES_H__ */


// Parsed from mkl_vml_types.h

/* file: mkl_vml_types.h */
/*******************************************************************************
* Copyright 2006-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
//++
//  User-level type definitions.
//--
*/

// #ifndef __MKL_VML_TYPES_H__
// #define __MKL_VML_TYPES_H__

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #include "mkl_types.h"

/*
//++
//  TYPEDEFS
//--
*/

/*
//  ERROR CALLBACK CONTEXT.
//  Error callback context structure is used in a user's error callback
//  function with the following interface:
//
//      int USER_CALLBACK_FUNC_NAME( DefVmlErrorContext par )
//
//  Error callback context fields:
//  iCode        - error status
//  iIndex       - index of bad argument
//  dbA1         - 1-st argument value, at which error occured
//  dbA2         - 2-nd argument value, at which error occured
//                 (2-argument functions only)
//  dbR1         - 1-st resulting value
//  dbR2         - 2-nd resulting value (2-result functions only)
//  cFuncName    - function name, for which error occured
//  iFuncNameLen - length of function name
*/
public static class DefVmlErrorContext extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public DefVmlErrorContext() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DefVmlErrorContext(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DefVmlErrorContext(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public DefVmlErrorContext position(long position) {
        return (DefVmlErrorContext)super.position(position);
    }

    public native int iCode(); public native DefVmlErrorContext iCode(int iCode);
    public native int iIndex(); public native DefVmlErrorContext iIndex(int iIndex);
    public native double dbA1(); public native DefVmlErrorContext dbA1(double dbA1);
    public native double dbA2(); public native DefVmlErrorContext dbA2(double dbA2);
    public native double dbR1(); public native DefVmlErrorContext dbR1(double dbR1);
    public native double dbR2(); public native DefVmlErrorContext dbR2(double dbR2);
    public native @Cast("char") byte cFuncName(int i); public native DefVmlErrorContext cFuncName(int i, byte cFuncName);
    @MemberGetter public native @Cast("char*") BytePointer cFuncName();
    public native int iFuncNameLen(); public native DefVmlErrorContext iFuncNameLen(int iFuncNameLen);
    public native double dbA1Im(); public native DefVmlErrorContext dbA1Im(double dbA1Im);
    public native double dbA2Im(); public native DefVmlErrorContext dbA2Im(double dbA2Im);
    public native double dbR1Im(); public native DefVmlErrorContext dbR1Im(double dbR1Im);
    public native double dbR2Im(); public native DefVmlErrorContext dbR2Im(double dbR2Im);
}

/*
// User error callback handler function type
*/
public static class VMLErrorCallBack extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    VMLErrorCallBack(Pointer p) { super(p); }
    protected VMLErrorCallBack() { allocate(); }
    private native void allocate();
    public native int call(DefVmlErrorContext pdefVmlErrorContext);
}


// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif /* __MKL_VML_TYPES_H__ */


// Parsed from mkl_vml_functions.h

/* file: mkl_vml_functions.h */
/*******************************************************************************
* Copyright 2006-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
//++
//  User-level VML function declarations
//--
*/

// #ifndef __MKL_VML_FUNCTIONS_H__
// #define __MKL_VML_FUNCTIONS_H__

// #include "mkl_vml_types.h"

// #ifdef __cplusplus
// #endif /* __cplusplus */

/*
//++
//  EXTERNAL API MACROS.
//  Used to construct VML function declaration. Change them if you are going to
//  provide different API for VML functions.
//--
*/

// #if  !defined(_Mkl_Api)
// #define _Mkl_Api(rtype,name,arg)   extern rtype name    arg;
// #endif

// #if  !defined(_mkl_api)
// #define _mkl_api(rtype,name,arg)   extern rtype name##_ arg;
// #endif

// #if  !defined(_MKL_API)
// #define _MKL_API(rtype,name,arg)   extern rtype name##_ arg;
// #endif

/*
//++
//  VML ELEMENTARY FUNCTION DECLARATIONS.
//--
*/
/* Absolute value: r[i] = |a[i]| */
public static native void VSABS_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSABS_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSABS_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDABS_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDABS_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDABS_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsabs_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vsabs_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vsabs_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdabs_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdabs_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdabs_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsAbs(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsAbs(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsAbs(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdAbs(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdAbs(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdAbs(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSABS_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSABS_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSABS_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDABS_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDABS_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDABS_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsabs_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmsabs_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmsabs_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdabs_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdabs_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdabs_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsAbs(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsAbs(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsAbs(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdAbs(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdAbs(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdAbs(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Complex absolute value: r[i] = |a[i]| */
public static native void VCABS_(@Const MKL_INT n, @Const MKL_Complex8 a, FloatPointer r);
public static native void VCABS_(@Const MKL_INT n, @Const MKL_Complex8 a, FloatBuffer r);
public static native void VCABS_(@Const MKL_INT n, @Const MKL_Complex8 a, float[] r);
public static native void VZABS_(@Const MKL_INT n, @Const MKL_Complex16 a, DoublePointer r);
public static native void VZABS_(@Const MKL_INT n, @Const MKL_Complex16 a, DoubleBuffer r);
public static native void VZABS_(@Const MKL_INT n, @Const MKL_Complex16 a, double[] r);
public static native void vcabs_(@Const MKL_INT n, @Const MKL_Complex8 a, FloatPointer r);
public static native void vcabs_(@Const MKL_INT n, @Const MKL_Complex8 a, FloatBuffer r);
public static native void vcabs_(@Const MKL_INT n, @Const MKL_Complex8 a, float[] r);
public static native void vzabs_(@Const MKL_INT n, @Const MKL_Complex16 a, DoublePointer r);
public static native void vzabs_(@Const MKL_INT n, @Const MKL_Complex16 a, DoubleBuffer r);
public static native void vzabs_(@Const MKL_INT n, @Const MKL_Complex16 a, double[] r);
public static native void vcAbs(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, FloatPointer r);
public static native void vcAbs(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, FloatBuffer r);
public static native void vcAbs(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, float[] r);
public static native void vzAbs(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, DoublePointer r);
public static native void vzAbs(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, DoubleBuffer r);
public static native void vzAbs(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, double[] r);

public static native void VMCABS_(@Const MKL_INT n, @Const MKL_Complex8 a, FloatPointer r, MKL_INT64 mode);
public static native void VMCABS_(@Const MKL_INT n, @Const MKL_Complex8 a, FloatBuffer r, MKL_INT64 mode);
public static native void VMCABS_(@Const MKL_INT n, @Const MKL_Complex8 a, float[] r, MKL_INT64 mode);
public static native void VMZABS_(@Const MKL_INT n, @Const MKL_Complex16 a, DoublePointer r, MKL_INT64 mode);
public static native void VMZABS_(@Const MKL_INT n, @Const MKL_Complex16 a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMZABS_(@Const MKL_INT n, @Const MKL_Complex16 a, double[] r, MKL_INT64 mode);
public static native void vmcabs_(@Const MKL_INT n, @Const MKL_Complex8 a, FloatPointer r, MKL_INT64 mode);
public static native void vmcabs_(@Const MKL_INT n, @Const MKL_Complex8 a, FloatBuffer r, MKL_INT64 mode);
public static native void vmcabs_(@Const MKL_INT n, @Const MKL_Complex8 a, float[] r, MKL_INT64 mode);
public static native void vmzabs_(@Const MKL_INT n, @Const MKL_Complex16 a, DoublePointer r, MKL_INT64 mode);
public static native void vmzabs_(@Const MKL_INT n, @Const MKL_Complex16 a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmzabs_(@Const MKL_INT n, @Const MKL_Complex16 a, double[] r, MKL_INT64 mode);
public static native void vmcAbs(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmcAbs(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmcAbs(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmzAbs(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmzAbs(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmzAbs(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, double[] r, @ByVal MKL_INT64 mode);

/* Argument of complex value: r[i] = carg(a[i]) */
public static native void VCARG_(@Const MKL_INT n, @Const MKL_Complex8 a, FloatPointer r);
public static native void VCARG_(@Const MKL_INT n, @Const MKL_Complex8 a, FloatBuffer r);
public static native void VCARG_(@Const MKL_INT n, @Const MKL_Complex8 a, float[] r);
public static native void VZARG_(@Const MKL_INT n, @Const MKL_Complex16 a, DoublePointer r);
public static native void VZARG_(@Const MKL_INT n, @Const MKL_Complex16 a, DoubleBuffer r);
public static native void VZARG_(@Const MKL_INT n, @Const MKL_Complex16 a, double[] r);
public static native void vcarg_(@Const MKL_INT n, @Const MKL_Complex8 a, FloatPointer r);
public static native void vcarg_(@Const MKL_INT n, @Const MKL_Complex8 a, FloatBuffer r);
public static native void vcarg_(@Const MKL_INT n, @Const MKL_Complex8 a, float[] r);
public static native void vzarg_(@Const MKL_INT n, @Const MKL_Complex16 a, DoublePointer r);
public static native void vzarg_(@Const MKL_INT n, @Const MKL_Complex16 a, DoubleBuffer r);
public static native void vzarg_(@Const MKL_INT n, @Const MKL_Complex16 a, double[] r);
public static native void vcArg(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, FloatPointer r);
public static native void vcArg(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, FloatBuffer r);
public static native void vcArg(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, float[] r);
public static native void vzArg(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, DoublePointer r);
public static native void vzArg(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, DoubleBuffer r);
public static native void vzArg(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, double[] r);

public static native void VMCARG_(@Const MKL_INT n, @Const MKL_Complex8 a, FloatPointer r, MKL_INT64 mode);
public static native void VMCARG_(@Const MKL_INT n, @Const MKL_Complex8 a, FloatBuffer r, MKL_INT64 mode);
public static native void VMCARG_(@Const MKL_INT n, @Const MKL_Complex8 a, float[] r, MKL_INT64 mode);
public static native void VMZARG_(@Const MKL_INT n, @Const MKL_Complex16 a, DoublePointer r, MKL_INT64 mode);
public static native void VMZARG_(@Const MKL_INT n, @Const MKL_Complex16 a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMZARG_(@Const MKL_INT n, @Const MKL_Complex16 a, double[] r, MKL_INT64 mode);
public static native void vmcarg_(@Const MKL_INT n, @Const MKL_Complex8 a, FloatPointer r, MKL_INT64 mode);
public static native void vmcarg_(@Const MKL_INT n, @Const MKL_Complex8 a, FloatBuffer r, MKL_INT64 mode);
public static native void vmcarg_(@Const MKL_INT n, @Const MKL_Complex8 a, float[] r, MKL_INT64 mode);
public static native void vmzarg_(@Const MKL_INT n, @Const MKL_Complex16 a, DoublePointer r, MKL_INT64 mode);
public static native void vmzarg_(@Const MKL_INT n, @Const MKL_Complex16 a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmzarg_(@Const MKL_INT n, @Const MKL_Complex16 a, double[] r, MKL_INT64 mode);
public static native void vmcArg(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmcArg(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmcArg(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmzArg(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmzArg(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmzArg(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, double[] r, @ByVal MKL_INT64 mode);

/* Addition: r[i] = a[i] + b[i] */
public static native void VSADD_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void VSADD_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void VSADD_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r);
public static native void VDADD_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void VDADD_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void VDADD_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r);
public static native void vsadd_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void vsadd_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void vsadd_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r);
public static native void vdadd_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void vdadd_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void vdadd_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r);
public static native void vsAdd(@Const @ByVal MKL_INT n,  @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void vsAdd(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void vsAdd(@Const @ByVal MKL_INT n,  @Const float[] a, @Const float[] b, float[] r);
public static native void vdAdd(@Const @ByVal MKL_INT n,  @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void vdAdd(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void vdAdd(@Const @ByVal MKL_INT n,  @Const double[] a, @Const double[] b, double[] r);

public static native void VMSADD_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, MKL_INT64 mode);
public static native void VMSADD_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, MKL_INT64 mode);
public static native void VMSADD_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r, MKL_INT64 mode);
public static native void VMDADD_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, MKL_INT64 mode);
public static native void VMDADD_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDADD_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r, MKL_INT64 mode);
public static native void vmsadd_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, MKL_INT64 mode);
public static native void vmsadd_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, MKL_INT64 mode);
public static native void vmsadd_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r, MKL_INT64 mode);
public static native void vmdadd_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, MKL_INT64 mode);
public static native void vmdadd_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdadd_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r, MKL_INT64 mode);
public static native void vmsAdd(@Const @ByVal MKL_INT n,  @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsAdd(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsAdd(@Const @ByVal MKL_INT n,  @Const float[] a, @Const float[] b, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdAdd(@Const @ByVal MKL_INT n,  @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdAdd(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdAdd(@Const @ByVal MKL_INT n,  @Const double[] a, @Const double[] b, double[] r, @ByVal MKL_INT64 mode);

/* Complex addition: r[i] = a[i] + b[i] */
public static native void VCADD_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r);
public static native void VZADD_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r);
public static native void vcadd_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r);
public static native void vzadd_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r);
public static native void vcAdd(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r);
public static native void vzAdd(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r);

public static native void VMCADD_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZADD_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcadd_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzadd_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcAdd(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzAdd(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Subtraction: r[i] = a[i] - b[i] */
public static native void VSSUB_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void VSSUB_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void VSSUB_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r);
public static native void VDSUB_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void VDSUB_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void VDSUB_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r);
public static native void vssub_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void vssub_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void vssub_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r);
public static native void vdsub_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void vdsub_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void vdsub_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r);
public static native void vsSub(@Const @ByVal MKL_INT n,  @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void vsSub(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void vsSub(@Const @ByVal MKL_INT n,  @Const float[] a, @Const float[] b, float[] r);
public static native void vdSub(@Const @ByVal MKL_INT n,  @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void vdSub(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void vdSub(@Const @ByVal MKL_INT n,  @Const double[] a, @Const double[] b, double[] r);

public static native void VMSSUB_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, MKL_INT64 mode);
public static native void VMSSUB_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, MKL_INT64 mode);
public static native void VMSSUB_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r, MKL_INT64 mode);
public static native void VMDSUB_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, MKL_INT64 mode);
public static native void VMDSUB_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDSUB_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r, MKL_INT64 mode);
public static native void vmssub_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, MKL_INT64 mode);
public static native void vmssub_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, MKL_INT64 mode);
public static native void vmssub_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r, MKL_INT64 mode);
public static native void vmdsub_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, MKL_INT64 mode);
public static native void vmdsub_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdsub_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r, MKL_INT64 mode);
public static native void vmsSub(@Const @ByVal MKL_INT n,  @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsSub(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsSub(@Const @ByVal MKL_INT n,  @Const float[] a, @Const float[] b, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdSub(@Const @ByVal MKL_INT n,  @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdSub(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdSub(@Const @ByVal MKL_INT n,  @Const double[] a, @Const double[] b, double[] r, @ByVal MKL_INT64 mode);

/* Complex subtraction: r[i] = a[i] - b[i] */
public static native void VCSUB_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r);
public static native void VZSUB_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r);
public static native void vcsub_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r);
public static native void vzsub_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r);
public static native void vcSub(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r);
public static native void vzSub(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r);

public static native void VMCSUB_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZSUB_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcsub_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzsub_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcSub(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzSub(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Reciprocal: r[i] = 1.0 / a[i] */
public static native void VSINV_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSINV_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSINV_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDINV_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDINV_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDINV_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsinv_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vsinv_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vsinv_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdinv_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdinv_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdinv_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsInv(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsInv(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsInv(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdInv(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdInv(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdInv(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSINV_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSINV_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSINV_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDINV_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDINV_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDINV_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsinv_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmsinv_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmsinv_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdinv_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdinv_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdinv_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsInv(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsInv(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsInv(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdInv(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdInv(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdInv(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Square root: r[i] = a[i]^0.5 */
public static native void VSSQRT_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSSQRT_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSSQRT_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDSQRT_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDSQRT_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDSQRT_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vssqrt_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vssqrt_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vssqrt_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdsqrt_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdsqrt_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdsqrt_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsSqrt(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsSqrt(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsSqrt(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdSqrt(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdSqrt(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdSqrt(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSSQRT_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSSQRT_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSSQRT_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDSQRT_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDSQRT_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDSQRT_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmssqrt_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmssqrt_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmssqrt_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdsqrt_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdsqrt_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdsqrt_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsSqrt(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsSqrt(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsSqrt(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdSqrt(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdSqrt(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdSqrt(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Complex square root: r[i] = a[i]^0.5 */
public static native void VCSQRT_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void VZSQRT_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcsqrt_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzsqrt_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcSqrt(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzSqrt(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r);

public static native void VMCSQRT_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZSQRT_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcsqrt_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzsqrt_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcSqrt(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzSqrt(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Reciprocal square root: r[i] = 1/a[i]^0.5 */
public static native void VSINVSQRT_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSINVSQRT_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSINVSQRT_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDINVSQRT_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDINVSQRT_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDINVSQRT_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsinvsqrt_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vsinvsqrt_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vsinvsqrt_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdinvsqrt_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdinvsqrt_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdinvsqrt_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsInvSqrt(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsInvSqrt(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsInvSqrt(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdInvSqrt(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdInvSqrt(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdInvSqrt(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSINVSQRT_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSINVSQRT_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSINVSQRT_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDINVSQRT_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDINVSQRT_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDINVSQRT_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsinvsqrt_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmsinvsqrt_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmsinvsqrt_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdinvsqrt_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdinvsqrt_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdinvsqrt_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsInvSqrt(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsInvSqrt(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsInvSqrt(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdInvSqrt(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdInvSqrt(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdInvSqrt(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Cube root: r[i] = a[i]^(1/3) */
public static native void VSCBRT_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSCBRT_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSCBRT_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDCBRT_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDCBRT_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDCBRT_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vscbrt_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vscbrt_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vscbrt_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdcbrt_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdcbrt_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdcbrt_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsCbrt(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsCbrt(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsCbrt(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdCbrt(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdCbrt(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdCbrt(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSCBRT_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSCBRT_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSCBRT_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDCBRT_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDCBRT_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDCBRT_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmscbrt_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmscbrt_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmscbrt_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdcbrt_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdcbrt_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdcbrt_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsCbrt(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsCbrt(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsCbrt(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdCbrt(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdCbrt(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdCbrt(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Reciprocal cube root: r[i] = 1/a[i]^(1/3) */
public static native void VSINVCBRT_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSINVCBRT_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSINVCBRT_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDINVCBRT_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDINVCBRT_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDINVCBRT_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsinvcbrt_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vsinvcbrt_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vsinvcbrt_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdinvcbrt_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdinvcbrt_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdinvcbrt_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsInvCbrt(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsInvCbrt(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsInvCbrt(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdInvCbrt(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdInvCbrt(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdInvCbrt(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSINVCBRT_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSINVCBRT_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSINVCBRT_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDINVCBRT_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDINVCBRT_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDINVCBRT_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsinvcbrt_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmsinvcbrt_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmsinvcbrt_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdinvcbrt_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdinvcbrt_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdinvcbrt_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsInvCbrt(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsInvCbrt(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsInvCbrt(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdInvCbrt(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdInvCbrt(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdInvCbrt(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Squaring: r[i] = a[i]^2 */
public static native void VSSQR_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSSQR_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSSQR_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDSQR_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDSQR_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDSQR_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vssqr_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vssqr_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vssqr_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdsqr_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdsqr_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdsqr_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsSqr(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsSqr(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsSqr(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdSqr(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdSqr(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdSqr(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSSQR_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSSQR_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSSQR_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDSQR_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDSQR_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDSQR_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmssqr_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmssqr_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmssqr_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdsqr_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdsqr_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdsqr_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsSqr(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsSqr(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsSqr(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdSqr(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdSqr(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdSqr(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Exponential function: r[i] = e^a[i] */
public static native void VSEXP_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSEXP_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSEXP_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDEXP_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDEXP_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDEXP_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsexp_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vsexp_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vsexp_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdexp_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdexp_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdexp_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsExp(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsExp(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsExp(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdExp(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdExp(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdExp(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSEXP_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSEXP_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSEXP_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDEXP_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDEXP_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDEXP_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsexp_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmsexp_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmsexp_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdexp_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdexp_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdexp_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsExp(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsExp(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsExp(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdExp(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdExp(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdExp(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Exponential of arguments decreased by 1: r[i] = e^(a[i]-1) */
public static native void VSEXPM1_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSEXPM1_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSEXPM1_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDEXPM1_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDEXPM1_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDEXPM1_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsexpm1_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vsexpm1_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vsexpm1_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdexpm1_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdexpm1_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdexpm1_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsExpm1(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsExpm1(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsExpm1(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdExpm1(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdExpm1(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdExpm1(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSEXPM1_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSEXPM1_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSEXPM1_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDEXPM1_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDEXPM1_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDEXPM1_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsexpm1_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmsexpm1_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmsexpm1_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdexpm1_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdexpm1_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdexpm1_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsExpm1(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsExpm1(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsExpm1(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdExpm1(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdExpm1(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdExpm1(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Complex exponential function: r[i] = e^a[i] */
public static native void VCEXP_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void VZEXP_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcexp_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzexp_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcExp(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzExp(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r);

public static native void VMCEXP_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZEXP_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcexp_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzexp_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcExp(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzExp(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Logarithm (base e): r[i] = ln(a[i]) */
public static native void VSLN_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSLN_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSLN_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDLN_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDLN_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDLN_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsln_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vsln_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vsln_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdln_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdln_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdln_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsLn(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsLn(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsLn(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdLn(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdLn(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdLn(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSLN_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSLN_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSLN_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDLN_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDLN_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDLN_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsln_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmsln_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmsln_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdln_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdln_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdln_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsLn(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsLn(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsLn(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdLn(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdLn(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdLn(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Complex logarithm (base e): r[i] = ln(a[i]) */
public static native void VCLN_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void VZLN_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcln_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzln_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcLn(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzLn(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r);

public static native void VMCLN_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZLN_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcln_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzln_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcLn(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzLn(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Logarithm (base 10): r[i] = lg(a[i]) */
public static native void VSLOG10_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSLOG10_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSLOG10_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDLOG10_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDLOG10_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDLOG10_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vslog10_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vslog10_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vslog10_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdlog10_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdlog10_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdlog10_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsLog10(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsLog10(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsLog10(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdLog10(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdLog10(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdLog10(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSLOG10_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSLOG10_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSLOG10_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDLOG10_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDLOG10_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDLOG10_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmslog10_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmslog10_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmslog10_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdlog10_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdlog10_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdlog10_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsLog10(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsLog10(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsLog10(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdLog10(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdLog10(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdLog10(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Complex logarithm (base 10): r[i] = lg(a[i]) */
public static native void VCLOG10_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void VZLOG10_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vclog10_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzlog10_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcLog10(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzLog10(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r);

public static native void VMCLOG10_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZLOG10_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmclog10_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzlog10_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcLog10(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzLog10(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Logarithm (base e) of arguments increased by 1: r[i] = log(1+a[i]) */
public static native void VSLOG1P_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSLOG1P_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSLOG1P_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDLOG1P_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDLOG1P_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDLOG1P_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vslog1p_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vslog1p_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vslog1p_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdlog1p_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdlog1p_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdlog1p_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsLog1p(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsLog1p(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsLog1p(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdLog1p(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdLog1p(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdLog1p(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSLOG1P_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSLOG1P_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSLOG1P_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDLOG1P_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDLOG1P_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDLOG1P_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmslog1p_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmslog1p_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmslog1p_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdlog1p_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdlog1p_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdlog1p_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsLog1p(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsLog1p(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsLog1p(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdLog1p(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdLog1p(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdLog1p(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Cosine: r[i] = cos(a[i]) */
public static native void VSCOS_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSCOS_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSCOS_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDCOS_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDCOS_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDCOS_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vscos_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vscos_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vscos_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdcos_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdcos_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdcos_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsCos(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsCos(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsCos(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdCos(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdCos(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdCos(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSCOS_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSCOS_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSCOS_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDCOS_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDCOS_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDCOS_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmscos_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmscos_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmscos_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdcos_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdcos_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdcos_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsCos(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsCos(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsCos(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdCos(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdCos(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdCos(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Complex cosine: r[i] = ccos(a[i]) */
public static native void VCCOS_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void VZCOS_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vccos_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzcos_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcCos(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzCos(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r);

public static native void VMCCOS_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZCOS_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmccos_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzcos_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcCos(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzCos(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Sine: r[i] = sin(a[i]) */
public static native void VSSIN_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSSIN_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSSIN_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDSIN_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDSIN_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDSIN_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vssin_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vssin_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vssin_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdsin_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdsin_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdsin_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsSin(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsSin(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsSin(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdSin(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdSin(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdSin(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSSIN_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSSIN_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSSIN_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDSIN_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDSIN_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDSIN_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmssin_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmssin_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmssin_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdsin_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdsin_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdsin_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsSin(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsSin(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsSin(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdSin(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdSin(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdSin(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Complex sine: r[i] = sin(a[i]) */
public static native void VCSIN_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void VZSIN_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcsin_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzsin_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcSin(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzSin(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r);

public static native void VMCSIN_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZSIN_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcsin_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzsin_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcSin(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzSin(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Tangent: r[i] = tan(a[i]) */
public static native void VSTAN_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSTAN_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSTAN_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDTAN_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDTAN_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDTAN_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vstan_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vstan_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vstan_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdtan_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdtan_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdtan_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsTan(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsTan(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsTan(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdTan(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdTan(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdTan(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSTAN_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSTAN_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSTAN_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDTAN_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDTAN_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDTAN_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmstan_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmstan_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmstan_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdtan_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdtan_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdtan_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsTan(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsTan(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsTan(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdTan(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdTan(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdTan(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Complex tangent: r[i] = tan(a[i]) */
public static native void VCTAN_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void VZTAN_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vctan_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vztan_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcTan(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzTan(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r);

public static native void VMCTAN_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZTAN_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmctan_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmztan_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcTan(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzTan(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Hyperbolic cosine: r[i] = ch(a[i]) */
public static native void VSCOSH_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSCOSH_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSCOSH_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDCOSH_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDCOSH_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDCOSH_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vscosh_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vscosh_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vscosh_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdcosh_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdcosh_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdcosh_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsCosh(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsCosh(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsCosh(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdCosh(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdCosh(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdCosh(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSCOSH_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSCOSH_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSCOSH_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDCOSH_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDCOSH_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDCOSH_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmscosh_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmscosh_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmscosh_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdcosh_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdcosh_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdcosh_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsCosh(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsCosh(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsCosh(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdCosh(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdCosh(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdCosh(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Complex hyperbolic cosine: r[i] = ch(a[i]) */
public static native void VCCOSH_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void VZCOSH_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vccosh_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzcosh_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcCosh(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzCosh(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r);

public static native void VMCCOSH_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZCOSH_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmccosh_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzcosh_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcCosh(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzCosh(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Hyperbolic sine: r[i] = sh(a[i]) */
public static native void VSSINH_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSSINH_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSSINH_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDSINH_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDSINH_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDSINH_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vssinh_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vssinh_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vssinh_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdsinh_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdsinh_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdsinh_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsSinh(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsSinh(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsSinh(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdSinh(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdSinh(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdSinh(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSSINH_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSSINH_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSSINH_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDSINH_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDSINH_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDSINH_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmssinh_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmssinh_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmssinh_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdsinh_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdsinh_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdsinh_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsSinh(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsSinh(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsSinh(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdSinh(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdSinh(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdSinh(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Complex hyperbolic sine: r[i] = sh(a[i]) */
public static native void VCSINH_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void VZSINH_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcsinh_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzsinh_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcSinh(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzSinh(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r);

public static native void VMCSINH_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZSINH_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcsinh_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzsinh_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcSinh(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzSinh(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Hyperbolic tangent: r[i] = th(a[i]) */
public static native void VSTANH_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSTANH_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSTANH_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDTANH_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDTANH_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDTANH_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vstanh_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vstanh_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vstanh_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdtanh_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdtanh_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdtanh_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsTanh(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsTanh(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsTanh(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdTanh(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdTanh(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdTanh(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSTANH_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSTANH_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSTANH_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDTANH_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDTANH_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDTANH_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmstanh_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmstanh_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmstanh_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdtanh_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdtanh_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdtanh_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsTanh(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsTanh(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsTanh(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdTanh(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdTanh(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdTanh(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Complex hyperbolic tangent: r[i] = th(a[i]) */
public static native void VCTANH_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void VZTANH_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vctanh_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vztanh_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcTanh(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzTanh(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r);

public static native void VMCTANH_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZTANH_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmctanh_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmztanh_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcTanh(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzTanh(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Arc cosine: r[i] = arccos(a[i]) */
public static native void VSACOS_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSACOS_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSACOS_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDACOS_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDACOS_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDACOS_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsacos_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vsacos_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vsacos_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdacos_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdacos_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdacos_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsAcos(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsAcos(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsAcos(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdAcos(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdAcos(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdAcos(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSACOS_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSACOS_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSACOS_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDACOS_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDACOS_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDACOS_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsacos_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmsacos_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmsacos_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdacos_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdacos_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdacos_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsAcos(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsAcos(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsAcos(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdAcos(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdAcos(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdAcos(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Complex arc cosine: r[i] = arccos(a[i]) */
public static native void VCACOS_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void VZACOS_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcacos_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzacos_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcAcos(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzAcos(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r);

public static native void VMCACOS_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZACOS_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcacos_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzacos_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcAcos(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzAcos(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Arc sine: r[i] = arcsin(a[i]) */
public static native void VSASIN_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSASIN_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSASIN_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDASIN_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDASIN_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDASIN_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsasin_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vsasin_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vsasin_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdasin_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdasin_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdasin_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsAsin(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsAsin(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsAsin(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdAsin(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdAsin(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdAsin(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSASIN_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSASIN_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSASIN_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDASIN_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDASIN_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDASIN_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsasin_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmsasin_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmsasin_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdasin_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdasin_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdasin_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsAsin(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsAsin(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsAsin(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdAsin(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdAsin(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdAsin(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Complex arc sine: r[i] = arcsin(a[i]) */
public static native void VCASIN_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void VZASIN_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcasin_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzasin_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcAsin(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzAsin(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r);

public static native void VMCASIN_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZASIN_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcasin_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzasin_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcAsin(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzAsin(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Arc tangent: r[i] = arctan(a[i]) */
public static native void VSATAN_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSATAN_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSATAN_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDATAN_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDATAN_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDATAN_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsatan_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vsatan_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vsatan_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdatan_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdatan_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdatan_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsAtan(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsAtan(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsAtan(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdAtan(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdAtan(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdAtan(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSATAN_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSATAN_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSATAN_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDATAN_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDATAN_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDATAN_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsatan_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmsatan_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmsatan_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdatan_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdatan_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdatan_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsAtan(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsAtan(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsAtan(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdAtan(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdAtan(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdAtan(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Complex arc tangent: r[i] = arctan(a[i]) */
public static native void VCATAN_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void VZATAN_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcatan_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzatan_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcAtan(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzAtan(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r);

public static native void VMCATAN_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZATAN_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcatan_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzatan_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcAtan(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzAtan(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Hyperbolic arc cosine: r[i] = arcch(a[i]) */
public static native void VSACOSH_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSACOSH_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSACOSH_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDACOSH_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDACOSH_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDACOSH_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsacosh_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vsacosh_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vsacosh_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdacosh_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdacosh_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdacosh_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsAcosh(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsAcosh(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsAcosh(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdAcosh(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdAcosh(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdAcosh(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSACOSH_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSACOSH_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSACOSH_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDACOSH_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDACOSH_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDACOSH_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsacosh_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmsacosh_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmsacosh_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdacosh_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdacosh_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdacosh_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsAcosh(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsAcosh(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsAcosh(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdAcosh(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdAcosh(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdAcosh(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Complex hyperbolic arc cosine: r[i] = arcch(a[i]) */
public static native void VCACOSH_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void VZACOSH_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcacosh_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzacosh_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcAcosh(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzAcosh(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r);

public static native void VMCACOSH_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZACOSH_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcacosh_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzacosh_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcAcosh(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzAcosh(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Hyperbolic arc sine: r[i] = arcsh(a[i]) */
public static native void VSASINH_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSASINH_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSASINH_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDASINH_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDASINH_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDASINH_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsasinh_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vsasinh_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vsasinh_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdasinh_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdasinh_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdasinh_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsAsinh(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsAsinh(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsAsinh(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdAsinh(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdAsinh(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdAsinh(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSASINH_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSASINH_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSASINH_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDASINH_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDASINH_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDASINH_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsasinh_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmsasinh_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmsasinh_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdasinh_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdasinh_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdasinh_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsAsinh(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsAsinh(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsAsinh(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdAsinh(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdAsinh(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdAsinh(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Complex hyperbolic arc sine: r[i] = arcsh(a[i]) */
public static native void VCASINH_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void VZASINH_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcasinh_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzasinh_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcAsinh(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzAsinh(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r);

public static native void VMCASINH_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZASINH_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcasinh_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzasinh_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcAsinh(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzAsinh(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Hyperbolic arc tangent: r[i] = arcth(a[i]) */
public static native void VSATANH_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSATANH_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSATANH_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDATANH_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDATANH_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDATANH_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsatanh_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vsatanh_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vsatanh_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdatanh_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdatanh_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdatanh_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsAtanh(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsAtanh(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsAtanh(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdAtanh(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdAtanh(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdAtanh(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSATANH_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSATANH_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSATANH_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDATANH_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDATANH_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDATANH_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsatanh_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmsatanh_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmsatanh_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdatanh_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdatanh_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdatanh_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsAtanh(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsAtanh(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsAtanh(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdAtanh(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdAtanh(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdAtanh(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Complex hyperbolic arc tangent: r[i] = arcth(a[i]) */
public static native void VCATANH_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void VZATANH_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcatanh_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzatanh_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcAtanh(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzAtanh(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r);

public static native void VMCATANH_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZATANH_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcatanh_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzatanh_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcAtanh(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzAtanh(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Error function: r[i] = erf(a[i]) */
public static native void VSERF_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSERF_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSERF_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDERF_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDERF_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDERF_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vserf_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vserf_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vserf_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vderf_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vderf_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vderf_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsErf(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsErf(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsErf(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdErf(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdErf(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdErf(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSERF_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSERF_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSERF_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDERF_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDERF_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDERF_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmserf_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmserf_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmserf_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmderf_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmderf_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmderf_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsErf(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsErf(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsErf(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdErf(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdErf(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdErf(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Inverse error function: r[i] = erfinv(a[i]) */
public static native void VSERFINV_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSERFINV_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSERFINV_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDERFINV_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDERFINV_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDERFINV_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vserfinv_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vserfinv_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vserfinv_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vderfinv_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vderfinv_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vderfinv_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsErfInv(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsErfInv(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsErfInv(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdErfInv(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdErfInv(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdErfInv(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSERFINV_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSERFINV_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSERFINV_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDERFINV_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDERFINV_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDERFINV_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmserfinv_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmserfinv_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmserfinv_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmderfinv_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmderfinv_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmderfinv_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsErfInv(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsErfInv(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsErfInv(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdErfInv(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdErfInv(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdErfInv(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Square root of the sum of the squares: r[i] = hypot(a[i],b[i]) */
public static native void VSHYPOT_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void VSHYPOT_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void VSHYPOT_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r);
public static native void VDHYPOT_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void VDHYPOT_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void VDHYPOT_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r);
public static native void vshypot_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void vshypot_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void vshypot_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r);
public static native void vdhypot_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void vdhypot_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void vdhypot_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r);
public static native void vsHypot(@Const @ByVal MKL_INT n,  @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void vsHypot(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void vsHypot(@Const @ByVal MKL_INT n,  @Const float[] a, @Const float[] b, float[] r);
public static native void vdHypot(@Const @ByVal MKL_INT n,  @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void vdHypot(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void vdHypot(@Const @ByVal MKL_INT n,  @Const double[] a, @Const double[] b, double[] r);

public static native void VMSHYPOT_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, MKL_INT64 mode);
public static native void VMSHYPOT_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, MKL_INT64 mode);
public static native void VMSHYPOT_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r, MKL_INT64 mode);
public static native void VMDHYPOT_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, MKL_INT64 mode);
public static native void VMDHYPOT_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDHYPOT_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r, MKL_INT64 mode);
public static native void vmshypot_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, MKL_INT64 mode);
public static native void vmshypot_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, MKL_INT64 mode);
public static native void vmshypot_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r, MKL_INT64 mode);
public static native void vmdhypot_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, MKL_INT64 mode);
public static native void vmdhypot_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdhypot_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r, MKL_INT64 mode);
public static native void vmsHypot(@Const @ByVal MKL_INT n,  @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsHypot(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsHypot(@Const @ByVal MKL_INT n,  @Const float[] a, @Const float[] b, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdHypot(@Const @ByVal MKL_INT n,  @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdHypot(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdHypot(@Const @ByVal MKL_INT n,  @Const double[] a, @Const double[] b, double[] r, @ByVal MKL_INT64 mode);

/* Complementary error function: r[i] = 1 - erf(a[i]) */
public static native void VSERFC_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSERFC_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSERFC_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDERFC_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDERFC_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDERFC_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vserfc_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vserfc_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vserfc_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vderfc_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vderfc_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vderfc_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsErfc(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsErfc(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsErfc(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdErfc(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdErfc(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdErfc(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSERFC_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSERFC_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSERFC_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDERFC_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDERFC_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDERFC_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmserfc_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmserfc_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmserfc_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmderfc_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmderfc_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmderfc_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsErfc(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsErfc(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsErfc(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdErfc(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdErfc(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdErfc(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Inverse complementary error function: r[i] = erfcinv(a[i]) */
public static native void VSERFCINV_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSERFCINV_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSERFCINV_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDERFCINV_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDERFCINV_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDERFCINV_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vserfcinv_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vserfcinv_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vserfcinv_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vderfcinv_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vderfcinv_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vderfcinv_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsErfcInv(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsErfcInv(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsErfcInv(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdErfcInv(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdErfcInv(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdErfcInv(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSERFCINV_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSERFCINV_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSERFCINV_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDERFCINV_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDERFCINV_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDERFCINV_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmserfcinv_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmserfcinv_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmserfcinv_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmderfcinv_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmderfcinv_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmderfcinv_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsErfcInv(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsErfcInv(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsErfcInv(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdErfcInv(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdErfcInv(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdErfcInv(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Cumulative normal distribution function: r[i] = cdfnorm(a[i]) */
public static native void VSCDFNORM_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSCDFNORM_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSCDFNORM_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDCDFNORM_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDCDFNORM_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDCDFNORM_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vscdfnorm_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vscdfnorm_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vscdfnorm_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdcdfnorm_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdcdfnorm_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdcdfnorm_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsCdfNorm(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsCdfNorm(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsCdfNorm(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdCdfNorm(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdCdfNorm(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdCdfNorm(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSCDFNORM_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSCDFNORM_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSCDFNORM_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDCDFNORM_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDCDFNORM_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDCDFNORM_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmscdfnorm_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmscdfnorm_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmscdfnorm_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdcdfnorm_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdcdfnorm_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdcdfnorm_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsCdfNorm(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsCdfNorm(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsCdfNorm(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdCdfNorm(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdCdfNorm(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdCdfNorm(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Inverse cumulative normal distribution function: r[i] = cdfnorminv(a[i]) */
public static native void VSCDFNORMINV_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSCDFNORMINV_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSCDFNORMINV_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDCDFNORMINV_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDCDFNORMINV_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDCDFNORMINV_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vscdfnorminv_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vscdfnorminv_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vscdfnorminv_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdcdfnorminv_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdcdfnorminv_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdcdfnorminv_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsCdfNormInv(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsCdfNormInv(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsCdfNormInv(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdCdfNormInv(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdCdfNormInv(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdCdfNormInv(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSCDFNORMINV_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSCDFNORMINV_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSCDFNORMINV_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDCDFNORMINV_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDCDFNORMINV_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDCDFNORMINV_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmscdfnorminv_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmscdfnorminv_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmscdfnorminv_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdcdfnorminv_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdcdfnorminv_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdcdfnorminv_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsCdfNormInv(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsCdfNormInv(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsCdfNormInv(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdCdfNormInv(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdCdfNormInv(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdCdfNormInv(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Logarithm (base e) of the absolute value of gamma function: r[i] = lgamma(a[i]) */
public static native void VSLGAMMA_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSLGAMMA_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSLGAMMA_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDLGAMMA_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDLGAMMA_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDLGAMMA_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vslgamma_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vslgamma_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vslgamma_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdlgamma_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdlgamma_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdlgamma_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsLGamma(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsLGamma(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsLGamma(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdLGamma(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdLGamma(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdLGamma(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSLGAMMA_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSLGAMMA_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSLGAMMA_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDLGAMMA_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDLGAMMA_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDLGAMMA_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmslgamma_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmslgamma_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmslgamma_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdlgamma_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdlgamma_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdlgamma_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsLGamma(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsLGamma(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsLGamma(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdLGamma(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdLGamma(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdLGamma(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Gamma function: r[i] = tgamma(a[i]) */
public static native void VSTGAMMA_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSTGAMMA_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSTGAMMA_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDTGAMMA_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDTGAMMA_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDTGAMMA_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vstgamma_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vstgamma_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vstgamma_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdtgamma_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdtgamma_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdtgamma_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsTGamma(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsTGamma(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsTGamma(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdTGamma(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdTGamma(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdTGamma(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSTGAMMA_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSTGAMMA_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSTGAMMA_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDTGAMMA_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDTGAMMA_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDTGAMMA_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmstgamma_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmstgamma_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmstgamma_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdtgamma_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdtgamma_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdtgamma_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsTGamma(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsTGamma(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsTGamma(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdTGamma(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdTGamma(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdTGamma(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Arc tangent of a/b: r[i] = arctan(a[i]/b[i]) */
public static native void VSATAN2_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void VSATAN2_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void VSATAN2_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r);
public static native void VDATAN2_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void VDATAN2_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void VDATAN2_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r);
public static native void vsatan2_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void vsatan2_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void vsatan2_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r);
public static native void vdatan2_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void vdatan2_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void vdatan2_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r);
public static native void vsAtan2(@Const @ByVal MKL_INT n,  @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void vsAtan2(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void vsAtan2(@Const @ByVal MKL_INT n,  @Const float[] a, @Const float[] b, float[] r);
public static native void vdAtan2(@Const @ByVal MKL_INT n,  @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void vdAtan2(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void vdAtan2(@Const @ByVal MKL_INT n,  @Const double[] a, @Const double[] b, double[] r);

public static native void VMSATAN2_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, MKL_INT64 mode);
public static native void VMSATAN2_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, MKL_INT64 mode);
public static native void VMSATAN2_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r, MKL_INT64 mode);
public static native void VMDATAN2_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, MKL_INT64 mode);
public static native void VMDATAN2_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDATAN2_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r, MKL_INT64 mode);
public static native void vmsatan2_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, MKL_INT64 mode);
public static native void vmsatan2_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, MKL_INT64 mode);
public static native void vmsatan2_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r, MKL_INT64 mode);
public static native void vmdatan2_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, MKL_INT64 mode);
public static native void vmdatan2_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdatan2_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r, MKL_INT64 mode);
public static native void vmsAtan2(@Const @ByVal MKL_INT n,  @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsAtan2(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsAtan2(@Const @ByVal MKL_INT n,  @Const float[] a, @Const float[] b, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdAtan2(@Const @ByVal MKL_INT n,  @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdAtan2(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdAtan2(@Const @ByVal MKL_INT n,  @Const double[] a, @Const double[] b, double[] r, @ByVal MKL_INT64 mode);

/* Multiplicaton: r[i] = a[i] * b[i] */
public static native void VSMUL_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void VSMUL_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void VSMUL_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r);
public static native void VDMUL_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void VDMUL_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void VDMUL_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r);
public static native void vsmul_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void vsmul_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void vsmul_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r);
public static native void vdmul_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void vdmul_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void vdmul_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r);
public static native void vsMul(@Const @ByVal MKL_INT n,  @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void vsMul(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void vsMul(@Const @ByVal MKL_INT n,  @Const float[] a, @Const float[] b, float[] r);
public static native void vdMul(@Const @ByVal MKL_INT n,  @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void vdMul(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void vdMul(@Const @ByVal MKL_INT n,  @Const double[] a, @Const double[] b, double[] r);

public static native void VMSMUL_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, MKL_INT64 mode);
public static native void VMSMUL_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, MKL_INT64 mode);
public static native void VMSMUL_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r, MKL_INT64 mode);
public static native void VMDMUL_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, MKL_INT64 mode);
public static native void VMDMUL_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDMUL_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r, MKL_INT64 mode);
public static native void vmsmul_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, MKL_INT64 mode);
public static native void vmsmul_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, MKL_INT64 mode);
public static native void vmsmul_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r, MKL_INT64 mode);
public static native void vmdmul_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, MKL_INT64 mode);
public static native void vmdmul_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdmul_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r, MKL_INT64 mode);
public static native void vmsMul(@Const @ByVal MKL_INT n,  @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsMul(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsMul(@Const @ByVal MKL_INT n,  @Const float[] a, @Const float[] b, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdMul(@Const @ByVal MKL_INT n,  @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdMul(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdMul(@Const @ByVal MKL_INT n,  @Const double[] a, @Const double[] b, double[] r, @ByVal MKL_INT64 mode);

/* Complex multiplication: r[i] = a[i] * b[i] */
public static native void VCMUL_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r);
public static native void VZMUL_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r);
public static native void vcmul_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r);
public static native void vzmul_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r);
public static native void vcMul(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r);
public static native void vzMul(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r);

public static native void VMCMUL_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZMUL_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcmul_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzmul_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcMul(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzMul(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Division: r[i] = a[i] / b[i] */
public static native void VSDIV_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void VSDIV_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void VSDIV_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r);
public static native void VDDIV_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void VDDIV_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void VDDIV_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r);
public static native void vsdiv_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void vsdiv_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void vsdiv_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r);
public static native void vddiv_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void vddiv_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void vddiv_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r);
public static native void vsDiv(@Const @ByVal MKL_INT n,  @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void vsDiv(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void vsDiv(@Const @ByVal MKL_INT n,  @Const float[] a, @Const float[] b, float[] r);
public static native void vdDiv(@Const @ByVal MKL_INT n,  @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void vdDiv(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void vdDiv(@Const @ByVal MKL_INT n,  @Const double[] a, @Const double[] b, double[] r);

public static native void VMSDIV_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, MKL_INT64 mode);
public static native void VMSDIV_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, MKL_INT64 mode);
public static native void VMSDIV_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r, MKL_INT64 mode);
public static native void VMDDIV_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, MKL_INT64 mode);
public static native void VMDDIV_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDDIV_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r, MKL_INT64 mode);
public static native void vmsdiv_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, MKL_INT64 mode);
public static native void vmsdiv_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, MKL_INT64 mode);
public static native void vmsdiv_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r, MKL_INT64 mode);
public static native void vmddiv_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, MKL_INT64 mode);
public static native void vmddiv_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, MKL_INT64 mode);
public static native void vmddiv_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r, MKL_INT64 mode);
public static native void vmsDiv(@Const @ByVal MKL_INT n,  @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsDiv(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsDiv(@Const @ByVal MKL_INT n,  @Const float[] a, @Const float[] b, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdDiv(@Const @ByVal MKL_INT n,  @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdDiv(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdDiv(@Const @ByVal MKL_INT n,  @Const double[] a, @Const double[] b, double[] r, @ByVal MKL_INT64 mode);

/* Complex division: r[i] = a[i] / b[i] */
public static native void VCDIV_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r);
public static native void VZDIV_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r);
public static native void vcdiv_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r);
public static native void vzdiv_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r);
public static native void vcDiv(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r);
public static native void vzDiv(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r);

public static native void VMCDIV_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZDIV_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcdiv_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzdiv_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcDiv(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzDiv(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Power function: r[i] = a[i]^b[i] */
public static native void VSPOW_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void VSPOW_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void VSPOW_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r);
public static native void VDPOW_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void VDPOW_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void VDPOW_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r);
public static native void vspow_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void vspow_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void vspow_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r);
public static native void vdpow_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void vdpow_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void vdpow_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r);
public static native void vsPow(@Const @ByVal MKL_INT n,  @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void vsPow(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void vsPow(@Const @ByVal MKL_INT n,  @Const float[] a, @Const float[] b, float[] r);
public static native void vdPow(@Const @ByVal MKL_INT n,  @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void vdPow(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void vdPow(@Const @ByVal MKL_INT n,  @Const double[] a, @Const double[] b, double[] r);

public static native void VMSPOW_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, MKL_INT64 mode);
public static native void VMSPOW_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, MKL_INT64 mode);
public static native void VMSPOW_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r, MKL_INT64 mode);
public static native void VMDPOW_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, MKL_INT64 mode);
public static native void VMDPOW_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDPOW_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r, MKL_INT64 mode);
public static native void vmspow_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, MKL_INT64 mode);
public static native void vmspow_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, MKL_INT64 mode);
public static native void vmspow_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r, MKL_INT64 mode);
public static native void vmdpow_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, MKL_INT64 mode);
public static native void vmdpow_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdpow_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r, MKL_INT64 mode);
public static native void vmsPow(@Const @ByVal MKL_INT n,  @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsPow(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsPow(@Const @ByVal MKL_INT n,  @Const float[] a, @Const float[] b, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdPow(@Const @ByVal MKL_INT n,  @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdPow(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdPow(@Const @ByVal MKL_INT n,  @Const double[] a, @Const double[] b, double[] r, @ByVal MKL_INT64 mode);

/* Complex power function: r[i] = a[i]^b[i] */
public static native void VCPOW_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r);
public static native void VZPOW_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r);
public static native void vcpow_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r);
public static native void vzpow_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r);
public static native void vcPow(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r);
public static native void vzPow(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r);

public static native void VMCPOW_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZPOW_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcpow_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzpow_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcPow(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzPow(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Power function: r[i] = a[i]^(3/2) */
public static native void VSPOW3O2_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSPOW3O2_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSPOW3O2_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDPOW3O2_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDPOW3O2_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDPOW3O2_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vspow3o2_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vspow3o2_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vspow3o2_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdpow3o2_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdpow3o2_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdpow3o2_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsPow3o2(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsPow3o2(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsPow3o2(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdPow3o2(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdPow3o2(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdPow3o2(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSPOW3O2_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSPOW3O2_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSPOW3O2_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDPOW3O2_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDPOW3O2_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDPOW3O2_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmspow3o2_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmspow3o2_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmspow3o2_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdpow3o2_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdpow3o2_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdpow3o2_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsPow3o2(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsPow3o2(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsPow3o2(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdPow3o2(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdPow3o2(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdPow3o2(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Power function: r[i] = a[i]^(2/3) */
public static native void VSPOW2O3_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSPOW2O3_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSPOW2O3_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDPOW2O3_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDPOW2O3_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDPOW2O3_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vspow2o3_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vspow2o3_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vspow2o3_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdpow2o3_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdpow2o3_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdpow2o3_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsPow2o3(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsPow2o3(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsPow2o3(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdPow2o3(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdPow2o3(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdPow2o3(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSPOW2O3_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSPOW2O3_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSPOW2O3_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDPOW2O3_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDPOW2O3_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDPOW2O3_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmspow2o3_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmspow2o3_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmspow2o3_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdpow2o3_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdpow2o3_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdpow2o3_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsPow2o3(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsPow2o3(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsPow2o3(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdPow2o3(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdPow2o3(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdPow2o3(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Power function with fixed degree: r[i] = a[i]^b */
public static native void VSPOWX_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void VSPOWX_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void VSPOWX_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r);
public static native void VDPOWX_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void VDPOWX_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void VDPOWX_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r);
public static native void vspowx_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r);
public static native void vspowx_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r);
public static native void vspowx_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r);
public static native void vdpowx_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r);
public static native void vdpowx_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r);
public static native void vdpowx_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r);
public static native void vsPowx(@Const @ByVal MKL_INT n,  @Const FloatPointer a, float b, FloatPointer r);
public static native void vsPowx(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, float b, FloatBuffer r);
public static native void vsPowx(@Const @ByVal MKL_INT n,  @Const float[] a, float b, float[] r);
public static native void vdPowx(@Const @ByVal MKL_INT n,  @Const DoublePointer a, double b, DoublePointer r);
public static native void vdPowx(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, double b, DoubleBuffer r);
public static native void vdPowx(@Const @ByVal MKL_INT n,  @Const double[] a, double b, double[] r);

public static native void VMSPOWX_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, MKL_INT64 mode);
public static native void VMSPOWX_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, MKL_INT64 mode);
public static native void VMSPOWX_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r, MKL_INT64 mode);
public static native void VMDPOWX_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, MKL_INT64 mode);
public static native void VMDPOWX_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDPOWX_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r, MKL_INT64 mode);
public static native void vmspowx_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer r, MKL_INT64 mode);
public static native void vmspowx_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer r, MKL_INT64 mode);
public static native void vmspowx_(@Const MKL_INT n, @Const float[] a, @Const float[] b, float[] r, MKL_INT64 mode);
public static native void vmdpowx_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer r, MKL_INT64 mode);
public static native void vmdpowx_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdpowx_(@Const MKL_INT n, @Const double[] a, @Const double[] b, double[] r, MKL_INT64 mode);
public static native void vmsPowx(@Const @ByVal MKL_INT n,  @Const FloatPointer a, float b, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsPowx(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, float b, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsPowx(@Const @ByVal MKL_INT n,  @Const float[] a, float b, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdPowx(@Const @ByVal MKL_INT n,  @Const DoublePointer a, double b, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdPowx(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, double b, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdPowx(@Const @ByVal MKL_INT n,  @Const double[] a, double b, double[] r, @ByVal MKL_INT64 mode);

/* Complex power function with fixed degree: r[i] = a[i]^b */
public static native void VCPOWX_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r);
public static native void VZPOWX_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r);
public static native void vcpowx_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r);
public static native void vzpowx_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r);
public static native void vcPowx(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, @Const @ByVal MKL_Complex8 b, MKL_Complex8 r);
public static native void vzPowx(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, @Const @ByVal MKL_Complex16 b, MKL_Complex16 r);

public static native void VMCPOWX_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZPOWX_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcpowx_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzpowx_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcPowx(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, @Const @ByVal MKL_Complex8 b, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzPowx(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, @Const @ByVal MKL_Complex16 b, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Sine & cosine: r1[i] = sin(a[i]), r2[i]=cos(a[i]) */
public static native void VSSINCOS_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r1, FloatPointer r2);
public static native void VSSINCOS_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r1, FloatBuffer r2);
public static native void VSSINCOS_(@Const MKL_INT n, @Const float[] a, float[] r1, float[] r2);
public static native void VDSINCOS_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r1, DoublePointer r2);
public static native void VDSINCOS_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r1, DoubleBuffer r2);
public static native void VDSINCOS_(@Const MKL_INT n, @Const double[] a, double[] r1, double[] r2);
public static native void vssincos_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r1, FloatPointer r2);
public static native void vssincos_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r1, FloatBuffer r2);
public static native void vssincos_(@Const MKL_INT n, @Const float[] a, float[] r1, float[] r2);
public static native void vdsincos_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r1, DoublePointer r2);
public static native void vdsincos_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r1, DoubleBuffer r2);
public static native void vdsincos_(@Const MKL_INT n, @Const double[] a, double[] r1, double[] r2);
public static native void vsSinCos(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r1, FloatPointer r2);
public static native void vsSinCos(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r1, FloatBuffer r2);
public static native void vsSinCos(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r1, float[] r2);
public static native void vdSinCos(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r1, DoublePointer r2);
public static native void vdSinCos(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r1, DoubleBuffer r2);
public static native void vdSinCos(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r1, double[] r2);

public static native void VMSSINCOS_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r1, FloatPointer r2, MKL_INT64 mode);
public static native void VMSSINCOS_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r1, FloatBuffer r2, MKL_INT64 mode);
public static native void VMSSINCOS_(@Const MKL_INT n, @Const float[] a, float[] r1, float[] r2, MKL_INT64 mode);
public static native void VMDSINCOS_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r1, DoublePointer r2, MKL_INT64 mode);
public static native void VMDSINCOS_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r1, DoubleBuffer r2, MKL_INT64 mode);
public static native void VMDSINCOS_(@Const MKL_INT n, @Const double[] a, double[] r1, double[] r2, MKL_INT64 mode);
public static native void vmssincos_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r1, FloatPointer r2, MKL_INT64 mode);
public static native void vmssincos_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r1, FloatBuffer r2, MKL_INT64 mode);
public static native void vmssincos_(@Const MKL_INT n, @Const float[] a, float[] r1, float[] r2, MKL_INT64 mode);
public static native void vmdsincos_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r1, DoublePointer r2, MKL_INT64 mode);
public static native void vmdsincos_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r1, DoubleBuffer r2, MKL_INT64 mode);
public static native void vmdsincos_(@Const MKL_INT n, @Const double[] a, double[] r1, double[] r2, MKL_INT64 mode);
public static native void vmsSinCos(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r1, FloatPointer r2, @ByVal MKL_INT64 mode);
public static native void vmsSinCos(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r1, FloatBuffer r2, @ByVal MKL_INT64 mode);
public static native void vmsSinCos(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r1, float[] r2, @ByVal MKL_INT64 mode);
public static native void vmdSinCos(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r1, DoublePointer r2, @ByVal MKL_INT64 mode);
public static native void vmdSinCos(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r1, DoubleBuffer r2, @ByVal MKL_INT64 mode);
public static native void vmdSinCos(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r1, double[] r2, @ByVal MKL_INT64 mode);

/* Linear fraction: r[i] = (a[i]*scalea + shifta)/(b[i]*scaleb + shiftb) */
public static native void VSLINEARFRAC_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, @Const FloatPointer scalea, @Const FloatPointer shifta, @Const FloatPointer scaleb, @Const FloatPointer shiftb, FloatPointer r);
public static native void VSLINEARFRAC_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, @Const FloatBuffer scalea, @Const FloatBuffer shifta, @Const FloatBuffer scaleb, @Const FloatBuffer shiftb, FloatBuffer r);
public static native void VSLINEARFRAC_(@Const MKL_INT n, @Const float[] a, @Const float[] b, @Const float[] scalea, @Const float[] shifta, @Const float[] scaleb, @Const float[] shiftb, float[] r);
public static native void VDLINEARFRAC_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, @Const DoublePointer scalea, @Const DoublePointer shifta, @Const DoublePointer scaleb, @Const DoublePointer shiftb, DoublePointer r);
public static native void VDLINEARFRAC_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, @Const DoubleBuffer scalea, @Const DoubleBuffer shifta, @Const DoubleBuffer scaleb, @Const DoubleBuffer shiftb, DoubleBuffer r);
public static native void VDLINEARFRAC_(@Const MKL_INT n, @Const double[] a, @Const double[] b, @Const double[] scalea, @Const double[] shifta, @Const double[] scaleb, @Const double[] shiftb, double[] r);
public static native void vslinearfrac_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, @Const FloatPointer scalea, @Const FloatPointer shifta, @Const FloatPointer scaleb, @Const FloatPointer shiftb, FloatPointer r);
public static native void vslinearfrac_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, @Const FloatBuffer scalea, @Const FloatBuffer shifta, @Const FloatBuffer scaleb, @Const FloatBuffer shiftb, FloatBuffer r);
public static native void vslinearfrac_(@Const MKL_INT n, @Const float[] a, @Const float[] b, @Const float[] scalea, @Const float[] shifta, @Const float[] scaleb, @Const float[] shiftb, float[] r);
public static native void vdlinearfrac_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, @Const DoublePointer scalea, @Const DoublePointer shifta, @Const DoublePointer scaleb, @Const DoublePointer shiftb, DoublePointer r);
public static native void vdlinearfrac_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, @Const DoubleBuffer scalea, @Const DoubleBuffer shifta, @Const DoubleBuffer scaleb, @Const DoubleBuffer shiftb, DoubleBuffer r);
public static native void vdlinearfrac_(@Const MKL_INT n, @Const double[] a, @Const double[] b, @Const double[] scalea, @Const double[] shifta, @Const double[] scaleb, @Const double[] shiftb, double[] r);
public static native void vsLinearFrac(@Const @ByVal MKL_INT n,  @Const FloatPointer a, @Const FloatPointer b, float scalea, float shifta, float scaleb, float shiftb, FloatPointer r);
public static native void vsLinearFrac(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, @Const FloatBuffer b, float scalea, float shifta, float scaleb, float shiftb, FloatBuffer r);
public static native void vsLinearFrac(@Const @ByVal MKL_INT n,  @Const float[] a, @Const float[] b, float scalea, float shifta, float scaleb, float shiftb, float[] r);
public static native void vdLinearFrac(@Const @ByVal MKL_INT n,  @Const DoublePointer a, @Const DoublePointer b, double scalea, double shifta, double scaleb, double shiftb, DoublePointer r);
public static native void vdLinearFrac(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, @Const DoubleBuffer b, double scalea, double shifta, double scaleb, double shiftb, DoubleBuffer r);
public static native void vdLinearFrac(@Const @ByVal MKL_INT n,  @Const double[] a, @Const double[] b, double scalea, double shifta, double scaleb, double shiftb, double[] r);

public static native void VMSLINEARFRAC_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, @Const FloatPointer scalea, @Const FloatPointer shifta, @Const FloatPointer scaleb, @Const FloatPointer shiftb, FloatPointer r, MKL_INT64 mode);
public static native void VMSLINEARFRAC_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, @Const FloatBuffer scalea, @Const FloatBuffer shifta, @Const FloatBuffer scaleb, @Const FloatBuffer shiftb, FloatBuffer r, MKL_INT64 mode);
public static native void VMSLINEARFRAC_(@Const MKL_INT n, @Const float[] a, @Const float[] b, @Const float[] scalea, @Const float[] shifta, @Const float[] scaleb, @Const float[] shiftb, float[] r, MKL_INT64 mode);
public static native void VMDLINEARFRAC_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, @Const DoublePointer scalea, @Const DoublePointer shifta, @Const DoublePointer scaleb, @Const DoublePointer shiftb, DoublePointer r, MKL_INT64 mode);
public static native void VMDLINEARFRAC_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, @Const DoubleBuffer scalea, @Const DoubleBuffer shifta, @Const DoubleBuffer scaleb, @Const DoubleBuffer shiftb, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDLINEARFRAC_(@Const MKL_INT n, @Const double[] a, @Const double[] b, @Const double[] scalea, @Const double[] shifta, @Const double[] scaleb, @Const double[] shiftb, double[] r, MKL_INT64 mode);
public static native void vmslinearfrac_(@Const MKL_INT n, @Const FloatPointer a, @Const FloatPointer b, @Const FloatPointer scalea, @Const FloatPointer shifta, @Const FloatPointer scaleb, @Const FloatPointer shiftb, FloatPointer r, MKL_INT64 mode);
public static native void vmslinearfrac_(@Const MKL_INT n, @Const FloatBuffer a, @Const FloatBuffer b, @Const FloatBuffer scalea, @Const FloatBuffer shifta, @Const FloatBuffer scaleb, @Const FloatBuffer shiftb, FloatBuffer r, MKL_INT64 mode);
public static native void vmslinearfrac_(@Const MKL_INT n, @Const float[] a, @Const float[] b, @Const float[] scalea, @Const float[] shifta, @Const float[] scaleb, @Const float[] shiftb, float[] r, MKL_INT64 mode);
public static native void vmdlinearfrac_(@Const MKL_INT n, @Const DoublePointer a, @Const DoublePointer b, @Const DoublePointer scalea, @Const DoublePointer shifta, @Const DoublePointer scaleb, @Const DoublePointer shiftb, DoublePointer r, MKL_INT64 mode);
public static native void vmdlinearfrac_(@Const MKL_INT n, @Const DoubleBuffer a, @Const DoubleBuffer b, @Const DoubleBuffer scalea, @Const DoubleBuffer shifta, @Const DoubleBuffer scaleb, @Const DoubleBuffer shiftb, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdlinearfrac_(@Const MKL_INT n, @Const double[] a, @Const double[] b, @Const double[] scalea, @Const double[] shifta, @Const double[] scaleb, @Const double[] shiftb, double[] r, MKL_INT64 mode);
public static native void vmsLinearFrac(@Const @ByVal MKL_INT n,  @Const FloatPointer a, @Const FloatPointer b, float scalea, float shifta, float scaleb, float shiftb, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsLinearFrac(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, @Const FloatBuffer b, float scalea, float shifta, float scaleb, float shiftb, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsLinearFrac(@Const @ByVal MKL_INT n,  @Const float[] a, @Const float[] b, float scalea, float shifta, float scaleb, float shiftb, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdLinearFrac(@Const @ByVal MKL_INT n,  @Const DoublePointer a, @Const DoublePointer b, double scalea, double shifta, double scaleb, double shiftb, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdLinearFrac(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, @Const DoubleBuffer b, double scalea, double shifta, double scaleb, double shiftb, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdLinearFrac(@Const @ByVal MKL_INT n,  @Const double[] a, @Const double[] b, double scalea, double shifta, double scaleb, double shiftb, double[] r, @ByVal MKL_INT64 mode);

/* Integer value rounded towards plus infinity: r[i] = ceil(a[i]) */
public static native void VSCEIL_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSCEIL_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSCEIL_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDCEIL_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDCEIL_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDCEIL_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsceil_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vsceil_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vsceil_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdceil_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdceil_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdceil_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsCeil(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsCeil(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsCeil(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdCeil(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdCeil(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdCeil(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSCEIL_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSCEIL_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSCEIL_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDCEIL_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDCEIL_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDCEIL_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsceil_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmsceil_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmsceil_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdceil_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdceil_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdceil_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsCeil(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsCeil(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsCeil(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdCeil(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdCeil(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdCeil(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Integer value rounded towards minus infinity: r[i] = floor(a[i]) */
public static native void VSFLOOR_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSFLOOR_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSFLOOR_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDFLOOR_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDFLOOR_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDFLOOR_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsfloor_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vsfloor_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vsfloor_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdfloor_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdfloor_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdfloor_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsFloor(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsFloor(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsFloor(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdFloor(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdFloor(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdFloor(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSFLOOR_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSFLOOR_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSFLOOR_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDFLOOR_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDFLOOR_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDFLOOR_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsfloor_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmsfloor_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmsfloor_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdfloor_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdfloor_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdfloor_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsFloor(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsFloor(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsFloor(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdFloor(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdFloor(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdFloor(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Signed fraction part */
public static native void VSFRAC_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSFRAC_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSFRAC_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDFRAC_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDFRAC_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDFRAC_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsfrac_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vsfrac_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vsfrac_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdfrac_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdfrac_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdfrac_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsFrac(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsFrac(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsFrac(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdFrac(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdFrac(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdFrac(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSFRAC_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSFRAC_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSFRAC_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDFRAC_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDFRAC_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDFRAC_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsfrac_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmsfrac_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmsfrac_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdfrac_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdfrac_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdfrac_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsFrac(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsFrac(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsFrac(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdFrac(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdFrac(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdFrac(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Truncated integer value and the remaining fraction part */
public static native void VSMODF_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r1, FloatPointer r2);
public static native void VSMODF_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r1, FloatBuffer r2);
public static native void VSMODF_(@Const MKL_INT n, @Const float[] a, float[] r1, float[] r2);
public static native void VDMODF_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r1, DoublePointer r2);
public static native void VDMODF_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r1, DoubleBuffer r2);
public static native void VDMODF_(@Const MKL_INT n, @Const double[] a, double[] r1, double[] r2);
public static native void vsmodf_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r1, FloatPointer r2);
public static native void vsmodf_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r1, FloatBuffer r2);
public static native void vsmodf_(@Const MKL_INT n, @Const float[] a, float[] r1, float[] r2);
public static native void vdmodf_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r1, DoublePointer r2);
public static native void vdmodf_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r1, DoubleBuffer r2);
public static native void vdmodf_(@Const MKL_INT n, @Const double[] a, double[] r1, double[] r2);
public static native void vsModf(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r1, FloatPointer r2);
public static native void vsModf(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r1, FloatBuffer r2);
public static native void vsModf(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r1, float[] r2);
public static native void vdModf(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r1, DoublePointer r2);
public static native void vdModf(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r1, DoubleBuffer r2);
public static native void vdModf(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r1, double[] r2);

public static native void VMSMODF_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r1, FloatPointer r2, MKL_INT64 mode);
public static native void VMSMODF_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r1, FloatBuffer r2, MKL_INT64 mode);
public static native void VMSMODF_(@Const MKL_INT n, @Const float[] a, float[] r1, float[] r2, MKL_INT64 mode);
public static native void VMDMODF_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r1, DoublePointer r2, MKL_INT64 mode);
public static native void VMDMODF_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r1, DoubleBuffer r2, MKL_INT64 mode);
public static native void VMDMODF_(@Const MKL_INT n, @Const double[] a, double[] r1, double[] r2, MKL_INT64 mode);
public static native void vmsmodf_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r1, FloatPointer r2, MKL_INT64 mode);
public static native void vmsmodf_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r1, FloatBuffer r2, MKL_INT64 mode);
public static native void vmsmodf_(@Const MKL_INT n, @Const float[] a, float[] r1, float[] r2, MKL_INT64 mode);
public static native void vmdmodf_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r1, DoublePointer r2, MKL_INT64 mode);
public static native void vmdmodf_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r1, DoubleBuffer r2, MKL_INT64 mode);
public static native void vmdmodf_(@Const MKL_INT n, @Const double[] a, double[] r1, double[] r2, MKL_INT64 mode);
public static native void vmsModf(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r1, FloatPointer r2, @ByVal MKL_INT64 mode);
public static native void vmsModf(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r1, FloatBuffer r2, @ByVal MKL_INT64 mode);
public static native void vmsModf(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r1, float[] r2, @ByVal MKL_INT64 mode);
public static native void vmdModf(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r1, DoublePointer r2, @ByVal MKL_INT64 mode);
public static native void vmdModf(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r1, DoubleBuffer r2, @ByVal MKL_INT64 mode);
public static native void vmdModf(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r1, double[] r2, @ByVal MKL_INT64 mode);

/* Rounded integer value in the current rounding mode: r[i] = nearbyint(a[i]) */
public static native void VSNEARBYINT_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSNEARBYINT_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSNEARBYINT_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDNEARBYINT_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDNEARBYINT_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDNEARBYINT_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsnearbyint_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vsnearbyint_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vsnearbyint_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdnearbyint_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdnearbyint_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdnearbyint_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsNearbyInt(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsNearbyInt(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsNearbyInt(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdNearbyInt(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdNearbyInt(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdNearbyInt(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSNEARBYINT_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSNEARBYINT_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSNEARBYINT_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDNEARBYINT_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDNEARBYINT_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDNEARBYINT_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsnearbyint_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmsnearbyint_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmsnearbyint_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdnearbyint_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdnearbyint_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdnearbyint_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsNearbyInt(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsNearbyInt(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsNearbyInt(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdNearbyInt(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdNearbyInt(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdNearbyInt(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Rounded integer value in the current rounding mode with inexact result exception raised for rach changed value: r[i] = rint(a[i]) */
public static native void VSRINT_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSRINT_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSRINT_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDRINT_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDRINT_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDRINT_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsrint_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vsrint_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vsrint_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdrint_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdrint_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdrint_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsRint(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsRint(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsRint(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdRint(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdRint(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdRint(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSRINT_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSRINT_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSRINT_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDRINT_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDRINT_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDRINT_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsrint_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmsrint_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmsrint_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdrint_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdrint_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdrint_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsRint(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsRint(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsRint(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdRint(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdRint(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdRint(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Value rounded to the nearest integer: r[i] = round(a[i]) */
public static native void VSROUND_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSROUND_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSROUND_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDROUND_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDROUND_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDROUND_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsround_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vsround_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vsround_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdround_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdround_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdround_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsRound(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsRound(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsRound(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdRound(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdRound(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdRound(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSROUND_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSROUND_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSROUND_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDROUND_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDROUND_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDROUND_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsround_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmsround_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmsround_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdround_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdround_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdround_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsRound(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsRound(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsRound(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdRound(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdRound(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdRound(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Integer value rounded towards zero: r[i] = trunc(a[i]) */
public static native void VSTRUNC_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSTRUNC_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSTRUNC_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDTRUNC_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDTRUNC_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDTRUNC_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vstrunc_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vstrunc_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vstrunc_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdtrunc_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdtrunc_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdtrunc_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsTrunc(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsTrunc(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsTrunc(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdTrunc(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdTrunc(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdTrunc(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSTRUNC_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSTRUNC_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSTRUNC_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDTRUNC_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDTRUNC_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDTRUNC_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmstrunc_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmstrunc_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmstrunc_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdtrunc_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdtrunc_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdtrunc_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsTrunc(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsTrunc(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsTrunc(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdTrunc(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdTrunc(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdTrunc(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/* Element by element conjugation: r[i] = conj(a[i]) */
public static native void VCCONJ_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void VZCONJ_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcconj_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzconj_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r);
public static native void vcConj(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r);
public static native void vzConj(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r);

public static native void VMCCONJ_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZCONJ_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcconj_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzconj_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcConj(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzConj(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Element by element multiplication of vector A element and conjugated vector B element: r[i] = mulbyconj(a[i],b[i]) */
public static native void VCMULBYCONJ_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r);
public static native void VZMULBYCONJ_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r);
public static native void vcmulbyconj_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r);
public static native void vzmulbyconj_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r);
public static native void vcMulByConj(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r);
public static native void vzMulByConj(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r);

public static native void VMCMULBYCONJ_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZMULBYCONJ_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcmulbyconj_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzmulbyconj_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcMulByConj(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, @Const MKL_Complex8 b, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzMulByConj(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, @Const MKL_Complex16 b, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Complex exponent of real vector elements: r[i] = CIS(a[i]) */
public static native void VCCIS_(@Const MKL_INT n, @Const FloatPointer a, MKL_Complex8 r);
public static native void VCCIS_(@Const MKL_INT n, @Const FloatBuffer a, MKL_Complex8 r);
public static native void VCCIS_(@Const MKL_INT n, @Const float[] a, MKL_Complex8 r);
public static native void VZCIS_(@Const MKL_INT n, @Const DoublePointer a, MKL_Complex16 r);
public static native void VZCIS_(@Const MKL_INT n, @Const DoubleBuffer a, MKL_Complex16 r);
public static native void VZCIS_(@Const MKL_INT n, @Const double[] a, MKL_Complex16 r);
public static native void vccis_(@Const MKL_INT n, @Const FloatPointer a, MKL_Complex8 r);
public static native void vccis_(@Const MKL_INT n, @Const FloatBuffer a, MKL_Complex8 r);
public static native void vccis_(@Const MKL_INT n, @Const float[] a, MKL_Complex8 r);
public static native void vzcis_(@Const MKL_INT n, @Const DoublePointer a, MKL_Complex16 r);
public static native void vzcis_(@Const MKL_INT n, @Const DoubleBuffer a, MKL_Complex16 r);
public static native void vzcis_(@Const MKL_INT n, @Const double[] a, MKL_Complex16 r);
public static native void vcCIS(@Const @ByVal MKL_INT n,  @Const FloatPointer a, MKL_Complex8 r);
public static native void vcCIS(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, MKL_Complex8 r);
public static native void vcCIS(@Const @ByVal MKL_INT n,  @Const float[] a, MKL_Complex8 r);
public static native void vzCIS(@Const @ByVal MKL_INT n,  @Const DoublePointer a, MKL_Complex16 r);
public static native void vzCIS(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, MKL_Complex16 r);
public static native void vzCIS(@Const @ByVal MKL_INT n,  @Const double[] a, MKL_Complex16 r);

public static native void VMCCIS_(@Const MKL_INT n, @Const FloatPointer a, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMCCIS_(@Const MKL_INT n, @Const FloatBuffer a, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMCCIS_(@Const MKL_INT n, @Const float[] a, MKL_Complex8 r, MKL_INT64 mode);
public static native void VMZCIS_(@Const MKL_INT n, @Const DoublePointer a, MKL_Complex16 r, MKL_INT64 mode);
public static native void VMZCIS_(@Const MKL_INT n, @Const DoubleBuffer a, MKL_Complex16 r, MKL_INT64 mode);
public static native void VMZCIS_(@Const MKL_INT n, @Const double[] a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmccis_(@Const MKL_INT n, @Const FloatPointer a, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmccis_(@Const MKL_INT n, @Const FloatBuffer a, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmccis_(@Const MKL_INT n, @Const float[] a, MKL_Complex8 r, MKL_INT64 mode);
public static native void vmzcis_(@Const MKL_INT n, @Const DoublePointer a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmzcis_(@Const MKL_INT n, @Const DoubleBuffer a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmzcis_(@Const MKL_INT n, @Const double[] a, MKL_Complex16 r, MKL_INT64 mode);
public static native void vmcCIS(@Const @ByVal MKL_INT n,  @Const FloatPointer a, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmcCIS(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmcCIS(@Const @ByVal MKL_INT n,  @Const float[] a, MKL_Complex8 r, @ByVal MKL_INT64 mode);
public static native void vmzCIS(@Const @ByVal MKL_INT n,  @Const DoublePointer a, MKL_Complex16 r, @ByVal MKL_INT64 mode);
public static native void vmzCIS(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, MKL_Complex16 r, @ByVal MKL_INT64 mode);
public static native void vmzCIS(@Const @ByVal MKL_INT n,  @Const double[] a, MKL_Complex16 r, @ByVal MKL_INT64 mode);

/* Exponential integral of real vector elements: r[i] = E1(a[i]) */
public static native void VSEXPINT1_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void VSEXPINT1_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void VSEXPINT1_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void VDEXPINT1_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void VDEXPINT1_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void VDEXPINT1_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsexpint1_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r);
public static native void vsexpint1_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r);
public static native void vsexpint1_(@Const MKL_INT n, @Const float[] a, float[] r);
public static native void vdexpint1_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r);
public static native void vdexpint1_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdexpint1_(@Const MKL_INT n, @Const double[] a, double[] r);
public static native void vsExpInt1(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r);
public static native void vsExpInt1(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r);
public static native void vsExpInt1(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r);
public static native void vdExpInt1(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r);
public static native void vdExpInt1(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r);
public static native void vdExpInt1(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r);

public static native void VMSEXPINT1_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void VMSEXPINT1_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void VMSEXPINT1_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void VMDEXPINT1_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void VMDEXPINT1_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void VMDEXPINT1_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsexpint1_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer r, MKL_INT64 mode);
public static native void vmsexpint1_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer r, MKL_INT64 mode);
public static native void vmsexpint1_(@Const MKL_INT n, @Const float[] a, float[] r, MKL_INT64 mode);
public static native void vmdexpint1_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer r, MKL_INT64 mode);
public static native void vmdexpint1_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer r, MKL_INT64 mode);
public static native void vmdexpint1_(@Const MKL_INT n, @Const double[] a, double[] r, MKL_INT64 mode);
public static native void vmsExpInt1(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer r, @ByVal MKL_INT64 mode);
public static native void vmsExpInt1(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer r, @ByVal MKL_INT64 mode);
public static native void vmsExpInt1(@Const @ByVal MKL_INT n,  @Const float[] a, float[] r, @ByVal MKL_INT64 mode);
public static native void vmdExpInt1(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer r, @ByVal MKL_INT64 mode);
public static native void vmdExpInt1(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer r, @ByVal MKL_INT64 mode);
public static native void vmdExpInt1(@Const @ByVal MKL_INT n,  @Const double[] a, double[] r, @ByVal MKL_INT64 mode);

/*
//++
//  VML PACK FUNCTION DECLARATIONS.
//--
*/
/* Positive Increment Indexing */
public static native void VSPACKI_(@Const MKL_INT n, @Const FloatPointer a, @Const MKL_INT incra, FloatPointer y);
public static native void VSPACKI_(@Const MKL_INT n, @Const FloatBuffer a, @Const MKL_INT incra, FloatBuffer y);
public static native void VSPACKI_(@Const MKL_INT n, @Const float[] a, @Const MKL_INT incra, float[] y);
public static native void VDPACKI_(@Const MKL_INT n, @Const DoublePointer a, @Const MKL_INT incra, DoublePointer y);
public static native void VDPACKI_(@Const MKL_INT n, @Const DoubleBuffer a, @Const MKL_INT incra, DoubleBuffer y);
public static native void VDPACKI_(@Const MKL_INT n, @Const double[] a, @Const MKL_INT incra, double[] y);
public static native void vspacki_(@Const MKL_INT n, @Const FloatPointer a, @Const MKL_INT incra, FloatPointer y);
public static native void vspacki_(@Const MKL_INT n, @Const FloatBuffer a, @Const MKL_INT incra, FloatBuffer y);
public static native void vspacki_(@Const MKL_INT n, @Const float[] a, @Const MKL_INT incra, float[] y);
public static native void vdpacki_(@Const MKL_INT n, @Const DoublePointer a, @Const MKL_INT incra, DoublePointer y);
public static native void vdpacki_(@Const MKL_INT n, @Const DoubleBuffer a, @Const MKL_INT incra, DoubleBuffer y);
public static native void vdpacki_(@Const MKL_INT n, @Const double[] a, @Const MKL_INT incra, double[] y);
public static native void vsPackI(@Const @ByVal MKL_INT n,  @Const FloatPointer a, @Const @ByVal MKL_INT incra, FloatPointer y);
public static native void vsPackI(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, @Const @ByVal MKL_INT incra, FloatBuffer y);
public static native void vsPackI(@Const @ByVal MKL_INT n,  @Const float[] a, @Const @ByVal MKL_INT incra, float[] y);
public static native void vdPackI(@Const @ByVal MKL_INT n,  @Const DoublePointer a, @Const @ByVal MKL_INT incra, DoublePointer y);
public static native void vdPackI(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, @Const @ByVal MKL_INT incra, DoubleBuffer y);
public static native void vdPackI(@Const @ByVal MKL_INT n,  @Const double[] a, @Const @ByVal MKL_INT incra, double[] y);

public static native void VCPACKI_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT incra, MKL_Complex8 y);
public static native void VZPACKI_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT incra, MKL_Complex16 y);
public static native void vcpacki_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT incra, MKL_Complex8 y);
public static native void vzpacki_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT incra, MKL_Complex16 y);
public static native void vcPackI(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, @Const @ByVal MKL_INT incra, MKL_Complex8 y);
public static native void vzPackI(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, @Const @ByVal MKL_INT incra, MKL_Complex16 y);

/* Index Vector Indexing */
public static native void VSPACKV_(@Const MKL_INT n, @Const FloatPointer a, @Const MKL_INT ia, FloatPointer y);
public static native void VSPACKV_(@Const MKL_INT n, @Const FloatBuffer a, @Const MKL_INT ia, FloatBuffer y);
public static native void VSPACKV_(@Const MKL_INT n, @Const float[] a, @Const MKL_INT ia, float[] y);
public static native void VDPACKV_(@Const MKL_INT n, @Const DoublePointer a, @Const MKL_INT ia, DoublePointer y);
public static native void VDPACKV_(@Const MKL_INT n, @Const DoubleBuffer a, @Const MKL_INT ia, DoubleBuffer y);
public static native void VDPACKV_(@Const MKL_INT n, @Const double[] a, @Const MKL_INT ia, double[] y);
public static native void vspackv_(@Const MKL_INT n, @Const FloatPointer a, @Const MKL_INT ia, FloatPointer y);
public static native void vspackv_(@Const MKL_INT n, @Const FloatBuffer a, @Const MKL_INT ia, FloatBuffer y);
public static native void vspackv_(@Const MKL_INT n, @Const float[] a, @Const MKL_INT ia, float[] y);
public static native void vdpackv_(@Const MKL_INT n, @Const DoublePointer a, @Const MKL_INT ia, DoublePointer y);
public static native void vdpackv_(@Const MKL_INT n, @Const DoubleBuffer a, @Const MKL_INT ia, DoubleBuffer y);
public static native void vdpackv_(@Const MKL_INT n, @Const double[] a, @Const MKL_INT ia, double[] y);
public static native void vsPackV(@Const @ByVal MKL_INT n,  @Const FloatPointer a, @Const MKL_INT ia, FloatPointer y);
public static native void vsPackV(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, @Const MKL_INT ia, FloatBuffer y);
public static native void vsPackV(@Const @ByVal MKL_INT n,  @Const float[] a, @Const MKL_INT ia, float[] y);
public static native void vdPackV(@Const @ByVal MKL_INT n,  @Const DoublePointer a, @Const MKL_INT ia, DoublePointer y);
public static native void vdPackV(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, @Const MKL_INT ia, DoubleBuffer y);
public static native void vdPackV(@Const @ByVal MKL_INT n,  @Const double[] a, @Const MKL_INT ia, double[] y);

public static native void VCPACKV_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT ia, MKL_Complex8 y);
public static native void VZPACKV_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT ia, MKL_Complex16 y);
public static native void vcpackv_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT ia, MKL_Complex8 y);
public static native void vzpackv_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT ia, MKL_Complex16 y);
public static native void vcPackV(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, @Const MKL_INT ia, MKL_Complex8 y);
public static native void vzPackV(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, @Const MKL_INT ia, MKL_Complex16 y);

/* Mask Vector Indexing */
public static native void VSPACKM_(@Const MKL_INT n, @Const FloatPointer a, @Const MKL_INT ma, FloatPointer y);
public static native void VSPACKM_(@Const MKL_INT n, @Const FloatBuffer a, @Const MKL_INT ma, FloatBuffer y);
public static native void VSPACKM_(@Const MKL_INT n, @Const float[] a, @Const MKL_INT ma, float[] y);
public static native void VDPACKM_(@Const MKL_INT n, @Const DoublePointer a, @Const MKL_INT ma, DoublePointer y);
public static native void VDPACKM_(@Const MKL_INT n, @Const DoubleBuffer a, @Const MKL_INT ma, DoubleBuffer y);
public static native void VDPACKM_(@Const MKL_INT n, @Const double[] a, @Const MKL_INT ma, double[] y);
public static native void vspackm_(@Const MKL_INT n, @Const FloatPointer a, @Const MKL_INT ma, FloatPointer y);
public static native void vspackm_(@Const MKL_INT n, @Const FloatBuffer a, @Const MKL_INT ma, FloatBuffer y);
public static native void vspackm_(@Const MKL_INT n, @Const float[] a, @Const MKL_INT ma, float[] y);
public static native void vdpackm_(@Const MKL_INT n, @Const DoublePointer a, @Const MKL_INT ma, DoublePointer y);
public static native void vdpackm_(@Const MKL_INT n, @Const DoubleBuffer a, @Const MKL_INT ma, DoubleBuffer y);
public static native void vdpackm_(@Const MKL_INT n, @Const double[] a, @Const MKL_INT ma, double[] y);
public static native void vsPackM(@Const @ByVal MKL_INT n,  @Const FloatPointer a, @Const MKL_INT ma, FloatPointer y);
public static native void vsPackM(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, @Const MKL_INT ma, FloatBuffer y);
public static native void vsPackM(@Const @ByVal MKL_INT n,  @Const float[] a, @Const MKL_INT ma, float[] y);
public static native void vdPackM(@Const @ByVal MKL_INT n,  @Const DoublePointer a, @Const MKL_INT ma, DoublePointer y);
public static native void vdPackM(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, @Const MKL_INT ma, DoubleBuffer y);
public static native void vdPackM(@Const @ByVal MKL_INT n,  @Const double[] a, @Const MKL_INT ma, double[] y);

public static native void VCPACKM_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT ma, MKL_Complex8 y);
public static native void VZPACKM_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT ma, MKL_Complex16 y);
public static native void vcpackm_(@Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT ma, MKL_Complex8 y);
public static native void vzpackm_(@Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT ma, MKL_Complex16 y);
public static native void vcPackM(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, @Const MKL_INT ma, MKL_Complex8 y);
public static native void vzPackM(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, @Const MKL_INT ma, MKL_Complex16 y);

/*
//++
//  VML UNPACK FUNCTION DECLARATIONS.
//--
*/
/* Positive Increment Indexing */
public static native void VSUNPACKI_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer y, @Const MKL_INT incry);
public static native void VSUNPACKI_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer y, @Const MKL_INT incry);
public static native void VSUNPACKI_(@Const MKL_INT n, @Const float[] a, float[] y, @Const MKL_INT incry);
public static native void VDUNPACKI_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer y, @Const MKL_INT incry);
public static native void VDUNPACKI_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer y, @Const MKL_INT incry);
public static native void VDUNPACKI_(@Const MKL_INT n, @Const double[] a, double[] y, @Const MKL_INT incry);
public static native void vsunpacki_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer y, @Const MKL_INT incry);
public static native void vsunpacki_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer y, @Const MKL_INT incry);
public static native void vsunpacki_(@Const MKL_INT n, @Const float[] a, float[] y, @Const MKL_INT incry);
public static native void vdunpacki_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer y, @Const MKL_INT incry);
public static native void vdunpacki_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer y, @Const MKL_INT incry);
public static native void vdunpacki_(@Const MKL_INT n, @Const double[] a, double[] y, @Const MKL_INT incry);
public static native void vsUnpackI(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer y, @Const @ByVal MKL_INT incry  );
public static native void vsUnpackI(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer y, @Const @ByVal MKL_INT incry  );
public static native void vsUnpackI(@Const @ByVal MKL_INT n,  @Const float[] a, float[] y, @Const @ByVal MKL_INT incry  );
public static native void vdUnpackI(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer y, @Const @ByVal MKL_INT incry  );
public static native void vdUnpackI(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer y, @Const @ByVal MKL_INT incry  );
public static native void vdUnpackI(@Const @ByVal MKL_INT n,  @Const double[] a, double[] y, @Const @ByVal MKL_INT incry  );

public static native void VCUNPACKI_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 y, @Const MKL_INT incry);
public static native void VZUNPACKI_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 y, @Const MKL_INT incry);
public static native void vcunpacki_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 y, @Const MKL_INT incry);
public static native void vzunpacki_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 y, @Const MKL_INT incry);
public static native void vcUnpackI(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 y, @Const @ByVal MKL_INT incry  );
public static native void vzUnpackI(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 y, @Const @ByVal MKL_INT incry  );

/* Index Vector Indexing */
public static native void VSUNPACKV_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer y, @Const MKL_INT iy   );
public static native void VSUNPACKV_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer y, @Const MKL_INT iy   );
public static native void VSUNPACKV_(@Const MKL_INT n, @Const float[] a, float[] y, @Const MKL_INT iy   );
public static native void VDUNPACKV_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer y, @Const MKL_INT iy   );
public static native void VDUNPACKV_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer y, @Const MKL_INT iy   );
public static native void VDUNPACKV_(@Const MKL_INT n, @Const double[] a, double[] y, @Const MKL_INT iy   );
public static native void vsunpackv_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer y, @Const MKL_INT iy   );
public static native void vsunpackv_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer y, @Const MKL_INT iy   );
public static native void vsunpackv_(@Const MKL_INT n, @Const float[] a, float[] y, @Const MKL_INT iy   );
public static native void vdunpackv_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer y, @Const MKL_INT iy   );
public static native void vdunpackv_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer y, @Const MKL_INT iy   );
public static native void vdunpackv_(@Const MKL_INT n, @Const double[] a, double[] y, @Const MKL_INT iy   );
public static native void vsUnpackV(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer y, @Const MKL_INT iy   );
public static native void vsUnpackV(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer y, @Const MKL_INT iy   );
public static native void vsUnpackV(@Const @ByVal MKL_INT n,  @Const float[] a, float[] y, @Const MKL_INT iy   );
public static native void vdUnpackV(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer y, @Const MKL_INT iy   );
public static native void vdUnpackV(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer y, @Const MKL_INT iy   );
public static native void vdUnpackV(@Const @ByVal MKL_INT n,  @Const double[] a, double[] y, @Const MKL_INT iy   );

public static native void VCUNPACKV_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 y, @Const MKL_INT iy);
public static native void VZUNPACKV_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 y, @Const MKL_INT iy);
public static native void vcunpackv_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 y, @Const MKL_INT iy);
public static native void vzunpackv_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 y, @Const MKL_INT iy);
public static native void vcUnpackV(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 y, @Const MKL_INT iy);
public static native void vzUnpackV(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 y, @Const MKL_INT iy);

/* Mask Vector Indexing */
public static native void VSUNPACKM_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer y, @Const MKL_INT my   );
public static native void VSUNPACKM_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer y, @Const MKL_INT my   );
public static native void VSUNPACKM_(@Const MKL_INT n, @Const float[] a, float[] y, @Const MKL_INT my   );
public static native void VDUNPACKM_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer y, @Const MKL_INT my   );
public static native void VDUNPACKM_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer y, @Const MKL_INT my   );
public static native void VDUNPACKM_(@Const MKL_INT n, @Const double[] a, double[] y, @Const MKL_INT my   );
public static native void vsunpackm_(@Const MKL_INT n, @Const FloatPointer a, FloatPointer y, @Const MKL_INT my   );
public static native void vsunpackm_(@Const MKL_INT n, @Const FloatBuffer a, FloatBuffer y, @Const MKL_INT my   );
public static native void vsunpackm_(@Const MKL_INT n, @Const float[] a, float[] y, @Const MKL_INT my   );
public static native void vdunpackm_(@Const MKL_INT n, @Const DoublePointer a, DoublePointer y, @Const MKL_INT my   );
public static native void vdunpackm_(@Const MKL_INT n, @Const DoubleBuffer a, DoubleBuffer y, @Const MKL_INT my   );
public static native void vdunpackm_(@Const MKL_INT n, @Const double[] a, double[] y, @Const MKL_INT my   );
public static native void vsUnpackM(@Const @ByVal MKL_INT n,  @Const FloatPointer a, FloatPointer y, @Const MKL_INT my   );
public static native void vsUnpackM(@Const @ByVal MKL_INT n,  @Const FloatBuffer a, FloatBuffer y, @Const MKL_INT my   );
public static native void vsUnpackM(@Const @ByVal MKL_INT n,  @Const float[] a, float[] y, @Const MKL_INT my   );
public static native void vdUnpackM(@Const @ByVal MKL_INT n,  @Const DoublePointer a, DoublePointer y, @Const MKL_INT my   );
public static native void vdUnpackM(@Const @ByVal MKL_INT n,  @Const DoubleBuffer a, DoubleBuffer y, @Const MKL_INT my   );
public static native void vdUnpackM(@Const @ByVal MKL_INT n,  @Const double[] a, double[] y, @Const MKL_INT my   );

public static native void VCUNPACKM_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 y, @Const MKL_INT my);
public static native void VZUNPACKM_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 y, @Const MKL_INT my);
public static native void vcunpackm_(@Const MKL_INT n, @Const MKL_Complex8 a, MKL_Complex8 y, @Const MKL_INT my);
public static native void vzunpackm_(@Const MKL_INT n, @Const MKL_Complex16 a, MKL_Complex16 y, @Const MKL_INT my);
public static native void vcUnpackM(@Const @ByVal MKL_INT n,  @Const MKL_Complex8 a, MKL_Complex8 y, @Const MKL_INT my);
public static native void vzUnpackM(@Const @ByVal MKL_INT n,  @Const MKL_Complex16 a, MKL_Complex16 y, @Const MKL_INT my);


/*
//++
//  VML ERROR HANDLING FUNCTION DECLARATIONS.
//--
*/
/* Set VML Error Status */
public static native int VMLSETERRSTATUS_(@Const MKL_INT status);
public static native int vmlseterrstatus_(@Const MKL_INT status);
public static native int vmlSetErrStatus(@Const @ByVal MKL_INT status);

/* Get VML Error Status */
public static native int VMLGETERRSTATUS_();
public static native int vmlgeterrstatus_();
public static native int vmlGetErrStatus();

/* Clear VML Error Status */
public static native int VMLCLEARERRSTATUS_();
public static native int vmlclearerrstatus_();
public static native int vmlClearErrStatus();

/* Set VML Error Callback Function */
public static native VMLErrorCallBack VMLSETERRORCALLBACK_(VMLErrorCallBack func);
public static native VMLErrorCallBack vmlseterrorcallback_(VMLErrorCallBack func);
public static native VMLErrorCallBack vmlSetErrorCallBack(VMLErrorCallBack func);

/* Get VML Error Callback Function */
public static native VMLErrorCallBack VMLGETERRORCALLBACK_();
public static native VMLErrorCallBack vmlgeterrorcallback_();
public static native VMLErrorCallBack vmlGetErrorCallBack();

/* Reset VML Error Callback Function */
public static native VMLErrorCallBack VMLCLEARERRORCALLBACK_();
public static native VMLErrorCallBack vmlclearerrorcallback_();
public static native VMLErrorCallBack vmlClearErrorCallBack();


/*
//++
//  VML MODE FUNCTION DECLARATIONS.
//--
*/
/* Set VML Mode */
public static native @Cast("unsigned int") int VMLSETMODE_(@Const MKL_UINT newmode);
public static native @Cast("unsigned int") int vmlsetmode_(@Const MKL_UINT newmode);
public static native @Cast("unsigned int") int vmlSetMode(@Const @ByVal MKL_UINT newmode);

/* Get VML Mode */
public static native @Cast("unsigned int") int VMLGETMODE_();
public static native @Cast("unsigned int") int vmlgetmode_();
public static native @Cast("unsigned int") int vmlGetMode();


// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif /* __MKL_VML_FUNCTIONS_H__ */


// Parsed from mkl_vsl.h

/* file: mkl_vsl.h */
/*******************************************************************************
* Copyright 2006-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
//++
//  The main VSL header file.
//--
*/

// #ifndef __MKL_VSL_H__
// #define __MKL_VSL_H__

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #include "mkl_vsl_defines.h"
// #include "mkl_vsl_functions.h"
// #include "mkl_vsl_types.h"

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif /* __MKL_VSL_H__ */


// Parsed from mkl_vsl_defines.h

/* file: mkl_vsl_defines.h */
/*******************************************************************************
* Copyright 2006-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
//++
//  User-level macro definitions
//--
*/

// #ifndef __MKL_VSL_DEFINES_H__
// #define __MKL_VSL_DEFINES_H__

// #ifdef __cplusplus
// #endif /* __cplusplus */


/*
// "No error" status
*/
public static final int VSL_STATUS_OK =                      0;
public static final int VSL_ERROR_OK =                       0;

/*
// Common errors (-1..-999)
*/
public static final int VSL_ERROR_FEATURE_NOT_IMPLEMENTED =  -1;
public static final int VSL_ERROR_UNKNOWN =                  -2;
public static final int VSL_ERROR_BADARGS =                  -3;
public static final int VSL_ERROR_MEM_FAILURE =              -4;
public static final int VSL_ERROR_NULL_PTR =                 -5;
public static final int VSL_ERROR_CPU_NOT_SUPPORTED =        -6;


/*
// RNG errors (-1000..-1999)
*/
/* brng errors */
public static final int VSL_RNG_ERROR_INVALID_BRNG_INDEX =        -1000;
public static final int VSL_RNG_ERROR_LEAPFROG_UNSUPPORTED =      -1002;
public static final int VSL_RNG_ERROR_SKIPAHEAD_UNSUPPORTED =     -1003;
public static final int VSL_RNG_ERROR_BRNGS_INCOMPATIBLE =        -1005;
public static final int VSL_RNG_ERROR_BAD_STREAM =                -1006;
public static final int VSL_RNG_ERROR_BRNG_TABLE_FULL =           -1007;
public static final int VSL_RNG_ERROR_BAD_STREAM_STATE_SIZE =     -1008;
public static final int VSL_RNG_ERROR_BAD_WORD_SIZE =             -1009;
public static final int VSL_RNG_ERROR_BAD_NSEEDS =                -1010;
public static final int VSL_RNG_ERROR_BAD_NBITS =                 -1011;
public static final int VSL_RNG_ERROR_QRNG_PERIOD_ELAPSED =       -1012;
public static final int VSL_RNG_ERROR_LEAPFROG_NSTREAMS_TOO_BIG = -1013;
public static final int VSL_RNG_ERROR_BRNG_NOT_SUPPORTED =        -1014;

/* abstract stream related errors */
public static final int VSL_RNG_ERROR_BAD_UPDATE =                -1120;
public static final int VSL_RNG_ERROR_NO_NUMBERS =                -1121;
public static final int VSL_RNG_ERROR_INVALID_ABSTRACT_STREAM =   -1122;

/* non determenistic stream related errors */
public static final int VSL_RNG_ERROR_NONDETERM_NOT_SUPPORTED =     -1130;
public static final int VSL_RNG_ERROR_NONDETERM_NRETRIES_EXCEEDED = -1131;

/* ARS5 stream related errors */
public static final int VSL_RNG_ERROR_ARS5_NOT_SUPPORTED =        -1140;

/* read/write stream to file errors */
public static final int VSL_RNG_ERROR_FILE_CLOSE =                -1100;
public static final int VSL_RNG_ERROR_FILE_OPEN =                 -1101;
public static final int VSL_RNG_ERROR_FILE_WRITE =                -1102;
public static final int VSL_RNG_ERROR_FILE_READ =                 -1103;

public static final int VSL_RNG_ERROR_BAD_FILE_FORMAT =           -1110;
public static final int VSL_RNG_ERROR_UNSUPPORTED_FILE_VER =      -1111;

public static final int VSL_RNG_ERROR_BAD_MEM_FORMAT =            -1200;

/* Convolution/correlation errors */
public static final int VSL_CC_ERROR_NOT_IMPLEMENTED =        (-2000);
public static final int VSL_CC_ERROR_ALLOCATION_FAILURE =     (-2001);
public static final int VSL_CC_ERROR_BAD_DESCRIPTOR =         (-2200);
public static final int VSL_CC_ERROR_SERVICE_FAILURE =        (-2210);
public static final int VSL_CC_ERROR_EDIT_FAILURE =           (-2211);
public static final int VSL_CC_ERROR_EDIT_PROHIBITED =        (-2212);
public static final int VSL_CC_ERROR_COMMIT_FAILURE =         (-2220);
public static final int VSL_CC_ERROR_COPY_FAILURE =           (-2230);
public static final int VSL_CC_ERROR_DELETE_FAILURE =         (-2240);
public static final int VSL_CC_ERROR_BAD_ARGUMENT =           (-2300);
public static final int VSL_CC_ERROR_DIMS =                   (-2301);
public static final int VSL_CC_ERROR_START =                  (-2302);
public static final int VSL_CC_ERROR_DECIMATION =             (-2303);
public static final int VSL_CC_ERROR_XSHAPE =                 (-2311);
public static final int VSL_CC_ERROR_YSHAPE =                 (-2312);
public static final int VSL_CC_ERROR_ZSHAPE =                 (-2313);
public static final int VSL_CC_ERROR_XSTRIDE =                (-2321);
public static final int VSL_CC_ERROR_YSTRIDE =                (-2322);
public static final int VSL_CC_ERROR_ZSTRIDE =                (-2323);
public static final int VSL_CC_ERROR_X =                      (-2331);
public static final int VSL_CC_ERROR_Y =                      (-2332);
public static final int VSL_CC_ERROR_Z =                      (-2333);
public static final int VSL_CC_ERROR_JOB =                    (-2100);
public static final int VSL_CC_ERROR_KIND =                   (-2110);
public static final int VSL_CC_ERROR_MODE =                   (-2120);
public static final int VSL_CC_ERROR_TYPE =                   (-2130);
public static final int VSL_CC_ERROR_PRECISION =              (-2400);
public static final int VSL_CC_ERROR_EXTERNAL_PRECISION =     (-2141);
public static final int VSL_CC_ERROR_INTERNAL_PRECISION =     (-2142);
public static final int VSL_CC_ERROR_METHOD =                 (-2400);
public static final int VSL_CC_ERROR_OTHER =                  (-2800);

/*
//++
// SUMMARY STATTISTICS ERROR/WARNING CODES
//--
*/

/*
// Warnings
*/
public static final int VSL_SS_NOT_FULL_RANK_MATRIX =                   4028;
public static final int VSL_SS_SEMIDEFINITE_COR =                       4029;
/*
// Errors (-4000..-4999)
*/
public static final int VSL_SS_ERROR_ALLOCATION_FAILURE =              -4000;
public static final int VSL_SS_ERROR_BAD_DIMEN =                       -4001;
public static final int VSL_SS_ERROR_BAD_OBSERV_N =                    -4002;
public static final int VSL_SS_ERROR_STORAGE_NOT_SUPPORTED =           -4003;
public static final int VSL_SS_ERROR_BAD_INDC_ADDR =                   -4004;
public static final int VSL_SS_ERROR_BAD_WEIGHTS =                     -4005;
public static final int VSL_SS_ERROR_BAD_MEAN_ADDR =                   -4006;
public static final int VSL_SS_ERROR_BAD_2R_MOM_ADDR =                 -4007;
public static final int VSL_SS_ERROR_BAD_3R_MOM_ADDR =                 -4008;
public static final int VSL_SS_ERROR_BAD_4R_MOM_ADDR =                 -4009;
public static final int VSL_SS_ERROR_BAD_2C_MOM_ADDR =                 -4010;
public static final int VSL_SS_ERROR_BAD_3C_MOM_ADDR =                 -4011;
public static final int VSL_SS_ERROR_BAD_4C_MOM_ADDR =                 -4012;
public static final int VSL_SS_ERROR_BAD_KURTOSIS_ADDR =               -4013;
public static final int VSL_SS_ERROR_BAD_SKEWNESS_ADDR =               -4014;
public static final int VSL_SS_ERROR_BAD_MIN_ADDR =                    -4015;
public static final int VSL_SS_ERROR_BAD_MAX_ADDR =                    -4016;
public static final int VSL_SS_ERROR_BAD_VARIATION_ADDR =              -4017;
public static final int VSL_SS_ERROR_BAD_COV_ADDR =                    -4018;
public static final int VSL_SS_ERROR_BAD_COR_ADDR =                    -4019;
public static final int VSL_SS_ERROR_BAD_ACCUM_WEIGHT_ADDR =           -4020;
public static final int VSL_SS_ERROR_BAD_QUANT_ORDER_ADDR =            -4021;
public static final int VSL_SS_ERROR_BAD_QUANT_ORDER =                 -4022;
public static final int VSL_SS_ERROR_BAD_QUANT_ADDR =                  -4023;
public static final int VSL_SS_ERROR_BAD_ORDER_STATS_ADDR =            -4024;
public static final int VSL_SS_ERROR_MOMORDER_NOT_SUPPORTED =          -4025;
public static final int VSL_SS_ERROR_ALL_OBSERVS_OUTLIERS =            -4026;
public static final int VSL_SS_ERROR_BAD_ROBUST_COV_ADDR =             -4027;
public static final int VSL_SS_ERROR_BAD_ROBUST_MEAN_ADDR =            -4028;
public static final int VSL_SS_ERROR_METHOD_NOT_SUPPORTED =            -4029;
public static final int VSL_SS_ERROR_BAD_GROUP_INDC_ADDR =             -4030;
public static final int VSL_SS_ERROR_NULL_TASK_DESCRIPTOR =            -4031;
public static final int VSL_SS_ERROR_BAD_OBSERV_ADDR =                 -4032;
public static final int VSL_SS_ERROR_SINGULAR_COV =                    -4033;
public static final int VSL_SS_ERROR_BAD_POOLED_COV_ADDR =             -4034;
public static final int VSL_SS_ERROR_BAD_POOLED_MEAN_ADDR =            -4035;
public static final int VSL_SS_ERROR_BAD_GROUP_COV_ADDR =              -4036;
public static final int VSL_SS_ERROR_BAD_GROUP_MEAN_ADDR =             -4037;
public static final int VSL_SS_ERROR_BAD_GROUP_INDC =                  -4038;
public static final int VSL_SS_ERROR_BAD_OUTLIERS_PARAMS_ADDR =        -4039;
public static final int VSL_SS_ERROR_BAD_OUTLIERS_PARAMS_N_ADDR =      -4040;
public static final int VSL_SS_ERROR_BAD_OUTLIERS_WEIGHTS_ADDR =       -4041;
public static final int VSL_SS_ERROR_BAD_ROBUST_COV_PARAMS_ADDR =      -4042;
public static final int VSL_SS_ERROR_BAD_ROBUST_COV_PARAMS_N_ADDR =    -4043;
public static final int VSL_SS_ERROR_BAD_STORAGE_ADDR =                -4044;
public static final int VSL_SS_ERROR_BAD_PARTIAL_COV_IDX_ADDR =        -4045;
public static final int VSL_SS_ERROR_BAD_PARTIAL_COV_ADDR =            -4046;
public static final int VSL_SS_ERROR_BAD_PARTIAL_COR_ADDR =            -4047;
public static final int VSL_SS_ERROR_BAD_MI_PARAMS_ADDR =              -4048;
public static final int VSL_SS_ERROR_BAD_MI_PARAMS_N_ADDR =            -4049;
public static final int VSL_SS_ERROR_BAD_MI_BAD_PARAMS_N =             -4050;
public static final int VSL_SS_ERROR_BAD_MI_PARAMS =                   -4051;
public static final int VSL_SS_ERROR_BAD_MI_INIT_ESTIMATES_N_ADDR =    -4052;
public static final int VSL_SS_ERROR_BAD_MI_INIT_ESTIMATES_ADDR =      -4053;
public static final int VSL_SS_ERROR_BAD_MI_SIMUL_VALS_ADDR =          -4054;
public static final int VSL_SS_ERROR_BAD_MI_SIMUL_VALS_N_ADDR =        -4055;
public static final int VSL_SS_ERROR_BAD_MI_ESTIMATES_N_ADDR =         -4056;
public static final int VSL_SS_ERROR_BAD_MI_ESTIMATES_ADDR =           -4057;
public static final int VSL_SS_ERROR_BAD_MI_SIMUL_VALS_N =             -4058;
public static final int VSL_SS_ERROR_BAD_MI_ESTIMATES_N =              -4059;
public static final int VSL_SS_ERROR_BAD_MI_OUTPUT_PARAMS =            -4060;
public static final int VSL_SS_ERROR_BAD_MI_PRIOR_N_ADDR =             -4061;
public static final int VSL_SS_ERROR_BAD_MI_PRIOR_ADDR =               -4062;
public static final int VSL_SS_ERROR_BAD_MI_MISSING_VALS_N =           -4063;
public static final int VSL_SS_ERROR_BAD_STREAM_QUANT_PARAMS_N_ADDR =  -4064;
public static final int VSL_SS_ERROR_BAD_STREAM_QUANT_PARAMS_ADDR =    -4065;
public static final int VSL_SS_ERROR_BAD_STREAM_QUANT_PARAMS_N =       -4066;
public static final int VSL_SS_ERROR_BAD_STREAM_QUANT_PARAMS =         -4067;
public static final int VSL_SS_ERROR_BAD_STREAM_QUANT_ORDER_ADDR =     -4068;
public static final int VSL_SS_ERROR_BAD_STREAM_QUANT_ORDER =          -4069;
public static final int VSL_SS_ERROR_BAD_STREAM_QUANT_ADDR =           -4070;
public static final int VSL_SS_ERROR_BAD_PARAMTR_COR_ADDR =            -4071;
public static final int VSL_SS_ERROR_BAD_COR =                         -4072;
public static final int VSL_SS_ERROR_BAD_PARTIAL_COV_IDX =             -4073;
public static final int VSL_SS_ERROR_BAD_SUM_ADDR =                    -4074;
public static final int VSL_SS_ERROR_BAD_2R_SUM_ADDR =                 -4075;
public static final int VSL_SS_ERROR_BAD_3R_SUM_ADDR =                 -4076;
public static final int VSL_SS_ERROR_BAD_4R_SUM_ADDR =                 -4077;
public static final int VSL_SS_ERROR_BAD_2C_SUM_ADDR =                 -4078;
public static final int VSL_SS_ERROR_BAD_3C_SUM_ADDR =                 -4079;
public static final int VSL_SS_ERROR_BAD_4C_SUM_ADDR =                 -4080;
public static final int VSL_SS_ERROR_BAD_CP_ADDR =                     -4081;
public static final int VSL_SS_ERROR_BAD_MDAD_ADDR =                   -4082;
public static final int VSL_SS_ERROR_BAD_MNAD_ADDR =                   -4083;
public static final int VSL_SS_ERROR_BAD_SORTED_OBSERV_ADDR =          -4084;
public static final int VSL_SS_ERROR_INDICES_NOT_SUPPORTED =           -4085;


/*
// Internal errors caused by internal routines of the functions
*/
public static final int VSL_SS_ERROR_ROBCOV_INTERN_C1 =                -5000;
public static final int VSL_SS_ERROR_PARTIALCOV_INTERN_C1 =            -5010;
public static final int VSL_SS_ERROR_PARTIALCOV_INTERN_C2 =            -5011;
public static final int VSL_SS_ERROR_MISSINGVALS_INTERN_C1 =           -5021;
public static final int VSL_SS_ERROR_MISSINGVALS_INTERN_C2 =           -5022;
public static final int VSL_SS_ERROR_MISSINGVALS_INTERN_C3 =           -5023;
public static final int VSL_SS_ERROR_MISSINGVALS_INTERN_C4 =           -5024;
public static final int VSL_SS_ERROR_MISSINGVALS_INTERN_C5 =           -5025;
public static final int VSL_SS_ERROR_PARAMTRCOR_INTERN_C1 =            -5030;
public static final int VSL_SS_ERROR_COVRANK_INTERNAL_ERROR_C1 =       -5040;
public static final int VSL_SS_ERROR_INVCOV_INTERNAL_ERROR_C1 =        -5041;
public static final int VSL_SS_ERROR_INVCOV_INTERNAL_ERROR_C2 =        -5042;


/*
// CONV/CORR RELATED MACRO DEFINITIONS
*/
public static final int VSL_CONV_MODE_AUTO =        0;
public static final int VSL_CORR_MODE_AUTO =        0;
public static final int VSL_CONV_MODE_DIRECT =      1;
public static final int VSL_CORR_MODE_DIRECT =      1;
public static final int VSL_CONV_MODE_FFT =         2;
public static final int VSL_CORR_MODE_FFT =         2;
public static final int VSL_CONV_PRECISION_SINGLE = 1;
public static final int VSL_CORR_PRECISION_SINGLE = 1;
public static final int VSL_CONV_PRECISION_DOUBLE = 2;
public static final int VSL_CORR_PRECISION_DOUBLE = 2;

/*
//++
//  BASIC RANDOM NUMBER GENERATOR (BRNG) RELATED MACRO DEFINITIONS
//--
*/

/*
//  MAX NUMBER OF BRNGS CAN BE REGISTERED IN VSL
//  No more than VSL_MAX_REG_BRNGS basic generators can be registered in VSL
//  (including predefined basic generators).
//
//  Change this number to increase/decrease number of BRNGs can be registered.
*/
public static final int VSL_MAX_REG_BRNGS =           512;

/*
//  PREDEFINED BRNG NAMES
*/
public static final int VSL_BRNG_SHIFT =      20;
public static final int VSL_BRNG_INC =        (1<<VSL_BRNG_SHIFT);

public static final int VSL_BRNG_MCG31 =          (VSL_BRNG_INC);
public static final int VSL_BRNG_R250 =           (VSL_BRNG_MCG31    +VSL_BRNG_INC);
public static final int VSL_BRNG_MRG32K3A =       (VSL_BRNG_R250     +VSL_BRNG_INC);
public static final int VSL_BRNG_MCG59 =          (VSL_BRNG_MRG32K3A +VSL_BRNG_INC);
public static final int VSL_BRNG_WH =             (VSL_BRNG_MCG59    +VSL_BRNG_INC);
public static final int VSL_BRNG_SOBOL =          (VSL_BRNG_WH       +VSL_BRNG_INC);
public static final int VSL_BRNG_NIEDERR =        (VSL_BRNG_SOBOL    +VSL_BRNG_INC);
public static final int VSL_BRNG_MT19937 =        (VSL_BRNG_NIEDERR  +VSL_BRNG_INC);
public static final int VSL_BRNG_MT2203 =         (VSL_BRNG_MT19937  +VSL_BRNG_INC);
public static final int VSL_BRNG_IABSTRACT =      (VSL_BRNG_MT2203   +VSL_BRNG_INC);
public static final int VSL_BRNG_DABSTRACT =      (VSL_BRNG_IABSTRACT+VSL_BRNG_INC);
public static final int VSL_BRNG_SABSTRACT =      (VSL_BRNG_DABSTRACT+VSL_BRNG_INC);
public static final int VSL_BRNG_SFMT19937 =      (VSL_BRNG_SABSTRACT+VSL_BRNG_INC);
public static final int VSL_BRNG_NONDETERM =      (VSL_BRNG_SFMT19937+VSL_BRNG_INC);
public static final int VSL_BRNG_ARS5 =           (VSL_BRNG_NONDETERM+VSL_BRNG_INC);
public static final int VSL_BRNG_PHILOX4X32X10 =  (VSL_BRNG_ARS5     +VSL_BRNG_INC);


/*
// PREDEFINED PARAMETERS FOR NON-DETERMNINISTIC RANDOM NUMBER
// GENERATOR
// The library provides an abstraction to the source of non-deterministic
// random numbers supported in HW. Current version of the library provides
// interface to RDRAND-based only, available in latest Intel CPU.
*/
public static final int VSL_BRNG_RDRAND =  0x0;
public static final int VSL_BRNG_NONDETERM_NRETRIES = 10;

/*
//  LEAPFROG METHOD FOR GRAY-CODE BASED QUASI-RANDOM NUMBER BASIC GENERATORS
//  VSL_BRNG_SOBOL and VSL_BRNG_NIEDERR are Gray-code based quasi-random number
//  basic generators. In contrast to pseudorandom number basic generators,
//  quasi-random ones take the dimension as initialization parameter.
//
//  Suppose that quasi-random number generator (QRNG) dimension is S. QRNG
//  sequence is a sequence of S-dimensional vectors:
//
//     x0=(x0[0],x0[1],...,x0[S-1]),x1=(x1[0],x1[1],...,x1[S-1]),...
//
//  VSL treats the output of any basic generator as 1-dimensional, however:
//
//     x0[0],x0[1],...,x0[S-1],x1[0],x1[1],...,x1[S-1],...
//
//  Because of nature of VSL_BRNG_SOBOL and VSL_BRNG_NIEDERR QRNGs,
//  the only S-stride Leapfrog method is supported for them. In other words,
//  user can generate subsequences, which consist of fixed elements of
//  vectors x0,x1,... For example, if 0 element is fixed, the following
//  subsequence is generated:
//
//     x0[1],x1[1],x2[1],...
//
//  To use the s-stride Leapfrog method with given QRNG, user should call
//  vslLeapfrogStream function with parameter k equal to element to be fixed
//  (0<=k<S) and parameter nstreams equal to VSL_QRNG_LEAPFROG_COMPONENTS.
*/
public static final int VSL_QRNG_LEAPFROG_COMPONENTS =    0x7fffffff;

/*
//  USER-DEFINED PARAMETERS FOR QUASI-RANDOM NUMBER BASIC GENERATORS
//  VSL_BRNG_SOBOL and VSL_BRNG_NIEDERR are Gray-code based quasi-random
//  number basic generators. Default parameters of the generators
//  support generation of quasi-random number vectors of dimensions
//  S<=40 for SOBOL and S<=318 for NIEDERRITER. The library provides
//  opportunity to register user-defined initial values for the
//  generators and generate quasi-random vectors of desirable dimension.
//  There is also opportunity to register user-defined parameters for
//  default dimensions and obtain another sequence of quasi-random vectors.
//  Service function vslNewStreamEx is used to pass the parameters to
//  the library. Data are packed into array params, parameter of the routine.
//  First element of the array is used for dimension S, second element
//  contains indicator, VSL_USER_QRNG_INITIAL_VALUES, of user-defined
//  parameters for quasi-random number generators.
//  Macros VSL_USER_PRIMITIVE_POLYMS and VSL_USER_INIT_DIRECTION_NUMBERS
//  are used to describe which data are passed to SOBOL QRNG and
//  VSL_USER_IRRED_POLYMS - which data are passed to NIEDERRITER QRNG.
//  For example, to demonstrate that both primitive polynomials and initial
//  direction numbers are passed in SOBOL one should set third element of the
//  array params to  VSL_USER_PRIMITIVE_POLYMS | VSL_USER_DIRECTION_NUMBERS.
//  Macro VSL_QRNG_OVERRIDE_1ST_DIM_INIT is used to override default
//  initialization for the first dimension. Macro VSL_USER_DIRECTION_NUMBERS
//  is used when direction numbers calculated on the user side are passed
//  into the generators. More detailed description of interface for
//  registration of user-defined QRNG initial parameters can be found
//  in VslNotes.pdf.
*/
public static final int VSL_USER_QRNG_INITIAL_VALUES =     0x1;
public static final int VSL_USER_PRIMITIVE_POLYMS =        0x1;
public static final int VSL_USER_INIT_DIRECTION_NUMBERS =  0x2;
public static final int VSL_USER_IRRED_POLYMS =            0x1;
public static final int VSL_USER_DIRECTION_NUMBERS =       0x4;
public static final int VSL_QRNG_OVERRIDE_1ST_DIM_INIT =   0x8;


/*
//  INITIALIZATION METHODS FOR USER-DESIGNED BASIC RANDOM NUMBER GENERATORS.
//  Each BRNG must support at least VSL_INIT_METHOD_STANDARD initialization
//  method. In addition, VSL_INIT_METHOD_LEAPFROG and VSL_INIT_METHOD_SKIPAHEAD
//  initialization methods can be supported.
//
//  If VSL_INIT_METHOD_LEAPFROG is not supported then initialization routine
//  must return VSL_RNG_ERROR_LEAPFROG_UNSUPPORTED error code.
//
//  If VSL_INIT_METHOD_SKIPAHEAD is not supported then initialization routine
//  must return VSL_RNG_ERROR_SKIPAHEAD_UNSUPPORTED error code.
//
//  If there is no error during initialization, the initialization routine must
//  return VSL_ERROR_OK code.
*/
public static final int VSL_INIT_METHOD_STANDARD =  0;
public static final int VSL_INIT_METHOD_LEAPFROG =  1;
public static final int VSL_INIT_METHOD_SKIPAHEAD = 2;


/*
//++
//  ACCURACY FLAG FOR DISTRIBUTION GENERATORS
//  This flag defines mode of random number generation.
//  If accuracy mode is set distribution generators will produce
//  numbers lying exactly within definitional domain for all values
//  of distribution parameters. In this case slight performance
//  degradation is expected. By default accuracy mode is switched off
//  admitting random numbers to be out of the definitional domain for
//  specific values of distribution parameters.
//  This macro is used to form names for accuracy versions of
//  distribution number generators
//--
*/
public static final int VSL_RNG_METHOD_ACCURACY_FLAG = (1<<30);

/*
//++
//  TRANSFORMATION METHOD NAMES FOR DISTRIBUTION RANDOM NUMBER GENERATORS
//  VSL interface allows more than one generation method in a distribution
//  transformation subroutine. Following macro definitions are used to
//  specify generation method for given distribution generator.
//
//  Method name macro is constructed as
//
//     VSL_RNG_METHOD_<Distribution>_<Method>
//
//  where
//
//     <Distribution> - probability distribution
//     <Method> - method name
//
//  VSL_RNG_METHOD_<Distribution>_<Method> should be used with
//  vsl<precision>Rng<Distribution> function only, where
//
//     <precision> - s (single) or d (double)
//     <Distribution> - probability distribution
//--
*/

/*
// Uniform
//
// <Method>   <Short Description>
// STD        standard method. Currently there is only one method for this
//            distribution generator
*/
public static final int VSL_RNG_METHOD_UNIFORM_STD = 0; /* vsl{s,d,i}RngUniform */

public static final int VSL_RNG_METHOD_UNIFORM_STD_ACCURATE = 
  VSL_RNG_METHOD_UNIFORM_STD | VSL_RNG_METHOD_ACCURACY_FLAG;
    /* accurate mode of vsl{d,s}RngUniform */

/*
// Uniform Bits
//
// <Method>   <Short Description>
// STD        standard method. Currently there is only one method for this
//            distribution generator
*/
public static final int VSL_RNG_METHOD_UNIFORMBITS_STD = 0; /* vsliRngUniformBits */

/*
// Uniform Bits 32
//
// <Method>   <Short Description>
// STD        standard method. Currently there is only one method for this
//            distribution generator
*/
public static final int VSL_RNG_METHOD_UNIFORMBITS32_STD = 0; /* vsliRngUniformBits32 */

/*
// Uniform Bits 64
//
// <Method>   <Short Description>
// STD        standard method. Currently there is only one method for this
//            distribution generator
*/
public static final int VSL_RNG_METHOD_UNIFORMBITS64_STD = 0; /* vsliRngUniformBits64 */

/*
// Gaussian
//
// <Method>   <Short Description>
// BOXMULLER  generates normally distributed random number x thru the pair of
//            uniformly distributed numbers u1 and u2 according to the formula:
//
//               x=sqrt(-ln(u1))*sin(2*Pi*u2)
//
// BOXMULLER2 generates pair of normally distributed random numbers x1 and x2
//            thru the pair of uniformly dustributed numbers u1 and u2
//            according to the formula
//
//               x1=sqrt(-ln(u1))*sin(2*Pi*u2)
//               x2=sqrt(-ln(u1))*cos(2*Pi*u2)
//
//            NOTE: implementation correctly works with odd vector lengths
//
// ICDF       inverse cumulative distribution function method
*/
public static final int VSL_RNG_METHOD_GAUSSIAN_BOXMULLER =   0; /* vsl{d,s}RngGaussian */
public static final int VSL_RNG_METHOD_GAUSSIAN_BOXMULLER2 =  1; /* vsl{d,s}RngGaussian */
public static final int VSL_RNG_METHOD_GAUSSIAN_ICDF =        2; /* vsl{d,s}RngGaussian */

/*
// GaussianMV - multivariate (correlated) normal
// Multivariate (correlated) normal random number generator is based on
// uncorrelated Gaussian random number generator (see vslsRngGaussian and
// vsldRngGaussian functions):
//
// <Method>   <Short Description>
// BOXMULLER  generates normally distributed random number x thru the pair of
//            uniformly distributed numbers u1 and u2 according to the formula:
//
//               x=sqrt(-ln(u1))*sin(2*Pi*u2)
//
// BOXMULLER2 generates pair of normally distributed random numbers x1 and x2
//            thru the pair of uniformly dustributed numbers u1 and u2
//            according to the formula
//
//               x1=sqrt(-ln(u1))*sin(2*Pi*u2)
//               x2=sqrt(-ln(u1))*cos(2*Pi*u2)
//
//            NOTE: implementation correctly works with odd vector lengths
//
// ICDF       inverse cumulative distribution function method
*/
public static final int VSL_RNG_METHOD_GAUSSIANMV_BOXMULLER =   0; /* vsl{d,s}RngGaussianMV */
public static final int VSL_RNG_METHOD_GAUSSIANMV_BOXMULLER2 =  1; /* vsl{d,s}RngGaussianMV */
public static final int VSL_RNG_METHOD_GAUSSIANMV_ICDF =        2; /* vsl{d,s}RngGaussianMV */

/*
// Exponential
//
// <Method>   <Short Description>
// ICDF       inverse cumulative distribution function method
*/
public static final int VSL_RNG_METHOD_EXPONENTIAL_ICDF = 0; /* vsl{d,s}RngExponential */

public static final int VSL_RNG_METHOD_EXPONENTIAL_ICDF_ACCURATE = 
   VSL_RNG_METHOD_EXPONENTIAL_ICDF | VSL_RNG_METHOD_ACCURACY_FLAG;
    /* accurate mode of vsl{d,s}RngExponential */

/*
// Laplace
//
// <Method>   <Short Description>
// ICDF       inverse cumulative distribution function method
//
// ICDF - inverse cumulative distribution function method:
//
//           x=+/-ln(u) with probability 1/2,
//
//        where
//
//           x - random number with Laplace distribution,
//           u - uniformly distributed random number
*/
public static final int VSL_RNG_METHOD_LAPLACE_ICDF = 0; /* vsl{d,s}RngLaplace */

/*
// Weibull
//
// <Method>   <Short Description>
// ICDF       inverse cumulative distribution function method
*/
public static final int VSL_RNG_METHOD_WEIBULL_ICDF = 0; /* vsl{d,s}RngWeibull */

public static final int VSL_RNG_METHOD_WEIBULL_ICDF_ACCURATE = 
   VSL_RNG_METHOD_WEIBULL_ICDF | VSL_RNG_METHOD_ACCURACY_FLAG;
    /* accurate mode of vsl{d,s}RngWeibull */


/*
// Cauchy
//
// <Method>   <Short Description>
// ICDF       inverse cumulative distribution function method
*/
public static final int VSL_RNG_METHOD_CAUCHY_ICDF = 0; /* vsl{d,s}RngCauchy */

/*
// Rayleigh
//
// <Method>   <Short Description>
// ICDF       inverse cumulative distribution function method
*/
public static final int VSL_RNG_METHOD_RAYLEIGH_ICDF = 0; /* vsl{d,s}RngRayleigh */

public static final int VSL_RNG_METHOD_RAYLEIGH_ICDF_ACCURATE = 
   VSL_RNG_METHOD_RAYLEIGH_ICDF | VSL_RNG_METHOD_ACCURACY_FLAG;
    /* accurate mode of vsl{d,s}RngRayleigh */

/*
// Lognormal
//
// <Method>   <Short Description>
// BOXMULLER2       Box-Muller 2 algorithm based method
*/
public static final int VSL_RNG_METHOD_LOGNORMAL_BOXMULLER2 = 0; /* vsl{d,s}RngLognormal */
public static final int VSL_RNG_METHOD_LOGNORMAL_ICDF = 1;       /* vsl{d,s}RngLognormal */

public static final int VSL_RNG_METHOD_LOGNORMAL_BOXMULLER2_ACCURATE = 
   VSL_RNG_METHOD_LOGNORMAL_BOXMULLER2 | VSL_RNG_METHOD_ACCURACY_FLAG;
    /* accurate mode of vsl{d,s}RngLognormal */

public static final int VSL_RNG_METHOD_LOGNORMAL_ICDF_ACCURATE = 
   VSL_RNG_METHOD_LOGNORMAL_ICDF | VSL_RNG_METHOD_ACCURACY_FLAG;
    /* accurate mode of vsl{d,s}RngLognormal */


/*
// Gumbel
//
// <Method>   <Short Description>
// ICDF       inverse cumulative distribution function method
*/
public static final int VSL_RNG_METHOD_GUMBEL_ICDF = 0; /* vsl{d,s}RngGumbel */

/*
// Gamma
//
// Comments:
// alpha>1             - algorithm of Marsaglia is used, nonlinear
//                       transformation of gaussian numbers based on
//                       acceptance/rejection method with squeezes;
// alpha>=0.6, alpha<1 - rejection from the Weibull distribution is used;
// alpha<0.6           - transformation of exponential power distribution
//                       (EPD) is used, EPD random numbers are generated
//                       by means of acceptance/rejection technique;
// alpha=1             - gamma distribution reduces to exponential
//                       distribution
*/
public static final int VSL_RNG_METHOD_GAMMA_GNORM = 0; /* vsl{d,s}RngGamma */

public static final int VSL_RNG_METHOD_GAMMA_GNORM_ACCURATE = 
   VSL_RNG_METHOD_GAMMA_GNORM | VSL_RNG_METHOD_ACCURACY_FLAG;
    /* accurate mode of vsl{d,s}RngGamma */


/*
// Beta
//
// Comments:
// CJA - stands for first letters of Cheng, Johnk, and Atkinson.
// Cheng    - for min(p,q) > 1 method of Cheng,
//            generation of beta random numbers of the second kind
//            based on acceptance/rejection technique and its
//            transformation to beta random numbers of the first kind;
// Johnk    - for max(p,q) < 1 methods of Johnk and Atkinson:
//            if q + K*p^2+C<=0, K=0.852..., C=-0.956...
//            algorithm of Johnk:
//            beta distributed random number is generated as
//            u1^(1/p) / (u1^(1/p)+u2^(1/q)), if u1^(1/p)+u2^(1/q)<=1;
//            otherwise switching algorithm of Atkinson: interval (0,1)
//            is divided into two domains (0,t) and (t,1), on each interval
//            acceptance/rejection technique with convenient majorizing
//            function is used;
// Atkinson - for min(p,q)<1, max(p,q)>1 switching algorithm of Atkinson
//            is used (with another point t, see short description above);
// ICDF     - inverse cumulative distribution function method according
//            to formulas x=1-u^(1/q) for p = 1, and x = u^(1/p) for q=1,
//            where x is beta distributed random number,
//            u - uniformly distributed random number.
//            for p=q=1 beta distribution reduces to uniform distribution.
//
*/
public static final int VSL_RNG_METHOD_BETA_CJA = 0; /* vsl{d,s}RngBeta */

public static final int VSL_RNG_METHOD_BETA_CJA_ACCURATE = 
   VSL_RNG_METHOD_BETA_CJA | VSL_RNG_METHOD_ACCURACY_FLAG;
    /* accurate mode of vsl{d,s}RngBeta */

/*
// Bernoulli
//
// <Method>   <Short Description>
// ICDF       inverse cumulative distribution function method
*/
public static final int VSL_RNG_METHOD_BERNOULLI_ICDF = 0; /* vsliRngBernoulli */

/*
// Geometric
//
// <Method>   <Short Description>
// ICDF       inverse cumulative distribution function method
*/
public static final int VSL_RNG_METHOD_GEOMETRIC_ICDF = 0; /* vsliRngGeometric */

/*
// Binomial
//
// <Method>   <Short Description>
// BTPE       for ntrial*min(p,1-p)>30 acceptance/rejection method with
//            decomposition onto 4 regions:
//
//               * 2 parallelograms;
//               * triangle;
//               * left exponential tail;
//               * right exponential tail.
//
//            othewise table lookup method is used
*/
public static final int VSL_RNG_METHOD_BINOMIAL_BTPE = 0; /* vsliRngBinomial */

/*
// Hypergeometric
//
// <Method>   <Short Description>
// H2PE       if mode of distribution is large, acceptance/rejection method is
//            used with decomposition onto 3 regions:
//
//               * rectangular;
//               * left exponential tail;
//               * right exponential tail.
//
//            othewise table lookup method is used
*/
public static final int VSL_RNG_METHOD_HYPERGEOMETRIC_H2PE = 0; /* vsliRngHypergeometric */

/*
// Poisson
//
// <Method>   <Short Description>
// PTPE       if lambda>=27, acceptance/rejection method is used with
//            decomposition onto 4 regions:
//
//               * 2 parallelograms;
//               * triangle;
//               * left exponential tail;
//               * right exponential tail.
//
//            othewise table lookup method is used
//
// POISNORM   for lambda>=1 method is based on Poisson inverse CDF
//            approximation by Gaussian inverse CDF; for lambda<1
//            table lookup method is used.
*/
public static final int VSL_RNG_METHOD_POISSON_PTPE =     0; /* vsliRngPoisson */
public static final int VSL_RNG_METHOD_POISSON_POISNORM = 1; /* vsliRngPoisson */

/*
// Poisson
//
// <Method>   <Short Description>
// POISNORM   for lambda>=1 method is based on Poisson inverse CDF
//            approximation by Gaussian inverse CDF; for lambda<1
//            ICDF method is used.
*/
public static final int VSL_RNG_METHOD_POISSONV_POISNORM = 0; /* vsliRngPoissonV */

/*
// Negbinomial
//
// <Method>   <Short Description>
// NBAR       if (a-1)*(1-p)/p>=100, acceptance/rejection method is used with
//            decomposition onto 5 regions:
//
//               * rectangular;
//               * 2 trapezoid;
//               * left exponential tail;
//               * right exponential tail.
//
//            othewise table lookup method is used.
*/
public static final int VSL_RNG_METHOD_NEGBINOMIAL_NBAR = 0; /* vsliRngNegbinomial */

/*
//++
//  MATRIX STORAGE SCHEMES
//--
*/

/*
// Some multivariate random number generators, e.g. GaussianMV, operate
// with matrix parameters. To optimize matrix parameters usage VSL offers
// following matrix storage schemes. (See VSL documentation for more details).
//
// FULL     - whole matrix is stored
// PACKED   - lower/higher triangular matrix is packed in 1-dimensional array
// DIAGONAL - diagonal elements are packed in 1-dimensional array
*/
public static final int VSL_MATRIX_STORAGE_FULL =     0;
public static final int VSL_MATRIX_STORAGE_PACKED =   1;
public static final int VSL_MATRIX_STORAGE_DIAGONAL = 2;


/*
// SUMMARY STATISTICS (SS) RELATED MACRO DEFINITIONS
*/

/*
//++
//  MATRIX STORAGE SCHEMES
//--
*/
/*
// SS routines work with matrix parameters, e.g. matrix of observations,
// variance-covariance matrix. To optimize work with matrices the library
// provides the following storage matrix schemes.
*/
/*
// Matrix of observations:
// ROWS    - observations of the random vector are stored in raws, that
//           is, i-th row of the matrix of observations contains values
//           of i-th component of the random vector
// COLS    - observations of the random vector are stored in columns that
//           is, i-th column of the matrix of observations contains values
//           of i-th component of the random vector
*/
public static final int VSL_SS_MATRIX_STORAGE_ROWS =     0x00010000;
public static final int VSL_SS_MATRIX_STORAGE_COLS =     0x00020000;

/*
// Variance-covariance/correlation matrix:
// FULL     - whole matrix is stored
// L_PACKED - lower triangular matrix is stored as 1-dimensional array
// U_PACKED - upper triangular matrix is stored as 1-dimensional array
*/
public static final int VSL_SS_MATRIX_STORAGE_FULL =            0x00000000;
public static final int VSL_SS_MATRIX_STORAGE_L_PACKED =        0x00000001;
public static final int VSL_SS_MATRIX_STORAGE_U_PACKED =        0x00000002;


/*
//++
//  SUMMARY STATISTICS LIBRARY METHODS
//--
*/
/*
// SS routines provide computation of basic statistical estimates
// (central/raw moments up to 4th order, variance-covariance,
//  minimum, maximum, skewness/kurtosis) using the following methods
//  - FAST  - estimates are computed for price of one or two passes over
//            observations using highly optimized Intel(R) MKL routines
//  - 1PASS - estimate is computed for price of one pass of the observations
//  - FAST_USER_MEAN - estimates are computed for price of one or two passes
//            over observations given user defined mean for central moments,
//            covariance and correlation
//  - CP_TO_COVCOR - convert cross-product matrix to variance-covariance/
//            correlation matrix
//  - SUM_TO_MOM - convert raw/central sums to raw/central moments
//
*/
public static final int VSL_SS_METHOD_FAST =                    0x00000001;
public static final int VSL_SS_METHOD_1PASS =                   0x00000002;
public static final int VSL_SS_METHOD_FAST_USER_MEAN =          0x00000100;
public static final int VSL_SS_METHOD_CP_TO_COVCOR =            0x00000200;
public static final int VSL_SS_METHOD_SUM_TO_MOM =              0x00000400;

/*
// SS provides routine for parametrization of correlation matrix using
// SPECTRAL DECOMPOSITION (SD) method
*/
public static final int VSL_SS_METHOD_SD =                      0x00000004;

/*
// SS routine for robust estimation of variance-covariance matrix
// and mean supports Rocke algorithm, TBS-estimator
*/
public static final int VSL_SS_METHOD_TBS =                     0x00000008;

/*
//  SS routine for estimation of missing values
//  supports Multiple Imputation (MI) method
*/
public static final int VSL_SS_METHOD_MI =                      0x00000010;

/*
// SS provides routine for detection of outliers, BACON method
*/
public static final int VSL_SS_METHOD_BACON =                   0x00000020;

/*
// SS supports routine for estimation of quantiles for streaming data
// using the following methods:
// - ZW      - intermediate estimates of quantiles during processing
//             the next block are computed
// - ZW_FAST - intermediate estimates of quantiles during processing
//             the next block are not computed
*/
public static final int VSL_SS_METHOD_SQUANTS_ZW =              0x00000040;
public static final int VSL_SS_METHOD_SQUANTS_ZW_FAST =         0x00000080;


/*
// Input of BACON algorithm is set of 3 parameters:
// - Initialization method of the algorithm
// - Parameter alfa such that 1-alfa is percentile of Chi2 distribution
// - Stopping criterion
*/
/*
// Number of BACON algorithm parameters
*/
public static final int VSL_SS_BACON_PARAMS_N =         3;

/*
// SS implementation of BACON algorithm supports two initialization methods:
// - Mahalanobis distance based method
// - Median based method
*/
public static final int VSL_SS_METHOD_BACON_MAHALANOBIS_INIT =  0x00000001;
public static final int VSL_SS_METHOD_BACON_MEDIAN_INIT =       0x00000002;

/*
// SS routine for sorting data, RADIX method
*/
public static final int VSL_SS_METHOD_RADIX =                   0x00100000;

/*
// Input of TBS algorithm is set of 4 parameters:
// - Breakdown point
// - Asymptotic rejection probability
// - Stopping criterion
// - Maximum number of iterations
*/
/*
// Number of TBS algorithm parameters
*/
public static final int VSL_SS_TBS_PARAMS_N =           4;

/*
// Input of MI algorithm is set of 5 parameters:
// - Maximal number of iterations for EM algorithm
// - Maximal number of iterations for DA algorithm
// - Stopping criterion
// - Number of sets to impute
// - Total number of missing values in dataset
*/
/*
// Number of MI algorithm parameters
*/
public static final int VSL_SS_MI_PARAMS_SIZE =         5;

/*
// SS MI algorithm expects that missing values are
// marked with NANs
*/
public static final int VSL_SS_DNAN =                    0xFFF8000000000000;
public static final int VSL_SS_SNAN =                    0xFFC00000;

/*
// Input of ZW algorithm is 1 parameter:
// - accuracy of quantile estimation
*/
/*
// Number of ZW algorithm parameters
*/
public static final int VSL_SS_SQUANTS_ZW_PARAMS_N =   1;


/*
//++
// MACROS USED SS EDIT AND COMPUTE ROUTINES
//--
*/

/*
// SS EditTask routine is way to edit input and output parameters of the task,
// e.g., pointers to arrays which hold observations, weights of observations,
// arrays of mean estimates or covariance estimates.
// Macros below define parameters available for modification
*/
public static final int VSL_SS_ED_DIMEN =                                 1;
public static final int VSL_SS_ED_OBSERV_N =                              2;
public static final int VSL_SS_ED_OBSERV =                                3;
public static final int VSL_SS_ED_OBSERV_STORAGE =                        4;
public static final int VSL_SS_ED_INDC =                                  5;
public static final int VSL_SS_ED_WEIGHTS =                               6;
public static final int VSL_SS_ED_MEAN =                                  7;
public static final int VSL_SS_ED_2R_MOM =                                8;
public static final int VSL_SS_ED_3R_MOM =                                9;
public static final int VSL_SS_ED_4R_MOM =                               10;
public static final int VSL_SS_ED_2C_MOM =                               11;
public static final int VSL_SS_ED_3C_MOM =                               12;
public static final int VSL_SS_ED_4C_MOM =                               13;
public static final int VSL_SS_ED_SUM =                                  67;
public static final int VSL_SS_ED_2R_SUM =                               68;
public static final int VSL_SS_ED_3R_SUM =                               69;
public static final int VSL_SS_ED_4R_SUM =                               70;
public static final int VSL_SS_ED_2C_SUM =                               71;
public static final int VSL_SS_ED_3C_SUM =                               72;
public static final int VSL_SS_ED_4C_SUM =                               73;
public static final int VSL_SS_ED_KURTOSIS =                             14;
public static final int VSL_SS_ED_SKEWNESS =                             15;
public static final int VSL_SS_ED_MIN =                                  16;
public static final int VSL_SS_ED_MAX =                                  17;
public static final int VSL_SS_ED_VARIATION =                            18;
public static final int VSL_SS_ED_COV =                                  19;
public static final int VSL_SS_ED_COV_STORAGE =                          20;
public static final int VSL_SS_ED_COR =                                  21;
public static final int VSL_SS_ED_COR_STORAGE =                          22;
public static final int VSL_SS_ED_CP =                                   74;
public static final int VSL_SS_ED_CP_STORAGE =                           75;
public static final int VSL_SS_ED_ACCUM_WEIGHT =                         23;
public static final int VSL_SS_ED_QUANT_ORDER_N =                        24;
public static final int VSL_SS_ED_QUANT_ORDER =                          25;
public static final int VSL_SS_ED_QUANT_QUANTILES =                      26;
public static final int VSL_SS_ED_ORDER_STATS =                          27;
public static final int VSL_SS_ED_GROUP_INDC =                           28;
public static final int VSL_SS_ED_POOLED_COV_STORAGE =                   29;
public static final int VSL_SS_ED_POOLED_MEAN =                          30;
public static final int VSL_SS_ED_POOLED_COV =                           31;
public static final int VSL_SS_ED_GROUP_COV_INDC =                       32;
public static final int VSL_SS_ED_REQ_GROUP_INDC =                       32;
public static final int VSL_SS_ED_GROUP_MEAN =                           33;
public static final int VSL_SS_ED_GROUP_COV_STORAGE =                    34;
public static final int VSL_SS_ED_GROUP_COV =                            35;
public static final int VSL_SS_ED_ROBUST_COV_STORAGE =                   36;
public static final int VSL_SS_ED_ROBUST_COV_PARAMS_N =                  37;
public static final int VSL_SS_ED_ROBUST_COV_PARAMS =                    38;
public static final int VSL_SS_ED_ROBUST_MEAN =                          39;
public static final int VSL_SS_ED_ROBUST_COV =                           40;
public static final int VSL_SS_ED_OUTLIERS_PARAMS_N =                    41;
public static final int VSL_SS_ED_OUTLIERS_PARAMS =                      42;
public static final int VSL_SS_ED_OUTLIERS_WEIGHT =                      43;
public static final int VSL_SS_ED_ORDER_STATS_STORAGE =                  44;
public static final int VSL_SS_ED_PARTIAL_COV_IDX =                      45;
public static final int VSL_SS_ED_PARTIAL_COV =                          46;
public static final int VSL_SS_ED_PARTIAL_COV_STORAGE =                  47;
public static final int VSL_SS_ED_PARTIAL_COR =                          48;
public static final int VSL_SS_ED_PARTIAL_COR_STORAGE =                  49;
public static final int VSL_SS_ED_MI_PARAMS_N =                          50;
public static final int VSL_SS_ED_MI_PARAMS =                            51;
public static final int VSL_SS_ED_MI_INIT_ESTIMATES_N =                  52;
public static final int VSL_SS_ED_MI_INIT_ESTIMATES =                    53;
public static final int VSL_SS_ED_MI_SIMUL_VALS_N =                      54;
public static final int VSL_SS_ED_MI_SIMUL_VALS =                        55;
public static final int VSL_SS_ED_MI_ESTIMATES_N =                       56;
public static final int VSL_SS_ED_MI_ESTIMATES =                         57;
public static final int VSL_SS_ED_MI_PRIOR_N =                           58;
public static final int VSL_SS_ED_MI_PRIOR =                             59;
public static final int VSL_SS_ED_PARAMTR_COR =                          60;
public static final int VSL_SS_ED_PARAMTR_COR_STORAGE =                  61;
public static final int VSL_SS_ED_STREAM_QUANT_PARAMS_N =                62;
public static final int VSL_SS_ED_STREAM_QUANT_PARAMS =                  63;
public static final int VSL_SS_ED_STREAM_QUANT_ORDER_N =                 64;
public static final int VSL_SS_ED_STREAM_QUANT_ORDER =                   65;
public static final int VSL_SS_ED_STREAM_QUANT_QUANTILES =               66;
public static final int VSL_SS_ED_MDAD =                                 76;
public static final int VSL_SS_ED_MNAD =                                 77;
public static final int VSL_SS_ED_SORTED_OBSERV =                        78;
public static final int VSL_SS_ED_SORTED_OBSERV_STORAGE =                79;


/*
// SS Compute routine calculates estimates supported by the library
// Macros below define estimates to compute
*/
public static final int VSL_SS_MEAN =                       0x0000000000000001;
public static final int VSL_SS_2R_MOM =                     0x0000000000000002;
public static final int VSL_SS_3R_MOM =                     0x0000000000000004;
public static final int VSL_SS_4R_MOM =                     0x0000000000000008;
public static final int VSL_SS_2C_MOM =                     0x0000000000000010;
public static final int VSL_SS_3C_MOM =                     0x0000000000000020;
public static final int VSL_SS_4C_MOM =                     0x0000000000000040;
public static final int VSL_SS_SUM =                        0x0000000002000000;
public static final int VSL_SS_2R_SUM =                     0x0000000004000000;
public static final int VSL_SS_3R_SUM =                     0x0000000008000000;
public static final int VSL_SS_4R_SUM =                     0x0000000010000000;
public static final int VSL_SS_2C_SUM =                     0x0000000020000000;
public static final int VSL_SS_3C_SUM =                     0x0000000040000000;
public static final int VSL_SS_4C_SUM =                     0x0000000080000000;
public static final int VSL_SS_KURTOSIS =                   0x0000000000000080;
public static final int VSL_SS_SKEWNESS =                   0x0000000000000100;
public static final int VSL_SS_VARIATION =                  0x0000000000000200;
public static final int VSL_SS_MIN =                        0x0000000000000400;
public static final int VSL_SS_MAX =                        0x0000000000000800;
public static final int VSL_SS_COV =                        0x0000000000001000;
public static final int VSL_SS_COR =                        0x0000000000002000;
public static final long VSL_SS_CP =                         0x0000000100000000L;
public static final int VSL_SS_POOLED_COV =                 0x0000000000004000;
public static final int VSL_SS_GROUP_COV =                  0x0000000000008000;
public static final long VSL_SS_POOLED_MEAN =                0x0000000800000000L;
public static final long VSL_SS_GROUP_MEAN =                 0x0000001000000000L;
public static final int VSL_SS_QUANTS =                     0x0000000000010000;
public static final int VSL_SS_ORDER_STATS =                0x0000000000020000;
public static final long VSL_SS_SORTED_OBSERV =              0x0000008000000000L;
public static final int VSL_SS_ROBUST_COV =                 0x0000000000040000;
public static final int VSL_SS_OUTLIERS =                   0x0000000000080000;
public static final int VSL_SS_PARTIAL_COV =                0x0000000000100000;
public static final int VSL_SS_PARTIAL_COR =                0x0000000000200000;
public static final int VSL_SS_MISSING_VALS =               0x0000000000400000;
public static final int VSL_SS_PARAMTR_COR =                0x0000000000800000;
public static final int VSL_SS_STREAM_QUANTS =              0x0000000001000000;
public static final long VSL_SS_MDAD =                       0x0000000200000000L;
public static final long VSL_SS_MNAD =                       0x0000000400000000L;

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif /* __MKL_VSL_DEFINES_H__ */


// Parsed from mkl_vsl_types.h

/* file: mkl_vsl_types.h */
/*******************************************************************************
* Copyright 2006-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
//++
//  This file contains user-level type definitions.
//--
*/

// #ifndef __MKL_VSL_TYPES_H__
// #define __MKL_VSL_TYPES_H__

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #include "mkl_types.h"

/*
//++
//  TYPEDEFS
//--
*/

/*
//  POINTER TO STREAM STATE STRUCTURE
//  This is a void pointer to hide implementation details.
*/
@Namespace @Name("void") @Opaque public static class VSLStreamStatePtr extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public VSLStreamStatePtr() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public VSLStreamStatePtr(Pointer p) { super(p); }
}
@Namespace @Name("void") @Opaque public static class VSLConvTaskPtr extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public VSLConvTaskPtr() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public VSLConvTaskPtr(Pointer p) { super(p); }
}
@Namespace @Name("void") @Opaque public static class VSLCorrTaskPtr extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public VSLCorrTaskPtr() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public VSLCorrTaskPtr(Pointer p) { super(p); }
}
@Namespace @Name("void") @Opaque public static class VSLSSTaskPtr extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public VSLSSTaskPtr() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public VSLSSTaskPtr(Pointer p) { super(p); }
}

/*
//  POINTERS TO BASIC RANDOM NUMBER GENERATOR FUNCTIONS
//  Each BRNG must have following implementations:
//
//  * Stream initialization (InitStreamPtr)
//  * Integer-value recurrence implementation (iBRngPtr)
//  * Single precision implementation (sBRngPtr) - for random number generation
//    uniformly distributed on the [a,b] interval
//  * Double precision implementation (dBRngPtr) - for random number generation
//    uniformly distributed on the [a,b] interval
*/
public static class InitStreamPtr extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    InitStreamPtr(Pointer p) { super(p); }
    protected InitStreamPtr() { allocate(); }
    private native void allocate();
    public native int call( int method, VSLStreamStatePtr stream,        int n, @Cast("const unsigned int*") IntPointer params );
}
public static class sBRngPtr extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    sBRngPtr(Pointer p) { super(p); }
    protected sBRngPtr() { allocate(); }
    private native void allocate();
    public native int call( VSLStreamStatePtr stream, int n, FloatPointer r,        float a, float b );
}
public static class dBRngPtr extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    dBRngPtr(Pointer p) { super(p); }
    protected dBRngPtr() { allocate(); }
    private native void allocate();
    public native int call( VSLStreamStatePtr stream, int n, DoublePointer r,        double a, double b );
}
public static class iBRngPtr extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    iBRngPtr(Pointer p) { super(p); }
    protected iBRngPtr() { allocate(); }
    private native void allocate();
    public native int call( VSLStreamStatePtr stream, int n, @Cast("unsigned int*") IntPointer r );
}

/*********** Pointers to callback functions for abstract streams *************/
public static class iUpdateFuncPtr extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    iUpdateFuncPtr(Pointer p) { super(p); }
    protected iUpdateFuncPtr() { allocate(); }
    private native void allocate();
    public native int call( VSLStreamStatePtr stream, IntPointer n,     @Cast("unsigned int*") IntPointer ibuf, IntPointer nmin, IntPointer nmax, IntPointer idx );
}
public static class dUpdateFuncPtr extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    dUpdateFuncPtr(Pointer p) { super(p); }
    protected dUpdateFuncPtr() { allocate(); }
    private native void allocate();
    public native int call( VSLStreamStatePtr stream, IntPointer n,
     DoublePointer dbuf, IntPointer nmin, IntPointer nmax, IntPointer idx );
}
public static class sUpdateFuncPtr extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    sUpdateFuncPtr(Pointer p) { super(p); }
    protected sUpdateFuncPtr() { allocate(); }
    private native void allocate();
    public native int call( VSLStreamStatePtr stream, IntPointer n,     FloatPointer sbuf, IntPointer nmin, IntPointer nmax, IntPointer idx );
}


/*
//  BASIC RANDOM NUMBER GENERATOR PROPERTIES STRUCTURE
//  The structure describes the properties of given basic generator, e.g. size
//  of the stream state structure, pointers to function implementations, etc.
//
//  BRNG properties structure fields:
//  StreamStateSize - size of the stream state structure (in bytes)
//  WordSize        - size of base word (in bytes). Typically this is 4 bytes.
//  NSeeds          - number of words necessary to describe generator's state
//  NBits           - number of bits actually used in base word. For example,
//                    only 31 least significant bits are actually used in
//                    basic random number generator MCG31m1 with 4-byte base
//                    word. NBits field is useful while interpreting random
//                    words as a sequence of random bits.
//  IncludesZero    - FALSE if 0 cannot be generated in integer-valued
//                    implementation; TRUE if 0 can be potentially generated in
//                    integer-valued implementation.
//  InitStream      - pointer to stream state initialization function
//  sBRng           - pointer to single precision implementation
//  dBRng           - pointer to double precision implementation
//  iBRng           - pointer to integer-value implementation
*/
public static class VSLBRngProperties extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public VSLBRngProperties() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public VSLBRngProperties(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public VSLBRngProperties(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public VSLBRngProperties position(long position) {
        return (VSLBRngProperties)super.position(position);
    }

    public native int StreamStateSize(); public native VSLBRngProperties StreamStateSize(int StreamStateSize);       /* Stream state size (in bytes) */
    public native int NSeeds(); public native VSLBRngProperties NSeeds(int NSeeds);                /* Number of seeds */
    public native int IncludesZero(); public native VSLBRngProperties IncludesZero(int IncludesZero);          /* Zero flag */
    public native int WordSize(); public native VSLBRngProperties WordSize(int WordSize);              /* Size (in bytes) of base word */
    public native int NBits(); public native VSLBRngProperties NBits(int NBits);                 /* Number of actually used bits */
    public native InitStreamPtr InitStream(); public native VSLBRngProperties InitStream(InitStreamPtr InitStream);  /* Pointer to InitStream func */
    public native sBRngPtr sBRng(); public native VSLBRngProperties sBRng(sBRngPtr sBRng);            /* Pointer to S func */
    public native dBRngPtr dBRng(); public native VSLBRngProperties dBRng(dBRngPtr dBRng);            /* Pointer to D func */
    public native iBRngPtr iBRng(); public native VSLBRngProperties iBRng(iBRngPtr iBRng);            /* Pointer to I func */
}

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif /* __MKL_VSL_TYPES_H__ */


// Parsed from mkl_vsl_functions.h

/* file: mkl_vsl_functions.h */
/*******************************************************************************
* Copyright 2006-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
//++
//  User-level VSL function declarations
//--
*/

// #ifndef __MKL_VSL_FUNCTIONS_H__
// #define __MKL_VSL_FUNCTIONS_H__

// #include "mkl_vsl_types.h"

// #ifdef __cplusplus
// #endif /* __cplusplus */

/*
//++
//  EXTERNAL API MACROS.
//  Used to construct VSL function declaration. Change them if you are going to
//  provide different API for VSL functions.
//--
*/

// #if  !defined(_Mkl_Api)
// #define _Mkl_Api(rtype,name,arg)   extern rtype name    arg;
// #endif

// #if  !defined(_mkl_api)
// #define _mkl_api(rtype,name,arg)   extern rtype name##_ arg;
// #endif

// #if  !defined(_MKL_API)
// #define _MKL_API(rtype,name,arg)   extern rtype name##_ arg;
// #endif

/*
//++
//  VSL CONTINUOUS DISTRIBUTION GENERATOR FUNCTION DECLARATIONS.
//--
*/
/* Cauchy distribution */
public static native int vdRngCauchy(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, DoublePointer arg3, double arg4, double arg5  );
public static native int vdRngCauchy(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, DoubleBuffer arg3, double arg4, double arg5  );
public static native int vdRngCauchy(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, double[] arg3, double arg4, double arg5  );
public static native int VDRNGCAUCHY_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5);
public static native int VDRNGCAUCHY_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5);
public static native int VDRNGCAUCHY_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, double[] arg3, @Const double[] arg4, @Const double[] arg5);
public static native int vdrngcauchy_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5);
public static native int vdrngcauchy_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5);
public static native int vdrngcauchy_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, double[] arg3, @Const double[] arg4, @Const double[] arg5);
public static native int vsRngCauchy(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, FloatPointer arg3,  float arg4,  float arg5   );
public static native int vsRngCauchy(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, FloatBuffer arg3,  float arg4,  float arg5   );
public static native int vsRngCauchy(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, float[] arg3,  float arg4,  float arg5   );
public static native int VSRNGCAUCHY_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5 );
public static native int VSRNGCAUCHY_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5 );
public static native int VSRNGCAUCHY_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, float[] arg3,  @Const float[] arg4,  @Const float[] arg5 );
public static native int vsrngcauchy_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5 );
public static native int vsrngcauchy_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5 );
public static native int vsrngcauchy_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, float[] arg3,  @Const float[] arg4,  @Const float[] arg5 );

/* Uniform distribution */
public static native int vdRngUniform(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, DoublePointer arg3, double arg4, double arg5  );
public static native int vdRngUniform(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, DoubleBuffer arg3, double arg4, double arg5  );
public static native int vdRngUniform(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, double[] arg3, double arg4, double arg5  );
public static native int VDRNGUNIFORM_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5);
public static native int VDRNGUNIFORM_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5);
public static native int VDRNGUNIFORM_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, double[] arg3, @Const double[] arg4, @Const double[] arg5);
public static native int vdrnguniform_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5);
public static native int vdrnguniform_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5);
public static native int vdrnguniform_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, double[] arg3, @Const double[] arg4, @Const double[] arg5);
public static native int vsRngUniform(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, FloatPointer arg3,  float arg4,  float arg5   );
public static native int vsRngUniform(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, FloatBuffer arg3,  float arg4,  float arg5   );
public static native int vsRngUniform(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, float[] arg3,  float arg4,  float arg5   );
public static native int VSRNGUNIFORM_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5 );
public static native int VSRNGUNIFORM_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5 );
public static native int VSRNGUNIFORM_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, float[] arg3,  @Const float[] arg4,  @Const float[] arg5 );
public static native int vsrnguniform_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5 );
public static native int vsrnguniform_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5 );
public static native int vsrnguniform_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, float[] arg3,  @Const float[] arg4,  @Const float[] arg5 );

/* Gaussian distribution */
public static native int vdRngGaussian(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, DoublePointer arg3, double arg4, double arg5  );
public static native int vdRngGaussian(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, DoubleBuffer arg3, double arg4, double arg5  );
public static native int vdRngGaussian(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, double[] arg3, double arg4, double arg5  );
public static native int VDRNGGAUSSIAN_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5);
public static native int VDRNGGAUSSIAN_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5);
public static native int VDRNGGAUSSIAN_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, double[] arg3, @Const double[] arg4, @Const double[] arg5);
public static native int vdrnggaussian_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5);
public static native int vdrnggaussian_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5);
public static native int vdrnggaussian_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, double[] arg3, @Const double[] arg4, @Const double[] arg5);
public static native int vsRngGaussian(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, FloatPointer arg3,  float arg4,  float arg5   );
public static native int vsRngGaussian(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, FloatBuffer arg3,  float arg4,  float arg5   );
public static native int vsRngGaussian(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, float[] arg3,  float arg4,  float arg5   );
public static native int VSRNGGAUSSIAN_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5 );
public static native int VSRNGGAUSSIAN_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5 );
public static native int VSRNGGAUSSIAN_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, float[] arg3,  @Const float[] arg4,  @Const float[] arg5 );
public static native int vsrnggaussian_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5 );
public static native int vsrnggaussian_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5 );
public static native int vsrnggaussian_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, float[] arg3,  @Const float[] arg4,  @Const float[] arg5 );

/* GaussianMV distribution */
public static native int vdRngGaussianMV(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, DoublePointer arg3, @Const @ByVal MKL_INT arg4,  @Const @ByVal MKL_INT arg5, @Const DoublePointer arg6, @Const DoublePointer arg7);
public static native int vdRngGaussianMV(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, DoubleBuffer arg3, @Const @ByVal MKL_INT arg4,  @Const @ByVal MKL_INT arg5, @Const DoubleBuffer arg6, @Const DoubleBuffer arg7);
public static native int vdRngGaussianMV(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, double[] arg3, @Const @ByVal MKL_INT arg4,  @Const @ByVal MKL_INT arg5, @Const double[] arg6, @Const double[] arg7);
public static native int VDRNGGAUSSIANMV_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const MKL_INT arg4,  @Const MKL_INT arg5, @Const DoublePointer arg6, @Const DoublePointer arg7);
public static native int VDRNGGAUSSIANMV_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const MKL_INT arg4,  @Const MKL_INT arg5, @Const DoubleBuffer arg6, @Const DoubleBuffer arg7);
public static native int VDRNGGAUSSIANMV_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, double[] arg3, @Const MKL_INT arg4,  @Const MKL_INT arg5, @Const double[] arg6, @Const double[] arg7);
public static native int vdrnggaussianmv_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const MKL_INT arg4,  @Const MKL_INT arg5, @Const DoublePointer arg6, @Const DoublePointer arg7);
public static native int vdrnggaussianmv_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const MKL_INT arg4,  @Const MKL_INT arg5, @Const DoubleBuffer arg6, @Const DoubleBuffer arg7);
public static native int vdrnggaussianmv_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, double[] arg3, @Const MKL_INT arg4,  @Const MKL_INT arg5, @Const double[] arg6, @Const double[] arg7);
public static native int vsRngGaussianMV(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, FloatPointer arg3,  @Const @ByVal MKL_INT arg4,  @Const @ByVal MKL_INT arg5, @Const FloatPointer arg6,  @Const FloatPointer arg7 );
public static native int vsRngGaussianMV(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, FloatBuffer arg3,  @Const @ByVal MKL_INT arg4,  @Const @ByVal MKL_INT arg5, @Const FloatBuffer arg6,  @Const FloatBuffer arg7 );
public static native int vsRngGaussianMV(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, float[] arg3,  @Const @ByVal MKL_INT arg4,  @Const @ByVal MKL_INT arg5, @Const float[] arg6,  @Const float[] arg7 );
public static native int VSRNGGAUSSIANMV_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatPointer arg3,  @Const MKL_INT arg4,  @Const MKL_INT arg5, @Const FloatPointer arg6,  @Const FloatPointer arg7 );
public static native int VSRNGGAUSSIANMV_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatBuffer arg3,  @Const MKL_INT arg4,  @Const MKL_INT arg5, @Const FloatBuffer arg6,  @Const FloatBuffer arg7 );
public static native int VSRNGGAUSSIANMV_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, float[] arg3,  @Const MKL_INT arg4,  @Const MKL_INT arg5, @Const float[] arg6,  @Const float[] arg7 );
public static native int vsrnggaussianmv_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatPointer arg3,  @Const MKL_INT arg4,  @Const MKL_INT arg5, @Const FloatPointer arg6,  @Const FloatPointer arg7 );
public static native int vsrnggaussianmv_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatBuffer arg3,  @Const MKL_INT arg4,  @Const MKL_INT arg5, @Const FloatBuffer arg6,  @Const FloatBuffer arg7 );
public static native int vsrnggaussianmv_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, float[] arg3,  @Const MKL_INT arg4,  @Const MKL_INT arg5, @Const float[] arg6,  @Const float[] arg7 );

/* Exponential distribution */
public static native int vdRngExponential(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2,  DoublePointer arg3, double arg4, double arg5  );
public static native int vdRngExponential(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2,  DoubleBuffer arg3, double arg4, double arg5  );
public static native int vdRngExponential(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2,  double[] arg3, double arg4, double arg5  );
public static native int VDRNGEXPONENTIAL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5);
public static native int VDRNGEXPONENTIAL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5);
public static native int VDRNGEXPONENTIAL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  double[] arg3, @Const double[] arg4, @Const double[] arg5);
public static native int vdrngexponential_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5);
public static native int vdrngexponential_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5);
public static native int vdrngexponential_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  double[] arg3, @Const double[] arg4, @Const double[] arg5);
public static native int vsRngExponential(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2,  FloatPointer arg3,  float arg4,  float arg5   );
public static native int vsRngExponential(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2,  FloatBuffer arg3,  float arg4,  float arg5   );
public static native int vsRngExponential(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2,  float[] arg3,  float arg4,  float arg5   );
public static native int VSRNGEXPONENTIAL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5 );
public static native int VSRNGEXPONENTIAL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5 );
public static native int VSRNGEXPONENTIAL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  float[] arg3,  @Const float[] arg4,  @Const float[] arg5 );
public static native int vsrngexponential_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5 );
public static native int vsrngexponential_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5 );
public static native int vsrngexponential_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  float[] arg3,  @Const float[] arg4,  @Const float[] arg5 );

/* Laplace distribution */
public static native int vdRngLaplace(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, DoublePointer arg3, double arg4, double arg5  );
public static native int vdRngLaplace(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, DoubleBuffer arg3, double arg4, double arg5  );
public static native int vdRngLaplace(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, double[] arg3, double arg4, double arg5  );
public static native int VDRNGLAPLACE_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5);
public static native int VDRNGLAPLACE_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5);
public static native int VDRNGLAPLACE_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, double[] arg3, @Const double[] arg4, @Const double[] arg5);
public static native int vdrnglaplace_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5);
public static native int vdrnglaplace_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5);
public static native int vdrnglaplace_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, double[] arg3, @Const double[] arg4, @Const double[] arg5);
public static native int vsRngLaplace(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, FloatPointer arg3,  float arg4,  float arg5   );
public static native int vsRngLaplace(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, FloatBuffer arg3,  float arg4,  float arg5   );
public static native int vsRngLaplace(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, float[] arg3,  float arg4,  float arg5   );
public static native int VSRNGLAPLACE_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5 );
public static native int VSRNGLAPLACE_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5 );
public static native int VSRNGLAPLACE_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, float[] arg3,  @Const float[] arg4,  @Const float[] arg5 );
public static native int vsrnglaplace_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5 );
public static native int vsrnglaplace_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5 );
public static native int vsrnglaplace_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, float[] arg3,  @Const float[] arg4,  @Const float[] arg5 );

/* Weibull distribution */
public static native int vdRngWeibull(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, DoublePointer arg3, double arg4, double arg5, double arg6  );
public static native int vdRngWeibull(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, DoubleBuffer arg3, double arg4, double arg5, double arg6  );
public static native int vdRngWeibull(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, double[] arg3, double arg4, double arg5, double arg6  );
public static native int VDRNGWEIBULL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5, @Const DoublePointer arg6);
public static native int VDRNGWEIBULL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5, @Const DoubleBuffer arg6);
public static native int VDRNGWEIBULL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, double[] arg3, @Const double[] arg4, @Const double[] arg5, @Const double[] arg6);
public static native int vdrngweibull_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5, @Const DoublePointer arg6);
public static native int vdrngweibull_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5, @Const DoubleBuffer arg6);
public static native int vdrngweibull_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, double[] arg3, @Const double[] arg4, @Const double[] arg5, @Const double[] arg6);
public static native int vsRngWeibull(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, FloatPointer arg3,  float arg4,  float arg5,  float arg6   );
public static native int vsRngWeibull(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, FloatBuffer arg3,  float arg4,  float arg5,  float arg6   );
public static native int vsRngWeibull(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, float[] arg3,  float arg4,  float arg5,  float arg6   );
public static native int VSRNGWEIBULL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5,  @Const FloatPointer arg6 );
public static native int VSRNGWEIBULL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5,  @Const FloatBuffer arg6 );
public static native int VSRNGWEIBULL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, float[] arg3,  @Const float[] arg4,  @Const float[] arg5,  @Const float[] arg6 );
public static native int vsrngweibull_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5,  @Const FloatPointer arg6 );
public static native int vsrngweibull_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5,  @Const FloatBuffer arg6 );
public static native int vsrngweibull_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, float[] arg3,  @Const float[] arg4,  @Const float[] arg5,  @Const float[] arg6 );

/* Rayleigh distribution */
public static native int vdRngRayleigh(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2,  DoublePointer arg3, double arg4, double arg5  );
public static native int vdRngRayleigh(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2,  DoubleBuffer arg3, double arg4, double arg5  );
public static native int vdRngRayleigh(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2,  double[] arg3, double arg4, double arg5  );
public static native int VDRNGRAYLEIGH_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5);
public static native int VDRNGRAYLEIGH_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5);
public static native int VDRNGRAYLEIGH_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  double[] arg3, @Const double[] arg4, @Const double[] arg5);
public static native int vdrngrayleigh_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5);
public static native int vdrngrayleigh_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5);
public static native int vdrngrayleigh_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  double[] arg3, @Const double[] arg4, @Const double[] arg5);
public static native int vsRngRayleigh(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2,  FloatPointer arg3,  float arg4,  float arg5   );
public static native int vsRngRayleigh(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2,  FloatBuffer arg3,  float arg4,  float arg5   );
public static native int vsRngRayleigh(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2,  float[] arg3,  float arg4,  float arg5   );
public static native int VSRNGRAYLEIGH_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5 );
public static native int VSRNGRAYLEIGH_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5 );
public static native int VSRNGRAYLEIGH_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  float[] arg3,  @Const float[] arg4,  @Const float[] arg5 );
public static native int vsrngrayleigh_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5 );
public static native int vsrngrayleigh_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5 );
public static native int vsrngrayleigh_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2,  float[] arg3,  @Const float[] arg4,  @Const float[] arg5 );

/* Lognormal distribution */
public static native int vdRngLognormal(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, DoublePointer arg3, double arg4, double arg5, double arg6, double arg7  );
public static native int vdRngLognormal(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, DoubleBuffer arg3, double arg4, double arg5, double arg6, double arg7  );
public static native int vdRngLognormal(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, double[] arg3, double arg4, double arg5, double arg6, double arg7  );
public static native int VDRNGLOGNORMAL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5, @Const DoublePointer arg6, @Const DoublePointer arg7);
public static native int VDRNGLOGNORMAL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5, @Const DoubleBuffer arg6, @Const DoubleBuffer arg7);
public static native int VDRNGLOGNORMAL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, double[] arg3, @Const double[] arg4, @Const double[] arg5, @Const double[] arg6, @Const double[] arg7);
public static native int vdrnglognormal_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5, @Const DoublePointer arg6, @Const DoublePointer arg7);
public static native int vdrnglognormal_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5, @Const DoubleBuffer arg6, @Const DoubleBuffer arg7);
public static native int vdrnglognormal_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, double[] arg3, @Const double[] arg4, @Const double[] arg5, @Const double[] arg6, @Const double[] arg7);
public static native int vsRngLognormal(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, FloatPointer arg3,  float arg4,  float arg5,  float arg6,  float arg7   );
public static native int vsRngLognormal(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, FloatBuffer arg3,  float arg4,  float arg5,  float arg6,  float arg7   );
public static native int vsRngLognormal(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, float[] arg3,  float arg4,  float arg5,  float arg6,  float arg7   );
public static native int VSRNGLOGNORMAL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5,  @Const FloatPointer arg6,  @Const FloatPointer arg7 );
public static native int VSRNGLOGNORMAL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5,  @Const FloatBuffer arg6,  @Const FloatBuffer arg7 );
public static native int VSRNGLOGNORMAL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, float[] arg3,  @Const float[] arg4,  @Const float[] arg5,  @Const float[] arg6,  @Const float[] arg7 );
public static native int vsrnglognormal_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5,  @Const FloatPointer arg6,  @Const FloatPointer arg7 );
public static native int vsrnglognormal_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5,  @Const FloatBuffer arg6,  @Const FloatBuffer arg7 );
public static native int vsrnglognormal_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, float[] arg3,  @Const float[] arg4,  @Const float[] arg5,  @Const float[] arg6,  @Const float[] arg7 );

/* Gumbel distribution */
public static native int vdRngGumbel(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, DoublePointer arg3, double arg4, double arg5  );
public static native int vdRngGumbel(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, DoubleBuffer arg3, double arg4, double arg5  );
public static native int vdRngGumbel(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, double[] arg3, double arg4, double arg5  );
public static native int VDRNGGUMBEL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5);
public static native int VDRNGGUMBEL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5);
public static native int VDRNGGUMBEL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, double[] arg3, @Const double[] arg4, @Const double[] arg5);
public static native int vdrnggumbel_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5);
public static native int vdrnggumbel_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5);
public static native int vdrnggumbel_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, double[] arg3, @Const double[] arg4, @Const double[] arg5);
public static native int vsRngGumbel(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, FloatPointer arg3,  float arg4,  float arg5   );
public static native int vsRngGumbel(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, FloatBuffer arg3,  float arg4,  float arg5   );
public static native int vsRngGumbel(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, float[] arg3,  float arg4,  float arg5   );
public static native int VSRNGGUMBEL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5 );
public static native int VSRNGGUMBEL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5 );
public static native int VSRNGGUMBEL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, float[] arg3,  @Const float[] arg4,  @Const float[] arg5 );
public static native int vsrnggumbel_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5 );
public static native int vsrnggumbel_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5 );
public static native int vsrnggumbel_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, float[] arg3,  @Const float[] arg4,  @Const float[] arg5 );

/* Gamma distribution */
public static native int vdRngGamma(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, DoublePointer arg3, double arg4, double arg5, double arg6  );
public static native int vdRngGamma(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, DoubleBuffer arg3, double arg4, double arg5, double arg6  );
public static native int vdRngGamma(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, double[] arg3, double arg4, double arg5, double arg6  );
public static native int VDRNGGAMMA_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5, @Const DoublePointer arg6);
public static native int VDRNGGAMMA_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5, @Const DoubleBuffer arg6);
public static native int VDRNGGAMMA_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, double[] arg3, @Const double[] arg4, @Const double[] arg5, @Const double[] arg6);
public static native int vdrnggamma_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5, @Const DoublePointer arg6);
public static native int vdrnggamma_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5, @Const DoubleBuffer arg6);
public static native int vdrnggamma_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, double[] arg3, @Const double[] arg4, @Const double[] arg5, @Const double[] arg6);
public static native int vsRngGamma(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, FloatPointer arg3,  float arg4,  float arg5,  float arg6   );
public static native int vsRngGamma(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, FloatBuffer arg3,  float arg4,  float arg5,  float arg6   );
public static native int vsRngGamma(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, float[] arg3,  float arg4,  float arg5,  float arg6   );
public static native int VSRNGGAMMA_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5,  @Const FloatPointer arg6 );
public static native int VSRNGGAMMA_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5,  @Const FloatBuffer arg6 );
public static native int VSRNGGAMMA_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, float[] arg3,  @Const float[] arg4,  @Const float[] arg5,  @Const float[] arg6 );
public static native int vsrnggamma_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5,  @Const FloatPointer arg6 );
public static native int vsrnggamma_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5,  @Const FloatBuffer arg6 );
public static native int vsrnggamma_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, float[] arg3,  @Const float[] arg4,  @Const float[] arg5,  @Const float[] arg6 );

/* Beta distribution */
public static native int vdRngBeta(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, DoublePointer arg3, double arg4, double arg5, double arg6, double arg7  );
public static native int vdRngBeta(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, DoubleBuffer arg3, double arg4, double arg5, double arg6, double arg7  );
public static native int vdRngBeta(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, double[] arg3, double arg4, double arg5, double arg6, double arg7  );
public static native int VDRNGBETA_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5, @Const DoublePointer arg6, @Const DoublePointer arg7);
public static native int VDRNGBETA_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5, @Const DoubleBuffer arg6, @Const DoubleBuffer arg7);
public static native int VDRNGBETA_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, double[] arg3, @Const double[] arg4, @Const double[] arg5, @Const double[] arg6, @Const double[] arg7);
public static native int vdrngbeta_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5, @Const DoublePointer arg6, @Const DoublePointer arg7);
public static native int vdrngbeta_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5, @Const DoubleBuffer arg6, @Const DoubleBuffer arg7);
public static native int vdrngbeta_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, double[] arg3, @Const double[] arg4, @Const double[] arg5, @Const double[] arg6, @Const double[] arg7);
public static native int vsRngBeta(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, FloatPointer arg3,  float arg4,  float arg5,  float arg6,  float arg7   );
public static native int vsRngBeta(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, FloatBuffer arg3,  float arg4,  float arg5,  float arg6,  float arg7   );
public static native int vsRngBeta(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, float[] arg3,  float arg4,  float arg5,  float arg6,  float arg7   );
public static native int VSRNGBETA_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5,  @Const FloatPointer arg6,  @Const FloatPointer arg7 );
public static native int VSRNGBETA_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5,  @Const FloatBuffer arg6,  @Const FloatBuffer arg7 );
public static native int VSRNGBETA_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, float[] arg3,  @Const float[] arg4,  @Const float[] arg5,  @Const float[] arg6,  @Const float[] arg7 );
public static native int vsrngbeta_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatPointer arg3,  @Const FloatPointer arg4,  @Const FloatPointer arg5,  @Const FloatPointer arg6,  @Const FloatPointer arg7 );
public static native int vsrngbeta_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, FloatBuffer arg3,  @Const FloatBuffer arg4,  @Const FloatBuffer arg5,  @Const FloatBuffer arg6,  @Const FloatBuffer arg7 );
public static native int vsrngbeta_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, float[] arg3,  @Const float[] arg4,  @Const float[] arg5,  @Const float[] arg6,  @Const float[] arg7 );

/*
//++
//  VSL DISCRETE DISTRIBUTION GENERATOR FUNCTION DECLARATIONS.
//--
*/
/* Bernoulli distribution */
public static native int viRngBernoulli(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, IntPointer arg3, double arg4  );
public static native int viRngBernoulli(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, IntBuffer arg3, double arg4  );
public static native int viRngBernoulli(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, int[] arg3, double arg4  );
public static native int VIRNGBERNOULLI_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntPointer arg3, @Const DoublePointer arg4);
public static native int VIRNGBERNOULLI_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntBuffer arg3, @Const DoubleBuffer arg4);
public static native int VIRNGBERNOULLI_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, int[] arg3, @Const double[] arg4);
public static native int virngbernoulli_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntPointer arg3, @Const DoublePointer arg4);
public static native int virngbernoulli_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntBuffer arg3, @Const DoubleBuffer arg4);
public static native int virngbernoulli_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, int[] arg3, @Const double[] arg4);

/* Uniform distribution */
public static native int viRngUniform(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, IntPointer arg3, int arg4, int arg5  );
public static native int viRngUniform(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, IntBuffer arg3, int arg4, int arg5  );
public static native int viRngUniform(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, int[] arg3, int arg4, int arg5  );
public static native int VIRNGUNIFORM_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntPointer arg3, @Const IntPointer arg4, @Const IntPointer arg5);
public static native int VIRNGUNIFORM_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntBuffer arg3, @Const IntBuffer arg4, @Const IntBuffer arg5);
public static native int VIRNGUNIFORM_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, int[] arg3, @Const int[] arg4, @Const int[] arg5);
public static native int virnguniform_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntPointer arg3, @Const IntPointer arg4, @Const IntPointer arg5);
public static native int virnguniform_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntBuffer arg3, @Const IntBuffer arg4, @Const IntBuffer arg5);
public static native int virnguniform_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, int[] arg3, @Const int[] arg4, @Const int[] arg5);

/* UniformBits distribution */
public static native int viRngUniformBits(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, @Cast("unsigned int*") IntPointer arg3);
public static native int viRngUniformBits(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, @Cast("unsigned int*") IntBuffer arg3);
public static native int viRngUniformBits(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, @Cast("unsigned int*") int[] arg3);
public static native int VIRNGUNIFORMBITS_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, @Cast("unsigned int*") IntPointer arg3);
public static native int VIRNGUNIFORMBITS_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, @Cast("unsigned int*") IntBuffer arg3);
public static native int VIRNGUNIFORMBITS_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, @Cast("unsigned int*") int[] arg3);
public static native int virnguniformbits_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, @Cast("unsigned int*") IntPointer arg3);
public static native int virnguniformbits_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, @Cast("unsigned int*") IntBuffer arg3);
public static native int virnguniformbits_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, @Cast("unsigned int*") int[] arg3);

/* UniformBits32 distribution */
public static native int viRngUniformBits32(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, @Cast("unsigned int*") IntPointer arg3);
public static native int viRngUniformBits32(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, @Cast("unsigned int*") IntBuffer arg3);
public static native int viRngUniformBits32(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, @Cast("unsigned int*") int[] arg3);
public static native int VIRNGUNIFORMBITS32_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, @Cast("unsigned int*") IntPointer arg3);
public static native int VIRNGUNIFORMBITS32_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, @Cast("unsigned int*") IntBuffer arg3);
public static native int VIRNGUNIFORMBITS32_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, @Cast("unsigned int*") int[] arg3);
public static native int virnguniformbits32_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, @Cast("unsigned int*") IntPointer arg3);
public static native int virnguniformbits32_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, @Cast("unsigned int*") IntBuffer arg3);
public static native int virnguniformbits32_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, @Cast("unsigned int*") int[] arg3);

/* UniformBits64 distribution */
public static native int viRngUniformBits64(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, @Cast("unsigned*") IntPointer MKL_INT64);
public static native int viRngUniformBits64(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, @Cast("unsigned*") IntBuffer MKL_INT64);
public static native int viRngUniformBits64(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, @Cast("unsigned*") int[] MKL_INT64);
public static native int VIRNGUNIFORMBITS64_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, @Cast("unsigned*") IntPointer MKL_INT64);
public static native int VIRNGUNIFORMBITS64_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, @Cast("unsigned*") IntBuffer MKL_INT64);
public static native int VIRNGUNIFORMBITS64_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, @Cast("unsigned*") int[] MKL_INT64);
public static native int virnguniformbits64_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, @Cast("unsigned*") IntPointer MKL_INT64);
public static native int virnguniformbits64_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, @Cast("unsigned*") IntBuffer MKL_INT64);
public static native int virnguniformbits64_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, @Cast("unsigned*") int[] MKL_INT64);

/* Geometric distribution */
public static native int viRngGeometric(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, IntPointer arg3, double arg4  );
public static native int viRngGeometric(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, IntBuffer arg3, double arg4  );
public static native int viRngGeometric(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, int[] arg3, double arg4  );
public static native int VIRNGGEOMETRIC_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntPointer arg3, @Const DoublePointer arg4);
public static native int VIRNGGEOMETRIC_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntBuffer arg3, @Const DoubleBuffer arg4);
public static native int VIRNGGEOMETRIC_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, int[] arg3, @Const double[] arg4);
public static native int virnggeometric_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntPointer arg3, @Const DoublePointer arg4);
public static native int virnggeometric_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntBuffer arg3, @Const DoubleBuffer arg4);
public static native int virnggeometric_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, int[] arg3, @Const double[] arg4);

/* Binomial distribution */
public static native int viRngBinomial(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, IntPointer arg3, int arg4, double arg5  );
public static native int viRngBinomial(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, IntBuffer arg3, int arg4, double arg5  );
public static native int viRngBinomial(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, int[] arg3, int arg4, double arg5  );
public static native int VIRNGBINOMIAL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntPointer arg3, @Const IntPointer arg4, @Const DoublePointer arg5);
public static native int VIRNGBINOMIAL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntBuffer arg3, @Const IntBuffer arg4, @Const DoubleBuffer arg5);
public static native int VIRNGBINOMIAL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, int[] arg3, @Const int[] arg4, @Const double[] arg5);
public static native int virngbinomial_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntPointer arg3, @Const IntPointer arg4, @Const DoublePointer arg5);
public static native int virngbinomial_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntBuffer arg3, @Const IntBuffer arg4, @Const DoubleBuffer arg5);
public static native int virngbinomial_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, int[] arg3, @Const int[] arg4, @Const double[] arg5);

/* Hypergeometric distribution */
public static native int viRngHypergeometric(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, IntPointer arg3, int arg4, int arg5, int arg6  );
public static native int viRngHypergeometric(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, IntBuffer arg3, int arg4, int arg5, int arg6  );
public static native int viRngHypergeometric(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, int[] arg3, int arg4, int arg5, int arg6  );
public static native int VIRNGHYPERGEOMETRIC_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntPointer arg3, @Const IntPointer arg4, @Const IntPointer arg5, @Const IntPointer arg6);
public static native int VIRNGHYPERGEOMETRIC_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntBuffer arg3, @Const IntBuffer arg4, @Const IntBuffer arg5, @Const IntBuffer arg6);
public static native int VIRNGHYPERGEOMETRIC_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, int[] arg3, @Const int[] arg4, @Const int[] arg5, @Const int[] arg6);
public static native int virnghypergeometric_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntPointer arg3, @Const IntPointer arg4, @Const IntPointer arg5, @Const IntPointer arg6);
public static native int virnghypergeometric_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntBuffer arg3, @Const IntBuffer arg4, @Const IntBuffer arg5, @Const IntBuffer arg6);
public static native int virnghypergeometric_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, int[] arg3, @Const int[] arg4, @Const int[] arg5, @Const int[] arg6);

/* Negbinomial distribution */
public static native int viRngNegbinomial(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, IntPointer arg3, double arg4, double arg5  );
public static native int viRngNegbinomial(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, IntBuffer arg3, double arg4, double arg5  );
public static native int viRngNegbinomial(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, int[] arg3, double arg4, double arg5  );
public static native int viRngNegBinomial(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, IntPointer arg3, double arg4, double arg5  );
public static native int viRngNegBinomial(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, IntBuffer arg3, double arg4, double arg5  );
public static native int viRngNegBinomial(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, int[] arg3, double arg4, double arg5  );
public static native int VIRNGNEGBINOMIAL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntPointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5);
public static native int VIRNGNEGBINOMIAL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5);
public static native int VIRNGNEGBINOMIAL_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, int[] arg3, @Const double[] arg4, @Const double[] arg5);
public static native int virngnegbinomial_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntPointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5);
public static native int virngnegbinomial_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5);
public static native int virngnegbinomial_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, int[] arg3, @Const double[] arg4, @Const double[] arg5);

/* Poisson distribution */
public static native int viRngPoisson(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, IntPointer arg3, double arg4  );
public static native int viRngPoisson(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, IntBuffer arg3, double arg4  );
public static native int viRngPoisson(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, int[] arg3, double arg4  );
public static native int VIRNGPOISSON_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntPointer arg3, @Const DoublePointer arg4);
public static native int VIRNGPOISSON_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntBuffer arg3, @Const DoubleBuffer arg4);
public static native int VIRNGPOISSON_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, int[] arg3, @Const double[] arg4);
public static native int virngpoisson_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntPointer arg3, @Const DoublePointer arg4);
public static native int virngpoisson_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntBuffer arg3, @Const DoubleBuffer arg4);
public static native int virngpoisson_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, int[] arg3, @Const double[] arg4);

/* PoissonV distribution */
public static native int viRngPoissonV(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, IntPointer arg3, @Const DoublePointer arg4);
public static native int viRngPoissonV(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, IntBuffer arg3, @Const DoubleBuffer arg4);
public static native int viRngPoissonV(@Const @ByVal MKL_INT arg0, VSLStreamStatePtr arg1, @Const @ByVal MKL_INT arg2, int[] arg3, @Const double[] arg4);
public static native int VIRNGPOISSONV_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntPointer arg3, @Const DoublePointer arg4);
public static native int VIRNGPOISSONV_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntBuffer arg3, @Const DoubleBuffer arg4);
public static native int VIRNGPOISSONV_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, int[] arg3, @Const double[] arg4);
public static native int virngpoissonv_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntPointer arg3, @Const DoublePointer arg4);
public static native int virngpoissonv_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, IntBuffer arg3, @Const DoubleBuffer arg4);
public static native int virngpoissonv_(@Const MKL_INT arg0, @ByPtrPtr VSLStreamStatePtr arg1, @Const MKL_INT arg2, int[] arg3, @Const double[] arg4);


/*
//++
//  VSL SERVICE FUNCTION DECLARATIONS.
//--
*/
/* NewStream - stream creation/initialization */
public static native int vslNewStream(@ByPtrPtr VSLStreamStatePtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_UINT arg2  );
public static native int vslnewstream_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const MKL_UINT arg2);
public static native int VSLNEWSTREAM_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const MKL_UINT arg2);

/* NewStreamEx - advanced stream creation/initialization */
public static native int vslNewStreamEx(@ByPtrPtr VSLStreamStatePtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Cast("const unsigned int*") IntPointer arg3);
public static native int vslNewStreamEx(@ByPtrPtr VSLStreamStatePtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Cast("const unsigned int*") IntBuffer arg3);
public static native int vslNewStreamEx(@ByPtrPtr VSLStreamStatePtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Cast("const unsigned int*") int[] arg3);
public static native int vslnewstreamex_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Cast("const unsigned int*") IntPointer arg3);
public static native int vslnewstreamex_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Cast("const unsigned int*") IntBuffer arg3);
public static native int vslnewstreamex_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Cast("const unsigned int*") int[] arg3);
public static native int VSLNEWSTREAMEX_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Cast("const unsigned int*") IntPointer arg3);
public static native int VSLNEWSTREAMEX_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Cast("const unsigned int*") IntBuffer arg3);
public static native int VSLNEWSTREAMEX_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Cast("const unsigned int*") int[] arg3);

public static native int vsliNewAbstractStream(@ByPtrPtr VSLStreamStatePtr arg0, @Const @ByVal MKL_INT arg1, @Cast("const unsigned int*") IntPointer arg2, iUpdateFuncPtr arg3);
public static native int vsliNewAbstractStream(@ByPtrPtr VSLStreamStatePtr arg0, @Const @ByVal MKL_INT arg1, @Cast("const unsigned int*") IntBuffer arg2, iUpdateFuncPtr arg3);
public static native int vsliNewAbstractStream(@ByPtrPtr VSLStreamStatePtr arg0, @Const @ByVal MKL_INT arg1, @Cast("const unsigned int*") int[] arg2, iUpdateFuncPtr arg3);
public static native int vslinewabstractstream_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Cast("const unsigned int*") IntPointer arg2, iUpdateFuncPtr arg3);
public static native int vslinewabstractstream_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Cast("const unsigned int*") IntBuffer arg2, iUpdateFuncPtr arg3);
public static native int vslinewabstractstream_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Cast("const unsigned int*") int[] arg2, iUpdateFuncPtr arg3);
public static native int VSLINEWABSTRACTSTREAM_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Cast("const unsigned int*") IntPointer arg2, iUpdateFuncPtr arg3);
public static native int VSLINEWABSTRACTSTREAM_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Cast("const unsigned int*") IntBuffer arg2, iUpdateFuncPtr arg3);
public static native int VSLINEWABSTRACTSTREAM_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Cast("const unsigned int*") int[] arg2, iUpdateFuncPtr arg3);

public static native int vsldNewAbstractStream(@ByPtrPtr VSLStreamStatePtr arg0, @Const @ByVal MKL_INT arg1, @Const DoublePointer arg2, double arg3, double arg4, dUpdateFuncPtr arg5);
public static native int vsldNewAbstractStream(@ByPtrPtr VSLStreamStatePtr arg0, @Const @ByVal MKL_INT arg1, @Const DoubleBuffer arg2, double arg3, double arg4, dUpdateFuncPtr arg5);
public static native int vsldNewAbstractStream(@ByPtrPtr VSLStreamStatePtr arg0, @Const @ByVal MKL_INT arg1, @Const double[] arg2, double arg3, double arg4, dUpdateFuncPtr arg5);
public static native int vsldnewabstractstream_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2, @Const DoublePointer arg3, @Const DoublePointer arg4, dUpdateFuncPtr arg5);
public static native int vsldnewabstractstream_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2, @Const DoubleBuffer arg3, @Const DoubleBuffer arg4, dUpdateFuncPtr arg5);
public static native int vsldnewabstractstream_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const double[] arg2, @Const double[] arg3, @Const double[] arg4, dUpdateFuncPtr arg5);
public static native int VSLDNEWABSTRACTSTREAM_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2, @Const DoublePointer arg3, @Const DoublePointer arg4, dUpdateFuncPtr arg5);
public static native int VSLDNEWABSTRACTSTREAM_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2, @Const DoubleBuffer arg3, @Const DoubleBuffer arg4, dUpdateFuncPtr arg5);
public static native int VSLDNEWABSTRACTSTREAM_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const double[] arg2, @Const double[] arg3, @Const double[] arg4, dUpdateFuncPtr arg5);

public static native int vslsNewAbstractStream(@ByPtrPtr VSLStreamStatePtr arg0, @Const @ByVal MKL_INT arg1, @Const FloatPointer arg2, float arg3, float arg4, sUpdateFuncPtr arg5);
public static native int vslsNewAbstractStream(@ByPtrPtr VSLStreamStatePtr arg0, @Const @ByVal MKL_INT arg1, @Const FloatBuffer arg2, float arg3, float arg4, sUpdateFuncPtr arg5);
public static native int vslsNewAbstractStream(@ByPtrPtr VSLStreamStatePtr arg0, @Const @ByVal MKL_INT arg1, @Const float[] arg2, float arg3, float arg4, sUpdateFuncPtr arg5);
public static native int vslsnewabstractstream_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2, @Const FloatPointer arg3, @Const FloatPointer arg4, sUpdateFuncPtr arg5);
public static native int vslsnewabstractstream_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2, @Const FloatBuffer arg3, @Const FloatBuffer arg4, sUpdateFuncPtr arg5);
public static native int vslsnewabstractstream_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const float[] arg2, @Const float[] arg3, @Const float[] arg4, sUpdateFuncPtr arg5);
public static native int VSLSNEWABSTRACTSTREAM_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2, @Const FloatPointer arg3, @Const FloatPointer arg4, sUpdateFuncPtr arg5);
public static native int VSLSNEWABSTRACTSTREAM_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2, @Const FloatBuffer arg3, @Const FloatBuffer arg4, sUpdateFuncPtr arg5);
public static native int VSLSNEWABSTRACTSTREAM_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const float[] arg2, @Const float[] arg3, @Const float[] arg4, sUpdateFuncPtr arg5);

/* DeleteStream - delete stream */
public static native int vslDeleteStream(@ByPtrPtr VSLStreamStatePtr arg0);
public static native int vsldeletestream_(@ByPtrPtr VSLStreamStatePtr arg0);
public static native int VSLDELETESTREAM_(@ByPtrPtr VSLStreamStatePtr arg0);

/* CopyStream - copy all stream information */
public static native int vslCopyStream(@ByPtrPtr VSLStreamStatePtr arg0, VSLStreamStatePtr arg1);
public static native int vslcopystream_(@ByPtrPtr VSLStreamStatePtr arg0, VSLStreamStatePtr arg1);
public static native int VSLCOPYSTREAM_(@ByPtrPtr VSLStreamStatePtr arg0, VSLStreamStatePtr arg1);

/* CopyStreamState - copy stream state only */
public static native int vslCopyStreamState(VSLStreamStatePtr arg0, VSLStreamStatePtr arg1  );
public static native int vslcopystreamstate_(@ByPtrPtr VSLStreamStatePtr arg0, @Const @ByPtrPtr VSLStreamStatePtr arg1);
public static native int VSLCOPYSTREAMSTATE_(@ByPtrPtr VSLStreamStatePtr arg0, @Const @ByPtrPtr VSLStreamStatePtr arg1);

/* LeapfrogStream - leapfrog method */
public static native int vslLeapfrogStream(VSLStreamStatePtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2  );
public static native int vslleapfrogstream_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2);
public static native int VSLLEAPFROGSTREAM_(@ByPtrPtr VSLStreamStatePtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2);

/* SkipAheadStream - skip-ahead method */
public static native int vslSkipAheadStream(VSLStreamStatePtr arg0, long arg1  );
public static native int vslskipaheadstream_(@ByPtrPtr VSLStreamStatePtr arg0, @Const LongPointer arg1);
public static native int vslskipaheadstream_(@ByPtrPtr VSLStreamStatePtr arg0, @Const LongBuffer arg1);
public static native int vslskipaheadstream_(@ByPtrPtr VSLStreamStatePtr arg0, @Const long[] arg1);
public static native int VSLSKIPAHEADSTREAM_(@ByPtrPtr VSLStreamStatePtr arg0, @Const LongPointer arg1);
public static native int VSLSKIPAHEADSTREAM_(@ByPtrPtr VSLStreamStatePtr arg0, @Const LongBuffer arg1);
public static native int VSLSKIPAHEADSTREAM_(@ByPtrPtr VSLStreamStatePtr arg0, @Const long[] arg1);

/* GetStreamStateBrng - get BRNG associated with given stream */
public static native int vslGetStreamStateBrng(VSLStreamStatePtr arg0  );
public static native int vslgetstreamstatebrng_(@Const @ByPtrPtr VSLStreamStatePtr arg0);
public static native int VSLGETSTREAMSTATEBRNG_(@Const @ByPtrPtr VSLStreamStatePtr arg0);

/* GetNumRegBrngs - get number of registered BRNGs */
public static native int vslGetNumRegBrngs();
public static native int vslgetnumregbrngs_();
public static native int VSLGETNUMREGBRNGS_();

/* RegisterBrng - register new BRNG */
public static native int vslRegisterBrng(@Const VSLBRngProperties arg0 );
public static native int vslregisterbrng_(@Const VSLBRngProperties arg0 );
public static native int VSLREGISTERBRNG_(@Const VSLBRngProperties arg0 );

/* GetBrngProperties - get BRNG properties */
public static native int vslGetBrngProperties(int arg0, VSLBRngProperties arg1 );
public static native int vslgetbrngproperties_(@Const IntPointer arg0, VSLBRngProperties arg1 );
public static native int vslgetbrngproperties_(@Const IntBuffer arg0, VSLBRngProperties arg1 );
public static native int vslgetbrngproperties_(@Const int[] arg0, VSLBRngProperties arg1 );
public static native int VSLGETBRNGPROPERTIES_(@Const IntPointer arg0, VSLBRngProperties arg1 );
public static native int VSLGETBRNGPROPERTIES_(@Const IntBuffer arg0, VSLBRngProperties arg1 );
public static native int VSLGETBRNGPROPERTIES_(@Const int[] arg0, VSLBRngProperties arg1 );

/* SaveStreamF - save random stream descriptive data to file */
public static native int vslSaveStreamF(VSLStreamStatePtr arg0, @Cast("const char*") BytePointer arg1             );
public static native int vslSaveStreamF(VSLStreamStatePtr arg0, String arg1             );
public static native int vslsavestreamf_(@Const @ByPtrPtr VSLStreamStatePtr arg0, @Cast("const char*") BytePointer arg1, int arg2 );
public static native int vslsavestreamf_(@Const @ByPtrPtr VSLStreamStatePtr arg0, String arg1, int arg2 );
public static native int VSLSAVESTREAMF_(@Const @ByPtrPtr VSLStreamStatePtr arg0, @Cast("const char*") BytePointer arg1, int arg2 );
public static native int VSLSAVESTREAMF_(@Const @ByPtrPtr VSLStreamStatePtr arg0, String arg1, int arg2 );

/* LoadStreamF - load random stream descriptive data from file */
public static native int vslLoadStreamF(@ByPtrPtr VSLStreamStatePtr arg0, @Cast("const char*") BytePointer arg1             );
public static native int vslLoadStreamF(@ByPtrPtr VSLStreamStatePtr arg0, String arg1             );
public static native int vslloadstreamf_(@ByPtrPtr VSLStreamStatePtr arg0, @Cast("const char*") BytePointer arg1, int arg2 );
public static native int vslloadstreamf_(@ByPtrPtr VSLStreamStatePtr arg0, String arg1, int arg2 );
public static native int VSLLOADSTREAMF_(@ByPtrPtr VSLStreamStatePtr arg0, @Cast("const char*") BytePointer arg1, int arg2 );
public static native int VSLLOADSTREAMF_(@ByPtrPtr VSLStreamStatePtr arg0, String arg1, int arg2 );

/* SaveStreamM - save random stream descriptive data to memory */
public static native int vslSaveStreamM(VSLStreamStatePtr arg0, @Cast("char*") BytePointer arg1 );
public static native int vslSaveStreamM(VSLStreamStatePtr arg0, @Cast("char*") ByteBuffer arg1 );
public static native int vslSaveStreamM(VSLStreamStatePtr arg0, @Cast("char*") byte[] arg1 );
public static native int vslsavestreamm_(@Const @ByPtrPtr VSLStreamStatePtr arg0, @Cast("char*") BytePointer arg1 );
public static native int vslsavestreamm_(@Const @ByPtrPtr VSLStreamStatePtr arg0, @Cast("char*") ByteBuffer arg1 );
public static native int vslsavestreamm_(@Const @ByPtrPtr VSLStreamStatePtr arg0, @Cast("char*") byte[] arg1 );
public static native int VSLSAVESTREAMM_(@Const @ByPtrPtr VSLStreamStatePtr arg0, @Cast("char*") BytePointer arg1 );
public static native int VSLSAVESTREAMM_(@Const @ByPtrPtr VSLStreamStatePtr arg0, @Cast("char*") ByteBuffer arg1 );
public static native int VSLSAVESTREAMM_(@Const @ByPtrPtr VSLStreamStatePtr arg0, @Cast("char*") byte[] arg1 );

/* LoadStreamM - load random stream descriptive data from memory */
public static native int vslLoadStreamM(@ByPtrPtr VSLStreamStatePtr arg0, @Cast("const char*") BytePointer arg1 );
public static native int vslLoadStreamM(@ByPtrPtr VSLStreamStatePtr arg0, String arg1 );
public static native int vslloadstreamm_(@ByPtrPtr VSLStreamStatePtr arg0, @Cast("const char*") BytePointer arg1 );
public static native int vslloadstreamm_(@ByPtrPtr VSLStreamStatePtr arg0, String arg1 );
public static native int VSLLOADSTREAMM_(@ByPtrPtr VSLStreamStatePtr arg0, @Cast("const char*") BytePointer arg1 );
public static native int VSLLOADSTREAMM_(@ByPtrPtr VSLStreamStatePtr arg0, String arg1 );

/* GetStreamSize - get size of random stream descriptive data */
public static native int vslGetStreamSize(VSLStreamStatePtr arg0);
public static native int vslgetstreamsize_(VSLStreamStatePtr arg0);
public static native int VSLGETSTREAMSIZE_(VSLStreamStatePtr arg0);

/*
//++
//  VSL CONVOLUTION AND CORRELATION FUNCTION DECLARATIONS.
//--
*/

public static native int vsldConvNewTask(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);
public static native int vsldconvnewtask_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);
public static native int VSLDCONVNEWTASK_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);

public static native int vslsConvNewTask(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);
public static native int vslsconvnewtask_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);
public static native int VSLSCONVNEWTASK_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);

public static native int vslzConvNewTask(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);
public static native int vslzconvnewtask_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);
public static native int VSLZCONVNEWTASK_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);

public static native int vslcConvNewTask(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);
public static native int vslcconvnewtask_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);
public static native int VSLCCONVNEWTASK_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);

public static native int vsldCorrNewTask(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);
public static native int vsldcorrnewtask_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);
public static native int VSLDCORRNEWTASK_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);

public static native int vslsCorrNewTask(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);
public static native int vslscorrnewtask_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);
public static native int VSLSCORRNEWTASK_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);

public static native int vslzCorrNewTask(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);
public static native int vslzcorrnewtask_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);
public static native int VSLZCORRNEWTASK_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);

public static native int vslcCorrNewTask(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);
public static native int vslccorrnewtask_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);
public static native int VSLCCORRNEWTASK_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5);


public static native int vsldConvNewTask1D(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3,  @Const @ByVal MKL_INT arg4  );
public static native int vsldconvnewtask1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4 );
public static native int VSLDCONVNEWTASK1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4 );

public static native int vslsConvNewTask1D(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3,  @Const @ByVal MKL_INT arg4  );
public static native int vslsconvnewtask1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4 );
public static native int VSLSCONVNEWTASK1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4 );

public static native int vslzConvNewTask1D(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3,  @Const @ByVal MKL_INT arg4  );
public static native int vslzconvnewtask1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4 );
public static native int VSLZCONVNEWTASK1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4 );

public static native int vslcConvNewTask1D(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3,  @Const @ByVal MKL_INT arg4  );
public static native int vslcconvnewtask1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4 );
public static native int VSLCCONVNEWTASK1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4 );

public static native int vsldCorrNewTask1D(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3,  @Const @ByVal MKL_INT arg4  );
public static native int vsldcorrnewtask1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4 );
public static native int VSLDCORRNEWTASK1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4 );

public static native int vslsCorrNewTask1D(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3,  @Const @ByVal MKL_INT arg4  );
public static native int vslscorrnewtask1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4 );
public static native int VSLSCORRNEWTASK1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4 );

public static native int vslzCorrNewTask1D(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3,  @Const @ByVal MKL_INT arg4  );
public static native int vslzcorrnewtask1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4 );
public static native int VSLZCORRNEWTASK1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4 );

public static native int vslcCorrNewTask1D(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3,  @Const @ByVal MKL_INT arg4  );
public static native int vslccorrnewtask1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4 );
public static native int VSLCCORRNEWTASK1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4 );


public static native int vsldConvNewTaskX(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const DoublePointer arg6, @Const MKL_INT arg7);
public static native int vsldConvNewTaskX(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const DoubleBuffer arg6, @Const MKL_INT arg7);
public static native int vsldConvNewTaskX(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const double[] arg6, @Const MKL_INT arg7);
public static native int vsldconvnewtaskx_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const DoublePointer arg6, @Const MKL_INT arg7);
public static native int vsldconvnewtaskx_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const DoubleBuffer arg6, @Const MKL_INT arg7);
public static native int vsldconvnewtaskx_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const double[] arg6, @Const MKL_INT arg7);
public static native int VSLDCONVNEWTASKX_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const DoublePointer arg6, @Const MKL_INT arg7);
public static native int VSLDCONVNEWTASKX_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const DoubleBuffer arg6, @Const MKL_INT arg7);
public static native int VSLDCONVNEWTASKX_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const double[] arg6, @Const MKL_INT arg7);

public static native int vslsConvNewTaskX(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const FloatPointer arg6,  @Const MKL_INT arg7);
public static native int vslsConvNewTaskX(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const FloatBuffer arg6,  @Const MKL_INT arg7);
public static native int vslsConvNewTaskX(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const float[] arg6,  @Const MKL_INT arg7);
public static native int vslsconvnewtaskx_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const FloatPointer arg6,  @Const MKL_INT arg7);
public static native int vslsconvnewtaskx_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const FloatBuffer arg6,  @Const MKL_INT arg7);
public static native int vslsconvnewtaskx_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const float[] arg6,  @Const MKL_INT arg7);
public static native int VSLSCONVNEWTASKX_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const FloatPointer arg6,  @Const MKL_INT arg7);
public static native int VSLSCONVNEWTASKX_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const FloatBuffer arg6,  @Const MKL_INT arg7);
public static native int VSLSCONVNEWTASKX_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const float[] arg6,  @Const MKL_INT arg7);

public static native int vslzConvNewTaskX(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const MKL_Complex16 arg6, @Const MKL_INT arg7);
public static native int vslzconvnewtaskx_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const MKL_Complex16 arg6, @Const MKL_INT arg7);
public static native int VSLZCONVNEWTASKX_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const MKL_Complex16 arg6, @Const MKL_INT arg7);

public static native int vslcConvNewTaskX(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const MKL_Complex8 arg6,  @Const MKL_INT arg7);
public static native int vslcconvnewtaskx_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const MKL_Complex8 arg6,  @Const MKL_INT arg7);
public static native int VSLCCONVNEWTASKX_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const MKL_Complex8 arg6,  @Const MKL_INT arg7);

public static native int vsldCorrNewTaskX(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const DoublePointer arg6, @Const MKL_INT arg7);
public static native int vsldCorrNewTaskX(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const DoubleBuffer arg6, @Const MKL_INT arg7);
public static native int vsldCorrNewTaskX(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const double[] arg6, @Const MKL_INT arg7);
public static native int vsldcorrnewtaskx_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const DoublePointer arg6, @Const MKL_INT arg7);
public static native int vsldcorrnewtaskx_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const DoubleBuffer arg6, @Const MKL_INT arg7);
public static native int vsldcorrnewtaskx_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const double[] arg6, @Const MKL_INT arg7);
public static native int VSLDCORRNEWTASKX_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const DoublePointer arg6, @Const MKL_INT arg7);
public static native int VSLDCORRNEWTASKX_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const DoubleBuffer arg6, @Const MKL_INT arg7);
public static native int VSLDCORRNEWTASKX_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const double[] arg6, @Const MKL_INT arg7);

public static native int vslsCorrNewTaskX(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const FloatPointer arg6,  @Const MKL_INT arg7);
public static native int vslsCorrNewTaskX(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const FloatBuffer arg6,  @Const MKL_INT arg7);
public static native int vslsCorrNewTaskX(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const float[] arg6,  @Const MKL_INT arg7);
public static native int vslscorrnewtaskx_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const FloatPointer arg6,  @Const MKL_INT arg7);
public static native int vslscorrnewtaskx_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const FloatBuffer arg6,  @Const MKL_INT arg7);
public static native int vslscorrnewtaskx_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const float[] arg6,  @Const MKL_INT arg7);
public static native int VSLSCORRNEWTASKX_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const FloatPointer arg6,  @Const MKL_INT arg7);
public static native int VSLSCORRNEWTASKX_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const FloatBuffer arg6,  @Const MKL_INT arg7);
public static native int VSLSCORRNEWTASKX_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const float[] arg6,  @Const MKL_INT arg7);

public static native int vslzCorrNewTaskX(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const MKL_Complex16 arg6, @Const MKL_INT arg7);
public static native int vslzcorrnewtaskx_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const MKL_Complex16 arg6, @Const MKL_INT arg7);
public static native int VSLZCORRNEWTASKX_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const MKL_Complex16 arg6, @Const MKL_INT arg7);

public static native int vslcCorrNewTaskX(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const MKL_Complex8 arg6,  @Const MKL_INT arg7);
public static native int vslccorrnewtaskx_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const MKL_Complex8 arg6,  @Const MKL_INT arg7);
public static native int VSLCCORRNEWTASKX_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const MKL_Complex8 arg6,  @Const MKL_INT arg7);


public static native int vsldConvNewTaskX1D(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const DoublePointer arg5, @Const @ByVal MKL_INT arg6  );
public static native int vsldConvNewTaskX1D(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const DoubleBuffer arg5, @Const @ByVal MKL_INT arg6  );
public static native int vsldConvNewTaskX1D(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const double[] arg5, @Const @ByVal MKL_INT arg6  );
public static native int vsldconvnewtaskx1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const DoublePointer arg5, @Const MKL_INT arg6 );
public static native int vsldconvnewtaskx1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const DoubleBuffer arg5, @Const MKL_INT arg6 );
public static native int vsldconvnewtaskx1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const double[] arg5, @Const MKL_INT arg6 );
public static native int VSLDCONVNEWTASKX1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const DoublePointer arg5, @Const MKL_INT arg6 );
public static native int VSLDCONVNEWTASKX1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const DoubleBuffer arg5, @Const MKL_INT arg6 );
public static native int VSLDCONVNEWTASKX1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const double[] arg5, @Const MKL_INT arg6 );

public static native int vslsConvNewTaskX1D(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const FloatPointer arg5,  @Const @ByVal MKL_INT arg6  );
public static native int vslsConvNewTaskX1D(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const FloatBuffer arg5,  @Const @ByVal MKL_INT arg6  );
public static native int vslsConvNewTaskX1D(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const float[] arg5,  @Const @ByVal MKL_INT arg6  );
public static native int vslsconvnewtaskx1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const FloatPointer arg5,  @Const MKL_INT arg6 );
public static native int vslsconvnewtaskx1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const FloatBuffer arg5,  @Const MKL_INT arg6 );
public static native int vslsconvnewtaskx1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const float[] arg5,  @Const MKL_INT arg6 );
public static native int VSLSCONVNEWTASKX1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const FloatPointer arg5,  @Const MKL_INT arg6 );
public static native int VSLSCONVNEWTASKX1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const FloatBuffer arg5,  @Const MKL_INT arg6 );
public static native int VSLSCONVNEWTASKX1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const float[] arg5,  @Const MKL_INT arg6 );

public static native int vslzConvNewTaskX1D(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const MKL_Complex16 arg5, @Const @ByVal MKL_INT arg6  );
public static native int vslzconvnewtaskx1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_Complex16 arg5, @Const MKL_INT arg6 );
public static native int VSLZCONVNEWTASKX1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_Complex16 arg5, @Const MKL_INT arg6 );

public static native int vslcConvNewTaskX1D(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const MKL_Complex8 arg5,  @Const @ByVal MKL_INT arg6  );
public static native int vslcconvnewtaskx1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_Complex8 arg5,  @Const MKL_INT arg6 );
public static native int VSLCCONVNEWTASKX1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_Complex8 arg5,  @Const MKL_INT arg6 );

public static native int vsldCorrNewTaskX1D(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const DoublePointer arg5, @Const @ByVal MKL_INT arg6  );
public static native int vsldCorrNewTaskX1D(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const DoubleBuffer arg5, @Const @ByVal MKL_INT arg6  );
public static native int vsldCorrNewTaskX1D(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const double[] arg5, @Const @ByVal MKL_INT arg6  );
public static native int vsldcorrnewtaskx1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const DoublePointer arg5, @Const MKL_INT arg6 );
public static native int vsldcorrnewtaskx1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const DoubleBuffer arg5, @Const MKL_INT arg6 );
public static native int vsldcorrnewtaskx1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const double[] arg5, @Const MKL_INT arg6 );
public static native int VSLDCORRNEWTASKX1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const DoublePointer arg5, @Const MKL_INT arg6 );
public static native int VSLDCORRNEWTASKX1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const DoubleBuffer arg5, @Const MKL_INT arg6 );
public static native int VSLDCORRNEWTASKX1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const double[] arg5, @Const MKL_INT arg6 );

public static native int vslsCorrNewTaskX1D(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const FloatPointer arg5,  @Const @ByVal MKL_INT arg6  );
public static native int vslsCorrNewTaskX1D(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const FloatBuffer arg5,  @Const @ByVal MKL_INT arg6  );
public static native int vslsCorrNewTaskX1D(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const float[] arg5,  @Const @ByVal MKL_INT arg6  );
public static native int vslscorrnewtaskx1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const FloatPointer arg5,  @Const MKL_INT arg6 );
public static native int vslscorrnewtaskx1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const FloatBuffer arg5,  @Const MKL_INT arg6 );
public static native int vslscorrnewtaskx1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const float[] arg5,  @Const MKL_INT arg6 );
public static native int VSLSCORRNEWTASKX1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const FloatPointer arg5,  @Const MKL_INT arg6 );
public static native int VSLSCORRNEWTASKX1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const FloatBuffer arg5,  @Const MKL_INT arg6 );
public static native int VSLSCORRNEWTASKX1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const float[] arg5,  @Const MKL_INT arg6 );

public static native int vslzCorrNewTaskX1D(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const MKL_Complex16 arg5, @Const @ByVal MKL_INT arg6  );
public static native int vslzcorrnewtaskx1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_Complex16 arg5, @Const MKL_INT arg6 );
public static native int VSLZCORRNEWTASKX1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_Complex16 arg5, @Const MKL_INT arg6 );

public static native int vslcCorrNewTaskX1D(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const MKL_Complex8 arg5,  @Const @ByVal MKL_INT arg6  );
public static native int vslccorrnewtaskx1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_Complex8 arg5,  @Const MKL_INT arg6 );
public static native int VSLCCORRNEWTASKX1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const MKL_Complex8 arg5,  @Const MKL_INT arg6 );


public static native int vslConvDeleteTask(@ByPtrPtr VSLConvTaskPtr arg0 );
public static native int vslconvdeletetask_(@ByPtrPtr VSLConvTaskPtr arg0 );
public static native int VSLCONVDeleteTask_(@ByPtrPtr VSLConvTaskPtr arg0 );

public static native int vslCorrDeleteTask(@ByPtrPtr VSLCorrTaskPtr arg0 );
public static native int vslcorrdeletetask_(@ByPtrPtr VSLCorrTaskPtr arg0 );
public static native int VSLCORRDeleteTask_(@ByPtrPtr VSLCorrTaskPtr arg0 );


public static native int vslConvCopyTask(@ByPtrPtr VSLConvTaskPtr arg0, VSLConvTaskPtr arg1  );
public static native int vslconvcopytask_(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByPtrPtr VSLConvTaskPtr arg1 );
public static native int VSLCONVCopyTask_(@ByPtrPtr VSLConvTaskPtr arg0, @Const @ByPtrPtr VSLConvTaskPtr arg1 );

public static native int vslCorrCopyTask(@ByPtrPtr VSLCorrTaskPtr arg0, VSLCorrTaskPtr arg1  );
public static native int vslcorrcopytask_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByPtrPtr VSLCorrTaskPtr arg1 );
public static native int VSLCORRCopyTask_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const @ByPtrPtr VSLCorrTaskPtr arg1 );


public static native int vslConvSetMode(VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1  );
public static native int vslconvsetmode_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1 );
public static native int VSLCONVSETMODE_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1 );

public static native int vslCorrSetMode(VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1  );
public static native int vslcorrsetmode_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1 );
public static native int VSLCORRSETMODE_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1 );


public static native int vslConvSetInternalPrecision(VSLConvTaskPtr arg0, @Const @ByVal MKL_INT arg1  );
public static native int vslconvsetinternalprecision_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1 );
public static native int VSLCONVSETINTERNALPRECISION_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1 );

public static native int vslCorrSetInternalPrecision(VSLCorrTaskPtr arg0, @Const @ByVal MKL_INT arg1  );
public static native int vslcorrsetinternalprecision_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1 );
public static native int VSLCORRSETINTERNALPRECISION_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1 );


public static native int vslConvSetStart(VSLConvTaskPtr arg0, @Const MKL_INT arg1);
public static native int vslconvsetstart_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1);
public static native int VSLCONVSETSTART_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1);

public static native int vslCorrSetStart(VSLCorrTaskPtr arg0, @Const MKL_INT arg1);
public static native int vslcorrsetstart_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1);
public static native int VSLCORRSETSTART_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1);


public static native int vslConvSetDecimation(VSLConvTaskPtr arg0, @Const MKL_INT arg1);
public static native int vslconvsetdecimation_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1);
public static native int VSLCONVSETDECIMATION_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_INT arg1);

public static native int vslCorrSetDecimation(VSLCorrTaskPtr arg0, @Const MKL_INT arg1);
public static native int vslcorrsetdecimation_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1);
public static native int VSLCORRSETDECIMATION_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_INT arg1);


public static native int vsldConvExec(VSLConvTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, DoublePointer arg5, @Const MKL_INT arg6);
public static native int vsldConvExec(VSLConvTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, DoubleBuffer arg5, @Const MKL_INT arg6);
public static native int vsldConvExec(VSLConvTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const MKL_INT arg4, double[] arg5, @Const MKL_INT arg6);
public static native int vsldconvexec_(@ByPtrPtr VSLConvTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, DoublePointer arg5, @Const MKL_INT arg6);
public static native int vsldconvexec_(@ByPtrPtr VSLConvTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, DoubleBuffer arg5, @Const MKL_INT arg6);
public static native int vsldconvexec_(@ByPtrPtr VSLConvTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const MKL_INT arg4, double[] arg5, @Const MKL_INT arg6);
public static native int VSLDCONVEXEC_(@ByPtrPtr VSLConvTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, DoublePointer arg5, @Const MKL_INT arg6);
public static native int VSLDCONVEXEC_(@ByPtrPtr VSLConvTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, DoubleBuffer arg5, @Const MKL_INT arg6);
public static native int VSLDCONVEXEC_(@ByPtrPtr VSLConvTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const MKL_INT arg4, double[] arg5, @Const MKL_INT arg6);

public static native int vslsConvExec(VSLConvTaskPtr arg0, @Const FloatPointer arg1,  @Const MKL_INT arg2, @Const FloatPointer arg3,  @Const MKL_INT arg4, FloatPointer arg5,  @Const MKL_INT arg6);
public static native int vslsConvExec(VSLConvTaskPtr arg0, @Const FloatBuffer arg1,  @Const MKL_INT arg2, @Const FloatBuffer arg3,  @Const MKL_INT arg4, FloatBuffer arg5,  @Const MKL_INT arg6);
public static native int vslsConvExec(VSLConvTaskPtr arg0, @Const float[] arg1,  @Const MKL_INT arg2, @Const float[] arg3,  @Const MKL_INT arg4, float[] arg5,  @Const MKL_INT arg6);
public static native int vslsconvexec_(@ByPtrPtr VSLConvTaskPtr arg0, @Const FloatPointer arg1,  @Const MKL_INT arg2, @Const FloatPointer arg3,  @Const MKL_INT arg4, FloatPointer arg5,  @Const MKL_INT arg6);
public static native int vslsconvexec_(@ByPtrPtr VSLConvTaskPtr arg0, @Const FloatBuffer arg1,  @Const MKL_INT arg2, @Const FloatBuffer arg3,  @Const MKL_INT arg4, FloatBuffer arg5,  @Const MKL_INT arg6);
public static native int vslsconvexec_(@ByPtrPtr VSLConvTaskPtr arg0, @Const float[] arg1,  @Const MKL_INT arg2, @Const float[] arg3,  @Const MKL_INT arg4, float[] arg5,  @Const MKL_INT arg6);
public static native int VSLSCONVEXEC_(@ByPtrPtr VSLConvTaskPtr arg0, @Const FloatPointer arg1,  @Const MKL_INT arg2, @Const FloatPointer arg3,  @Const MKL_INT arg4, FloatPointer arg5,  @Const MKL_INT arg6);
public static native int VSLSCONVEXEC_(@ByPtrPtr VSLConvTaskPtr arg0, @Const FloatBuffer arg1,  @Const MKL_INT arg2, @Const FloatBuffer arg3,  @Const MKL_INT arg4, FloatBuffer arg5,  @Const MKL_INT arg6);
public static native int VSLSCONVEXEC_(@ByPtrPtr VSLConvTaskPtr arg0, @Const float[] arg1,  @Const MKL_INT arg2, @Const float[] arg3,  @Const MKL_INT arg4, float[] arg5,  @Const MKL_INT arg6);

public static native int vslzConvExec(VSLConvTaskPtr arg0, @Const MKL_Complex16 arg1, @Const MKL_INT arg2, @Const MKL_Complex16 arg3, @Const MKL_INT arg4, MKL_Complex16 arg5, @Const MKL_INT arg6);
public static native int vslzconvexec_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_Complex16 arg1, @Const MKL_INT arg2, @Const MKL_Complex16 arg3, @Const MKL_INT arg4, MKL_Complex16 arg5, @Const MKL_INT arg6);
public static native int VSLZCONVEXEC_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_Complex16 arg1, @Const MKL_INT arg2, @Const MKL_Complex16 arg3, @Const MKL_INT arg4, MKL_Complex16 arg5, @Const MKL_INT arg6);

public static native int vslcConvExec(VSLConvTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const MKL_INT arg2, @Const MKL_Complex8 arg3,  @Const MKL_INT arg4, MKL_Complex8 arg5,  @Const MKL_INT arg6);
public static native int vslcconvexec_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const MKL_INT arg2, @Const MKL_Complex8 arg3,  @Const MKL_INT arg4, MKL_Complex8 arg5,  @Const MKL_INT arg6);
public static native int VSLCCONVEXEC_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const MKL_INT arg2, @Const MKL_Complex8 arg3,  @Const MKL_INT arg4, MKL_Complex8 arg5,  @Const MKL_INT arg6);

public static native int vsldCorrExec(VSLCorrTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, DoublePointer arg5, @Const MKL_INT arg6);
public static native int vsldCorrExec(VSLCorrTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, DoubleBuffer arg5, @Const MKL_INT arg6);
public static native int vsldCorrExec(VSLCorrTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const MKL_INT arg4, double[] arg5, @Const MKL_INT arg6);
public static native int vsldcorrexec_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, DoublePointer arg5, @Const MKL_INT arg6);
public static native int vsldcorrexec_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, DoubleBuffer arg5, @Const MKL_INT arg6);
public static native int vsldcorrexec_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const MKL_INT arg4, double[] arg5, @Const MKL_INT arg6);
public static native int VSLDCORREXEC_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, DoublePointer arg5, @Const MKL_INT arg6);
public static native int VSLDCORREXEC_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, DoubleBuffer arg5, @Const MKL_INT arg6);
public static native int VSLDCORREXEC_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const MKL_INT arg4, double[] arg5, @Const MKL_INT arg6);

public static native int vslsCorrExec(VSLCorrTaskPtr arg0, @Const FloatPointer arg1,  @Const MKL_INT arg2, @Const FloatPointer arg3,  @Const MKL_INT arg4, FloatPointer arg5,  @Const MKL_INT arg6);
public static native int vslsCorrExec(VSLCorrTaskPtr arg0, @Const FloatBuffer arg1,  @Const MKL_INT arg2, @Const FloatBuffer arg3,  @Const MKL_INT arg4, FloatBuffer arg5,  @Const MKL_INT arg6);
public static native int vslsCorrExec(VSLCorrTaskPtr arg0, @Const float[] arg1,  @Const MKL_INT arg2, @Const float[] arg3,  @Const MKL_INT arg4, float[] arg5,  @Const MKL_INT arg6);
public static native int vslscorrexec_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const FloatPointer arg1,  @Const MKL_INT arg2, @Const FloatPointer arg3,  @Const MKL_INT arg4, FloatPointer arg5,  @Const MKL_INT arg6);
public static native int vslscorrexec_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const FloatBuffer arg1,  @Const MKL_INT arg2, @Const FloatBuffer arg3,  @Const MKL_INT arg4, FloatBuffer arg5,  @Const MKL_INT arg6);
public static native int vslscorrexec_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const float[] arg1,  @Const MKL_INT arg2, @Const float[] arg3,  @Const MKL_INT arg4, float[] arg5,  @Const MKL_INT arg6);
public static native int VSLSCORREXEC_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const FloatPointer arg1,  @Const MKL_INT arg2, @Const FloatPointer arg3,  @Const MKL_INT arg4, FloatPointer arg5,  @Const MKL_INT arg6);
public static native int VSLSCORREXEC_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const FloatBuffer arg1,  @Const MKL_INT arg2, @Const FloatBuffer arg3,  @Const MKL_INT arg4, FloatBuffer arg5,  @Const MKL_INT arg6);
public static native int VSLSCORREXEC_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const float[] arg1,  @Const MKL_INT arg2, @Const float[] arg3,  @Const MKL_INT arg4, float[] arg5,  @Const MKL_INT arg6);

public static native int vslzCorrExec(VSLCorrTaskPtr arg0, @Const MKL_Complex16 arg1, @Const MKL_INT arg2, @Const MKL_Complex16 arg3, @Const MKL_INT arg4, MKL_Complex16 arg5, @Const MKL_INT arg6);
public static native int vslzcorrexec_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_Complex16 arg1, @Const MKL_INT arg2, @Const MKL_Complex16 arg3, @Const MKL_INT arg4, MKL_Complex16 arg5, @Const MKL_INT arg6);
public static native int VSLZCORREXEC_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_Complex16 arg1, @Const MKL_INT arg2, @Const MKL_Complex16 arg3, @Const MKL_INT arg4, MKL_Complex16 arg5, @Const MKL_INT arg6);

public static native int vslcCorrExec(VSLCorrTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const MKL_INT arg2, @Const MKL_Complex8 arg3,  @Const MKL_INT arg4, MKL_Complex8 arg5,  @Const MKL_INT arg6);
public static native int vslccorrexec_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const MKL_INT arg2, @Const MKL_Complex8 arg3,  @Const MKL_INT arg4, MKL_Complex8 arg5,  @Const MKL_INT arg6);
public static native int VSLCCORREXEC_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const MKL_INT arg2, @Const MKL_Complex8 arg3,  @Const MKL_INT arg4, MKL_Complex8 arg5,  @Const MKL_INT arg6);


public static native int vsldConvExec1D(VSLConvTaskPtr arg0, @Const DoublePointer arg1, @Const @ByVal MKL_INT arg2, @Const DoublePointer arg3, @Const @ByVal MKL_INT arg4, DoublePointer arg5, @Const @ByVal MKL_INT arg6  );
public static native int vsldConvExec1D(VSLConvTaskPtr arg0, @Const DoubleBuffer arg1, @Const @ByVal MKL_INT arg2, @Const DoubleBuffer arg3, @Const @ByVal MKL_INT arg4, DoubleBuffer arg5, @Const @ByVal MKL_INT arg6  );
public static native int vsldConvExec1D(VSLConvTaskPtr arg0, @Const double[] arg1, @Const @ByVal MKL_INT arg2, @Const double[] arg3, @Const @ByVal MKL_INT arg4, double[] arg5, @Const @ByVal MKL_INT arg6  );
public static native int vsldconvexec1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, DoublePointer arg5, @Const MKL_INT arg6 );
public static native int vsldconvexec1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, DoubleBuffer arg5, @Const MKL_INT arg6 );
public static native int vsldconvexec1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const MKL_INT arg4, double[] arg5, @Const MKL_INT arg6 );
public static native int VSLDCONVEXEC1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, DoublePointer arg5, @Const MKL_INT arg6 );
public static native int VSLDCONVEXEC1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, DoubleBuffer arg5, @Const MKL_INT arg6 );
public static native int VSLDCONVEXEC1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const MKL_INT arg4, double[] arg5, @Const MKL_INT arg6 );

public static native int vslsConvExec1D(VSLConvTaskPtr arg0, @Const FloatPointer arg1,  @Const @ByVal MKL_INT arg2, @Const FloatPointer arg3,  @Const @ByVal MKL_INT arg4, FloatPointer arg5,  @Const @ByVal MKL_INT arg6  );
public static native int vslsConvExec1D(VSLConvTaskPtr arg0, @Const FloatBuffer arg1,  @Const @ByVal MKL_INT arg2, @Const FloatBuffer arg3,  @Const @ByVal MKL_INT arg4, FloatBuffer arg5,  @Const @ByVal MKL_INT arg6  );
public static native int vslsConvExec1D(VSLConvTaskPtr arg0, @Const float[] arg1,  @Const @ByVal MKL_INT arg2, @Const float[] arg3,  @Const @ByVal MKL_INT arg4, float[] arg5,  @Const @ByVal MKL_INT arg6  );
public static native int vslsconvexec1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const FloatPointer arg1,  @Const MKL_INT arg2, @Const FloatPointer arg3,  @Const MKL_INT arg4, FloatPointer arg5,  @Const MKL_INT arg6 );
public static native int vslsconvexec1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const FloatBuffer arg1,  @Const MKL_INT arg2, @Const FloatBuffer arg3,  @Const MKL_INT arg4, FloatBuffer arg5,  @Const MKL_INT arg6 );
public static native int vslsconvexec1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const float[] arg1,  @Const MKL_INT arg2, @Const float[] arg3,  @Const MKL_INT arg4, float[] arg5,  @Const MKL_INT arg6 );
public static native int VSLSCONVEXEC1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const FloatPointer arg1,  @Const MKL_INT arg2, @Const FloatPointer arg3,  @Const MKL_INT arg4, FloatPointer arg5,  @Const MKL_INT arg6 );
public static native int VSLSCONVEXEC1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const FloatBuffer arg1,  @Const MKL_INT arg2, @Const FloatBuffer arg3,  @Const MKL_INT arg4, FloatBuffer arg5,  @Const MKL_INT arg6 );
public static native int VSLSCONVEXEC1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const float[] arg1,  @Const MKL_INT arg2, @Const float[] arg3,  @Const MKL_INT arg4, float[] arg5,  @Const MKL_INT arg6 );

public static native int vslzConvExec1D(VSLConvTaskPtr arg0, @Const MKL_Complex16 arg1, @Const @ByVal MKL_INT arg2, @Const MKL_Complex16 arg3, @Const @ByVal MKL_INT arg4, MKL_Complex16 arg5, @Const @ByVal MKL_INT arg6  );
public static native int vslzconvexec1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_Complex16 arg1, @Const MKL_INT arg2, @Const MKL_Complex16 arg3, @Const MKL_INT arg4, MKL_Complex16 arg5, @Const MKL_INT arg6 );
public static native int VSLZCONVEXEC1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_Complex16 arg1, @Const MKL_INT arg2, @Const MKL_Complex16 arg3, @Const MKL_INT arg4, MKL_Complex16 arg5, @Const MKL_INT arg6 );

public static native int vslcConvExec1D(VSLConvTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const @ByVal MKL_INT arg2, @Const MKL_Complex8 arg3,  @Const @ByVal MKL_INT arg4, MKL_Complex8 arg5,  @Const @ByVal MKL_INT arg6  );
public static native int vslcconvexec1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const MKL_INT arg2, @Const MKL_Complex8 arg3,  @Const MKL_INT arg4, MKL_Complex8 arg5,  @Const MKL_INT arg6 );
public static native int VSLCCONVEXEC1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const MKL_INT arg2, @Const MKL_Complex8 arg3,  @Const MKL_INT arg4, MKL_Complex8 arg5,  @Const MKL_INT arg6 );

public static native int vsldCorrExec1D(VSLCorrTaskPtr arg0, @Const DoublePointer arg1, @Const @ByVal MKL_INT arg2, @Const DoublePointer arg3, @Const @ByVal MKL_INT arg4, DoublePointer arg5, @Const @ByVal MKL_INT arg6  );
public static native int vsldCorrExec1D(VSLCorrTaskPtr arg0, @Const DoubleBuffer arg1, @Const @ByVal MKL_INT arg2, @Const DoubleBuffer arg3, @Const @ByVal MKL_INT arg4, DoubleBuffer arg5, @Const @ByVal MKL_INT arg6  );
public static native int vsldCorrExec1D(VSLCorrTaskPtr arg0, @Const double[] arg1, @Const @ByVal MKL_INT arg2, @Const double[] arg3, @Const @ByVal MKL_INT arg4, double[] arg5, @Const @ByVal MKL_INT arg6  );
public static native int vsldcorrexec1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, DoublePointer arg5, @Const MKL_INT arg6 );
public static native int vsldcorrexec1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, DoubleBuffer arg5, @Const MKL_INT arg6 );
public static native int vsldcorrexec1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const MKL_INT arg4, double[] arg5, @Const MKL_INT arg6 );
public static native int VSLDCORREXEC1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, DoublePointer arg5, @Const MKL_INT arg6 );
public static native int VSLDCORREXEC1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, DoubleBuffer arg5, @Const MKL_INT arg6 );
public static native int VSLDCORREXEC1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const MKL_INT arg4, double[] arg5, @Const MKL_INT arg6 );

public static native int vslsCorrExec1D(VSLCorrTaskPtr arg0, @Const FloatPointer arg1,  @Const @ByVal MKL_INT arg2, @Const FloatPointer arg3,  @Const @ByVal MKL_INT arg4, FloatPointer arg5,  @Const @ByVal MKL_INT arg6  );
public static native int vslsCorrExec1D(VSLCorrTaskPtr arg0, @Const FloatBuffer arg1,  @Const @ByVal MKL_INT arg2, @Const FloatBuffer arg3,  @Const @ByVal MKL_INT arg4, FloatBuffer arg5,  @Const @ByVal MKL_INT arg6  );
public static native int vslsCorrExec1D(VSLCorrTaskPtr arg0, @Const float[] arg1,  @Const @ByVal MKL_INT arg2, @Const float[] arg3,  @Const @ByVal MKL_INT arg4, float[] arg5,  @Const @ByVal MKL_INT arg6  );
public static native int vslscorrexec1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const FloatPointer arg1,  @Const MKL_INT arg2, @Const FloatPointer arg3,  @Const MKL_INT arg4, FloatPointer arg5,  @Const MKL_INT arg6 );
public static native int vslscorrexec1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const FloatBuffer arg1,  @Const MKL_INT arg2, @Const FloatBuffer arg3,  @Const MKL_INT arg4, FloatBuffer arg5,  @Const MKL_INT arg6 );
public static native int vslscorrexec1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const float[] arg1,  @Const MKL_INT arg2, @Const float[] arg3,  @Const MKL_INT arg4, float[] arg5,  @Const MKL_INT arg6 );
public static native int VSLSCORREXEC1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const FloatPointer arg1,  @Const MKL_INT arg2, @Const FloatPointer arg3,  @Const MKL_INT arg4, FloatPointer arg5,  @Const MKL_INT arg6 );
public static native int VSLSCORREXEC1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const FloatBuffer arg1,  @Const MKL_INT arg2, @Const FloatBuffer arg3,  @Const MKL_INT arg4, FloatBuffer arg5,  @Const MKL_INT arg6 );
public static native int VSLSCORREXEC1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const float[] arg1,  @Const MKL_INT arg2, @Const float[] arg3,  @Const MKL_INT arg4, float[] arg5,  @Const MKL_INT arg6 );

public static native int vslzCorrExec1D(VSLCorrTaskPtr arg0, @Const MKL_Complex16 arg1, @Const @ByVal MKL_INT arg2, @Const MKL_Complex16 arg3, @Const @ByVal MKL_INT arg4, MKL_Complex16 arg5, @Const @ByVal MKL_INT arg6  );
public static native int vslzcorrexec1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_Complex16 arg1, @Const MKL_INT arg2, @Const MKL_Complex16 arg3, @Const MKL_INT arg4, MKL_Complex16 arg5, @Const MKL_INT arg6 );
public static native int VSLZCORREXEC1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_Complex16 arg1, @Const MKL_INT arg2, @Const MKL_Complex16 arg3, @Const MKL_INT arg4, MKL_Complex16 arg5, @Const MKL_INT arg6 );

public static native int vslcCorrExec1D(VSLCorrTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const @ByVal MKL_INT arg2, @Const MKL_Complex8 arg3,  @Const @ByVal MKL_INT arg4, MKL_Complex8 arg5,  @Const @ByVal MKL_INT arg6  );
public static native int vslccorrexec1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const MKL_INT arg2, @Const MKL_Complex8 arg3,  @Const MKL_INT arg4, MKL_Complex8 arg5,  @Const MKL_INT arg6 );
public static native int VSLCCORREXEC1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const MKL_INT arg2, @Const MKL_Complex8 arg3,  @Const MKL_INT arg4, MKL_Complex8 arg5,  @Const MKL_INT arg6 );


public static native int vsldConvExecX(VSLConvTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const MKL_INT arg4);
public static native int vsldConvExecX(VSLConvTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const MKL_INT arg4);
public static native int vsldConvExecX(VSLConvTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, double[] arg3, @Const MKL_INT arg4);
public static native int vsldconvexecx_(@ByPtrPtr VSLConvTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const MKL_INT arg4);
public static native int vsldconvexecx_(@ByPtrPtr VSLConvTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const MKL_INT arg4);
public static native int vsldconvexecx_(@ByPtrPtr VSLConvTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, double[] arg3, @Const MKL_INT arg4);
public static native int VSLDCONVEXECX_(@ByPtrPtr VSLConvTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const MKL_INT arg4);
public static native int VSLDCONVEXECX_(@ByPtrPtr VSLConvTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const MKL_INT arg4);
public static native int VSLDCONVEXECX_(@ByPtrPtr VSLConvTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, double[] arg3, @Const MKL_INT arg4);

public static native int vslsConvExecX(VSLConvTaskPtr arg0, @Const FloatPointer arg1,  @Const MKL_INT arg2, FloatPointer arg3,  @Const MKL_INT arg4);
public static native int vslsConvExecX(VSLConvTaskPtr arg0, @Const FloatBuffer arg1,  @Const MKL_INT arg2, FloatBuffer arg3,  @Const MKL_INT arg4);
public static native int vslsConvExecX(VSLConvTaskPtr arg0, @Const float[] arg1,  @Const MKL_INT arg2, float[] arg3,  @Const MKL_INT arg4);
public static native int vslsconvexecx_(@ByPtrPtr VSLConvTaskPtr arg0, @Const FloatPointer arg1,  @Const MKL_INT arg2, FloatPointer arg3,  @Const MKL_INT arg4);
public static native int vslsconvexecx_(@ByPtrPtr VSLConvTaskPtr arg0, @Const FloatBuffer arg1,  @Const MKL_INT arg2, FloatBuffer arg3,  @Const MKL_INT arg4);
public static native int vslsconvexecx_(@ByPtrPtr VSLConvTaskPtr arg0, @Const float[] arg1,  @Const MKL_INT arg2, float[] arg3,  @Const MKL_INT arg4);
public static native int VSLSCONVEXECX_(@ByPtrPtr VSLConvTaskPtr arg0, @Const FloatPointer arg1,  @Const MKL_INT arg2, FloatPointer arg3,  @Const MKL_INT arg4);
public static native int VSLSCONVEXECX_(@ByPtrPtr VSLConvTaskPtr arg0, @Const FloatBuffer arg1,  @Const MKL_INT arg2, FloatBuffer arg3,  @Const MKL_INT arg4);
public static native int VSLSCONVEXECX_(@ByPtrPtr VSLConvTaskPtr arg0, @Const float[] arg1,  @Const MKL_INT arg2, float[] arg3,  @Const MKL_INT arg4);

public static native int vslzConvExecX(VSLConvTaskPtr arg0, @Const MKL_Complex16 arg1, @Const MKL_INT arg2, MKL_Complex16 arg3, @Const MKL_INT arg4);
public static native int vslzconvexecx_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_Complex16 arg1, @Const MKL_INT arg2, MKL_Complex16 arg3, @Const MKL_INT arg4);
public static native int VSLZCONVEXECX_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_Complex16 arg1, @Const MKL_INT arg2, MKL_Complex16 arg3, @Const MKL_INT arg4);

public static native int vslcConvExecX(VSLConvTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const MKL_INT arg2, MKL_Complex8 arg3,  @Const MKL_INT arg4);
public static native int vslcconvexecx_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const MKL_INT arg2, MKL_Complex8 arg3,  @Const MKL_INT arg4);
public static native int VSLCCONVEXECX_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const MKL_INT arg2, MKL_Complex8 arg3,  @Const MKL_INT arg4);

public static native int vsldCorrExecX(VSLCorrTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const MKL_INT arg4);
public static native int vsldCorrExecX(VSLCorrTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const MKL_INT arg4);
public static native int vsldCorrExecX(VSLCorrTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, double[] arg3, @Const MKL_INT arg4);
public static native int vsldcorrexecx_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const MKL_INT arg4);
public static native int vsldcorrexecx_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const MKL_INT arg4);
public static native int vsldcorrexecx_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, double[] arg3, @Const MKL_INT arg4);
public static native int VSLDCORREXECX_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const MKL_INT arg4);
public static native int VSLDCORREXECX_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const MKL_INT arg4);
public static native int VSLDCORREXECX_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, double[] arg3, @Const MKL_INT arg4);

public static native int vslsCorrExecX(VSLCorrTaskPtr arg0, @Const FloatPointer arg1,  @Const MKL_INT arg2, FloatPointer arg3,  @Const MKL_INT arg4);
public static native int vslsCorrExecX(VSLCorrTaskPtr arg0, @Const FloatBuffer arg1,  @Const MKL_INT arg2, FloatBuffer arg3,  @Const MKL_INT arg4);
public static native int vslsCorrExecX(VSLCorrTaskPtr arg0, @Const float[] arg1,  @Const MKL_INT arg2, float[] arg3,  @Const MKL_INT arg4);
public static native int vslscorrexecx_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const FloatPointer arg1,  @Const MKL_INT arg2, FloatPointer arg3,  @Const MKL_INT arg4);
public static native int vslscorrexecx_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const FloatBuffer arg1,  @Const MKL_INT arg2, FloatBuffer arg3,  @Const MKL_INT arg4);
public static native int vslscorrexecx_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const float[] arg1,  @Const MKL_INT arg2, float[] arg3,  @Const MKL_INT arg4);
public static native int VSLSCORREXECX_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const FloatPointer arg1,  @Const MKL_INT arg2, FloatPointer arg3,  @Const MKL_INT arg4);
public static native int VSLSCORREXECX_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const FloatBuffer arg1,  @Const MKL_INT arg2, FloatBuffer arg3,  @Const MKL_INT arg4);
public static native int VSLSCORREXECX_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const float[] arg1,  @Const MKL_INT arg2, float[] arg3,  @Const MKL_INT arg4);

public static native int vslzCorrExecX(VSLCorrTaskPtr arg0, @Const MKL_Complex16 arg1, @Const MKL_INT arg2, MKL_Complex16 arg3, @Const MKL_INT arg4);
public static native int vslzcorrexecx_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_Complex16 arg1, @Const MKL_INT arg2, MKL_Complex16 arg3, @Const MKL_INT arg4);
public static native int VSLZCORREXECX_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_Complex16 arg1, @Const MKL_INT arg2, MKL_Complex16 arg3, @Const MKL_INT arg4);

public static native int vslcCorrExecX(VSLCorrTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const MKL_INT arg2, MKL_Complex8 arg3,  @Const MKL_INT arg4);
public static native int vslccorrexecx_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const MKL_INT arg2, MKL_Complex8 arg3,  @Const MKL_INT arg4);
public static native int VSLCCORREXECX_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const MKL_INT arg2, MKL_Complex8 arg3,  @Const MKL_INT arg4);


public static native int vsldConvExecX1D(VSLConvTaskPtr arg0, @Const DoublePointer arg1, @Const @ByVal MKL_INT arg2, DoublePointer arg3, @Const @ByVal MKL_INT arg4  );
public static native int vsldConvExecX1D(VSLConvTaskPtr arg0, @Const DoubleBuffer arg1, @Const @ByVal MKL_INT arg2, DoubleBuffer arg3, @Const @ByVal MKL_INT arg4  );
public static native int vsldConvExecX1D(VSLConvTaskPtr arg0, @Const double[] arg1, @Const @ByVal MKL_INT arg2, double[] arg3, @Const @ByVal MKL_INT arg4  );
public static native int vsldconvexecx1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const MKL_INT arg4 );
public static native int vsldconvexecx1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const MKL_INT arg4 );
public static native int vsldconvexecx1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, double[] arg3, @Const MKL_INT arg4 );
public static native int VSLDCONVEXECX1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const MKL_INT arg4 );
public static native int VSLDCONVEXECX1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const MKL_INT arg4 );
public static native int VSLDCONVEXECX1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, double[] arg3, @Const MKL_INT arg4 );

public static native int vslsConvExecX1D(VSLConvTaskPtr arg0, @Const FloatPointer arg1,  @Const @ByVal MKL_INT arg2, FloatPointer arg3,  @Const @ByVal MKL_INT arg4  );
public static native int vslsConvExecX1D(VSLConvTaskPtr arg0, @Const FloatBuffer arg1,  @Const @ByVal MKL_INT arg2, FloatBuffer arg3,  @Const @ByVal MKL_INT arg4  );
public static native int vslsConvExecX1D(VSLConvTaskPtr arg0, @Const float[] arg1,  @Const @ByVal MKL_INT arg2, float[] arg3,  @Const @ByVal MKL_INT arg4  );
public static native int vslsconvexecx1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const FloatPointer arg1,  @Const MKL_INT arg2, FloatPointer arg3,  @Const MKL_INT arg4 );
public static native int vslsconvexecx1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const FloatBuffer arg1,  @Const MKL_INT arg2, FloatBuffer arg3,  @Const MKL_INT arg4 );
public static native int vslsconvexecx1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const float[] arg1,  @Const MKL_INT arg2, float[] arg3,  @Const MKL_INT arg4 );
public static native int VSLSCONVEXECX1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const FloatPointer arg1,  @Const MKL_INT arg2, FloatPointer arg3,  @Const MKL_INT arg4 );
public static native int VSLSCONVEXECX1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const FloatBuffer arg1,  @Const MKL_INT arg2, FloatBuffer arg3,  @Const MKL_INT arg4 );
public static native int VSLSCONVEXECX1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const float[] arg1,  @Const MKL_INT arg2, float[] arg3,  @Const MKL_INT arg4 );

public static native int vslzConvExecX1D(VSLConvTaskPtr arg0, @Const MKL_Complex16 arg1, @Const @ByVal MKL_INT arg2, MKL_Complex16 arg3, @Const @ByVal MKL_INT arg4  );
public static native int vslzconvexecx1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_Complex16 arg1, @Const MKL_INT arg2, MKL_Complex16 arg3, @Const MKL_INT arg4 );
public static native int VSLZCONVEXECX1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_Complex16 arg1, @Const MKL_INT arg2, MKL_Complex16 arg3, @Const MKL_INT arg4 );

public static native int vslcConvExecX1D(VSLConvTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const @ByVal MKL_INT arg2, MKL_Complex8 arg3,  @Const @ByVal MKL_INT arg4  );
public static native int vslcconvexecx1d_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const MKL_INT arg2, MKL_Complex8 arg3,  @Const MKL_INT arg4 );
public static native int VSLCCONVEXECX1D_(@ByPtrPtr VSLConvTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const MKL_INT arg2, MKL_Complex8 arg3,  @Const MKL_INT arg4 );

public static native int vsldCorrExecX1D(VSLCorrTaskPtr arg0, @Const DoublePointer arg1, @Const @ByVal MKL_INT arg2, DoublePointer arg3, @Const @ByVal MKL_INT arg4  );
public static native int vsldCorrExecX1D(VSLCorrTaskPtr arg0, @Const DoubleBuffer arg1, @Const @ByVal MKL_INT arg2, DoubleBuffer arg3, @Const @ByVal MKL_INT arg4  );
public static native int vsldCorrExecX1D(VSLCorrTaskPtr arg0, @Const double[] arg1, @Const @ByVal MKL_INT arg2, double[] arg3, @Const @ByVal MKL_INT arg4  );
public static native int vsldcorrexecx1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const MKL_INT arg4 );
public static native int vsldcorrexecx1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const MKL_INT arg4 );
public static native int vsldcorrexecx1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, double[] arg3, @Const MKL_INT arg4 );
public static native int VSLDCORREXECX1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const MKL_INT arg4 );
public static native int VSLDCORREXECX1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const MKL_INT arg4 );
public static native int VSLDCORREXECX1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, double[] arg3, @Const MKL_INT arg4 );

public static native int vslsCorrExecX1D(VSLCorrTaskPtr arg0, @Const FloatPointer arg1,  @Const @ByVal MKL_INT arg2, FloatPointer arg3,  @Const @ByVal MKL_INT arg4  );
public static native int vslsCorrExecX1D(VSLCorrTaskPtr arg0, @Const FloatBuffer arg1,  @Const @ByVal MKL_INT arg2, FloatBuffer arg3,  @Const @ByVal MKL_INT arg4  );
public static native int vslsCorrExecX1D(VSLCorrTaskPtr arg0, @Const float[] arg1,  @Const @ByVal MKL_INT arg2, float[] arg3,  @Const @ByVal MKL_INT arg4  );
public static native int vslscorrexecx1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const FloatPointer arg1,  @Const MKL_INT arg2, FloatPointer arg3,  @Const MKL_INT arg4 );
public static native int vslscorrexecx1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const FloatBuffer arg1,  @Const MKL_INT arg2, FloatBuffer arg3,  @Const MKL_INT arg4 );
public static native int vslscorrexecx1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const float[] arg1,  @Const MKL_INT arg2, float[] arg3,  @Const MKL_INT arg4 );
public static native int VSLSCORREXECX1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const FloatPointer arg1,  @Const MKL_INT arg2, FloatPointer arg3,  @Const MKL_INT arg4 );
public static native int VSLSCORREXECX1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const FloatBuffer arg1,  @Const MKL_INT arg2, FloatBuffer arg3,  @Const MKL_INT arg4 );
public static native int VSLSCORREXECX1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const float[] arg1,  @Const MKL_INT arg2, float[] arg3,  @Const MKL_INT arg4 );

public static native int vslzCorrExecX1D(VSLCorrTaskPtr arg0, @Const MKL_Complex16 arg1, @Const @ByVal MKL_INT arg2, MKL_Complex16 arg3, @Const @ByVal MKL_INT arg4  );
public static native int vslzcorrexecx1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_Complex16 arg1, @Const MKL_INT arg2, MKL_Complex16 arg3, @Const MKL_INT arg4 );
public static native int VSLZCORREXECX1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_Complex16 arg1, @Const MKL_INT arg2, MKL_Complex16 arg3, @Const MKL_INT arg4 );

public static native int vslcCorrExecX1D(VSLCorrTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const @ByVal MKL_INT arg2, MKL_Complex8 arg3,  @Const @ByVal MKL_INT arg4  );
public static native int vslccorrexecx1d_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const MKL_INT arg2, MKL_Complex8 arg3,  @Const MKL_INT arg4 );
public static native int VSLCCORREXECX1D_(@ByPtrPtr VSLCorrTaskPtr arg0, @Const MKL_Complex8 arg1,  @Const MKL_INT arg2, MKL_Complex8 arg3,  @Const MKL_INT arg4 );


/*
//++
//  SUMMARARY STATTISTICS LIBRARY ROUTINES
//--
*/

/*
//  Task constructors
*/
public static native int vsldSSNewTask(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const DoublePointer arg4, @Const DoublePointer arg5, @Const MKL_INT arg6);
public static native int vsldSSNewTask(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5, @Const MKL_INT arg6);
public static native int vsldSSNewTask(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const double[] arg4, @Const double[] arg5, @Const MKL_INT arg6);
public static native int vsldssnewtask_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const DoublePointer arg4, @Const DoublePointer arg5, @Const MKL_INT arg6);
public static native int vsldssnewtask_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5, @Const MKL_INT arg6);
public static native int vsldssnewtask_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const double[] arg4, @Const double[] arg5, @Const MKL_INT arg6);
public static native int VSLDSSNEWTASK_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const DoublePointer arg4, @Const DoublePointer arg5, @Const MKL_INT arg6);
public static native int VSLDSSNEWTASK_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5, @Const MKL_INT arg6);
public static native int VSLDSSNEWTASK_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const double[] arg4, @Const double[] arg5, @Const MKL_INT arg6);

public static native int vslsSSNewTask(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const FloatPointer arg4, @Const FloatPointer arg5, @Const MKL_INT arg6);
public static native int vslsSSNewTask(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const FloatBuffer arg4, @Const FloatBuffer arg5, @Const MKL_INT arg6);
public static native int vslsSSNewTask(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const float[] arg4, @Const float[] arg5, @Const MKL_INT arg6);
public static native int vslsssnewtask_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const FloatPointer arg4, @Const FloatPointer arg5, @Const MKL_INT arg6);
public static native int vslsssnewtask_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const FloatBuffer arg4, @Const FloatBuffer arg5, @Const MKL_INT arg6);
public static native int vslsssnewtask_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const float[] arg4, @Const float[] arg5, @Const MKL_INT arg6);
public static native int VSLSSSNEWTASK_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const FloatPointer arg4, @Const FloatPointer arg5, @Const MKL_INT arg6);
public static native int VSLSSSNEWTASK_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const FloatBuffer arg4, @Const FloatBuffer arg5, @Const MKL_INT arg6);
public static native int VSLSSSNEWTASK_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const float[] arg4, @Const float[] arg5, @Const MKL_INT arg6);


/*
// Task editors
*/

/*
// Editor to modify a task parameter
*/
public static native int vsldSSEditTask(VSLSSTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const DoublePointer arg2 );
public static native int vsldSSEditTask(VSLSSTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const DoubleBuffer arg2 );
public static native int vsldSSEditTask(VSLSSTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const double[] arg2 );
public static native int vsldssedittask_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2 );
public static native int vsldssedittask_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2 );
public static native int vsldssedittask_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const double[] arg2 );
public static native int VSLDSSEDITTASK_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2 );
public static native int VSLDSSEDITTASK_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2 );
public static native int VSLDSSEDITTASK_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const double[] arg2 );

public static native int vslsSSEditTask(VSLSSTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const FloatPointer arg2 );
public static native int vslsSSEditTask(VSLSSTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const FloatBuffer arg2 );
public static native int vslsSSEditTask(VSLSSTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const float[] arg2 );
public static native int vslsssedittask_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2 );
public static native int vslsssedittask_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2 );
public static native int vslsssedittask_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const float[] arg2 );
public static native int VSLSSSEDITTASK_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2 );
public static native int VSLSSSEDITTASK_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2 );
public static native int VSLSSSEDITTASK_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const float[] arg2 );

public static native int vsliSSEditTask(VSLSSTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const MKL_INT arg2 );
public static native int vslissedittask_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2 );
public static native int VSLISSEDITTASK_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2 );

/*
// Task specific editors
*/

/*
// Editors to modify moments related parameters
*/
public static native int vsldSSEditMoments(VSLSSTaskPtr arg0, DoublePointer arg1, DoublePointer arg2, DoublePointer arg3, DoublePointer arg4, DoublePointer arg5, DoublePointer arg6, DoublePointer arg7 );
public static native int vsldSSEditMoments(VSLSSTaskPtr arg0, DoubleBuffer arg1, DoubleBuffer arg2, DoubleBuffer arg3, DoubleBuffer arg4, DoubleBuffer arg5, DoubleBuffer arg6, DoubleBuffer arg7 );
public static native int vsldSSEditMoments(VSLSSTaskPtr arg0, double[] arg1, double[] arg2, double[] arg3, double[] arg4, double[] arg5, double[] arg6, double[] arg7 );
public static native int vsldsseditmoments_(@ByPtrPtr VSLSSTaskPtr arg0, DoublePointer arg1, DoublePointer arg2, DoublePointer arg3, DoublePointer arg4, DoublePointer arg5, DoublePointer arg6, DoublePointer arg7 );
public static native int vsldsseditmoments_(@ByPtrPtr VSLSSTaskPtr arg0, DoubleBuffer arg1, DoubleBuffer arg2, DoubleBuffer arg3, DoubleBuffer arg4, DoubleBuffer arg5, DoubleBuffer arg6, DoubleBuffer arg7 );
public static native int vsldsseditmoments_(@ByPtrPtr VSLSSTaskPtr arg0, double[] arg1, double[] arg2, double[] arg3, double[] arg4, double[] arg5, double[] arg6, double[] arg7 );
public static native int VSLDSSEDITMOMENTS_(@ByPtrPtr VSLSSTaskPtr arg0, DoublePointer arg1, DoublePointer arg2, DoublePointer arg3, DoublePointer arg4, DoublePointer arg5, DoublePointer arg6, DoublePointer arg7 );
public static native int VSLDSSEDITMOMENTS_(@ByPtrPtr VSLSSTaskPtr arg0, DoubleBuffer arg1, DoubleBuffer arg2, DoubleBuffer arg3, DoubleBuffer arg4, DoubleBuffer arg5, DoubleBuffer arg6, DoubleBuffer arg7 );
public static native int VSLDSSEDITMOMENTS_(@ByPtrPtr VSLSSTaskPtr arg0, double[] arg1, double[] arg2, double[] arg3, double[] arg4, double[] arg5, double[] arg6, double[] arg7 );

public static native int vslsSSEditMoments(VSLSSTaskPtr arg0, FloatPointer arg1, FloatPointer arg2, FloatPointer arg3, FloatPointer arg4, FloatPointer arg5, FloatPointer arg6, FloatPointer arg7 );
public static native int vslsSSEditMoments(VSLSSTaskPtr arg0, FloatBuffer arg1, FloatBuffer arg2, FloatBuffer arg3, FloatBuffer arg4, FloatBuffer arg5, FloatBuffer arg6, FloatBuffer arg7 );
public static native int vslsSSEditMoments(VSLSSTaskPtr arg0, float[] arg1, float[] arg2, float[] arg3, float[] arg4, float[] arg5, float[] arg6, float[] arg7 );
public static native int vslssseditmoments_(@ByPtrPtr VSLSSTaskPtr arg0, FloatPointer arg1, FloatPointer arg2, FloatPointer arg3, FloatPointer arg4, FloatPointer arg5, FloatPointer arg6, FloatPointer arg7 );
public static native int vslssseditmoments_(@ByPtrPtr VSLSSTaskPtr arg0, FloatBuffer arg1, FloatBuffer arg2, FloatBuffer arg3, FloatBuffer arg4, FloatBuffer arg5, FloatBuffer arg6, FloatBuffer arg7 );
public static native int vslssseditmoments_(@ByPtrPtr VSLSSTaskPtr arg0, float[] arg1, float[] arg2, float[] arg3, float[] arg4, float[] arg5, float[] arg6, float[] arg7 );
public static native int VSLSSSEDITMOMENTS_(@ByPtrPtr VSLSSTaskPtr arg0, FloatPointer arg1, FloatPointer arg2, FloatPointer arg3, FloatPointer arg4, FloatPointer arg5, FloatPointer arg6, FloatPointer arg7 );
public static native int VSLSSSEDITMOMENTS_(@ByPtrPtr VSLSSTaskPtr arg0, FloatBuffer arg1, FloatBuffer arg2, FloatBuffer arg3, FloatBuffer arg4, FloatBuffer arg5, FloatBuffer arg6, FloatBuffer arg7 );
public static native int VSLSSSEDITMOMENTS_(@ByPtrPtr VSLSSTaskPtr arg0, float[] arg1, float[] arg2, float[] arg3, float[] arg4, float[] arg5, float[] arg6, float[] arg7 );


/*
// Editors to modify sums related parameters
*/
public static native int vsldSSEditSums(VSLSSTaskPtr arg0, DoublePointer arg1, DoublePointer arg2, DoublePointer arg3, DoublePointer arg4, DoublePointer arg5, DoublePointer arg6, DoublePointer arg7 );
public static native int vsldSSEditSums(VSLSSTaskPtr arg0, DoubleBuffer arg1, DoubleBuffer arg2, DoubleBuffer arg3, DoubleBuffer arg4, DoubleBuffer arg5, DoubleBuffer arg6, DoubleBuffer arg7 );
public static native int vsldSSEditSums(VSLSSTaskPtr arg0, double[] arg1, double[] arg2, double[] arg3, double[] arg4, double[] arg5, double[] arg6, double[] arg7 );
public static native int vsldsseditsums_(@ByPtrPtr VSLSSTaskPtr arg0, DoublePointer arg1, DoublePointer arg2, DoublePointer arg3, DoublePointer arg4, DoublePointer arg5, DoublePointer arg6, DoublePointer arg7 );
public static native int vsldsseditsums_(@ByPtrPtr VSLSSTaskPtr arg0, DoubleBuffer arg1, DoubleBuffer arg2, DoubleBuffer arg3, DoubleBuffer arg4, DoubleBuffer arg5, DoubleBuffer arg6, DoubleBuffer arg7 );
public static native int vsldsseditsums_(@ByPtrPtr VSLSSTaskPtr arg0, double[] arg1, double[] arg2, double[] arg3, double[] arg4, double[] arg5, double[] arg6, double[] arg7 );
public static native int VSLDSSEDITSUMS_(@ByPtrPtr VSLSSTaskPtr arg0, DoublePointer arg1, DoublePointer arg2, DoublePointer arg3, DoublePointer arg4, DoublePointer arg5, DoublePointer arg6, DoublePointer arg7 );
public static native int VSLDSSEDITSUMS_(@ByPtrPtr VSLSSTaskPtr arg0, DoubleBuffer arg1, DoubleBuffer arg2, DoubleBuffer arg3, DoubleBuffer arg4, DoubleBuffer arg5, DoubleBuffer arg6, DoubleBuffer arg7 );
public static native int VSLDSSEDITSUMS_(@ByPtrPtr VSLSSTaskPtr arg0, double[] arg1, double[] arg2, double[] arg3, double[] arg4, double[] arg5, double[] arg6, double[] arg7 );

public static native int vslsSSEditSums(VSLSSTaskPtr arg0, FloatPointer arg1, FloatPointer arg2, FloatPointer arg3, FloatPointer arg4, FloatPointer arg5, FloatPointer arg6, FloatPointer arg7 );
public static native int vslsSSEditSums(VSLSSTaskPtr arg0, FloatBuffer arg1, FloatBuffer arg2, FloatBuffer arg3, FloatBuffer arg4, FloatBuffer arg5, FloatBuffer arg6, FloatBuffer arg7 );
public static native int vslsSSEditSums(VSLSSTaskPtr arg0, float[] arg1, float[] arg2, float[] arg3, float[] arg4, float[] arg5, float[] arg6, float[] arg7 );
public static native int vslssseditsums_(@ByPtrPtr VSLSSTaskPtr arg0, FloatPointer arg1, FloatPointer arg2, FloatPointer arg3, FloatPointer arg4, FloatPointer arg5, FloatPointer arg6, FloatPointer arg7 );
public static native int vslssseditsums_(@ByPtrPtr VSLSSTaskPtr arg0, FloatBuffer arg1, FloatBuffer arg2, FloatBuffer arg3, FloatBuffer arg4, FloatBuffer arg5, FloatBuffer arg6, FloatBuffer arg7 );
public static native int vslssseditsums_(@ByPtrPtr VSLSSTaskPtr arg0, float[] arg1, float[] arg2, float[] arg3, float[] arg4, float[] arg5, float[] arg6, float[] arg7 );
public static native int VSLSSSEDITSUMS_(@ByPtrPtr VSLSSTaskPtr arg0, FloatPointer arg1, FloatPointer arg2, FloatPointer arg3, FloatPointer arg4, FloatPointer arg5, FloatPointer arg6, FloatPointer arg7 );
public static native int VSLSSSEDITSUMS_(@ByPtrPtr VSLSSTaskPtr arg0, FloatBuffer arg1, FloatBuffer arg2, FloatBuffer arg3, FloatBuffer arg4, FloatBuffer arg5, FloatBuffer arg6, FloatBuffer arg7 );
public static native int VSLSSSEDITSUMS_(@ByPtrPtr VSLSSTaskPtr arg0, float[] arg1, float[] arg2, float[] arg3, float[] arg4, float[] arg5, float[] arg6, float[] arg7 );


/*
// Editors to modify variance-covariance/correlation matrix related parameters
*/
public static native int vsldSSEditCovCor(VSLSSTaskPtr arg0, DoublePointer arg1, DoublePointer arg2,  @Const MKL_INT arg3, DoublePointer arg4, @Const MKL_INT arg5 );
public static native int vsldSSEditCovCor(VSLSSTaskPtr arg0, DoubleBuffer arg1, DoubleBuffer arg2,  @Const MKL_INT arg3, DoubleBuffer arg4, @Const MKL_INT arg5 );
public static native int vsldSSEditCovCor(VSLSSTaskPtr arg0, double[] arg1, double[] arg2,  @Const MKL_INT arg3, double[] arg4, @Const MKL_INT arg5 );
public static native int vsldsseditcovcor_(@ByPtrPtr VSLSSTaskPtr arg0, DoublePointer arg1, DoublePointer arg2,  @Const MKL_INT arg3, DoublePointer arg4, @Const MKL_INT arg5 );
public static native int vsldsseditcovcor_(@ByPtrPtr VSLSSTaskPtr arg0, DoubleBuffer arg1, DoubleBuffer arg2,  @Const MKL_INT arg3, DoubleBuffer arg4, @Const MKL_INT arg5 );
public static native int vsldsseditcovcor_(@ByPtrPtr VSLSSTaskPtr arg0, double[] arg1, double[] arg2,  @Const MKL_INT arg3, double[] arg4, @Const MKL_INT arg5 );
public static native int VSLDSSEDITCOVCOR_(@ByPtrPtr VSLSSTaskPtr arg0, DoublePointer arg1, DoublePointer arg2,  @Const MKL_INT arg3, DoublePointer arg4, @Const MKL_INT arg5 );
public static native int VSLDSSEDITCOVCOR_(@ByPtrPtr VSLSSTaskPtr arg0, DoubleBuffer arg1, DoubleBuffer arg2,  @Const MKL_INT arg3, DoubleBuffer arg4, @Const MKL_INT arg5 );
public static native int VSLDSSEDITCOVCOR_(@ByPtrPtr VSLSSTaskPtr arg0, double[] arg1, double[] arg2,  @Const MKL_INT arg3, double[] arg4, @Const MKL_INT arg5 );

public static native int vslsSSEditCovCor(VSLSSTaskPtr arg0, FloatPointer arg1, FloatPointer arg2, @Const MKL_INT arg3, FloatPointer arg4, @Const MKL_INT arg5 );
public static native int vslsSSEditCovCor(VSLSSTaskPtr arg0, FloatBuffer arg1, FloatBuffer arg2, @Const MKL_INT arg3, FloatBuffer arg4, @Const MKL_INT arg5 );
public static native int vslsSSEditCovCor(VSLSSTaskPtr arg0, float[] arg1, float[] arg2, @Const MKL_INT arg3, float[] arg4, @Const MKL_INT arg5 );
public static native int vslssseditcovcor_(@ByPtrPtr VSLSSTaskPtr arg0, FloatPointer arg1, FloatPointer arg2, @Const MKL_INT arg3, FloatPointer arg4, @Const MKL_INT arg5 );
public static native int vslssseditcovcor_(@ByPtrPtr VSLSSTaskPtr arg0, FloatBuffer arg1, FloatBuffer arg2, @Const MKL_INT arg3, FloatBuffer arg4, @Const MKL_INT arg5 );
public static native int vslssseditcovcor_(@ByPtrPtr VSLSSTaskPtr arg0, float[] arg1, float[] arg2, @Const MKL_INT arg3, float[] arg4, @Const MKL_INT arg5 );
public static native int VSLSSSEDITCOVCOR_(@ByPtrPtr VSLSSTaskPtr arg0, FloatPointer arg1, FloatPointer arg2, @Const MKL_INT arg3, FloatPointer arg4, @Const MKL_INT arg5 );
public static native int VSLSSSEDITCOVCOR_(@ByPtrPtr VSLSSTaskPtr arg0, FloatBuffer arg1, FloatBuffer arg2, @Const MKL_INT arg3, FloatBuffer arg4, @Const MKL_INT arg5 );
public static native int VSLSSSEDITCOVCOR_(@ByPtrPtr VSLSSTaskPtr arg0, float[] arg1, float[] arg2, @Const MKL_INT arg3, float[] arg4, @Const MKL_INT arg5 );


/*
// Editors to modify cross-product matrix related parameters
*/
public static native int vsldSSEditCP(VSLSSTaskPtr arg0, DoublePointer arg1, DoublePointer arg2,  DoublePointer arg3, @Const MKL_INT arg4 );
public static native int vsldSSEditCP(VSLSSTaskPtr arg0, DoubleBuffer arg1, DoubleBuffer arg2,  DoubleBuffer arg3, @Const MKL_INT arg4 );
public static native int vsldSSEditCP(VSLSSTaskPtr arg0, double[] arg1, double[] arg2,  double[] arg3, @Const MKL_INT arg4 );
public static native int vsldsseditcp_(@ByPtrPtr VSLSSTaskPtr arg0, DoublePointer arg1, DoublePointer arg2,  DoublePointer arg3, @Const MKL_INT arg4 );
public static native int vsldsseditcp_(@ByPtrPtr VSLSSTaskPtr arg0, DoubleBuffer arg1, DoubleBuffer arg2,  DoubleBuffer arg3, @Const MKL_INT arg4 );
public static native int vsldsseditcp_(@ByPtrPtr VSLSSTaskPtr arg0, double[] arg1, double[] arg2,  double[] arg3, @Const MKL_INT arg4 );
public static native int VSLDSSEDITCP_(@ByPtrPtr VSLSSTaskPtr arg0, DoublePointer arg1, DoublePointer arg2,  DoublePointer arg3, @Const MKL_INT arg4 );
public static native int VSLDSSEDITCP_(@ByPtrPtr VSLSSTaskPtr arg0, DoubleBuffer arg1, DoubleBuffer arg2,  DoubleBuffer arg3, @Const MKL_INT arg4 );
public static native int VSLDSSEDITCP_(@ByPtrPtr VSLSSTaskPtr arg0, double[] arg1, double[] arg2,  double[] arg3, @Const MKL_INT arg4 );

public static native int vslsSSEditCP(VSLSSTaskPtr arg0, FloatPointer arg1, FloatPointer arg2, FloatPointer arg3, @Const MKL_INT arg4 );
public static native int vslsSSEditCP(VSLSSTaskPtr arg0, FloatBuffer arg1, FloatBuffer arg2, FloatBuffer arg3, @Const MKL_INT arg4 );
public static native int vslsSSEditCP(VSLSSTaskPtr arg0, float[] arg1, float[] arg2, float[] arg3, @Const MKL_INT arg4 );
public static native int vslssseditcp_(@ByPtrPtr VSLSSTaskPtr arg0, FloatPointer arg1, FloatPointer arg2, FloatPointer arg3, @Const MKL_INT arg4 );
public static native int vslssseditcp_(@ByPtrPtr VSLSSTaskPtr arg0, FloatBuffer arg1, FloatBuffer arg2, FloatBuffer arg3, @Const MKL_INT arg4 );
public static native int vslssseditcp_(@ByPtrPtr VSLSSTaskPtr arg0, float[] arg1, float[] arg2, float[] arg3, @Const MKL_INT arg4 );
public static native int VSLSSSEDITCP_(@ByPtrPtr VSLSSTaskPtr arg0, FloatPointer arg1, FloatPointer arg2, FloatPointer arg3, @Const MKL_INT arg4 );
public static native int VSLSSSEDITCP_(@ByPtrPtr VSLSSTaskPtr arg0, FloatBuffer arg1, FloatBuffer arg2, FloatBuffer arg3, @Const MKL_INT arg4 );
public static native int VSLSSSEDITCP_(@ByPtrPtr VSLSSTaskPtr arg0, float[] arg1, float[] arg2, float[] arg3, @Const MKL_INT arg4 );


/*
// Editors to modify partial variance-covariance matrix related parameters
*/
public static native int vsldSSEditPartialCovCor(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2, @Const MKL_INT arg3, @Const DoublePointer arg4, @Const MKL_INT arg5, DoublePointer arg6, @Const MKL_INT arg7, DoublePointer arg8, @Const MKL_INT arg9 );
public static native int vsldSSEditPartialCovCor(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2, @Const MKL_INT arg3, @Const DoubleBuffer arg4, @Const MKL_INT arg5, DoubleBuffer arg6, @Const MKL_INT arg7, DoubleBuffer arg8, @Const MKL_INT arg9 );
public static native int vsldSSEditPartialCovCor(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const double[] arg2, @Const MKL_INT arg3, @Const double[] arg4, @Const MKL_INT arg5, double[] arg6, @Const MKL_INT arg7, double[] arg8, @Const MKL_INT arg9 );
public static native int vsldsseditpartialcovcor_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2, @Const MKL_INT arg3, @Const DoublePointer arg4, @Const MKL_INT arg5, DoublePointer arg6, @Const MKL_INT arg7, DoublePointer arg8, @Const MKL_INT arg9 );
public static native int vsldsseditpartialcovcor_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2, @Const MKL_INT arg3, @Const DoubleBuffer arg4, @Const MKL_INT arg5, DoubleBuffer arg6, @Const MKL_INT arg7, DoubleBuffer arg8, @Const MKL_INT arg9 );
public static native int vsldsseditpartialcovcor_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const double[] arg2, @Const MKL_INT arg3, @Const double[] arg4, @Const MKL_INT arg5, double[] arg6, @Const MKL_INT arg7, double[] arg8, @Const MKL_INT arg9 );
public static native int VSLDSSEDITPARTIALCOVCOR_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2, @Const MKL_INT arg3, @Const DoublePointer arg4, @Const MKL_INT arg5, DoublePointer arg6, @Const MKL_INT arg7, DoublePointer arg8, @Const MKL_INT arg9 );
public static native int VSLDSSEDITPARTIALCOVCOR_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2, @Const MKL_INT arg3, @Const DoubleBuffer arg4, @Const MKL_INT arg5, DoubleBuffer arg6, @Const MKL_INT arg7, DoubleBuffer arg8, @Const MKL_INT arg9 );
public static native int VSLDSSEDITPARTIALCOVCOR_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const double[] arg2, @Const MKL_INT arg3, @Const double[] arg4, @Const MKL_INT arg5, double[] arg6, @Const MKL_INT arg7, double[] arg8, @Const MKL_INT arg9 );

public static native int vslsSSEditPartialCovCor(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2, @Const MKL_INT arg3, @Const FloatPointer arg4, @Const MKL_INT arg5, FloatPointer arg6,  @Const MKL_INT arg7, FloatPointer arg8,  @Const MKL_INT arg9 );
public static native int vslsSSEditPartialCovCor(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2, @Const MKL_INT arg3, @Const FloatBuffer arg4, @Const MKL_INT arg5, FloatBuffer arg6,  @Const MKL_INT arg7, FloatBuffer arg8,  @Const MKL_INT arg9 );
public static native int vslsSSEditPartialCovCor(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const float[] arg2, @Const MKL_INT arg3, @Const float[] arg4, @Const MKL_INT arg5, float[] arg6,  @Const MKL_INT arg7, float[] arg8,  @Const MKL_INT arg9 );
public static native int vslssseditpartialcovcor_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2, @Const MKL_INT arg3, @Const FloatPointer arg4, @Const MKL_INT arg5, FloatPointer arg6,  @Const MKL_INT arg7, FloatPointer arg8,  @Const MKL_INT arg9 );
public static native int vslssseditpartialcovcor_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2, @Const MKL_INT arg3, @Const FloatBuffer arg4, @Const MKL_INT arg5, FloatBuffer arg6,  @Const MKL_INT arg7, FloatBuffer arg8,  @Const MKL_INT arg9 );
public static native int vslssseditpartialcovcor_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const float[] arg2, @Const MKL_INT arg3, @Const float[] arg4, @Const MKL_INT arg5, float[] arg6,  @Const MKL_INT arg7, float[] arg8,  @Const MKL_INT arg9 );
public static native int VSLSSSEDITPARTIALCOVCOR_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2, @Const MKL_INT arg3, @Const FloatPointer arg4, @Const MKL_INT arg5, FloatPointer arg6,  @Const MKL_INT arg7, FloatPointer arg8,  @Const MKL_INT arg9 );
public static native int VSLSSSEDITPARTIALCOVCOR_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2, @Const MKL_INT arg3, @Const FloatBuffer arg4, @Const MKL_INT arg5, FloatBuffer arg6,  @Const MKL_INT arg7, FloatBuffer arg8,  @Const MKL_INT arg9 );
public static native int VSLSSSEDITPARTIALCOVCOR_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const float[] arg2, @Const MKL_INT arg3, @Const float[] arg4, @Const MKL_INT arg5, float[] arg6,  @Const MKL_INT arg7, float[] arg8,  @Const MKL_INT arg9 );


/*
// Editors to modify quantiles related parameters
*/
public static native int vsldSSEditQuantiles(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2, DoublePointer arg3, DoublePointer arg4, @Const MKL_INT arg5 );
public static native int vsldSSEditQuantiles(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2, DoubleBuffer arg3, DoubleBuffer arg4, @Const MKL_INT arg5 );
public static native int vsldSSEditQuantiles(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const double[] arg2, double[] arg3, double[] arg4, @Const MKL_INT arg5 );
public static native int vsldsseditquantiles_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2, DoublePointer arg3, DoublePointer arg4, @Const MKL_INT arg5 );
public static native int vsldsseditquantiles_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2, DoubleBuffer arg3, DoubleBuffer arg4, @Const MKL_INT arg5 );
public static native int vsldsseditquantiles_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const double[] arg2, double[] arg3, double[] arg4, @Const MKL_INT arg5 );
public static native int VSLDSSEDITQUANTILES_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2, DoublePointer arg3, DoublePointer arg4, @Const MKL_INT arg5 );
public static native int VSLDSSEDITQUANTILES_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2, DoubleBuffer arg3, DoubleBuffer arg4, @Const MKL_INT arg5 );
public static native int VSLDSSEDITQUANTILES_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const double[] arg2, double[] arg3, double[] arg4, @Const MKL_INT arg5 );

public static native int vslsSSEditQuantiles(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2, FloatPointer arg3, FloatPointer arg4, @Const MKL_INT arg5 );
public static native int vslsSSEditQuantiles(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2, FloatBuffer arg3, FloatBuffer arg4, @Const MKL_INT arg5 );
public static native int vslsSSEditQuantiles(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const float[] arg2, float[] arg3, float[] arg4, @Const MKL_INT arg5 );
public static native int vslssseditquantiles_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2, FloatPointer arg3, FloatPointer arg4, @Const MKL_INT arg5 );
public static native int vslssseditquantiles_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2, FloatBuffer arg3, FloatBuffer arg4, @Const MKL_INT arg5 );
public static native int vslssseditquantiles_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const float[] arg2, float[] arg3, float[] arg4, @Const MKL_INT arg5 );
public static native int VSLSSSEDITQUANTILES_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2, FloatPointer arg3, FloatPointer arg4, @Const MKL_INT arg5 );
public static native int VSLSSSEDITQUANTILES_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2, FloatBuffer arg3, FloatBuffer arg4, @Const MKL_INT arg5 );
public static native int VSLSSSEDITQUANTILES_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const float[] arg2, float[] arg3, float[] arg4, @Const MKL_INT arg5 );


/*
// Editors to modify stream data quantiles related parameters
*/
public static native int vsldSSEditStreamQuantiles(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2, DoublePointer arg3, @Const MKL_INT arg4, @Const DoublePointer arg5 );
public static native int vsldSSEditStreamQuantiles(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2, DoubleBuffer arg3, @Const MKL_INT arg4, @Const DoubleBuffer arg5 );
public static native int vsldSSEditStreamQuantiles(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const double[] arg2, double[] arg3, @Const MKL_INT arg4, @Const double[] arg5 );
public static native int vsldsseditstreamquantiles_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2, DoublePointer arg3, @Const MKL_INT arg4, @Const DoublePointer arg5 );
public static native int vsldsseditstreamquantiles_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2, DoubleBuffer arg3, @Const MKL_INT arg4, @Const DoubleBuffer arg5 );
public static native int vsldsseditstreamquantiles_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const double[] arg2, double[] arg3, @Const MKL_INT arg4, @Const double[] arg5 );
public static native int VSLDSSEDITSTREAMQUANTILES_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2, DoublePointer arg3, @Const MKL_INT arg4, @Const DoublePointer arg5 );
public static native int VSLDSSEDITSTREAMQUANTILES_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2, DoubleBuffer arg3, @Const MKL_INT arg4, @Const DoubleBuffer arg5 );
public static native int VSLDSSEDITSTREAMQUANTILES_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const double[] arg2, double[] arg3, @Const MKL_INT arg4, @Const double[] arg5 );

public static native int vslsSSEditStreamQuantiles(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2, FloatPointer arg3, @Const MKL_INT arg4, @Const FloatPointer arg5 );
public static native int vslsSSEditStreamQuantiles(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2, FloatBuffer arg3, @Const MKL_INT arg4, @Const FloatBuffer arg5 );
public static native int vslsSSEditStreamQuantiles(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const float[] arg2, float[] arg3, @Const MKL_INT arg4, @Const float[] arg5 );
public static native int vslssseditstreamquantiles_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2, FloatPointer arg3, @Const MKL_INT arg4, @Const FloatPointer arg5 );
public static native int vslssseditstreamquantiles_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2, FloatBuffer arg3, @Const MKL_INT arg4, @Const FloatBuffer arg5 );
public static native int vslssseditstreamquantiles_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const float[] arg2, float[] arg3, @Const MKL_INT arg4, @Const float[] arg5 );
public static native int VSLSSSEDITSTREAMQUANTILES_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2, FloatPointer arg3, @Const MKL_INT arg4, @Const FloatPointer arg5 );
public static native int VSLSSSEDITSTREAMQUANTILES_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2, FloatBuffer arg3, @Const MKL_INT arg4, @Const FloatBuffer arg5 );
public static native int VSLSSSEDITSTREAMQUANTILES_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const float[] arg2, float[] arg3, @Const MKL_INT arg4, @Const float[] arg5 );

/*
// Editors to modify pooled/group variance-covariance matrix related parameters
*/
public static native int vsldSSEditPooledCovariance(VSLSSTaskPtr arg0, @Const MKL_INT arg1, DoublePointer arg2, DoublePointer arg3, @Const MKL_INT arg4, DoublePointer arg5, DoublePointer arg6 );
public static native int vsldSSEditPooledCovariance(VSLSSTaskPtr arg0, @Const MKL_INT arg1, DoubleBuffer arg2, DoubleBuffer arg3, @Const MKL_INT arg4, DoubleBuffer arg5, DoubleBuffer arg6 );
public static native int vsldSSEditPooledCovariance(VSLSSTaskPtr arg0, @Const MKL_INT arg1, double[] arg2, double[] arg3, @Const MKL_INT arg4, double[] arg5, double[] arg6 );
public static native int vsldsseditpooledcovariance_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, DoublePointer arg2, DoublePointer arg3, @Const MKL_INT arg4, DoublePointer arg5, DoublePointer arg6 );
public static native int vsldsseditpooledcovariance_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, DoubleBuffer arg2, DoubleBuffer arg3, @Const MKL_INT arg4, DoubleBuffer arg5, DoubleBuffer arg6 );
public static native int vsldsseditpooledcovariance_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, double[] arg2, double[] arg3, @Const MKL_INT arg4, double[] arg5, double[] arg6 );
public static native int VSLDSSEDITPOOLEDCOVARIANCE_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, DoublePointer arg2, DoublePointer arg3, @Const MKL_INT arg4, DoublePointer arg5, DoublePointer arg6 );
public static native int VSLDSSEDITPOOLEDCOVARIANCE_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, DoubleBuffer arg2, DoubleBuffer arg3, @Const MKL_INT arg4, DoubleBuffer arg5, DoubleBuffer arg6 );
public static native int VSLDSSEDITPOOLEDCOVARIANCE_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, double[] arg2, double[] arg3, @Const MKL_INT arg4, double[] arg5, double[] arg6 );

public static native int vslsSSEditPooledCovariance(VSLSSTaskPtr arg0, @Const MKL_INT arg1, FloatPointer arg2, FloatPointer arg3, @Const MKL_INT arg4, FloatPointer arg5, FloatPointer arg6 );
public static native int vslsSSEditPooledCovariance(VSLSSTaskPtr arg0, @Const MKL_INT arg1, FloatBuffer arg2, FloatBuffer arg3, @Const MKL_INT arg4, FloatBuffer arg5, FloatBuffer arg6 );
public static native int vslsSSEditPooledCovariance(VSLSSTaskPtr arg0, @Const MKL_INT arg1, float[] arg2, float[] arg3, @Const MKL_INT arg4, float[] arg5, float[] arg6 );
public static native int vslssseditpooledcovariance_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, FloatPointer arg2, FloatPointer arg3, @Const MKL_INT arg4, FloatPointer arg5, FloatPointer arg6 );
public static native int vslssseditpooledcovariance_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, FloatBuffer arg2, FloatBuffer arg3, @Const MKL_INT arg4, FloatBuffer arg5, FloatBuffer arg6 );
public static native int vslssseditpooledcovariance_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, float[] arg2, float[] arg3, @Const MKL_INT arg4, float[] arg5, float[] arg6 );
public static native int VSLSSSEDITPOOLEDCOVARIANCE_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, FloatPointer arg2, FloatPointer arg3, @Const MKL_INT arg4, FloatPointer arg5, FloatPointer arg6 );
public static native int VSLSSSEDITPOOLEDCOVARIANCE_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, FloatBuffer arg2, FloatBuffer arg3, @Const MKL_INT arg4, FloatBuffer arg5, FloatBuffer arg6 );
public static native int VSLSSSEDITPOOLEDCOVARIANCE_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, float[] arg2, float[] arg3, @Const MKL_INT arg4, float[] arg5, float[] arg6 );


/*
// Editors to modify robust variance-covariance matrix related parameters
*/
public static native int vsldSSEditRobustCovariance(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2,  @Const DoublePointer arg3, DoublePointer arg4, DoublePointer arg5 );
public static native int vsldSSEditRobustCovariance(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2,  @Const DoubleBuffer arg3, DoubleBuffer arg4, DoubleBuffer arg5 );
public static native int vsldSSEditRobustCovariance(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2,  @Const double[] arg3, double[] arg4, double[] arg5 );
public static native int vsldsseditrobustcovariance_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2,  @Const DoublePointer arg3, DoublePointer arg4, DoublePointer arg5 );
public static native int vsldsseditrobustcovariance_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2,  @Const DoubleBuffer arg3, DoubleBuffer arg4, DoubleBuffer arg5 );
public static native int vsldsseditrobustcovariance_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2,  @Const double[] arg3, double[] arg4, double[] arg5 );
public static native int VSLDSSEDITROBUSTCOVARIANCE_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2,  @Const DoublePointer arg3, DoublePointer arg4, DoublePointer arg5 );
public static native int VSLDSSEDITROBUSTCOVARIANCE_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2,  @Const DoubleBuffer arg3, DoubleBuffer arg4, DoubleBuffer arg5 );
public static native int VSLDSSEDITROBUSTCOVARIANCE_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2,  @Const double[] arg3, double[] arg4, double[] arg5 );

public static native int vslsSSEditRobustCovariance(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2,  @Const FloatPointer arg3, FloatPointer arg4, FloatPointer arg5 );
public static native int vslsSSEditRobustCovariance(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2,  @Const FloatBuffer arg3, FloatBuffer arg4, FloatBuffer arg5 );
public static native int vslsSSEditRobustCovariance(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2,  @Const float[] arg3, float[] arg4, float[] arg5 );
public static native int vslssseditrobustcovariance_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2,  @Const FloatPointer arg3, FloatPointer arg4, FloatPointer arg5 );
public static native int vslssseditrobustcovariance_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2,  @Const FloatBuffer arg3, FloatBuffer arg4, FloatBuffer arg5 );
public static native int vslssseditrobustcovariance_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2,  @Const float[] arg3, float[] arg4, float[] arg5 );
public static native int VSLSSSEDITROBUSTCOVARIANCE_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2,  @Const FloatPointer arg3, FloatPointer arg4, FloatPointer arg5 );
public static native int VSLSSSEDITROBUSTCOVARIANCE_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2,  @Const FloatBuffer arg3, FloatBuffer arg4, FloatBuffer arg5 );
public static native int VSLSSSEDITROBUSTCOVARIANCE_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2,  @Const float[] arg3, float[] arg4, float[] arg5 );


/*
// Editors to modify outliers detection parameters
*/
public static native int vsldSSEditOutliersDetection(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2, DoublePointer arg3 );
public static native int vsldSSEditOutliersDetection(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2, DoubleBuffer arg3 );
public static native int vsldSSEditOutliersDetection(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const double[] arg2, double[] arg3 );
public static native int vsldsseditoutliersdetection_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2, DoublePointer arg3 );
public static native int vsldsseditoutliersdetection_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2, DoubleBuffer arg3 );
public static native int vsldsseditoutliersdetection_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const double[] arg2, double[] arg3 );
public static native int VSLDSSEDITOUTLIERSDETECTION_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2, DoublePointer arg3 );
public static native int VSLDSSEDITOUTLIERSDETECTION_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2, DoubleBuffer arg3 );
public static native int VSLDSSEDITOUTLIERSDETECTION_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const double[] arg2, double[] arg3 );

public static native int vslsSSEditOutliersDetection(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2, FloatPointer arg3 );
public static native int vslsSSEditOutliersDetection(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2, FloatBuffer arg3 );
public static native int vslsSSEditOutliersDetection(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const float[] arg2, float[] arg3 );
public static native int vslssseditoutliersdetection_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2, FloatPointer arg3 );
public static native int vslssseditoutliersdetection_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2, FloatBuffer arg3 );
public static native int vslssseditoutliersdetection_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const float[] arg2, float[] arg3 );
public static native int VSLSSSEDITOUTLIERSDETECTION_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2, FloatPointer arg3 );
public static native int VSLSSSEDITOUTLIERSDETECTION_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2, FloatBuffer arg3 );
public static native int VSLSSSEDITOUTLIERSDETECTION_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const float[] arg2, float[] arg3 );

/*
// Editors to modify missing values support parameters
*/
public static native int vsldSSEditMissingValues(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2, @Const MKL_INT arg3, @Const DoublePointer arg4, @Const MKL_INT arg5, @Const DoublePointer arg6, @Const MKL_INT arg7, DoublePointer arg8, @Const MKL_INT arg9, DoublePointer arg10 );
public static native int vsldSSEditMissingValues(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2, @Const MKL_INT arg3, @Const DoubleBuffer arg4, @Const MKL_INT arg5, @Const DoubleBuffer arg6, @Const MKL_INT arg7, DoubleBuffer arg8, @Const MKL_INT arg9, DoubleBuffer arg10 );
public static native int vsldSSEditMissingValues(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const double[] arg2, @Const MKL_INT arg3, @Const double[] arg4, @Const MKL_INT arg5, @Const double[] arg6, @Const MKL_INT arg7, double[] arg8, @Const MKL_INT arg9, double[] arg10 );
public static native int vsldsseditmissingvalues_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2, @Const MKL_INT arg3, @Const DoublePointer arg4, @Const MKL_INT arg5, @Const DoublePointer arg6, @Const MKL_INT arg7, DoublePointer arg8, @Const MKL_INT arg9, DoublePointer arg10 );
public static native int vsldsseditmissingvalues_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2, @Const MKL_INT arg3, @Const DoubleBuffer arg4, @Const MKL_INT arg5, @Const DoubleBuffer arg6, @Const MKL_INT arg7, DoubleBuffer arg8, @Const MKL_INT arg9, DoubleBuffer arg10 );
public static native int vsldsseditmissingvalues_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const double[] arg2, @Const MKL_INT arg3, @Const double[] arg4, @Const MKL_INT arg5, @Const double[] arg6, @Const MKL_INT arg7, double[] arg8, @Const MKL_INT arg9, double[] arg10 );
public static native int VSLDSSEDITMISSINGVALUES_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2, @Const MKL_INT arg3, @Const DoublePointer arg4, @Const MKL_INT arg5, @Const DoublePointer arg6, @Const MKL_INT arg7, DoublePointer arg8, @Const MKL_INT arg9, DoublePointer arg10 );
public static native int VSLDSSEDITMISSINGVALUES_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2, @Const MKL_INT arg3, @Const DoubleBuffer arg4, @Const MKL_INT arg5, @Const DoubleBuffer arg6, @Const MKL_INT arg7, DoubleBuffer arg8, @Const MKL_INT arg9, DoubleBuffer arg10 );
public static native int VSLDSSEDITMISSINGVALUES_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const double[] arg2, @Const MKL_INT arg3, @Const double[] arg4, @Const MKL_INT arg5, @Const double[] arg6, @Const MKL_INT arg7, double[] arg8, @Const MKL_INT arg9, double[] arg10 );

public static native int vslsSSEditMissingValues(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2, @Const MKL_INT arg3, @Const FloatPointer arg4, @Const MKL_INT arg5, @Const FloatPointer arg6, @Const MKL_INT arg7, FloatPointer arg8, @Const MKL_INT arg9, FloatPointer arg10 );
public static native int vslsSSEditMissingValues(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2, @Const MKL_INT arg3, @Const FloatBuffer arg4, @Const MKL_INT arg5, @Const FloatBuffer arg6, @Const MKL_INT arg7, FloatBuffer arg8, @Const MKL_INT arg9, FloatBuffer arg10 );
public static native int vslsSSEditMissingValues(VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const float[] arg2, @Const MKL_INT arg3, @Const float[] arg4, @Const MKL_INT arg5, @Const float[] arg6, @Const MKL_INT arg7, float[] arg8, @Const MKL_INT arg9, float[] arg10 );
public static native int vslssseditmissingvalues_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2, @Const MKL_INT arg3, @Const FloatPointer arg4, @Const MKL_INT arg5, @Const FloatPointer arg6, @Const MKL_INT arg7, FloatPointer arg8, @Const MKL_INT arg9, FloatPointer arg10 );
public static native int vslssseditmissingvalues_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2, @Const MKL_INT arg3, @Const FloatBuffer arg4, @Const MKL_INT arg5, @Const FloatBuffer arg6, @Const MKL_INT arg7, FloatBuffer arg8, @Const MKL_INT arg9, FloatBuffer arg10 );
public static native int vslssseditmissingvalues_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const float[] arg2, @Const MKL_INT arg3, @Const float[] arg4, @Const MKL_INT arg5, @Const float[] arg6, @Const MKL_INT arg7, float[] arg8, @Const MKL_INT arg9, float[] arg10 );
public static native int VSLSSSEDITMISSINGVALUES_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2, @Const MKL_INT arg3, @Const FloatPointer arg4, @Const MKL_INT arg5, @Const FloatPointer arg6, @Const MKL_INT arg7, FloatPointer arg8, @Const MKL_INT arg9, FloatPointer arg10 );
public static native int VSLSSSEDITMISSINGVALUES_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2, @Const MKL_INT arg3, @Const FloatBuffer arg4, @Const MKL_INT arg5, @Const FloatBuffer arg6, @Const MKL_INT arg7, FloatBuffer arg8, @Const MKL_INT arg9, FloatBuffer arg10 );
public static native int VSLSSSEDITMISSINGVALUES_(@ByPtrPtr VSLSSTaskPtr arg0, @Const MKL_INT arg1, @Const float[] arg2, @Const MKL_INT arg3, @Const float[] arg4, @Const MKL_INT arg5, @Const float[] arg6, @Const MKL_INT arg7, float[] arg8, @Const MKL_INT arg9, float[] arg10 );

/*
// Editors to modify matrixparametrization parameters
*/
public static native int vsldSSEditCorParameterization(VSLSSTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const MKL_INT arg4 );
public static native int vsldSSEditCorParameterization(VSLSSTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const MKL_INT arg4 );
public static native int vsldSSEditCorParameterization(VSLSSTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, double[] arg3, @Const MKL_INT arg4 );
public static native int vsldsseditcorparameterization_(@ByPtrPtr VSLSSTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const MKL_INT arg4 );
public static native int vsldsseditcorparameterization_(@ByPtrPtr VSLSSTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const MKL_INT arg4 );
public static native int vsldsseditcorparameterization_(@ByPtrPtr VSLSSTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, double[] arg3, @Const MKL_INT arg4 );
public static native int VSLDSSEDITCORPARAMETERIZATION_(@ByPtrPtr VSLSSTaskPtr arg0, @Const DoublePointer arg1, @Const MKL_INT arg2, DoublePointer arg3, @Const MKL_INT arg4 );
public static native int VSLDSSEDITCORPARAMETERIZATION_(@ByPtrPtr VSLSSTaskPtr arg0, @Const DoubleBuffer arg1, @Const MKL_INT arg2, DoubleBuffer arg3, @Const MKL_INT arg4 );
public static native int VSLDSSEDITCORPARAMETERIZATION_(@ByPtrPtr VSLSSTaskPtr arg0, @Const double[] arg1, @Const MKL_INT arg2, double[] arg3, @Const MKL_INT arg4 );

public static native int vslsSSEditCorParameterization(VSLSSTaskPtr arg0, @Const FloatPointer arg1, @Const MKL_INT arg2, FloatPointer arg3, @Const MKL_INT arg4 );
public static native int vslsSSEditCorParameterization(VSLSSTaskPtr arg0, @Const FloatBuffer arg1, @Const MKL_INT arg2, FloatBuffer arg3, @Const MKL_INT arg4 );
public static native int vslsSSEditCorParameterization(VSLSSTaskPtr arg0, @Const float[] arg1, @Const MKL_INT arg2, float[] arg3, @Const MKL_INT arg4 );
public static native int vslssseditcorparameterization_(@ByPtrPtr VSLSSTaskPtr arg0, @Const FloatPointer arg1, @Const MKL_INT arg2, FloatPointer arg3, @Const MKL_INT arg4 );
public static native int vslssseditcorparameterization_(@ByPtrPtr VSLSSTaskPtr arg0, @Const FloatBuffer arg1, @Const MKL_INT arg2, FloatBuffer arg3, @Const MKL_INT arg4 );
public static native int vslssseditcorparameterization_(@ByPtrPtr VSLSSTaskPtr arg0, @Const float[] arg1, @Const MKL_INT arg2, float[] arg3, @Const MKL_INT arg4 );
public static native int VSLSSSEDITCORPARAMETERIZATION_(@ByPtrPtr VSLSSTaskPtr arg0, @Const FloatPointer arg1, @Const MKL_INT arg2, FloatPointer arg3, @Const MKL_INT arg4 );
public static native int VSLSSSEDITCORPARAMETERIZATION_(@ByPtrPtr VSLSSTaskPtr arg0, @Const FloatBuffer arg1, @Const MKL_INT arg2, FloatBuffer arg3, @Const MKL_INT arg4 );
public static native int VSLSSSEDITCORPARAMETERIZATION_(@ByPtrPtr VSLSSTaskPtr arg0, @Const float[] arg1, @Const MKL_INT arg2, float[] arg3, @Const MKL_INT arg4 );


/*
// Compute routines
*/
public static native int vsldSSCompute(VSLSSTaskPtr arg0, @Cast("const unsigned") int MKL_INT64, @Const @ByVal MKL_INT arg2  );
public static native int vsldsscompute_(@ByPtrPtr VSLSSTaskPtr arg0, @Cast("const unsigned*") IntPointer arg1, @Const MKL_INT arg2 );
public static native int vsldsscompute_(@ByPtrPtr VSLSSTaskPtr arg0, @Cast("const unsigned*") IntBuffer arg1, @Const MKL_INT arg2 );
public static native int vsldsscompute_(@ByPtrPtr VSLSSTaskPtr arg0, @Cast("const unsigned*") int[] arg1, @Const MKL_INT arg2 );
public static native int VSLDSSCOMPUTE_(@ByPtrPtr VSLSSTaskPtr arg0, @Cast("const unsigned*") IntPointer arg1, @Const MKL_INT arg2 );
public static native int VSLDSSCOMPUTE_(@ByPtrPtr VSLSSTaskPtr arg0, @Cast("const unsigned*") IntBuffer arg1, @Const MKL_INT arg2 );
public static native int VSLDSSCOMPUTE_(@ByPtrPtr VSLSSTaskPtr arg0, @Cast("const unsigned*") int[] arg1, @Const MKL_INT arg2 );

public static native int vslsSSCompute(VSLSSTaskPtr arg0, @Cast("const unsigned") int MKL_INT64, @Const @ByVal MKL_INT arg2  );
public static native int vslssscompute_(@ByPtrPtr VSLSSTaskPtr arg0, @Cast("const unsigned*") IntPointer arg1, @Const MKL_INT arg2 );
public static native int vslssscompute_(@ByPtrPtr VSLSSTaskPtr arg0, @Cast("const unsigned*") IntBuffer arg1, @Const MKL_INT arg2 );
public static native int vslssscompute_(@ByPtrPtr VSLSSTaskPtr arg0, @Cast("const unsigned*") int[] arg1, @Const MKL_INT arg2 );
public static native int VSLSSSCOMPUTE_(@ByPtrPtr VSLSSTaskPtr arg0, @Cast("const unsigned*") IntPointer arg1, @Const MKL_INT arg2 );
public static native int VSLSSSCOMPUTE_(@ByPtrPtr VSLSSTaskPtr arg0, @Cast("const unsigned*") IntBuffer arg1, @Const MKL_INT arg2 );
public static native int VSLSSSCOMPUTE_(@ByPtrPtr VSLSSTaskPtr arg0, @Cast("const unsigned*") int[] arg1, @Const MKL_INT arg2 );


/*
// Task destructor
*/
public static native int vslSSDeleteTask(@ByPtrPtr VSLSSTaskPtr arg0 );
public static native int vslssdeletetask_(@ByPtrPtr VSLSSTaskPtr arg0 );
public static native int VSLSSDELETETASK_(@ByPtrPtr VSLSSTaskPtr arg0 );

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif /* __MKL_VSL_FUNCTIONS_H__ */


// Parsed from mkl_df.h

/* file: mkl_df.h */
/*******************************************************************************
* Copyright 2006-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
//++
//  The main DF header file.
//--
*/

// #ifndef __MKL_DF_H__
// #define __MKL_DF_H__

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #include "mkl_df_defines.h"
// #include "mkl_df_functions.h"
// #include "mkl_df_types.h"

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif /* __MKL_DF_H__ */


// Parsed from mkl_df_defines.h

/* file: mkl_df_defines.h */
/*******************************************************************************
* Copyright 2006-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
//++
//  User-level macro definitions
//--
*/



// #ifndef __MKL_DF_DEFINES_H__
// #define __MKL_DF_DEFINES_H__



// #ifdef __cplusplus
// #endif /* __cplusplus */


public static final int DF_STATUS_OK =                       0;

/*
// Common errors (-1..-999)
*/
public static final int DF_ERROR_CPU_NOT_SUPPORTED =         -1;


/*
//++
// DATA FITTING ERROR/WARNING CODES
//--
*/
/*
// Errors (-1000..-1999)
*/
public static final int DF_ERROR_NULL_TASK_DESCRIPTOR =     -1000;
public static final int DF_ERROR_MEM_FAILURE =              -1001;
public static final int DF_ERROR_METHOD_NOT_SUPPORTED =     -1002;
public static final int DF_ERROR_COMP_TYPE_NOT_SUPPORTED =  -1003;
public static final int DF_ERROR_NULL_PTR =                 -1037;

public static final int DF_ERROR_BAD_NX =                   -1004;
public static final int DF_ERROR_BAD_X =                    -1005;
public static final int DF_ERROR_BAD_X_HINT =               -1006;
public static final int DF_ERROR_BAD_NY =                   -1007;
public static final int DF_ERROR_BAD_Y =                    -1008;
public static final int DF_ERROR_BAD_Y_HINT =               -1009;
public static final int DF_ERROR_BAD_SPLINE_ORDER =         -1010;
public static final int DF_ERROR_BAD_SPLINE_TYPE =          -1011;
public static final int DF_ERROR_BAD_IC_TYPE =              -1012;
public static final int DF_ERROR_BAD_IC =                   -1013;
public static final int DF_ERROR_BAD_BC_TYPE =              -1014;
public static final int DF_ERROR_BAD_BC =                   -1015;
public static final int DF_ERROR_BAD_PP_COEFF =             -1016;
public static final int DF_ERROR_BAD_PP_COEFF_HINT =        -1017;
public static final int DF_ERROR_BAD_PERIODIC_VAL =         -1018;
public static final int DF_ERROR_BAD_DATA_ATTR =            -1019;
public static final int DF_ERROR_BAD_DATA_IDX =             -1020;


public static final int DF_ERROR_BAD_NSITE =                -1021;
public static final int DF_ERROR_BAD_SITE =                 -1022;
public static final int DF_ERROR_BAD_SITE_HINT =            -1023;
public static final int DF_ERROR_BAD_NDORDER =              -1024;
public static final int DF_ERROR_BAD_DORDER =               -1025;
public static final int DF_ERROR_BAD_DATA_HINT =            -1026;
public static final int DF_ERROR_BAD_INTERP =               -1027;
public static final int DF_ERROR_BAD_INTERP_HINT =          -1028;
public static final int DF_ERROR_BAD_CELL_IDX =             -1029;
public static final int DF_ERROR_BAD_NLIM =                 -1030;
public static final int DF_ERROR_BAD_LLIM =                 -1031;
public static final int DF_ERROR_BAD_RLIM =                 -1032;
public static final int DF_ERROR_BAD_INTEGR =               -1033;
public static final int DF_ERROR_BAD_INTEGR_HINT =          -1034;
public static final int DF_ERROR_BAD_LOOKUP_INTERP_SITE =   -1035;
public static final int DF_ERROR_BAD_CHECK_FLAG =           -1036;



/*
// Internal errors caused by internal routines of the functions
*/
public static final int VSL_DF_ERROR_INTERNAL_C1 =          -1500;
public static final int VSL_DF_ERROR_INTERNAL_C2 =          -1501;

/*
// User-defined callback status
*/
public static final int DF_STATUS_EXACT_RESULT =             1000;

/*
//++
// MACROS USED IN DATAFITTING EDITORS AND COMPUTE ROUTINES
//--
*/

/*
// Attributes of parameters that can be modified in Data Fitting task
*/
public static final int DF_X =                                    1;
public static final int DF_Y =                                    2;
public static final int DF_IC =                                   3;
public static final int DF_BC =                                   4;
public static final int DF_PP_SCOEFF =                            5;

public static final int DF_NX =                                  14;
public static final int DF_XHINT =                               15;
public static final int DF_NY =                                  16;
public static final int DF_YHINT =                               17;
public static final int DF_SPLINE_ORDER =                        18;
public static final int DF_SPLINE_TYPE =                         19;
public static final int DF_IC_TYPE =                             20;
public static final int DF_BC_TYPE =                             21;
public static final int DF_PP_COEFF_HINT =                       22;
public static final int DF_CHECK_FLAG =                          23;

/*
//++
// SPLINE ORDERS SUPPORTED IN DATA FITTING ROUTINES
//--
*/
public static final int DF_PP_STD =                        0;
public static final int DF_PP_LINEAR =                     2;
public static final int DF_PP_QUADRATIC =                  3;
public static final int DF_PP_CUBIC =                      4;

/*
//++
// SPLINE TYPES SUPPORTED IN DATA FITTING ROUTINES
//--
*/

public static final int DF_PP_DEFAULT =                       0;
public static final int DF_PP_SUBBOTIN =                      1;
public static final int DF_PP_NATURAL =                       2;
public static final int DF_PP_HERMITE =                       3;
public static final int DF_PP_BESSEL =                        4;
public static final int DF_PP_AKIMA =                         5;
public static final int DF_LOOKUP_INTERPOLANT =               6;
public static final int DF_CR_STEPWISE_CONST_INTERPOLANT =    7;
public static final int DF_CL_STEPWISE_CONST_INTERPOLANT =    8;
public static final int DF_PP_HYMAN =                         9;

/*
//++
// TYPES OF BOUNDARY CONDITIONS USED IN SPLINE CONSTRUCTION
//--
*/
public static final int DF_NO_BC =                           0;
public static final int DF_BC_NOT_A_KNOT =                   1;
public static final int DF_BC_FREE_END =                     2;
public static final int DF_BC_1ST_LEFT_DER =                 4;
public static final int DF_BC_1ST_RIGHT_DER =                8;
public static final int DF_BC_2ND_LEFT_DER =                16;
public static final int DF_BC_2ND_RIGHT_DER =               32;
public static final int DF_BC_PERIODIC =                    64;
public static final int DF_BC_Q_VAL =                      128;

/*
//++
// TYPES OF INTERNAL CONDITIONS USED IN SPLINE CONSTRUCTION
//--
*/
public static final int DF_NO_IC =                           0;
public static final int DF_IC_1ST_DER =                      1;
public static final int DF_IC_2ND_DER =                      2;
public static final int DF_IC_Q_KNOT =                       8;



/*
//++
// TYPES OF SUPPORTED HINTS
//--
*/
public static final int DF_NO_HINT =                    0x00000000;
public static final int DF_NON_UNIFORM_PARTITION =      0x00000001;
public static final int DF_QUASI_UNIFORM_PARTITION =    0x00000002;
public static final int DF_UNIFORM_PARTITION =          0x00000004;

public static final int DF_MATRIX_STORAGE_ROWS =        0x00000010;
public static final int DF_MATRIX_STORAGE_COLS =        0x00000020;

public static final int DF_SORTED_DATA =                0x00000040;
public static final int DF_1ST_COORDINATE =             0x00000080;

public static final int DF_MATRIX_STORAGE_FUNCS_SITES_DERS =    DF_MATRIX_STORAGE_ROWS;
public static final int DF_MATRIX_STORAGE_FUNCS_DERS_SITES =    DF_MATRIX_STORAGE_COLS;
public static final int DF_MATRIX_STORAGE_SITES_FUNCS_DERS =    0x00000100;
public static final int DF_MATRIX_STORAGE_SITES_DERS_FUNCS =    0x00000200;

/*
//++
// TYPES OF APRIORI INFORMATION
// ABOUT DATA STRUCTURE
//--
*/
public static final int DF_NO_APRIORI_INFO =             0x00000000;
public static final int DF_APRIORI_MOST_LIKELY_CELL =    0x00000001;



/*
//++
// ESTIMATES TO BE COMPUTED WITH DATA FITTING COMPUTE ROUTINE
//--
*/
public static final int DF_INTERP =           0x00000001;
public static final int DF_CELL =             0x00000002;
public static final int DF_INTERP_USER_CELL = 0x00000004;


/*
//++
// METHODS TO BE USED FOR EVALUATION OF THE SPLINE RELATED ESTIMATES
//--
*/
public static final int DF_METHOD_STD =                             0;
public static final int DF_METHOD_PP =                              1;

/*
//++
// POSSIBLE VALUES FOR DF_CHECK_FLAG
//--
*/
public static final int DF_ENABLE_CHECK_FLAG =     0x00000000;
public static final int DF_DISABLE_CHECK_FLAG =    0x00000001;


/*
//++
// SPLINE FORMATS SUPPORTED IN SPLINE CONSTRUCTION ROUTINE
//--
*/

public static final int DF_PP_SPLINE =                              0;

/*
//++
// VALUES OF FLAG INDICATING WHICH, LEFT OR RIGHT, INTEGRATION LIMITS
// ARE PASSED BY INTEGRATION ROUTINE INTO SEARCH CALLBACK
//--
*/

public static final int DF_INTEGR_SEARCH_CB_LLIM_FLAG =                    0;
public static final int DF_INTEGR_SEARCH_CB_RLIM_FLAG =                    1;

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif /* __MKL_DF_DEFINES_H__ */


// Parsed from mkl_df_types.h

/* file: mkl_df_types.h */
/*******************************************************************************
* Copyright 2006-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
//++
//  This file contains user-level type definitions.
//--
*/

// #ifndef __MKL_DF_TYPES_H__
// #define __MKL_DF_TYPES_H__

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #include "mkl_types.h"

/*
//++
//  TYPEDEFS
//--
*/

/*
//  POINTER TO DATA FITTING STRUCTURE
//  This is a void pointer to hide implementation details.
*/
@Namespace @Name("void") @Opaque public static class DFTaskPtr extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public DFTaskPtr() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DFTaskPtr(Pointer p) { super(p); }
}

/*
//  DATA FITTING SEARCH CALLBACK INTERNAL PARAMETERS STRUCTURE
*/
public static class dfSearchCallBackLibraryParams extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public dfSearchCallBackLibraryParams() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public dfSearchCallBackLibraryParams(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public dfSearchCallBackLibraryParams(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public dfSearchCallBackLibraryParams position(long position) {
        return (dfSearchCallBackLibraryParams)super.position(position);
    }

    public native int limit_type_flag(); public native dfSearchCallBackLibraryParams limit_type_flag(int limit_type_flag);
}

/*
//  DATA FITTING INTERPOLATION CALLBACK INTERNAL PARAMETERS STRUCTURE
*/
public static class dfInterpCallBackLibraryParams extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public dfInterpCallBackLibraryParams() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public dfInterpCallBackLibraryParams(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public dfInterpCallBackLibraryParams(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public dfInterpCallBackLibraryParams position(long position) {
        return (dfInterpCallBackLibraryParams)super.position(position);
    }

    public native int reserved1(); public native dfInterpCallBackLibraryParams reserved1(int reserved1);
}

/*
//  DATA FITTING INTEGRATION CALLBACK INTERNAL PARAMETERS STRUCTURE
*/
public static class dfIntegrCallBackLibraryParams extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public dfIntegrCallBackLibraryParams() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public dfIntegrCallBackLibraryParams(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public dfIntegrCallBackLibraryParams(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public dfIntegrCallBackLibraryParams position(long position) {
        return (dfIntegrCallBackLibraryParams)super.position(position);
    }

    public native int reserved1(); public native dfIntegrCallBackLibraryParams reserved1(int reserved1);
}

/*
//  DATA FITTING CALLBACK FOR SUPPORT OF USER-DEFINED INTERPOLATION AND
//  EXTRAPOLATION
*/
public static class dfsInterpCallBack extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    dfsInterpCallBack(Pointer p) { super(p); }
    protected dfsInterpCallBack() { allocate(); }
    private native void allocate();
    public native int call( MKL_INT64 n, MKL_INT64 cell, FloatPointer site, FloatPointer r, Pointer user_param, dfInterpCallBackLibraryParams library_params );
}
public static class dfdInterpCallBack extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    dfdInterpCallBack(Pointer p) { super(p); }
    protected dfdInterpCallBack() { allocate(); }
    private native void allocate();
    public native int call( MKL_INT64 n, MKL_INT64 cell, DoublePointer site, DoublePointer r, Pointer user_param, dfInterpCallBackLibraryParams library_params );
}

/*
//  DATA FITTING CALLBACK FOR SUPPORT OF USER-DEFINED INTEGRATION
*/
public static class dfsIntegrCallBack extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    dfsIntegrCallBack(Pointer p) { super(p); }
    protected dfsIntegrCallBack() { allocate(); }
    private native void allocate();
    public native int call( MKL_INT64 n, MKL_INT64 lcell, FloatPointer llim, MKL_INT64 rcell, FloatPointer rlim, FloatPointer r, Pointer user_params, dfIntegrCallBackLibraryParams library_params );
}
public static class dfdIntegrCallBack extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    dfdIntegrCallBack(Pointer p) { super(p); }
    protected dfdIntegrCallBack() { allocate(); }
    private native void allocate();
    public native int call( MKL_INT64 n, MKL_INT64 lcell, DoublePointer llim, MKL_INT64 rcell, DoublePointer rlim, DoublePointer r, Pointer user_params, dfIntegrCallBackLibraryParams library_params );
}

/*
//  DATA FITTING CALLBACK FOR SUPPORT OF USER-DEFINED CELL SEARCH
*/
public static class dfsSearchCellsCallBack extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    dfsSearchCellsCallBack(Pointer p) { super(p); }
    protected dfsSearchCellsCallBack() { allocate(); }
    private native void allocate();
    public native int call( MKL_INT64 n, FloatPointer site, MKL_INT64 cell, IntPointer flag, Pointer user_params, dfSearchCallBackLibraryParams library_params );
}
public static class dfdSearchCellsCallBack extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    dfdSearchCellsCallBack(Pointer p) { super(p); }
    protected dfdSearchCellsCallBack() { allocate(); }
    private native void allocate();
    public native int call( MKL_INT64 n, DoublePointer site, MKL_INT64 cell, IntPointer flag, Pointer user_params, dfSearchCallBackLibraryParams library_params );
}

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif /* __MKL_DF_TYPES_H__ */


// Parsed from mkl_df_functions.h

/* file: mkl_df_functions.h */
/*******************************************************************************
* Copyright 2006-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
//++
//  User-level DF function declarations
//--
*/

// #ifndef __MKL_DF_FUNCTIONS_H__
// #define __MKL_DF_FUNCTIONS_H__

// #include "mkl_df_types.h"

// #ifdef __cplusplus
// #endif /* __cplusplus */

/*
//++
//  EXTERNAL API MACROS.
//  Used to construct DF function declaration. Change them if you are going to
//  provide different API for DF functions.
//--
*/

// #if  !defined(_Mkl_Api)
// #define _Mkl_Api(rtype,name,arg)   extern rtype name    arg;
// #endif

// #if  !defined(_mkl_api)
// #define _mkl_api(rtype,name,arg)   extern rtype name##_ arg;
// #endif

// #if  !defined(_MKL_API)
// #define _MKL_API(rtype,name,arg)   extern rtype name##_ arg;
// #endif

/*
//++
//  DF CONSTRUCTOR FUNCTION DECLARATIONS.
//--
*/

/* NewTask1D - 1d task creation/initialization */
public static native int dfsNewTask1D(@ByPtrPtr DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const FloatPointer arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const FloatPointer arg5, @Const @ByVal MKL_INT arg6  );
public static native int dfsNewTask1D(@ByPtrPtr DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const FloatBuffer arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const FloatBuffer arg5, @Const @ByVal MKL_INT arg6  );
public static native int dfsNewTask1D(@ByPtrPtr DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const float[] arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const float[] arg5, @Const @ByVal MKL_INT arg6  );
public static native int dfsnewtask1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const FloatPointer arg5, @Const MKL_INT arg6);
public static native int dfsnewtask1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const FloatBuffer arg5, @Const MKL_INT arg6);
public static native int dfsnewtask1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const float[] arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const float[] arg5, @Const MKL_INT arg6);
public static native int DFSNEWTASK1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const FloatPointer arg5, @Const MKL_INT arg6);
public static native int DFSNEWTASK1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const FloatBuffer arg5, @Const MKL_INT arg6);
public static native int DFSNEWTASK1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const float[] arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const float[] arg5, @Const MKL_INT arg6);

public static native int dfdNewTask1D(@ByPtrPtr DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const DoublePointer arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const DoublePointer arg5, @Const @ByVal MKL_INT arg6  );
public static native int dfdNewTask1D(@ByPtrPtr DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const DoubleBuffer arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const DoubleBuffer arg5, @Const @ByVal MKL_INT arg6  );
public static native int dfdNewTask1D(@ByPtrPtr DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const double[] arg2, @Const @ByVal MKL_INT arg3, @Const @ByVal MKL_INT arg4, @Const double[] arg5, @Const @ByVal MKL_INT arg6  );
public static native int dfdnewtask1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const DoublePointer arg5, @Const MKL_INT arg6);
public static native int dfdnewtask1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const DoubleBuffer arg5, @Const MKL_INT arg6);
public static native int dfdnewtask1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const double[] arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const double[] arg5, @Const MKL_INT arg6);
public static native int DFDNEWTASK1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const DoublePointer arg5, @Const MKL_INT arg6);
public static native int DFDNEWTASK1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const DoubleBuffer arg5, @Const MKL_INT arg6);
public static native int DFDNEWTASK1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const double[] arg2, @Const MKL_INT arg3, @Const MKL_INT arg4, @Const double[] arg5, @Const MKL_INT arg6);

/*
//++
//  DF EDITOR FUNCTION DECLARATIONS.
//--
*/

/* Modifies a pointer to an array held in a Data Fitting task descriptor */
public static native int dfsEditPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const FloatPointer arg2);
public static native int dfsEditPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const FloatBuffer arg2);
public static native int dfsEditPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const float[] arg2);
public static native int dfseditptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2);
public static native int dfseditptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2);
public static native int dfseditptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const float[] arg2);
public static native int DFSEDITPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const FloatPointer arg2);
public static native int DFSEDITPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const FloatBuffer arg2);
public static native int DFSEDITPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const float[] arg2);

public static native int dfdEditPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const DoublePointer arg2);
public static native int dfdEditPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const DoubleBuffer arg2);
public static native int dfdEditPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const double[] arg2);
public static native int dfdeditptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2);
public static native int dfdeditptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2);
public static native int dfdeditptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const double[] arg2);
public static native int DFDEDITPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const DoublePointer arg2);
public static native int DFDEDITPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const DoubleBuffer arg2);
public static native int DFDEDITPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const double[] arg2);

/* Modifies a parameter value in a Data Fitting task descriptor */
public static native int dfiEditVal(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2  );
public static native int dfieditval_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2);
public static native int DFIEDITVAL_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2);

/* Modifies a pointer to the memory representing a coordinate of the data
   stored in matrix format (function or spline coefficients) */
public static native int dfsEditIdxPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const FloatPointer arg3);
public static native int dfsEditIdxPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const FloatBuffer arg3);
public static native int dfsEditIdxPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const float[] arg3);
public static native int dfseditidxptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatPointer arg3);
public static native int dfseditidxptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatBuffer arg3);
public static native int dfseditidxptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const float[] arg3);
public static native int DFSEDITIDXPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatPointer arg3);
public static native int DFSEDITIDXPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatBuffer arg3);
public static native int DFSEDITIDXPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const float[] arg3);

public static native int dfdEditIdxPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const DoublePointer arg3);
public static native int dfdEditIdxPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const DoubleBuffer arg3);
public static native int dfdEditIdxPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const double[] arg3);
public static native int dfdeditidxptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoublePointer arg3);
public static native int dfdeditidxptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3);
public static native int dfdeditidxptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const double[] arg3);
public static native int DFDEDITIDXPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoublePointer arg3);
public static native int DFDEDITIDXPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3);
public static native int DFDEDITIDXPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const double[] arg3);

/* Modifies parameters of Piece-wise Polynomial (PP) spline */
public static native int dfsEditPPSpline1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const FloatPointer arg4, @Const @ByVal MKL_INT arg5, @Const FloatPointer arg6, @Const FloatPointer arg7, @Const @ByVal MKL_INT arg8  );
public static native int dfsEditPPSpline1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const FloatBuffer arg4, @Const @ByVal MKL_INT arg5, @Const FloatBuffer arg6, @Const FloatBuffer arg7, @Const @ByVal MKL_INT arg8  );
public static native int dfsEditPPSpline1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const float[] arg4, @Const @ByVal MKL_INT arg5, @Const float[] arg6, @Const float[] arg7, @Const @ByVal MKL_INT arg8  );
public static native int dfseditppspline1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const FloatPointer arg4, @Const MKL_INT arg5, @Const FloatPointer arg6, @Const FloatPointer arg7, @Const MKL_INT arg8);
public static native int dfseditppspline1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const FloatBuffer arg4, @Const MKL_INT arg5, @Const FloatBuffer arg6, @Const FloatBuffer arg7, @Const MKL_INT arg8);
public static native int dfseditppspline1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const float[] arg4, @Const MKL_INT arg5, @Const float[] arg6, @Const float[] arg7, @Const MKL_INT arg8);
public static native int DFSEDITPPSPLINE1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const FloatPointer arg4, @Const MKL_INT arg5, @Const FloatPointer arg6, @Const FloatPointer arg7, @Const MKL_INT arg8);
public static native int DFSEDITPPSPLINE1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const FloatBuffer arg4, @Const MKL_INT arg5, @Const FloatBuffer arg6, @Const FloatBuffer arg7, @Const MKL_INT arg8);
public static native int DFSEDITPPSPLINE1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const float[] arg4, @Const MKL_INT arg5, @Const float[] arg6, @Const float[] arg7, @Const MKL_INT arg8);

public static native int dfdEditPPSpline1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const DoublePointer arg4, @Const @ByVal MKL_INT arg5, @Const DoublePointer arg6, @Const DoublePointer arg7, @Const @ByVal MKL_INT arg8  );
public static native int dfdEditPPSpline1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const DoubleBuffer arg4, @Const @ByVal MKL_INT arg5, @Const DoubleBuffer arg6, @Const DoubleBuffer arg7, @Const @ByVal MKL_INT arg8  );
public static native int dfdEditPPSpline1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const double[] arg4, @Const @ByVal MKL_INT arg5, @Const double[] arg6, @Const double[] arg7, @Const @ByVal MKL_INT arg8  );
public static native int dfdeditppspline1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const DoublePointer arg4, @Const MKL_INT arg5, @Const DoublePointer arg6, @Const DoublePointer arg7, @Const MKL_INT arg8);
public static native int dfdeditppspline1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const DoubleBuffer arg4, @Const MKL_INT arg5, @Const DoubleBuffer arg6, @Const DoubleBuffer arg7, @Const MKL_INT arg8);
public static native int dfdeditppspline1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const double[] arg4, @Const MKL_INT arg5, @Const double[] arg6, @Const double[] arg7, @Const MKL_INT arg8);
public static native int DFDEDITPPSPLINE1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const DoublePointer arg4, @Const MKL_INT arg5, @Const DoublePointer arg6, @Const DoublePointer arg7, @Const MKL_INT arg8);
public static native int DFDEDITPPSPLINE1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const DoubleBuffer arg4, @Const MKL_INT arg5, @Const DoubleBuffer arg6, @Const DoubleBuffer arg7, @Const MKL_INT arg8);
public static native int DFDEDITPPSPLINE1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const double[] arg4, @Const MKL_INT arg5, @Const double[] arg6, @Const double[] arg7, @Const MKL_INT arg8);

/*
//++
//  DF TASK QUERYING FUNCTION DECLARATIONS.
//--
*/

/* Reads a pointer to an array held in a Data Fitting task descriptor */
public static native int dfsQueryPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Cast("float**") PointerPointer arg2);
public static native int dfsQueryPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @ByPtrPtr FloatPointer arg2);
public static native int dfsQueryPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @ByPtrPtr FloatBuffer arg2);
public static native int dfsQueryPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @ByPtrPtr float[] arg2);
public static native int dfsqueryptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Cast("float**") PointerPointer arg2);
public static native int dfsqueryptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @ByPtrPtr FloatPointer arg2);
public static native int dfsqueryptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @ByPtrPtr FloatBuffer arg2);
public static native int dfsqueryptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @ByPtrPtr float[] arg2);
public static native int DFSQUERYPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Cast("float**") PointerPointer arg2);
public static native int DFSQUERYPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @ByPtrPtr FloatPointer arg2);
public static native int DFSQUERYPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @ByPtrPtr FloatBuffer arg2);
public static native int DFSQUERYPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @ByPtrPtr float[] arg2);

public static native int dfdQueryPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Cast("double**") PointerPointer arg2);
public static native int dfdQueryPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @ByPtrPtr DoublePointer arg2);
public static native int dfdQueryPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @ByPtrPtr DoubleBuffer arg2);
public static native int dfdQueryPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @ByPtrPtr double[] arg2);
public static native int dfdqueryptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Cast("double**") PointerPointer arg2);
public static native int dfdqueryptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @ByPtrPtr DoublePointer arg2);
public static native int dfdqueryptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @ByPtrPtr DoubleBuffer arg2);
public static native int dfdqueryptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @ByPtrPtr double[] arg2);
public static native int DFDQUERYPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Cast("double**") PointerPointer arg2);
public static native int DFDQUERYPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @ByPtrPtr DoublePointer arg2);
public static native int DFDQUERYPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @ByPtrPtr DoubleBuffer arg2);
public static native int DFDQUERYPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @ByPtrPtr double[] arg2);

/* Reads a parameter value in a Data Fitting task descriptor */
public static native int dfiQueryVal(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, MKL_INT arg2);
public static native int dfiqueryval_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, MKL_INT arg2);
public static native int DFIQUERYVAL_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, MKL_INT arg2);

/* Reads a pointer to the memory representing a coordinate of the data
   stored in matrix format (function or spline coefficients) */
public static native int dfsQueryIdxPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Cast("float**") PointerPointer arg3);
public static native int dfsQueryIdxPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @ByPtrPtr FloatPointer arg3);
public static native int dfsQueryIdxPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @ByPtrPtr FloatBuffer arg3);
public static native int dfsQueryIdxPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @ByPtrPtr float[] arg3);
public static native int dfsqueryidxptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Cast("float**") PointerPointer arg3);
public static native int dfsqueryidxptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @ByPtrPtr FloatPointer arg3);
public static native int dfsqueryidxptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @ByPtrPtr FloatBuffer arg3);
public static native int dfsqueryidxptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @ByPtrPtr float[] arg3);
public static native int DFSQUERYIDXPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Cast("float**") PointerPointer arg3);
public static native int DFSQUERYIDXPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @ByPtrPtr FloatPointer arg3);
public static native int DFSQUERYIDXPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @ByPtrPtr FloatBuffer arg3);
public static native int DFSQUERYIDXPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @ByPtrPtr float[] arg3);

public static native int dfdQueryIdxPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Cast("double**") PointerPointer arg3);
public static native int dfdQueryIdxPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @ByPtrPtr DoublePointer arg3);
public static native int dfdQueryIdxPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @ByPtrPtr DoubleBuffer arg3);
public static native int dfdQueryIdxPtr(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @ByPtrPtr double[] arg3);
public static native int dfdqueryidxptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Cast("double**") PointerPointer arg3);
public static native int dfdqueryidxptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @ByPtrPtr DoublePointer arg3);
public static native int dfdqueryidxptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @ByPtrPtr DoubleBuffer arg3);
public static native int dfdqueryidxptr_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @ByPtrPtr double[] arg3);
public static native int DFDQUERYIDXPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Cast("double**") PointerPointer arg3);
public static native int DFDQUERYIDXPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @ByPtrPtr DoublePointer arg3);
public static native int DFDQUERYIDXPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @ByPtrPtr DoubleBuffer arg3);
public static native int DFDQUERYIDXPTR_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @ByPtrPtr double[] arg3);


/*
//++
//  DF COMPUTE FUNCTION DECLARATIONS.
//--
*/
/* Spline coefficients constructor */
public static native int dfsConstruct1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2  );
public static native int dfsconstruct1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2);
public static native int DFSCONSTRUCT1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2);

public static native int dfdConstruct1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2  );
public static native int dfdconstruct1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2);
public static native int DFDCONSTRUCT1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2);

/* Spline-based computations: search, interpolation and integration with call back support */
public static native int dfsInterpolateEx1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const FloatPointer arg4, @Const @ByVal MKL_INT arg5, @Const @ByVal MKL_INT arg6, @Const MKL_INT arg7, @Const FloatPointer arg8, FloatPointer arg9, @Const @ByVal MKL_INT arg10, MKL_INT arg11, dfsInterpCallBack arg12, @Const Pointer arg13, dfsInterpCallBack arg14, @Const Pointer arg15, dfsInterpCallBack arg16, @Const Pointer arg17, dfsSearchCellsCallBack arg18, @Const Pointer arg19);
public static native int dfsInterpolateEx1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const FloatBuffer arg4, @Const @ByVal MKL_INT arg5, @Const @ByVal MKL_INT arg6, @Const MKL_INT arg7, @Const FloatBuffer arg8, FloatBuffer arg9, @Const @ByVal MKL_INT arg10, MKL_INT arg11, dfsInterpCallBack arg12, @Const Pointer arg13, dfsInterpCallBack arg14, @Const Pointer arg15, dfsInterpCallBack arg16, @Const Pointer arg17, dfsSearchCellsCallBack arg18, @Const Pointer arg19);
public static native int dfsInterpolateEx1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const float[] arg4, @Const @ByVal MKL_INT arg5, @Const @ByVal MKL_INT arg6, @Const MKL_INT arg7, @Const float[] arg8, float[] arg9, @Const @ByVal MKL_INT arg10, MKL_INT arg11, dfsInterpCallBack arg12, @Const Pointer arg13, dfsInterpCallBack arg14, @Const Pointer arg15, dfsInterpCallBack arg16, @Const Pointer arg17, dfsSearchCellsCallBack arg18, @Const Pointer arg19);
public static native int dfsinterpolateex1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const FloatPointer arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const FloatPointer arg8, FloatPointer arg9, @Const MKL_INT arg10, MKL_INT arg11, dfsInterpCallBack arg12, @Const Pointer arg13, dfsInterpCallBack arg14, @Const Pointer arg15, dfsInterpCallBack arg16, @Const Pointer arg17, dfsSearchCellsCallBack arg18, @Const Pointer arg19);
public static native int dfsinterpolateex1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const FloatBuffer arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const FloatBuffer arg8, FloatBuffer arg9, @Const MKL_INT arg10, MKL_INT arg11, dfsInterpCallBack arg12, @Const Pointer arg13, dfsInterpCallBack arg14, @Const Pointer arg15, dfsInterpCallBack arg16, @Const Pointer arg17, dfsSearchCellsCallBack arg18, @Const Pointer arg19);
public static native int dfsinterpolateex1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const float[] arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const float[] arg8, float[] arg9, @Const MKL_INT arg10, MKL_INT arg11, dfsInterpCallBack arg12, @Const Pointer arg13, dfsInterpCallBack arg14, @Const Pointer arg15, dfsInterpCallBack arg16, @Const Pointer arg17, dfsSearchCellsCallBack arg18, @Const Pointer arg19);
public static native int DFSINTERPOLATEEX1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const FloatPointer arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const FloatPointer arg8, FloatPointer arg9, @Const MKL_INT arg10, MKL_INT arg11, dfsInterpCallBack arg12, @Const Pointer arg13, dfsInterpCallBack arg14, @Const Pointer arg15, dfsInterpCallBack arg16, @Const Pointer arg17, dfsSearchCellsCallBack arg18, @Const Pointer arg19);
public static native int DFSINTERPOLATEEX1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const FloatBuffer arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const FloatBuffer arg8, FloatBuffer arg9, @Const MKL_INT arg10, MKL_INT arg11, dfsInterpCallBack arg12, @Const Pointer arg13, dfsInterpCallBack arg14, @Const Pointer arg15, dfsInterpCallBack arg16, @Const Pointer arg17, dfsSearchCellsCallBack arg18, @Const Pointer arg19);
public static native int DFSINTERPOLATEEX1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const float[] arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const float[] arg8, float[] arg9, @Const MKL_INT arg10, MKL_INT arg11, dfsInterpCallBack arg12, @Const Pointer arg13, dfsInterpCallBack arg14, @Const Pointer arg15, dfsInterpCallBack arg16, @Const Pointer arg17, dfsSearchCellsCallBack arg18, @Const Pointer arg19);

public static native int dfdInterpolateEx1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const DoublePointer arg4, @Const @ByVal MKL_INT arg5, @Const @ByVal MKL_INT arg6, @Const MKL_INT arg7, @Const DoublePointer arg8, DoublePointer arg9, @Const @ByVal MKL_INT arg10, MKL_INT arg11, dfdInterpCallBack arg12, @Const Pointer arg13, dfdInterpCallBack arg14, @Const Pointer arg15, dfdInterpCallBack arg16, @Const Pointer arg17, dfdSearchCellsCallBack arg18, @Const Pointer arg19);
public static native int dfdInterpolateEx1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const DoubleBuffer arg4, @Const @ByVal MKL_INT arg5, @Const @ByVal MKL_INT arg6, @Const MKL_INT arg7, @Const DoubleBuffer arg8, DoubleBuffer arg9, @Const @ByVal MKL_INT arg10, MKL_INT arg11, dfdInterpCallBack arg12, @Const Pointer arg13, dfdInterpCallBack arg14, @Const Pointer arg15, dfdInterpCallBack arg16, @Const Pointer arg17, dfdSearchCellsCallBack arg18, @Const Pointer arg19);
public static native int dfdInterpolateEx1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const double[] arg4, @Const @ByVal MKL_INT arg5, @Const @ByVal MKL_INT arg6, @Const MKL_INT arg7, @Const double[] arg8, double[] arg9, @Const @ByVal MKL_INT arg10, MKL_INT arg11, dfdInterpCallBack arg12, @Const Pointer arg13, dfdInterpCallBack arg14, @Const Pointer arg15, dfdInterpCallBack arg16, @Const Pointer arg17, dfdSearchCellsCallBack arg18, @Const Pointer arg19);
public static native int dfdinterpolateex1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const DoublePointer arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const DoublePointer arg8, DoublePointer arg9, @Const MKL_INT arg10, MKL_INT arg11, dfdInterpCallBack arg12, @Const Pointer arg13, dfdInterpCallBack arg14, @Const Pointer arg15, dfdInterpCallBack arg16, @Const Pointer arg17, dfdSearchCellsCallBack arg18, @Const Pointer arg19);
public static native int dfdinterpolateex1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const DoubleBuffer arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const DoubleBuffer arg8, DoubleBuffer arg9, @Const MKL_INT arg10, MKL_INT arg11, dfdInterpCallBack arg12, @Const Pointer arg13, dfdInterpCallBack arg14, @Const Pointer arg15, dfdInterpCallBack arg16, @Const Pointer arg17, dfdSearchCellsCallBack arg18, @Const Pointer arg19);
public static native int dfdinterpolateex1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const double[] arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const double[] arg8, double[] arg9, @Const MKL_INT arg10, MKL_INT arg11, dfdInterpCallBack arg12, @Const Pointer arg13, dfdInterpCallBack arg14, @Const Pointer arg15, dfdInterpCallBack arg16, @Const Pointer arg17, dfdSearchCellsCallBack arg18, @Const Pointer arg19);
public static native int DFDINTERPOLATEEX1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const DoublePointer arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const DoublePointer arg8, DoublePointer arg9, @Const MKL_INT arg10, MKL_INT arg11, dfdInterpCallBack arg12, @Const Pointer arg13, dfdInterpCallBack arg14, @Const Pointer arg15, dfdInterpCallBack arg16, @Const Pointer arg17, dfdSearchCellsCallBack arg18, @Const Pointer arg19);
public static native int DFDINTERPOLATEEX1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const DoubleBuffer arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const DoubleBuffer arg8, DoubleBuffer arg9, @Const MKL_INT arg10, MKL_INT arg11, dfdInterpCallBack arg12, @Const Pointer arg13, dfdInterpCallBack arg14, @Const Pointer arg15, dfdInterpCallBack arg16, @Const Pointer arg17, dfdSearchCellsCallBack arg18, @Const Pointer arg19);
public static native int DFDINTERPOLATEEX1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const double[] arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const double[] arg8, double[] arg9, @Const MKL_INT arg10, MKL_INT arg11, dfdInterpCallBack arg12, @Const Pointer arg13, dfdInterpCallBack arg14, @Const Pointer arg15, dfdInterpCallBack arg16, @Const Pointer arg17, dfdSearchCellsCallBack arg18, @Const Pointer arg19);

/* Spline-based computations: search, interpolation and integration */
public static native int dfsInterpolate1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const FloatPointer arg4, @Const @ByVal MKL_INT arg5, @Const @ByVal MKL_INT arg6, @Const MKL_INT arg7, @Const FloatPointer arg8, FloatPointer arg9, @Const @ByVal MKL_INT arg10, MKL_INT arg11 );
public static native int dfsInterpolate1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const FloatBuffer arg4, @Const @ByVal MKL_INT arg5, @Const @ByVal MKL_INT arg6, @Const MKL_INT arg7, @Const FloatBuffer arg8, FloatBuffer arg9, @Const @ByVal MKL_INT arg10, MKL_INT arg11 );
public static native int dfsInterpolate1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const float[] arg4, @Const @ByVal MKL_INT arg5, @Const @ByVal MKL_INT arg6, @Const MKL_INT arg7, @Const float[] arg8, float[] arg9, @Const @ByVal MKL_INT arg10, MKL_INT arg11 );
public static native int dfsinterpolate1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const FloatPointer arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const FloatPointer arg8, FloatPointer arg9, @Const MKL_INT arg10, MKL_INT arg11 );
public static native int dfsinterpolate1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const FloatBuffer arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const FloatBuffer arg8, FloatBuffer arg9, @Const MKL_INT arg10, MKL_INT arg11 );
public static native int dfsinterpolate1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const float[] arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const float[] arg8, float[] arg9, @Const MKL_INT arg10, MKL_INT arg11 );
public static native int DFSINTERPOLATE1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const FloatPointer arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const FloatPointer arg8, FloatPointer arg9, @Const MKL_INT arg10, MKL_INT arg11 );
public static native int DFSINTERPOLATE1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const FloatBuffer arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const FloatBuffer arg8, FloatBuffer arg9, @Const MKL_INT arg10, MKL_INT arg11 );
public static native int DFSINTERPOLATE1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const float[] arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const float[] arg8, float[] arg9, @Const MKL_INT arg10, MKL_INT arg11 );

public static native int dfdInterpolate1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const DoublePointer arg4, @Const @ByVal MKL_INT arg5, @Const @ByVal MKL_INT arg6, @Const MKL_INT arg7, @Const DoublePointer arg8, DoublePointer arg9, @Const @ByVal MKL_INT arg10, MKL_INT arg11 );
public static native int dfdInterpolate1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const DoubleBuffer arg4, @Const @ByVal MKL_INT arg5, @Const @ByVal MKL_INT arg6, @Const MKL_INT arg7, @Const DoubleBuffer arg8, DoubleBuffer arg9, @Const @ByVal MKL_INT arg10, MKL_INT arg11 );
public static native int dfdInterpolate1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const @ByVal MKL_INT arg3, @Const double[] arg4, @Const @ByVal MKL_INT arg5, @Const @ByVal MKL_INT arg6, @Const MKL_INT arg7, @Const double[] arg8, double[] arg9, @Const @ByVal MKL_INT arg10, MKL_INT arg11 );
public static native int dfdinterpolate1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const DoublePointer arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const DoublePointer arg8, DoublePointer arg9, @Const MKL_INT arg10, MKL_INT arg11 );
public static native int dfdinterpolate1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const DoubleBuffer arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const DoubleBuffer arg8, DoubleBuffer arg9, @Const MKL_INT arg10, MKL_INT arg11 );
public static native int dfdinterpolate1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const double[] arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const double[] arg8, double[] arg9, @Const MKL_INT arg10, MKL_INT arg11 );
public static native int DFDINTERPOLATE1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const DoublePointer arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const DoublePointer arg8, DoublePointer arg9, @Const MKL_INT arg10, MKL_INT arg11 );
public static native int DFDINTERPOLATE1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const DoubleBuffer arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const DoubleBuffer arg8, DoubleBuffer arg9, @Const MKL_INT arg10, MKL_INT arg11 );
public static native int DFDINTERPOLATE1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const MKL_INT arg3, @Const double[] arg4, @Const MKL_INT arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const double[] arg8, double[] arg9, @Const MKL_INT arg10, MKL_INT arg11 );

/* Cells search with call back support */
public static native int dfsSearchCellsEx1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const FloatPointer arg3, @Const @ByVal MKL_INT arg4, @Const FloatPointer arg5, MKL_INT arg6, dfsSearchCellsCallBack arg7, @Const Pointer arg8 );
public static native int dfsSearchCellsEx1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const FloatBuffer arg3, @Const @ByVal MKL_INT arg4, @Const FloatBuffer arg5, MKL_INT arg6, dfsSearchCellsCallBack arg7, @Const Pointer arg8 );
public static native int dfsSearchCellsEx1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const float[] arg3, @Const @ByVal MKL_INT arg4, @Const float[] arg5, MKL_INT arg6, dfsSearchCellsCallBack arg7, @Const Pointer arg8 );
public static native int dfssearchcellsex1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatPointer arg3, @Const MKL_INT arg4, @Const FloatPointer arg5, MKL_INT arg6, dfsSearchCellsCallBack arg7, @Const Pointer arg8 );
public static native int dfssearchcellsex1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatBuffer arg3, @Const MKL_INT arg4, @Const FloatBuffer arg5, MKL_INT arg6, dfsSearchCellsCallBack arg7, @Const Pointer arg8 );
public static native int dfssearchcellsex1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const float[] arg3, @Const MKL_INT arg4, @Const float[] arg5, MKL_INT arg6, dfsSearchCellsCallBack arg7, @Const Pointer arg8 );
public static native int DFSSEARCHCELLSEX1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatPointer arg3, @Const MKL_INT arg4, @Const FloatPointer arg5, MKL_INT arg6, dfsSearchCellsCallBack arg7, @Const Pointer arg8 );
public static native int DFSSEARCHCELLSEX1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatBuffer arg3, @Const MKL_INT arg4, @Const FloatBuffer arg5, MKL_INT arg6, dfsSearchCellsCallBack arg7, @Const Pointer arg8 );
public static native int DFSSEARCHCELLSEX1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const float[] arg3, @Const MKL_INT arg4, @Const float[] arg5, MKL_INT arg6, dfsSearchCellsCallBack arg7, @Const Pointer arg8 );

public static native int dfdSearchCellsEx1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const DoublePointer arg3, @Const @ByVal MKL_INT arg4, @Const DoublePointer arg5, MKL_INT arg6, dfdSearchCellsCallBack arg7, @Const Pointer arg8 );
public static native int dfdSearchCellsEx1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const DoubleBuffer arg3, @Const @ByVal MKL_INT arg4, @Const DoubleBuffer arg5, MKL_INT arg6, dfdSearchCellsCallBack arg7, @Const Pointer arg8 );
public static native int dfdSearchCellsEx1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const double[] arg3, @Const @ByVal MKL_INT arg4, @Const double[] arg5, MKL_INT arg6, dfdSearchCellsCallBack arg7, @Const Pointer arg8 );
public static native int dfdsearchcellsex1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, @Const DoublePointer arg5, MKL_INT arg6, dfdSearchCellsCallBack arg7, @Const Pointer arg8 );
public static native int dfdsearchcellsex1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, @Const DoubleBuffer arg5, MKL_INT arg6, dfdSearchCellsCallBack arg7, @Const Pointer arg8 );
public static native int dfdsearchcellsex1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const MKL_INT arg4, @Const double[] arg5, MKL_INT arg6, dfdSearchCellsCallBack arg7, @Const Pointer arg8 );
public static native int DFDSEARCHCELLSEX1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, @Const DoublePointer arg5, MKL_INT arg6, dfdSearchCellsCallBack arg7, @Const Pointer arg8 );
public static native int DFDSEARCHCELLSEX1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, @Const DoubleBuffer arg5, MKL_INT arg6, dfdSearchCellsCallBack arg7, @Const Pointer arg8 );
public static native int DFDSEARCHCELLSEX1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const MKL_INT arg4, @Const double[] arg5, MKL_INT arg6, dfdSearchCellsCallBack arg7, @Const Pointer arg8 );

/* Cells search */
public static native int dfsSearchCells1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const FloatPointer arg3, @Const @ByVal MKL_INT arg4, @Const FloatPointer arg5, MKL_INT arg6 );
public static native int dfsSearchCells1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const FloatBuffer arg3, @Const @ByVal MKL_INT arg4, @Const FloatBuffer arg5, MKL_INT arg6 );
public static native int dfsSearchCells1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const float[] arg3, @Const @ByVal MKL_INT arg4, @Const float[] arg5, MKL_INT arg6 );
public static native int dfssearchcells1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatPointer arg3, @Const MKL_INT arg4, @Const FloatPointer arg5, MKL_INT arg6 );
public static native int dfssearchcells1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatBuffer arg3, @Const MKL_INT arg4, @Const FloatBuffer arg5, MKL_INT arg6 );
public static native int dfssearchcells1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const float[] arg3, @Const MKL_INT arg4, @Const float[] arg5, MKL_INT arg6 );
public static native int DFSSEARCHCELLS1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatPointer arg3, @Const MKL_INT arg4, @Const FloatPointer arg5, MKL_INT arg6 );
public static native int DFSSEARCHCELLS1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatBuffer arg3, @Const MKL_INT arg4, @Const FloatBuffer arg5, MKL_INT arg6 );
public static native int DFSSEARCHCELLS1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const float[] arg3, @Const MKL_INT arg4, @Const float[] arg5, MKL_INT arg6 );

public static native int dfdSearchCells1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const DoublePointer arg3, @Const @ByVal MKL_INT arg4, @Const DoublePointer arg5, MKL_INT arg6 );
public static native int dfdSearchCells1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const DoubleBuffer arg3, @Const @ByVal MKL_INT arg4, @Const DoubleBuffer arg5, MKL_INT arg6 );
public static native int dfdSearchCells1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const double[] arg3, @Const @ByVal MKL_INT arg4, @Const double[] arg5, MKL_INT arg6 );
public static native int dfdsearchcells1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, @Const DoublePointer arg5, MKL_INT arg6 );
public static native int dfdsearchcells1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, @Const DoubleBuffer arg5, MKL_INT arg6 );
public static native int dfdsearchcells1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const MKL_INT arg4, @Const double[] arg5, MKL_INT arg6 );
public static native int DFDSEARCHCELLS1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, @Const DoublePointer arg5, MKL_INT arg6 );
public static native int DFDSEARCHCELLS1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, @Const DoubleBuffer arg5, MKL_INT arg6 );
public static native int DFDSEARCHCELLS1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const MKL_INT arg4, @Const double[] arg5, MKL_INT arg6 );

/* Spline-based integration */
public static native int dfsIntegrate1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const FloatPointer arg3, @Const @ByVal MKL_INT arg4, @Const FloatPointer arg5, @Const @ByVal MKL_INT arg6, @Const FloatPointer arg7, @Const FloatPointer arg8, FloatPointer arg9, @Const @ByVal MKL_INT arg10  );
public static native int dfsIntegrate1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const FloatBuffer arg3, @Const @ByVal MKL_INT arg4, @Const FloatBuffer arg5, @Const @ByVal MKL_INT arg6, @Const FloatBuffer arg7, @Const FloatBuffer arg8, FloatBuffer arg9, @Const @ByVal MKL_INT arg10  );
public static native int dfsIntegrate1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const float[] arg3, @Const @ByVal MKL_INT arg4, @Const float[] arg5, @Const @ByVal MKL_INT arg6, @Const float[] arg7, @Const float[] arg8, float[] arg9, @Const @ByVal MKL_INT arg10  );
public static native int dfsintegrate1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatPointer arg3, @Const MKL_INT arg4, @Const FloatPointer arg5, @Const MKL_INT arg6, @Const FloatPointer arg7, @Const FloatPointer arg8, FloatPointer arg9, @Const MKL_INT arg10);
public static native int dfsintegrate1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatBuffer arg3, @Const MKL_INT arg4, @Const FloatBuffer arg5, @Const MKL_INT arg6, @Const FloatBuffer arg7, @Const FloatBuffer arg8, FloatBuffer arg9, @Const MKL_INT arg10);
public static native int dfsintegrate1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const float[] arg3, @Const MKL_INT arg4, @Const float[] arg5, @Const MKL_INT arg6, @Const float[] arg7, @Const float[] arg8, float[] arg9, @Const MKL_INT arg10);
public static native int DFSINTEGRATE1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatPointer arg3, @Const MKL_INT arg4, @Const FloatPointer arg5, @Const MKL_INT arg6, @Const FloatPointer arg7, @Const FloatPointer arg8, FloatPointer arg9, @Const MKL_INT arg10);
public static native int DFSINTEGRATE1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatBuffer arg3, @Const MKL_INT arg4, @Const FloatBuffer arg5, @Const MKL_INT arg6, @Const FloatBuffer arg7, @Const FloatBuffer arg8, FloatBuffer arg9, @Const MKL_INT arg10);
public static native int DFSINTEGRATE1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const float[] arg3, @Const MKL_INT arg4, @Const float[] arg5, @Const MKL_INT arg6, @Const float[] arg7, @Const float[] arg8, float[] arg9, @Const MKL_INT arg10);

public static native int dfdIntegrate1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const DoublePointer arg3, @Const @ByVal MKL_INT arg4, @Const DoublePointer arg5, @Const @ByVal MKL_INT arg6, @Const DoublePointer arg7, @Const DoublePointer arg8, DoublePointer arg9, @Const @ByVal MKL_INT arg10  );
public static native int dfdIntegrate1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const DoubleBuffer arg3, @Const @ByVal MKL_INT arg4, @Const DoubleBuffer arg5, @Const @ByVal MKL_INT arg6, @Const DoubleBuffer arg7, @Const DoubleBuffer arg8, DoubleBuffer arg9, @Const @ByVal MKL_INT arg10  );
public static native int dfdIntegrate1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const double[] arg3, @Const @ByVal MKL_INT arg4, @Const double[] arg5, @Const @ByVal MKL_INT arg6, @Const double[] arg7, @Const double[] arg8, double[] arg9, @Const @ByVal MKL_INT arg10  );
public static native int dfdintegrate1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, @Const DoublePointer arg5, @Const MKL_INT arg6, @Const DoublePointer arg7, @Const DoublePointer arg8, DoublePointer arg9, @Const MKL_INT arg10);
public static native int dfdintegrate1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, @Const DoubleBuffer arg5, @Const MKL_INT arg6, @Const DoubleBuffer arg7, @Const DoubleBuffer arg8, DoubleBuffer arg9, @Const MKL_INT arg10);
public static native int dfdintegrate1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const MKL_INT arg4, @Const double[] arg5, @Const MKL_INT arg6, @Const double[] arg7, @Const double[] arg8, double[] arg9, @Const MKL_INT arg10);
public static native int DFDINTEGRATE1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, @Const DoublePointer arg5, @Const MKL_INT arg6, @Const DoublePointer arg7, @Const DoublePointer arg8, DoublePointer arg9, @Const MKL_INT arg10);
public static native int DFDINTEGRATE1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, @Const DoubleBuffer arg5, @Const MKL_INT arg6, @Const DoubleBuffer arg7, @Const DoubleBuffer arg8, DoubleBuffer arg9, @Const MKL_INT arg10);
public static native int DFDINTEGRATE1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const MKL_INT arg4, @Const double[] arg5, @Const MKL_INT arg6, @Const double[] arg7, @Const double[] arg8, double[] arg9, @Const MKL_INT arg10);

/* Spline-based integration with call back support */
public static native int dfsIntegrateEx1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const FloatPointer arg3, @Const @ByVal MKL_INT arg4, @Const FloatPointer arg5, @Const @ByVal MKL_INT arg6, @Const FloatPointer arg7, @Const FloatPointer arg8, FloatPointer arg9, @Const @ByVal MKL_INT arg10, dfsIntegrCallBack arg11, @Const Pointer arg12, dfsIntegrCallBack arg13, @Const Pointer arg14, dfsIntegrCallBack arg15, @Const Pointer arg16, dfsSearchCellsCallBack arg17, @Const Pointer arg18);
public static native int dfsIntegrateEx1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const FloatBuffer arg3, @Const @ByVal MKL_INT arg4, @Const FloatBuffer arg5, @Const @ByVal MKL_INT arg6, @Const FloatBuffer arg7, @Const FloatBuffer arg8, FloatBuffer arg9, @Const @ByVal MKL_INT arg10, dfsIntegrCallBack arg11, @Const Pointer arg12, dfsIntegrCallBack arg13, @Const Pointer arg14, dfsIntegrCallBack arg15, @Const Pointer arg16, dfsSearchCellsCallBack arg17, @Const Pointer arg18);
public static native int dfsIntegrateEx1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const float[] arg3, @Const @ByVal MKL_INT arg4, @Const float[] arg5, @Const @ByVal MKL_INT arg6, @Const float[] arg7, @Const float[] arg8, float[] arg9, @Const @ByVal MKL_INT arg10, dfsIntegrCallBack arg11, @Const Pointer arg12, dfsIntegrCallBack arg13, @Const Pointer arg14, dfsIntegrCallBack arg15, @Const Pointer arg16, dfsSearchCellsCallBack arg17, @Const Pointer arg18);
public static native int dfsintegrateex1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatPointer arg3, @Const MKL_INT arg4, @Const FloatPointer arg5, @Const MKL_INT arg6, @Const FloatPointer arg7, @Const FloatPointer arg8, FloatPointer arg9, @Const MKL_INT arg10, dfsIntegrCallBack arg11, @Const Pointer arg12, dfsIntegrCallBack arg13, @Const Pointer arg14, dfsIntegrCallBack arg15, @Const Pointer arg16, dfsSearchCellsCallBack arg17, @Const Pointer arg18);
public static native int dfsintegrateex1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatBuffer arg3, @Const MKL_INT arg4, @Const FloatBuffer arg5, @Const MKL_INT arg6, @Const FloatBuffer arg7, @Const FloatBuffer arg8, FloatBuffer arg9, @Const MKL_INT arg10, dfsIntegrCallBack arg11, @Const Pointer arg12, dfsIntegrCallBack arg13, @Const Pointer arg14, dfsIntegrCallBack arg15, @Const Pointer arg16, dfsSearchCellsCallBack arg17, @Const Pointer arg18);
public static native int dfsintegrateex1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const float[] arg3, @Const MKL_INT arg4, @Const float[] arg5, @Const MKL_INT arg6, @Const float[] arg7, @Const float[] arg8, float[] arg9, @Const MKL_INT arg10, dfsIntegrCallBack arg11, @Const Pointer arg12, dfsIntegrCallBack arg13, @Const Pointer arg14, dfsIntegrCallBack arg15, @Const Pointer arg16, dfsSearchCellsCallBack arg17, @Const Pointer arg18);
public static native int DFSINTEGRATEEX1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatPointer arg3, @Const MKL_INT arg4, @Const FloatPointer arg5, @Const MKL_INT arg6, @Const FloatPointer arg7, @Const FloatPointer arg8, FloatPointer arg9, @Const MKL_INT arg10, dfsIntegrCallBack arg11, @Const Pointer arg12, dfsIntegrCallBack arg13, @Const Pointer arg14, dfsIntegrCallBack arg15, @Const Pointer arg16, dfsSearchCellsCallBack arg17, @Const Pointer arg18);
public static native int DFSINTEGRATEEX1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const FloatBuffer arg3, @Const MKL_INT arg4, @Const FloatBuffer arg5, @Const MKL_INT arg6, @Const FloatBuffer arg7, @Const FloatBuffer arg8, FloatBuffer arg9, @Const MKL_INT arg10, dfsIntegrCallBack arg11, @Const Pointer arg12, dfsIntegrCallBack arg13, @Const Pointer arg14, dfsIntegrCallBack arg15, @Const Pointer arg16, dfsSearchCellsCallBack arg17, @Const Pointer arg18);
public static native int DFSINTEGRATEEX1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const float[] arg3, @Const MKL_INT arg4, @Const float[] arg5, @Const MKL_INT arg6, @Const float[] arg7, @Const float[] arg8, float[] arg9, @Const MKL_INT arg10, dfsIntegrCallBack arg11, @Const Pointer arg12, dfsIntegrCallBack arg13, @Const Pointer arg14, dfsIntegrCallBack arg15, @Const Pointer arg16, dfsSearchCellsCallBack arg17, @Const Pointer arg18);

public static native int dfdIntegrateEx1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const DoublePointer arg3, @Const @ByVal MKL_INT arg4, @Const DoublePointer arg5, @Const @ByVal MKL_INT arg6, @Const DoublePointer arg7, @Const DoublePointer arg8, DoublePointer arg9, @Const @ByVal MKL_INT arg10, dfdIntegrCallBack arg11, @Const Pointer arg12, dfdIntegrCallBack arg13, @Const Pointer arg14, dfdIntegrCallBack arg15, @Const Pointer arg16, dfdSearchCellsCallBack arg17, @Const Pointer arg18);
public static native int dfdIntegrateEx1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const DoubleBuffer arg3, @Const @ByVal MKL_INT arg4, @Const DoubleBuffer arg5, @Const @ByVal MKL_INT arg6, @Const DoubleBuffer arg7, @Const DoubleBuffer arg8, DoubleBuffer arg9, @Const @ByVal MKL_INT arg10, dfdIntegrCallBack arg11, @Const Pointer arg12, dfdIntegrCallBack arg13, @Const Pointer arg14, dfdIntegrCallBack arg15, @Const Pointer arg16, dfdSearchCellsCallBack arg17, @Const Pointer arg18);
public static native int dfdIntegrateEx1D(DFTaskPtr arg0, @Const @ByVal MKL_INT arg1, @Const @ByVal MKL_INT arg2, @Const double[] arg3, @Const @ByVal MKL_INT arg4, @Const double[] arg5, @Const @ByVal MKL_INT arg6, @Const double[] arg7, @Const double[] arg8, double[] arg9, @Const @ByVal MKL_INT arg10, dfdIntegrCallBack arg11, @Const Pointer arg12, dfdIntegrCallBack arg13, @Const Pointer arg14, dfdIntegrCallBack arg15, @Const Pointer arg16, dfdSearchCellsCallBack arg17, @Const Pointer arg18);
public static native int dfdintegrateex1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, @Const DoublePointer arg5, @Const MKL_INT arg6, @Const DoublePointer arg7, @Const DoublePointer arg8, DoublePointer arg9, @Const MKL_INT arg10, dfdIntegrCallBack arg11, @Const Pointer arg12, dfdIntegrCallBack arg13, @Const Pointer arg14, dfdIntegrCallBack arg15, @Const Pointer arg16, dfdSearchCellsCallBack arg17, @Const Pointer arg18);
public static native int dfdintegrateex1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, @Const DoubleBuffer arg5, @Const MKL_INT arg6, @Const DoubleBuffer arg7, @Const DoubleBuffer arg8, DoubleBuffer arg9, @Const MKL_INT arg10, dfdIntegrCallBack arg11, @Const Pointer arg12, dfdIntegrCallBack arg13, @Const Pointer arg14, dfdIntegrCallBack arg15, @Const Pointer arg16, dfdSearchCellsCallBack arg17, @Const Pointer arg18);
public static native int dfdintegrateex1d_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const MKL_INT arg4, @Const double[] arg5, @Const MKL_INT arg6, @Const double[] arg7, @Const double[] arg8, double[] arg9, @Const MKL_INT arg10, dfdIntegrCallBack arg11, @Const Pointer arg12, dfdIntegrCallBack arg13, @Const Pointer arg14, dfdIntegrCallBack arg15, @Const Pointer arg16, dfdSearchCellsCallBack arg17, @Const Pointer arg18);
public static native int DFDINTEGRATEEX1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, @Const DoublePointer arg5, @Const MKL_INT arg6, @Const DoublePointer arg7, @Const DoublePointer arg8, DoublePointer arg9, @Const MKL_INT arg10, dfdIntegrCallBack arg11, @Const Pointer arg12, dfdIntegrCallBack arg13, @Const Pointer arg14, dfdIntegrCallBack arg15, @Const Pointer arg16, dfdSearchCellsCallBack arg17, @Const Pointer arg18);
public static native int DFDINTEGRATEEX1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, @Const DoubleBuffer arg5, @Const MKL_INT arg6, @Const DoubleBuffer arg7, @Const DoubleBuffer arg8, DoubleBuffer arg9, @Const MKL_INT arg10, dfdIntegrCallBack arg11, @Const Pointer arg12, dfdIntegrCallBack arg13, @Const Pointer arg14, dfdIntegrCallBack arg15, @Const Pointer arg16, dfdSearchCellsCallBack arg17, @Const Pointer arg18);
public static native int DFDINTEGRATEEX1D_(@ByPtrPtr DFTaskPtr arg0, @Const MKL_INT arg1, @Const MKL_INT arg2, @Const double[] arg3, @Const MKL_INT arg4, @Const double[] arg5, @Const MKL_INT arg6, @Const double[] arg7, @Const double[] arg8, double[] arg9, @Const MKL_INT arg10, dfdIntegrCallBack arg11, @Const Pointer arg12, dfdIntegrCallBack arg13, @Const Pointer arg14, dfdIntegrCallBack arg15, @Const Pointer arg16, dfdSearchCellsCallBack arg17, @Const Pointer arg18);


/*
//++
//  DF DESTRUCTOR FUNCTION DECLARATIONS.
//--
*/
public static native int dfDeleteTask(@ByPtrPtr DFTaskPtr arg0);
public static native int dfdeletetask_(@ByPtrPtr DFTaskPtr arg0);
public static native int DFDELETETASK_(@ByPtrPtr DFTaskPtr arg0);

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif /* __MKL_DF_FUNCTIONS_H__ */


// Parsed from mkl_dfti.h

/*******************************************************************************
* Copyright 2002-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
! Content:
!    Intel(R) Math Kernel Library (Intel(R) MKL)
!    Discrete Fourier Transform Interface (DFTI)
!****************************************************************************/

// #ifndef _MKL_DFTI_H_
// #define _MKL_DFTI_H_

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #include "mkl_types.h"

// #if defined(__cplusplus_cli)
public static class DFTI_DESCRIPTOR extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public DFTI_DESCRIPTOR() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DFTI_DESCRIPTOR(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DFTI_DESCRIPTOR(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public DFTI_DESCRIPTOR position(long position) {
        return (DFTI_DESCRIPTOR)super.position(position);
    }
}
// #endif

// #if !defined(_WIN32)
// #define DFTI_EXTERN
// #else
// #if defined(DFTI_BUILD_DLL)
// #define DFTI_EXTERN __declspec(dllexport)
// #elif defined(DFTI_USE_DLL)
// #define DFTI_EXTERN __declspec(dllimport)
// #else
// #define DFTI_EXTERN
// #endif  /* defined(DFTI_BUILD_DLL) */
// #endif  /* _WIN32 */


/* Error classes */
public static final int DFTI_NO_ERROR =                    0;
public static final int DFTI_MEMORY_ERROR =                1;
public static final int DFTI_INVALID_CONFIGURATION =       2;
public static final int DFTI_INCONSISTENT_CONFIGURATION =  3;
public static final int DFTI_MULTITHREADED_ERROR =         4;
public static final int DFTI_BAD_DESCRIPTOR =              5;
public static final int DFTI_UNIMPLEMENTED =               6;
public static final int DFTI_MKL_INTERNAL_ERROR =          7;
public static final int DFTI_NUMBER_OF_THREADS_ERROR =     8;
public static final int DFTI_1D_LENGTH_EXCEEDS_INT32 =     9;

public static final int DFTI_MAX_MESSAGE_LENGTH = 80; /* Maximum length of error string */
public static final int DFTI_MAX_NAME_LENGTH = 10; /* Maximum length of descriptor name */
public static final int DFTI_VERSION_LENGTH = 198; /* Maximum length of Intel(R) MKL version string */

/* Descriptor configuration parameters [default values in brackets] */
/** enum DFTI_CONFIG_PARAM */
public static final int
    /* Domain for forward transform. No default value */
    DFTI_FORWARD_DOMAIN = 0,

    /* Dimensionality, or rank. No default value */
    DFTI_DIMENSION = 1,

    /* Length(s) of transform. No default value */
    DFTI_LENGTHS = 2,

    /* Floating point precision. No default value */
    DFTI_PRECISION = 3,

    /* Scale factor for forward transform [1.0] */
    DFTI_FORWARD_SCALE  = 4,

    /* Scale factor for backward transform [1.0] */
    DFTI_BACKWARD_SCALE = 5,

    /* Exponent sign for forward transform [DFTI_NEGATIVE]  */
    /* DFTI_FORWARD_SIGN = 6, ## NOT IMPLEMENTED */

    /* Number of data sets to be transformed [1] */
    DFTI_NUMBER_OF_TRANSFORMS = 7,

    /* Storage of finite complex-valued sequences in complex domain
       [DFTI_COMPLEX_COMPLEX] */
    DFTI_COMPLEX_STORAGE = 8,

    /* Storage of finite real-valued sequences in real domain
       [DFTI_REAL_REAL] */
    DFTI_REAL_STORAGE = 9,

    /* Storage of finite complex-valued sequences in conjugate-even
       domain [DFTI_COMPLEX_REAL] */
    DFTI_CONJUGATE_EVEN_STORAGE = 10,

    /* Placement of result [DFTI_INPLACE] */
    DFTI_PLACEMENT = 11,

    /* Generalized strides for input data layout [tigth, row-major for
       C] */
    DFTI_INPUT_STRIDES = 12,

    /* Generalized strides for output data layout [tight, row-major
       for C] */
    DFTI_OUTPUT_STRIDES = 13,

    /* Distance between first input elements for multiple transforms
       [0] */
    DFTI_INPUT_DISTANCE = 14,

    /* Distance between first output elements for multiple transforms
       [0] */
    DFTI_OUTPUT_DISTANCE = 15,

    /* Effort spent in initialization [DFTI_MEDIUM] */
    /* DFTI_INITIALIZATION_EFFORT = 16, ## NOT IMPLEMENTED */

    /* Use of workspace during computation [DFTI_ALLOW] */
    DFTI_WORKSPACE = 17,

    /* Ordering of the result [DFTI_ORDERED] */
    DFTI_ORDERING = 18,

    /* Possible transposition of result [DFTI_NONE] */
    DFTI_TRANSPOSE = 19,

    /* User-settable descriptor name [""] */
    DFTI_DESCRIPTOR_NAME = 20, /* DEPRECATED */

    /* Packing format for DFTI_COMPLEX_REAL storage of finite
       conjugate-even sequences [DFTI_CCS_FORMAT] */
    DFTI_PACKED_FORMAT = 21,

    /* Commit status of the descriptor - R/O parameter */
    DFTI_COMMIT_STATUS = 22,

    /* Version string for this DFTI implementation - R/O parameter */
    DFTI_VERSION = 23,

    /* Ordering of the forward transform - R/O parameter */
    /* DFTI_FORWARD_ORDERING  = 24, ## NOT IMPLEMENTED */

    /* Ordering of the backward transform - R/O parameter */
    /* DFTI_BACKWARD_ORDERING = 25, ## NOT IMPLEMENTED */

    /* Number of user threads that share the descriptor [1] */
    DFTI_NUMBER_OF_USER_THREADS = 26,

    /* Limit the number of threads used by this descriptor [0 = don't care] */
    DFTI_THREAD_LIMIT = 27,

    /* Possible input data destruction [DFTI_AVOID = prevent input data]*/
    DFTI_DESTROY_INPUT = 28;

/* Values of the descriptor configuration parameters */
/** enum DFTI_CONFIG_VALUE */
public static final int
    /* DFTI_COMMIT_STATUS */
    DFTI_COMMITTED = 30,
    DFTI_UNCOMMITTED = 31,

    /* DFTI_FORWARD_DOMAIN */
    DFTI_COMPLEX = 32,
    DFTI_REAL = 33,
    /* DFTI_CONJUGATE_EVEN = 34,   ## NOT IMPLEMENTED */

    /* DFTI_PRECISION */
    DFTI_SINGLE = 35,
    DFTI_DOUBLE = 36,

    /* DFTI_FORWARD_SIGN */
    /* DFTI_NEGATIVE = 37,         ## NOT IMPLEMENTED */
    /* DFTI_POSITIVE = 38,         ## NOT IMPLEMENTED */

    /* DFTI_COMPLEX_STORAGE and DFTI_CONJUGATE_EVEN_STORAGE */
    DFTI_COMPLEX_COMPLEX = 39,
    DFTI_COMPLEX_REAL = 40,

    /* DFTI_REAL_STORAGE */
    DFTI_REAL_COMPLEX = 41,
    DFTI_REAL_REAL = 42,

    /* DFTI_PLACEMENT */
    DFTI_INPLACE = 43,          /* Result overwrites input */
    DFTI_NOT_INPLACE = 44,      /* Have another place for result */

    /* DFTI_INITIALIZATION_EFFORT */
    /* DFTI_LOW = 45,              ## NOT IMPLEMENTED */
    /* DFTI_MEDIUM = 46,           ## NOT IMPLEMENTED */
    /* DFTI_HIGH = 47,             ## NOT IMPLEMENTED */

    /* DFTI_ORDERING */
    DFTI_ORDERED = 48,
    DFTI_BACKWARD_SCRAMBLED = 49,
    /* DFTI_FORWARD_SCRAMBLED = 50, ## NOT IMPLEMENTED */

    /* Allow/avoid certain usages */
    DFTI_ALLOW = 51,            /* Allow transposition or workspace */
    DFTI_AVOID = 52,
    DFTI_NONE = 53,

    /* DFTI_PACKED_FORMAT (for storing congugate-even finite sequence
       in real array) */
    DFTI_CCS_FORMAT = 54,       /* Complex conjugate-symmetric */
    DFTI_PACK_FORMAT = 55,      /* Pack format for real DFT */
    DFTI_PERM_FORMAT = 56,      /* Perm format for real DFT */
    DFTI_CCE_FORMAT = 57;        /* Complex conjugate-even */ /* deprecated */
public static final int DFTI_DFT_Desc_struct =    DFTI_DESCRIPTOR;  /* deprecated */
public static final int DFTI_Descriptor_struct =  DFTI_DESCRIPTOR;  /* deprecated */
public static final int DFTI_Descriptor =         DFTI_DESCRIPTOR;  /* deprecated */

public static native @ByVal MKL_LONG DftiCreateDescriptor(DFTI_DESCRIPTOR_HANDLE arg0,
                              @Cast("DFTI_CONFIG_VALUE") int arg1,
                              @Cast("DFTI_CONFIG_VALUE") int arg2,
                              @ByVal MKL_LONG arg3);
public static native @ByVal MKL_LONG DftiCopyDescriptor(@ByVal DFTI_DESCRIPTOR_HANDLE arg0,
                            DFTI_DESCRIPTOR_HANDLE arg1); /* to descriptor */
public static native @ByVal MKL_LONG DftiCommitDescriptor(@ByVal DFTI_DESCRIPTOR_HANDLE arg0);
public static native @ByVal MKL_LONG DftiComputeForward(@ByVal DFTI_DESCRIPTOR_HANDLE arg0, Pointer arg1);
public static native @ByVal MKL_LONG DftiComputeBackward(@ByVal DFTI_DESCRIPTOR_HANDLE arg0, Pointer arg1);
public static native @ByVal MKL_LONG DftiSetValue(@ByVal DFTI_DESCRIPTOR_HANDLE arg0, @Cast("DFTI_CONFIG_PARAM") int arg1);
public static native @ByVal MKL_LONG DftiGetValue(@ByVal DFTI_DESCRIPTOR_HANDLE arg0, @Cast("DFTI_CONFIG_PARAM") int arg1);
public static native @ByVal MKL_LONG DftiFreeDescriptor(DFTI_DESCRIPTOR_HANDLE arg0);
public static native @Cast("char*") BytePointer DftiErrorMessage(@ByVal MKL_LONG arg0);
public static native @ByVal MKL_LONG DftiErrorClass(@ByVal MKL_LONG arg0, @ByVal MKL_LONG arg1);
/**********************************************************************
 * INTERNAL INTERFACES. These internal interfaces are not intended to
 * be called directly by Intel(R) MKL users and may change in future releases.
 */
public static native @ByVal MKL_LONG DftiCreateDescriptor_s_1d(DFTI_DESCRIPTOR_HANDLE arg0,
                                   @Cast("DFTI_CONFIG_VALUE") int domain);
public static native @ByVal MKL_LONG DftiCreateDescriptor_s_md(DFTI_DESCRIPTOR_HANDLE arg0,
                                   @Cast("DFTI_CONFIG_VALUE") int domain,
                                   @ByVal MKL_LONG many);
public static native @ByVal MKL_LONG DftiCreateDescriptor_d_1d(DFTI_DESCRIPTOR_HANDLE arg0,
                                   @Cast("DFTI_CONFIG_VALUE") int domain);
public static native @ByVal MKL_LONG DftiCreateDescriptor_d_md(DFTI_DESCRIPTOR_HANDLE arg0,
                                   @Cast("DFTI_CONFIG_VALUE") int domain,
                                   @ByVal MKL_LONG many);

/**********************************************************************
 * Compile-time separation of specific cases
 */
// #ifndef DftiCreateDescriptor
// #define DftiCreateDescriptor(desc,prec,domain,dim,sizes)
//     (/* single precision specific cases */
//      ((prec)==DFTI_SINGLE && (dim)==1) ?
//      DftiCreateDescriptor_s_1d((desc),(domain),(sizes)) :
//      ((prec)==DFTI_SINGLE) ?
//      DftiCreateDescriptor_s_md((desc),(domain),(dim),(sizes)) :
//      /* double precision specific cases */
//      ((prec)==DFTI_DOUBLE && (dim)==1) ?
//      DftiCreateDescriptor_d_1d((desc),(domain),(sizes)) :
//      ((prec)==DFTI_DOUBLE) ?
//      DftiCreateDescriptor_d_md((desc),(domain),(dim),(sizes)) :
//      /* no specific case matches, fall back to original call */
//      DftiCreateDescriptor((desc),(prec),(domain),(dim),(sizes)))
// #endif

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif /* _MKL_DFTI_H_ */


// Parsed from mkl_trig_transforms.h

/*******************************************************************************
* Copyright 2006-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
!  Content:
!      Intel(R) Math Kernel Library (Intel(R) MKL) interface for TT routines
!******************************************************************************/

// #ifndef _MKL_TRIG_TRANSFORMS_H_
// #define _MKL_TRIG_TRANSFORMS_H_

/* definitions of Intel(R) MKL types */
// #include "mkl_types.h"
// #include "mkl_dfti.h"

// #ifdef __cplusplus
// #endif /* __cplusplus */

/* Parameters definitions for the kind of the Trigonometric Transform: */
public static final int MKL_SINE_TRANSFORM =              0;
public static final int MKL_COSINE_TRANSFORM =            1;
public static final int MKL_STAGGERED_COSINE_TRANSFORM =  2;
public static final int MKL_STAGGERED_SINE_TRANSFORM =    3;
public static final int MKL_STAGGERED2_COSINE_TRANSFORM = 4;
public static final int MKL_STAGGERED2_SINE_TRANSFORM =   5;

/* TT lower case */
public static native void d_init_trig_transform(MKL_INT arg0, MKL_INT arg1, MKL_INT arg2, DoublePointer arg3, MKL_INT arg4);
public static native void d_init_trig_transform(MKL_INT arg0, MKL_INT arg1, MKL_INT arg2, DoubleBuffer arg3, MKL_INT arg4);
public static native void d_init_trig_transform(MKL_INT arg0, MKL_INT arg1, MKL_INT arg2, double[] arg3, MKL_INT arg4);
public static native void d_commit_trig_transform(DoublePointer arg0, DFTI_DESCRIPTOR_HANDLE arg1, MKL_INT arg2, DoublePointer arg3, MKL_INT arg4);
public static native void d_commit_trig_transform(DoubleBuffer arg0, DFTI_DESCRIPTOR_HANDLE arg1, MKL_INT arg2, DoubleBuffer arg3, MKL_INT arg4);
public static native void d_commit_trig_transform(double[] arg0, DFTI_DESCRIPTOR_HANDLE arg1, MKL_INT arg2, double[] arg3, MKL_INT arg4);
public static native void d_forward_trig_transform(DoublePointer arg0, DFTI_DESCRIPTOR_HANDLE arg1, MKL_INT arg2, DoublePointer arg3, MKL_INT arg4);
public static native void d_forward_trig_transform(DoubleBuffer arg0, DFTI_DESCRIPTOR_HANDLE arg1, MKL_INT arg2, DoubleBuffer arg3, MKL_INT arg4);
public static native void d_forward_trig_transform(double[] arg0, DFTI_DESCRIPTOR_HANDLE arg1, MKL_INT arg2, double[] arg3, MKL_INT arg4);
public static native void d_backward_trig_transform(DoublePointer arg0, DFTI_DESCRIPTOR_HANDLE arg1, MKL_INT arg2, DoublePointer arg3, MKL_INT arg4);
public static native void d_backward_trig_transform(DoubleBuffer arg0, DFTI_DESCRIPTOR_HANDLE arg1, MKL_INT arg2, DoubleBuffer arg3, MKL_INT arg4);
public static native void d_backward_trig_transform(double[] arg0, DFTI_DESCRIPTOR_HANDLE arg1, MKL_INT arg2, double[] arg3, MKL_INT arg4);
public static native void s_init_trig_transform(MKL_INT arg0, MKL_INT arg1, MKL_INT arg2, FloatPointer arg3, MKL_INT arg4);
public static native void s_init_trig_transform(MKL_INT arg0, MKL_INT arg1, MKL_INT arg2, FloatBuffer arg3, MKL_INT arg4);
public static native void s_init_trig_transform(MKL_INT arg0, MKL_INT arg1, MKL_INT arg2, float[] arg3, MKL_INT arg4);
public static native void s_commit_trig_transform(FloatPointer arg0, DFTI_DESCRIPTOR_HANDLE arg1, MKL_INT arg2, FloatPointer arg3, MKL_INT arg4);
public static native void s_commit_trig_transform(FloatBuffer arg0, DFTI_DESCRIPTOR_HANDLE arg1, MKL_INT arg2, FloatBuffer arg3, MKL_INT arg4);
public static native void s_commit_trig_transform(float[] arg0, DFTI_DESCRIPTOR_HANDLE arg1, MKL_INT arg2, float[] arg3, MKL_INT arg4);
public static native void s_forward_trig_transform(FloatPointer arg0, DFTI_DESCRIPTOR_HANDLE arg1, MKL_INT arg2, FloatPointer arg3, MKL_INT arg4);
public static native void s_forward_trig_transform(FloatBuffer arg0, DFTI_DESCRIPTOR_HANDLE arg1, MKL_INT arg2, FloatBuffer arg3, MKL_INT arg4);
public static native void s_forward_trig_transform(float[] arg0, DFTI_DESCRIPTOR_HANDLE arg1, MKL_INT arg2, float[] arg3, MKL_INT arg4);
public static native void s_backward_trig_transform(FloatPointer arg0, DFTI_DESCRIPTOR_HANDLE arg1, MKL_INT arg2, FloatPointer arg3, MKL_INT arg4);
public static native void s_backward_trig_transform(FloatBuffer arg0, DFTI_DESCRIPTOR_HANDLE arg1, MKL_INT arg2, FloatBuffer arg3, MKL_INT arg4);
public static native void s_backward_trig_transform(float[] arg0, DFTI_DESCRIPTOR_HANDLE arg1, MKL_INT arg2, float[] arg3, MKL_INT arg4);
public static native void free_trig_transform(DFTI_DESCRIPTOR_HANDLE arg0, MKL_INT arg1, MKL_INT arg2);

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif /* _MKL_DFTI_H_ */


// Parsed from mkl_poisson.h

/*******************************************************************************
* Copyright 2007-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

// #ifndef _MKL_POISSON_H_
// #define _MKL_POISSON_H_

/* definitions of Intel(R) Math Kernel Library (Intel(R) MKL) types */
// #include "mkl_types.h"
// #include "mkl_dfti.h"

// #ifdef __cplusplus
// #endif /* __cplusplus */


/**
#if defined( _WIN32 ) || ( _WIN64 )
<p>
#define   d_init_Helmholtz_2D   D_INIT_HELMHOLTZ_2D
#define d_commit_Helmholtz_2D D_COMMIT_HELMHOLTZ_2D
#define        d_Helmholtz_2D        D_HELMHOLTZ_2D
#define     free_Helmholtz_2D     FREE_HELMHOLTZ_2D
<p>
#define   d_init_Helmholtz_3D   D_INIT_HELMHOLTZ_3D
#define d_commit_Helmholtz_3D D_COMMIT_HELMHOLTZ_3D
#define        d_Helmholtz_3D        D_HELMHOLTZ_3D
#define     free_Helmholtz_3D     FREE_HELMHOLTZ_3D
<p>
#define   s_init_Helmholtz_2D   S_INIT_HELMHOLTZ_2D
#define s_commit_Helmholtz_2D S_COMMIT_HELMHOLTZ_2D
#define        s_Helmholtz_2D        S_HELMHOLTZ_2D
<p>
#define   s_init_Helmholtz_3D   S_INIT_HELMHOLTZ_3D
#define s_commit_Helmholtz_3D S_COMMIT_HELMHOLTZ_3D
#define        s_Helmholtz_3D        S_HELMHOLTZ_3D
<p>
#define   d_init_sph_p      D_INIT_SPH_P
#define d_commit_sph_p    D_COMMIT_SPH_P
#define        d_sph_p           D_SPH_P
#define     free_sph_p        FREE_SPH_P
<p>
#define   d_init_sph_np     D_INIT_SPH_NP
#define d_commit_sph_np   D_COMMIT_SPH_NP
#define        d_sph_np          D_SPH_NP
#define     free_sph_np       FREE_SPH_NP
<p>
#define   s_init_sph_p      S_INIT_SPH_P
#define s_commit_sph_p    S_COMMIT_SPH_P
#define        s_sph_p           S_SPH_P
<p>
#define   s_init_sph_np     S_INIT_SPH_NP
#define s_commit_sph_np   S_COMMIT_SPH_NP
#define        s_sph_np          S_SPH_NP
<p>
#else
<p>
#define   d_init_Helmholtz_2D    d_init_helmholtz_2d_
#define d_commit_Helmholtz_2D  d_commit_helmholtz_2d_
#define        d_Helmholtz_2D         d_helmholtz_2d_
#define     free_Helmholtz_2D      free_helmholtz_2d_
<p>
#define   d_init_Helmholtz_3D    d_init_helmholtz_3d_
#define d_commit_Helmholtz_3D  d_commit_helmholtz_3d_
#define        d_Helmholtz_3D         d_helmholtz_3d_
#define     free_Helmholtz_3D      free_helmholtz_3d_
<p>
#define   s_init_Helmholtz_2D    s_init_helmholtz_2d_
#define s_commit_Helmholtz_2D  s_commit_helmholtz_2d_
#define        s_Helmholtz_2D         s_helmholtz_2d_
<p>
#define   s_init_Helmholtz_3D    s_init_helmholtz_3d_
#define s_commit_Helmholtz_3D  s_commit_helmholtz_3d_
#define        s_Helmholtz_3D         s_helmholtz_3d_
<p>
#define   d_init_sph_p      d_init_sph_p_
#define d_commit_sph_p    d_commit_sph_p_
#define        d_sph_p           d_sph_p_
#define     free_sph_p        free_sph_p_
<p>
#define   d_init_sph_np   d_init_sph_np_
#define d_commit_sph_np d_commit_sph_np_
#define        d_sph_np        d_sph_np_
#define     free_sph_np     free_sph_np_
<p>
#define   s_init_sph_p      s_init_sph_p_
#define s_commit_sph_p    s_commit_sph_p_
#define        s_sph_p           s_sph_p_
<p>
#define   s_init_sph_np   s_init_sph_np_
#define s_commit_sph_np s_commit_sph_np_
#define        s_sph_np        s_sph_np_
<p>
#endif
**/

/**/
public static final int d_init_Helmholtz_2D =    d_init_helmholtz_2d;
public static final int d_commit_Helmholtz_2D =  d_commit_helmholtz_2d;
public static final int d_Helmholtz_2D =         d_helmholtz_2d;
public static final int free_Helmholtz_2D =      free_helmholtz_2d;

public static final int d_init_Helmholtz_3D =    d_init_helmholtz_3d;
public static final int d_commit_Helmholtz_3D =  d_commit_helmholtz_3d;
public static final int d_Helmholtz_3D =         d_helmholtz_3d;
public static final int free_Helmholtz_3D =      free_helmholtz_3d;

public static final int s_init_Helmholtz_2D =    s_init_helmholtz_2d;
public static final int s_commit_Helmholtz_2D =  s_commit_helmholtz_2d;
public static final int s_Helmholtz_2D =         s_helmholtz_2d;

public static final int s_init_Helmholtz_3D =    s_init_helmholtz_3d;
public static final int s_commit_Helmholtz_3D =  s_commit_helmholtz_3d;
public static final int s_Helmholtz_3D =         s_helmholtz_3d;
/**/

public static native void d_init_Helmholtz_2D(@Const DoublePointer arg0, @Const DoublePointer arg1, @Const DoublePointer arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Cast("const char*") BytePointer arg6, @Const DoublePointer arg7, MKL_INT arg8, DoublePointer arg9, MKL_INT arg10);
public static native void d_init_Helmholtz_2D(@Const DoubleBuffer arg0, @Const DoubleBuffer arg1, @Const DoubleBuffer arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, String arg6, @Const DoubleBuffer arg7, MKL_INT arg8, DoubleBuffer arg9, MKL_INT arg10);
public static native void d_init_Helmholtz_2D(@Const double[] arg0, @Const double[] arg1, @Const double[] arg2, @Const double[] arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Cast("const char*") BytePointer arg6, @Const double[] arg7, MKL_INT arg8, double[] arg9, MKL_INT arg10);
public static native void d_init_Helmholtz_2D(@Const DoublePointer arg0, @Const DoublePointer arg1, @Const DoublePointer arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, String arg6, @Const DoublePointer arg7, MKL_INT arg8, DoublePointer arg9, MKL_INT arg10);
public static native void d_init_Helmholtz_2D(@Const DoubleBuffer arg0, @Const DoubleBuffer arg1, @Const DoubleBuffer arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Cast("const char*") BytePointer arg6, @Const DoubleBuffer arg7, MKL_INT arg8, DoubleBuffer arg9, MKL_INT arg10);
public static native void d_init_Helmholtz_2D(@Const double[] arg0, @Const double[] arg1, @Const double[] arg2, @Const double[] arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, String arg6, @Const double[] arg7, MKL_INT arg8, double[] arg9, MKL_INT arg10);
public static native void d_commit_Helmholtz_2D(DoublePointer arg0, @Const DoublePointer arg1, @Const DoublePointer arg2, @Const DoublePointer arg3, @Const DoublePointer arg4, DFTI_DESCRIPTOR_HANDLE arg5, MKL_INT arg6, DoublePointer arg7,MKL_INT arg8);
public static native void d_commit_Helmholtz_2D(DoubleBuffer arg0, @Const DoubleBuffer arg1, @Const DoubleBuffer arg2, @Const DoubleBuffer arg3, @Const DoubleBuffer arg4, DFTI_DESCRIPTOR_HANDLE arg5, MKL_INT arg6, DoubleBuffer arg7,MKL_INT arg8);
public static native void d_commit_Helmholtz_2D(double[] arg0, @Const double[] arg1, @Const double[] arg2, @Const double[] arg3, @Const double[] arg4, DFTI_DESCRIPTOR_HANDLE arg5, MKL_INT arg6, double[] arg7,MKL_INT arg8);
public static native void d_Helmholtz_2D(DoublePointer arg0, @Const DoublePointer arg1, @Const DoublePointer arg2, @Const DoublePointer arg3, @Const DoublePointer arg4, DFTI_DESCRIPTOR_HANDLE arg5, MKL_INT arg6, @Const DoublePointer arg7,MKL_INT arg8);
public static native void d_Helmholtz_2D(DoubleBuffer arg0, @Const DoubleBuffer arg1, @Const DoubleBuffer arg2, @Const DoubleBuffer arg3, @Const DoubleBuffer arg4, DFTI_DESCRIPTOR_HANDLE arg5, MKL_INT arg6, @Const DoubleBuffer arg7,MKL_INT arg8);
public static native void d_Helmholtz_2D(double[] arg0, @Const double[] arg1, @Const double[] arg2, @Const double[] arg3, @Const double[] arg4, DFTI_DESCRIPTOR_HANDLE arg5, MKL_INT arg6, @Const double[] arg7,MKL_INT arg8);
public static native void free_Helmholtz_2D(DFTI_DESCRIPTOR_HANDLE arg0, MKL_INT arg1, MKL_INT arg2);

public static native void d_init_Helmholtz_3D(@Const DoublePointer arg0, @Const DoublePointer arg1, @Const DoublePointer arg2, @Const DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const MKL_INT arg8, @Cast("const char*") BytePointer arg9, @Const DoublePointer arg10, MKL_INT arg11, DoublePointer arg12, MKL_INT arg13);
public static native void d_init_Helmholtz_3D(@Const DoubleBuffer arg0, @Const DoubleBuffer arg1, @Const DoubleBuffer arg2, @Const DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const MKL_INT arg8, String arg9, @Const DoubleBuffer arg10, MKL_INT arg11, DoubleBuffer arg12, MKL_INT arg13);
public static native void d_init_Helmholtz_3D(@Const double[] arg0, @Const double[] arg1, @Const double[] arg2, @Const double[] arg3, @Const double[] arg4, @Const double[] arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const MKL_INT arg8, @Cast("const char*") BytePointer arg9, @Const double[] arg10, MKL_INT arg11, double[] arg12, MKL_INT arg13);
public static native void d_init_Helmholtz_3D(@Const DoublePointer arg0, @Const DoublePointer arg1, @Const DoublePointer arg2, @Const DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const MKL_INT arg8, String arg9, @Const DoublePointer arg10, MKL_INT arg11, DoublePointer arg12, MKL_INT arg13);
public static native void d_init_Helmholtz_3D(@Const DoubleBuffer arg0, @Const DoubleBuffer arg1, @Const DoubleBuffer arg2, @Const DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const MKL_INT arg8, @Cast("const char*") BytePointer arg9, @Const DoubleBuffer arg10, MKL_INT arg11, DoubleBuffer arg12, MKL_INT arg13);
public static native void d_init_Helmholtz_3D(@Const double[] arg0, @Const double[] arg1, @Const double[] arg2, @Const double[] arg3, @Const double[] arg4, @Const double[] arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const MKL_INT arg8, String arg9, @Const double[] arg10, MKL_INT arg11, double[] arg12, MKL_INT arg13);
public static native void d_commit_Helmholtz_3D(DoublePointer arg0, @Const DoublePointer arg1, @Const DoublePointer arg2, @Const DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5, @Const DoublePointer arg6, DFTI_DESCRIPTOR_HANDLE arg7, DFTI_DESCRIPTOR_HANDLE arg8, MKL_INT arg9, DoublePointer arg10, MKL_INT arg11);
public static native void d_commit_Helmholtz_3D(DoubleBuffer arg0, @Const DoubleBuffer arg1, @Const DoubleBuffer arg2, @Const DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5, @Const DoubleBuffer arg6, DFTI_DESCRIPTOR_HANDLE arg7, DFTI_DESCRIPTOR_HANDLE arg8, MKL_INT arg9, DoubleBuffer arg10, MKL_INT arg11);
public static native void d_commit_Helmholtz_3D(double[] arg0, @Const double[] arg1, @Const double[] arg2, @Const double[] arg3, @Const double[] arg4, @Const double[] arg5, @Const double[] arg6, DFTI_DESCRIPTOR_HANDLE arg7, DFTI_DESCRIPTOR_HANDLE arg8, MKL_INT arg9, double[] arg10, MKL_INT arg11);
public static native void d_Helmholtz_3D(DoublePointer arg0, @Const DoublePointer arg1, @Const DoublePointer arg2, @Const DoublePointer arg3, @Const DoublePointer arg4, @Const DoublePointer arg5, @Const DoublePointer arg6, DFTI_DESCRIPTOR_HANDLE arg7, DFTI_DESCRIPTOR_HANDLE arg8, MKL_INT arg9, @Const DoublePointer arg10,MKL_INT arg11);
public static native void d_Helmholtz_3D(DoubleBuffer arg0, @Const DoubleBuffer arg1, @Const DoubleBuffer arg2, @Const DoubleBuffer arg3, @Const DoubleBuffer arg4, @Const DoubleBuffer arg5, @Const DoubleBuffer arg6, DFTI_DESCRIPTOR_HANDLE arg7, DFTI_DESCRIPTOR_HANDLE arg8, MKL_INT arg9, @Const DoubleBuffer arg10,MKL_INT arg11);
public static native void d_Helmholtz_3D(double[] arg0, @Const double[] arg1, @Const double[] arg2, @Const double[] arg3, @Const double[] arg4, @Const double[] arg5, @Const double[] arg6, DFTI_DESCRIPTOR_HANDLE arg7, DFTI_DESCRIPTOR_HANDLE arg8, MKL_INT arg9, @Const double[] arg10,MKL_INT arg11);
public static native void free_Helmholtz_3D(DFTI_DESCRIPTOR_HANDLE arg0, DFTI_DESCRIPTOR_HANDLE arg1, MKL_INT arg2, MKL_INT arg3);

public static native void s_init_Helmholtz_2D(@Const FloatPointer arg0, @Const FloatPointer arg1, @Const FloatPointer arg2, @Const FloatPointer arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Cast("const char*") BytePointer arg6, @Const FloatPointer arg7, MKL_INT arg8, FloatPointer arg9, MKL_INT arg10);
public static native void s_init_Helmholtz_2D(@Const FloatBuffer arg0, @Const FloatBuffer arg1, @Const FloatBuffer arg2, @Const FloatBuffer arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, String arg6, @Const FloatBuffer arg7, MKL_INT arg8, FloatBuffer arg9, MKL_INT arg10);
public static native void s_init_Helmholtz_2D(@Const float[] arg0, @Const float[] arg1, @Const float[] arg2, @Const float[] arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Cast("const char*") BytePointer arg6, @Const float[] arg7, MKL_INT arg8, float[] arg9, MKL_INT arg10);
public static native void s_init_Helmholtz_2D(@Const FloatPointer arg0, @Const FloatPointer arg1, @Const FloatPointer arg2, @Const FloatPointer arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, String arg6, @Const FloatPointer arg7, MKL_INT arg8, FloatPointer arg9, MKL_INT arg10);
public static native void s_init_Helmholtz_2D(@Const FloatBuffer arg0, @Const FloatBuffer arg1, @Const FloatBuffer arg2, @Const FloatBuffer arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Cast("const char*") BytePointer arg6, @Const FloatBuffer arg7, MKL_INT arg8, FloatBuffer arg9, MKL_INT arg10);
public static native void s_init_Helmholtz_2D(@Const float[] arg0, @Const float[] arg1, @Const float[] arg2, @Const float[] arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, String arg6, @Const float[] arg7, MKL_INT arg8, float[] arg9, MKL_INT arg10);
public static native void s_commit_Helmholtz_2D(FloatPointer arg0, @Const FloatPointer arg1, @Const FloatPointer arg2, @Const FloatPointer arg3, @Const FloatPointer arg4, DFTI_DESCRIPTOR_HANDLE arg5, MKL_INT arg6, FloatPointer arg7, MKL_INT arg8);
public static native void s_commit_Helmholtz_2D(FloatBuffer arg0, @Const FloatBuffer arg1, @Const FloatBuffer arg2, @Const FloatBuffer arg3, @Const FloatBuffer arg4, DFTI_DESCRIPTOR_HANDLE arg5, MKL_INT arg6, FloatBuffer arg7, MKL_INT arg8);
public static native void s_commit_Helmholtz_2D(float[] arg0, @Const float[] arg1, @Const float[] arg2, @Const float[] arg3, @Const float[] arg4, DFTI_DESCRIPTOR_HANDLE arg5, MKL_INT arg6, float[] arg7, MKL_INT arg8);
public static native void s_Helmholtz_2D(FloatPointer arg0, @Const FloatPointer arg1, @Const FloatPointer arg2, @Const FloatPointer arg3, @Const FloatPointer arg4, DFTI_DESCRIPTOR_HANDLE arg5, MKL_INT arg6, @Const FloatPointer arg7, MKL_INT arg8);
public static native void s_Helmholtz_2D(FloatBuffer arg0, @Const FloatBuffer arg1, @Const FloatBuffer arg2, @Const FloatBuffer arg3, @Const FloatBuffer arg4, DFTI_DESCRIPTOR_HANDLE arg5, MKL_INT arg6, @Const FloatBuffer arg7, MKL_INT arg8);
public static native void s_Helmholtz_2D(float[] arg0, @Const float[] arg1, @Const float[] arg2, @Const float[] arg3, @Const float[] arg4, DFTI_DESCRIPTOR_HANDLE arg5, MKL_INT arg6, @Const float[] arg7, MKL_INT arg8);

public static native void s_init_Helmholtz_3D(@Const FloatPointer arg0, @Const FloatPointer arg1, @Const FloatPointer arg2, @Const FloatPointer arg3, @Const FloatPointer arg4, @Const FloatPointer arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const MKL_INT arg8, @Cast("const char*") BytePointer arg9, @Const FloatPointer arg10,MKL_INT arg11,FloatPointer arg12,MKL_INT arg13);
public static native void s_init_Helmholtz_3D(@Const FloatBuffer arg0, @Const FloatBuffer arg1, @Const FloatBuffer arg2, @Const FloatBuffer arg3, @Const FloatBuffer arg4, @Const FloatBuffer arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const MKL_INT arg8, String arg9, @Const FloatBuffer arg10,MKL_INT arg11,FloatBuffer arg12,MKL_INT arg13);
public static native void s_init_Helmholtz_3D(@Const float[] arg0, @Const float[] arg1, @Const float[] arg2, @Const float[] arg3, @Const float[] arg4, @Const float[] arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const MKL_INT arg8, @Cast("const char*") BytePointer arg9, @Const float[] arg10,MKL_INT arg11,float[] arg12,MKL_INT arg13);
public static native void s_init_Helmholtz_3D(@Const FloatPointer arg0, @Const FloatPointer arg1, @Const FloatPointer arg2, @Const FloatPointer arg3, @Const FloatPointer arg4, @Const FloatPointer arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const MKL_INT arg8, String arg9, @Const FloatPointer arg10,MKL_INT arg11,FloatPointer arg12,MKL_INT arg13);
public static native void s_init_Helmholtz_3D(@Const FloatBuffer arg0, @Const FloatBuffer arg1, @Const FloatBuffer arg2, @Const FloatBuffer arg3, @Const FloatBuffer arg4, @Const FloatBuffer arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const MKL_INT arg8, @Cast("const char*") BytePointer arg9, @Const FloatBuffer arg10,MKL_INT arg11,FloatBuffer arg12,MKL_INT arg13);
public static native void s_init_Helmholtz_3D(@Const float[] arg0, @Const float[] arg1, @Const float[] arg2, @Const float[] arg3, @Const float[] arg4, @Const float[] arg5, @Const MKL_INT arg6, @Const MKL_INT arg7, @Const MKL_INT arg8, String arg9, @Const float[] arg10,MKL_INT arg11,float[] arg12,MKL_INT arg13);
public static native void s_commit_Helmholtz_3D(FloatPointer arg0, @Const FloatPointer arg1, @Const FloatPointer arg2, @Const FloatPointer arg3, @Const FloatPointer arg4, @Const FloatPointer arg5, @Const FloatPointer arg6, DFTI_DESCRIPTOR_HANDLE arg7, DFTI_DESCRIPTOR_HANDLE arg8, MKL_INT arg9, FloatPointer arg10, MKL_INT arg11);
public static native void s_commit_Helmholtz_3D(FloatBuffer arg0, @Const FloatBuffer arg1, @Const FloatBuffer arg2, @Const FloatBuffer arg3, @Const FloatBuffer arg4, @Const FloatBuffer arg5, @Const FloatBuffer arg6, DFTI_DESCRIPTOR_HANDLE arg7, DFTI_DESCRIPTOR_HANDLE arg8, MKL_INT arg9, FloatBuffer arg10, MKL_INT arg11);
public static native void s_commit_Helmholtz_3D(float[] arg0, @Const float[] arg1, @Const float[] arg2, @Const float[] arg3, @Const float[] arg4, @Const float[] arg5, @Const float[] arg6, DFTI_DESCRIPTOR_HANDLE arg7, DFTI_DESCRIPTOR_HANDLE arg8, MKL_INT arg9, float[] arg10, MKL_INT arg11);
public static native void s_Helmholtz_3D(FloatPointer arg0, @Const FloatPointer arg1, @Const FloatPointer arg2, @Const FloatPointer arg3, @Const FloatPointer arg4, @Const FloatPointer arg5, @Const FloatPointer arg6, DFTI_DESCRIPTOR_HANDLE arg7, DFTI_DESCRIPTOR_HANDLE arg8, MKL_INT arg9, @Const FloatPointer arg10,MKL_INT arg11);
public static native void s_Helmholtz_3D(FloatBuffer arg0, @Const FloatBuffer arg1, @Const FloatBuffer arg2, @Const FloatBuffer arg3, @Const FloatBuffer arg4, @Const FloatBuffer arg5, @Const FloatBuffer arg6, DFTI_DESCRIPTOR_HANDLE arg7, DFTI_DESCRIPTOR_HANDLE arg8, MKL_INT arg9, @Const FloatBuffer arg10,MKL_INT arg11);
public static native void s_Helmholtz_3D(float[] arg0, @Const float[] arg1, @Const float[] arg2, @Const float[] arg3, @Const float[] arg4, @Const float[] arg5, @Const float[] arg6, DFTI_DESCRIPTOR_HANDLE arg7, DFTI_DESCRIPTOR_HANDLE arg8, MKL_INT arg9, @Const float[] arg10,MKL_INT arg11);

public static native void d_init_sph_p(@Const DoublePointer arg0, @Const DoublePointer arg1, @Const DoublePointer arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const DoublePointer arg6, MKL_INT arg7, DoublePointer arg8, MKL_INT arg9);
public static native void d_init_sph_p(@Const DoubleBuffer arg0, @Const DoubleBuffer arg1, @Const DoubleBuffer arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const DoubleBuffer arg6, MKL_INT arg7, DoubleBuffer arg8, MKL_INT arg9);
public static native void d_init_sph_p(@Const double[] arg0, @Const double[] arg1, @Const double[] arg2, @Const double[] arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const double[] arg6, MKL_INT arg7, double[] arg8, MKL_INT arg9);
public static native void d_commit_sph_p(DoublePointer arg0,DFTI_DESCRIPTOR_HANDLE arg1,DFTI_DESCRIPTOR_HANDLE arg2,MKL_INT arg3,DoublePointer arg4,MKL_INT arg5);
public static native void d_commit_sph_p(DoubleBuffer arg0,DFTI_DESCRIPTOR_HANDLE arg1,DFTI_DESCRIPTOR_HANDLE arg2,MKL_INT arg3,DoubleBuffer arg4,MKL_INT arg5);
public static native void d_commit_sph_p(double[] arg0,DFTI_DESCRIPTOR_HANDLE arg1,DFTI_DESCRIPTOR_HANDLE arg2,MKL_INT arg3,double[] arg4,MKL_INT arg5);
public static native void d_sph_p(DoublePointer arg0,DFTI_DESCRIPTOR_HANDLE arg1,DFTI_DESCRIPTOR_HANDLE arg2,MKL_INT arg3,DoublePointer arg4,MKL_INT arg5);
public static native void d_sph_p(DoubleBuffer arg0,DFTI_DESCRIPTOR_HANDLE arg1,DFTI_DESCRIPTOR_HANDLE arg2,MKL_INT arg3,DoubleBuffer arg4,MKL_INT arg5);
public static native void d_sph_p(double[] arg0,DFTI_DESCRIPTOR_HANDLE arg1,DFTI_DESCRIPTOR_HANDLE arg2,MKL_INT arg3,double[] arg4,MKL_INT arg5);
public static native void free_sph_p(DFTI_DESCRIPTOR_HANDLE arg0,DFTI_DESCRIPTOR_HANDLE arg1,MKL_INT arg2,MKL_INT arg3);

public static native void d_init_sph_np(@Const DoublePointer arg0, @Const DoublePointer arg1, @Const DoublePointer arg2, @Const DoublePointer arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const DoublePointer arg6, MKL_INT arg7, DoublePointer arg8, MKL_INT arg9);
public static native void d_init_sph_np(@Const DoubleBuffer arg0, @Const DoubleBuffer arg1, @Const DoubleBuffer arg2, @Const DoubleBuffer arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const DoubleBuffer arg6, MKL_INT arg7, DoubleBuffer arg8, MKL_INT arg9);
public static native void d_init_sph_np(@Const double[] arg0, @Const double[] arg1, @Const double[] arg2, @Const double[] arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const double[] arg6, MKL_INT arg7, double[] arg8, MKL_INT arg9);
public static native void d_commit_sph_np(DoublePointer arg0,DFTI_DESCRIPTOR_HANDLE arg1,MKL_INT arg2,DoublePointer arg3,MKL_INT arg4);
public static native void d_commit_sph_np(DoubleBuffer arg0,DFTI_DESCRIPTOR_HANDLE arg1,MKL_INT arg2,DoubleBuffer arg3,MKL_INT arg4);
public static native void d_commit_sph_np(double[] arg0,DFTI_DESCRIPTOR_HANDLE arg1,MKL_INT arg2,double[] arg3,MKL_INT arg4);
public static native void d_sph_np(DoublePointer arg0,DFTI_DESCRIPTOR_HANDLE arg1,MKL_INT arg2,DoublePointer arg3,MKL_INT arg4);
public static native void d_sph_np(DoubleBuffer arg0,DFTI_DESCRIPTOR_HANDLE arg1,MKL_INT arg2,DoubleBuffer arg3,MKL_INT arg4);
public static native void d_sph_np(double[] arg0,DFTI_DESCRIPTOR_HANDLE arg1,MKL_INT arg2,double[] arg3,MKL_INT arg4);
public static native void free_sph_np(DFTI_DESCRIPTOR_HANDLE arg0,MKL_INT arg1,MKL_INT arg2);

public static native void s_init_sph_p(@Const FloatPointer arg0, @Const FloatPointer arg1, @Const FloatPointer arg2, @Const FloatPointer arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const FloatPointer arg6, MKL_INT arg7, FloatPointer arg8,MKL_INT arg9);
public static native void s_init_sph_p(@Const FloatBuffer arg0, @Const FloatBuffer arg1, @Const FloatBuffer arg2, @Const FloatBuffer arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const FloatBuffer arg6, MKL_INT arg7, FloatBuffer arg8,MKL_INT arg9);
public static native void s_init_sph_p(@Const float[] arg0, @Const float[] arg1, @Const float[] arg2, @Const float[] arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const float[] arg6, MKL_INT arg7, float[] arg8,MKL_INT arg9);
public static native void s_commit_sph_p(FloatPointer arg0,DFTI_DESCRIPTOR_HANDLE arg1,DFTI_DESCRIPTOR_HANDLE arg2,MKL_INT arg3,FloatPointer arg4,MKL_INT arg5);
public static native void s_commit_sph_p(FloatBuffer arg0,DFTI_DESCRIPTOR_HANDLE arg1,DFTI_DESCRIPTOR_HANDLE arg2,MKL_INT arg3,FloatBuffer arg4,MKL_INT arg5);
public static native void s_commit_sph_p(float[] arg0,DFTI_DESCRIPTOR_HANDLE arg1,DFTI_DESCRIPTOR_HANDLE arg2,MKL_INT arg3,float[] arg4,MKL_INT arg5);
public static native void s_sph_p(FloatPointer arg0,DFTI_DESCRIPTOR_HANDLE arg1,DFTI_DESCRIPTOR_HANDLE arg2,MKL_INT arg3,FloatPointer arg4,MKL_INT arg5);
public static native void s_sph_p(FloatBuffer arg0,DFTI_DESCRIPTOR_HANDLE arg1,DFTI_DESCRIPTOR_HANDLE arg2,MKL_INT arg3,FloatBuffer arg4,MKL_INT arg5);
public static native void s_sph_p(float[] arg0,DFTI_DESCRIPTOR_HANDLE arg1,DFTI_DESCRIPTOR_HANDLE arg2,MKL_INT arg3,float[] arg4,MKL_INT arg5);

public static native void s_init_sph_np(@Const FloatPointer arg0, @Const FloatPointer arg1, @Const FloatPointer arg2, @Const FloatPointer arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const FloatPointer arg6, MKL_INT arg7, FloatPointer arg8,MKL_INT arg9);
public static native void s_init_sph_np(@Const FloatBuffer arg0, @Const FloatBuffer arg1, @Const FloatBuffer arg2, @Const FloatBuffer arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const FloatBuffer arg6, MKL_INT arg7, FloatBuffer arg8,MKL_INT arg9);
public static native void s_init_sph_np(@Const float[] arg0, @Const float[] arg1, @Const float[] arg2, @Const float[] arg3, @Const MKL_INT arg4, @Const MKL_INT arg5, @Const float[] arg6, MKL_INT arg7, float[] arg8,MKL_INT arg9);
public static native void s_commit_sph_np(FloatPointer arg0,DFTI_DESCRIPTOR_HANDLE arg1,MKL_INT arg2,FloatPointer arg3,MKL_INT arg4);
public static native void s_commit_sph_np(FloatBuffer arg0,DFTI_DESCRIPTOR_HANDLE arg1,MKL_INT arg2,FloatBuffer arg3,MKL_INT arg4);
public static native void s_commit_sph_np(float[] arg0,DFTI_DESCRIPTOR_HANDLE arg1,MKL_INT arg2,float[] arg3,MKL_INT arg4);
public static native void s_sph_np(FloatPointer arg0,DFTI_DESCRIPTOR_HANDLE arg1,MKL_INT arg2,FloatPointer arg3,MKL_INT arg4);
public static native void s_sph_np(FloatBuffer arg0,DFTI_DESCRIPTOR_HANDLE arg1,MKL_INT arg2,FloatBuffer arg3,MKL_INT arg4);
public static native void s_sph_np(float[] arg0,DFTI_DESCRIPTOR_HANDLE arg1,MKL_INT arg2,float[] arg3,MKL_INT arg4);

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif /* _MKL_POISSON_H_ */


// Parsed from mkl_solvers_ee.h

/*******************************************************************************
* Copyright 2012-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

/*
*   Content:
*           Intel(R) Math Kernel Library (Intel(R) MKL) FEAST C header file
*
*           Contains interface to FEAST.
*
********************************************************************************
*/
// #if !defined( __MKL_SOLVERS_EE_H )
// #define __MKL_SOLVERS_EE_H
// #include "mkl_types.h"

// #ifdef __cplusplus
// #endif /* __cplusplus */

public static native void feastinit(MKL_INT fpm);
public static native void FEASTINIT(MKL_INT fpm);

public static native void dfeast_scsrev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const DoublePointer sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void dfeast_scsrev(String uplo, @Const MKL_INT n, @Const DoubleBuffer sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void dfeast_scsrev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const double[] sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);
public static native void dfeast_scsrev(String uplo, @Const MKL_INT n, @Const DoublePointer sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void dfeast_scsrev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const DoubleBuffer sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void dfeast_scsrev(String uplo, @Const MKL_INT n, @Const double[] sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);
public static native void DFEAST_SCSREV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const DoublePointer sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void DFEAST_SCSREV(String uplo, @Const MKL_INT n, @Const DoubleBuffer sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void DFEAST_SCSREV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const double[] sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);
public static native void DFEAST_SCSREV(String uplo, @Const MKL_INT n, @Const DoublePointer sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void DFEAST_SCSREV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const DoubleBuffer sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void DFEAST_SCSREV(String uplo, @Const MKL_INT n, @Const double[] sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);

public static native void sfeast_sygv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const FloatPointer a, @Const MKL_INT lda, @Const FloatPointer b, @Const MKL_INT ldb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void sfeast_sygv(String uplo, @Const MKL_INT n, @Const FloatBuffer a, @Const MKL_INT lda, @Const FloatBuffer b, @Const MKL_INT ldb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void sfeast_sygv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const float[] a, @Const MKL_INT lda, @Const float[] b, @Const MKL_INT ldb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);
public static native void sfeast_sygv(String uplo, @Const MKL_INT n, @Const FloatPointer a, @Const MKL_INT lda, @Const FloatPointer b, @Const MKL_INT ldb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void sfeast_sygv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const FloatBuffer a, @Const MKL_INT lda, @Const FloatBuffer b, @Const MKL_INT ldb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void sfeast_sygv(String uplo, @Const MKL_INT n, @Const float[] a, @Const MKL_INT lda, @Const float[] b, @Const MKL_INT ldb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);
public static native void SFEAST_SYGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const FloatPointer a, @Const MKL_INT lda, @Const FloatPointer b, @Const MKL_INT ldb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void SFEAST_SYGV(String uplo, @Const MKL_INT n, @Const FloatBuffer a, @Const MKL_INT lda, @Const FloatBuffer b, @Const MKL_INT ldb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void SFEAST_SYGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const float[] a, @Const MKL_INT lda, @Const float[] b, @Const MKL_INT ldb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);
public static native void SFEAST_SYGV(String uplo, @Const MKL_INT n, @Const FloatPointer a, @Const MKL_INT lda, @Const FloatPointer b, @Const MKL_INT ldb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void SFEAST_SYGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const FloatBuffer a, @Const MKL_INT lda, @Const FloatBuffer b, @Const MKL_INT ldb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void SFEAST_SYGV(String uplo, @Const MKL_INT n, @Const float[] a, @Const MKL_INT lda, @Const float[] b, @Const MKL_INT ldb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);

public static native void sfeast_scsrev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const FloatPointer sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void sfeast_scsrev(String uplo, @Const MKL_INT n, @Const FloatBuffer sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void sfeast_scsrev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const float[] sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);
public static native void sfeast_scsrev(String uplo, @Const MKL_INT n, @Const FloatPointer sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void sfeast_scsrev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const FloatBuffer sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void sfeast_scsrev(String uplo, @Const MKL_INT n, @Const float[] sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);
public static native void SFEAST_SCSREV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const FloatPointer sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void SFEAST_SCSREV(String uplo, @Const MKL_INT n, @Const FloatBuffer sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void SFEAST_SCSREV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const float[] sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);
public static native void SFEAST_SCSREV(String uplo, @Const MKL_INT n, @Const FloatPointer sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void SFEAST_SCSREV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const FloatBuffer sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void SFEAST_SCSREV(String uplo, @Const MKL_INT n, @Const float[] sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);

public static native void zfeast_hbgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void zfeast_hbgv(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void zfeast_hbgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);
public static native void zfeast_hbgv(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void zfeast_hbgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void zfeast_hbgv(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);
public static native void ZFEAST_HBGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void ZFEAST_HBGV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void ZFEAST_HBGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);
public static native void ZFEAST_HBGV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void ZFEAST_HBGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void ZFEAST_HBGV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);

public static native void zfeast_hcsrev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void zfeast_hcsrev(String uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void zfeast_hcsrev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);
public static native void zfeast_hcsrev(String uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void zfeast_hcsrev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void zfeast_hcsrev(String uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);
public static native void ZFEAST_HCSREV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void ZFEAST_HCSREV(String uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void ZFEAST_HCSREV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);
public static native void ZFEAST_HCSREV(String uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void ZFEAST_HCSREV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void ZFEAST_HCSREV(String uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);

public static native void cfeast_hbev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void cfeast_hbev(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void cfeast_hbev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);
public static native void cfeast_hbev(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void cfeast_hbev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void cfeast_hbev(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);
public static native void CFEAST_HBEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void CFEAST_HBEV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void CFEAST_HBEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);
public static native void CFEAST_HBEV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void CFEAST_HBEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void CFEAST_HBEV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);

public static native void zfeast_heev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void zfeast_heev(String uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void zfeast_heev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);
public static native void zfeast_heev(String uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void zfeast_heev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void zfeast_heev(String uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);
public static native void ZFEAST_HEEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void ZFEAST_HEEV(String uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void ZFEAST_HEEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);
public static native void ZFEAST_HEEV(String uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void ZFEAST_HEEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void ZFEAST_HEEV(String uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);

public static native void zfeast_hcsrgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex16 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void zfeast_hcsrgv(String uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex16 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void zfeast_hcsrgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex16 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);
public static native void zfeast_hcsrgv(String uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex16 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void zfeast_hcsrgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex16 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void zfeast_hcsrgv(String uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex16 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);
public static native void ZFEAST_HCSRGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex16 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void ZFEAST_HCSRGV(String uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex16 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void ZFEAST_HCSRGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex16 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);
public static native void ZFEAST_HCSRGV(String uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex16 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void ZFEAST_HCSRGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex16 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void ZFEAST_HCSRGV(String uplo, @Const MKL_INT n, @Const MKL_Complex16 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex16 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);

public static native void sfeast_scsrgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const FloatPointer sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const FloatPointer sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void sfeast_scsrgv(String uplo, @Const MKL_INT n, @Const FloatBuffer sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const FloatBuffer sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void sfeast_scsrgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const float[] sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const float[] sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);
public static native void sfeast_scsrgv(String uplo, @Const MKL_INT n, @Const FloatPointer sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const FloatPointer sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void sfeast_scsrgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const FloatBuffer sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const FloatBuffer sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void sfeast_scsrgv(String uplo, @Const MKL_INT n, @Const float[] sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const float[] sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);
public static native void SFEAST_SCSRGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const FloatPointer sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const FloatPointer sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void SFEAST_SCSRGV(String uplo, @Const MKL_INT n, @Const FloatBuffer sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const FloatBuffer sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void SFEAST_SCSRGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const float[] sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const float[] sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);
public static native void SFEAST_SCSRGV(String uplo, @Const MKL_INT n, @Const FloatPointer sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const FloatPointer sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void SFEAST_SCSRGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const FloatBuffer sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const FloatBuffer sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void SFEAST_SCSRGV(String uplo, @Const MKL_INT n, @Const float[] sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const float[] sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);

public static native void dfeast_srci(MKL_INT ijob, @Const MKL_INT n, MKL_Complex16 ze, DoublePointer work, MKL_Complex16 workc, DoublePointer aq, DoublePointer sq, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer lambda, DoublePointer q, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void dfeast_srci(MKL_INT ijob, @Const MKL_INT n, MKL_Complex16 ze, DoubleBuffer work, MKL_Complex16 workc, DoubleBuffer aq, DoubleBuffer sq, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer lambda, DoubleBuffer q, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void dfeast_srci(MKL_INT ijob, @Const MKL_INT n, MKL_Complex16 ze, double[] work, MKL_Complex16 workc, double[] aq, double[] sq, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] lambda, double[] q, MKL_INT m, double[] res, MKL_INT info);
public static native void DFEAST_SRCI(MKL_INT ijob, @Const MKL_INT n, MKL_Complex16 ze, DoublePointer work, MKL_Complex16 workc, DoublePointer aq, DoublePointer sq, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer lambda, DoublePointer q, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void DFEAST_SRCI(MKL_INT ijob, @Const MKL_INT n, MKL_Complex16 ze, DoubleBuffer work, MKL_Complex16 workc, DoubleBuffer aq, DoubleBuffer sq, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer lambda, DoubleBuffer q, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void DFEAST_SRCI(MKL_INT ijob, @Const MKL_INT n, MKL_Complex16 ze, double[] work, MKL_Complex16 workc, double[] aq, double[] sq, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] lambda, double[] q, MKL_INT m, double[] res, MKL_INT info);

public static native void sfeast_sbev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const FloatPointer a, @Const MKL_INT lda, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void sfeast_sbev(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const FloatBuffer a, @Const MKL_INT lda, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void sfeast_sbev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const float[] a, @Const MKL_INT lda, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);
public static native void sfeast_sbev(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const FloatPointer a, @Const MKL_INT lda, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void sfeast_sbev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const FloatBuffer a, @Const MKL_INT lda, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void sfeast_sbev(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const float[] a, @Const MKL_INT lda, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);
public static native void SFEAST_SBEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const FloatPointer a, @Const MKL_INT lda, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void SFEAST_SBEV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const FloatBuffer a, @Const MKL_INT lda, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void SFEAST_SBEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const float[] a, @Const MKL_INT lda, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);
public static native void SFEAST_SBEV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const FloatPointer a, @Const MKL_INT lda, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void SFEAST_SBEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const FloatBuffer a, @Const MKL_INT lda, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void SFEAST_SBEV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const float[] a, @Const MKL_INT lda, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);

public static native void dfeast_sygv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const DoublePointer a, @Const MKL_INT lda, @Const DoublePointer b, @Const MKL_INT ldb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void dfeast_sygv(String uplo, @Const MKL_INT n, @Const DoubleBuffer a, @Const MKL_INT lda, @Const DoubleBuffer b, @Const MKL_INT ldb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void dfeast_sygv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const double[] a, @Const MKL_INT lda, @Const double[] b, @Const MKL_INT ldb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);
public static native void dfeast_sygv(String uplo, @Const MKL_INT n, @Const DoublePointer a, @Const MKL_INT lda, @Const DoublePointer b, @Const MKL_INT ldb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void dfeast_sygv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const DoubleBuffer a, @Const MKL_INT lda, @Const DoubleBuffer b, @Const MKL_INT ldb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void dfeast_sygv(String uplo, @Const MKL_INT n, @Const double[] a, @Const MKL_INT lda, @Const double[] b, @Const MKL_INT ldb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);
public static native void DFEAST_SYGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const DoublePointer a, @Const MKL_INT lda, @Const DoublePointer b, @Const MKL_INT ldb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void DFEAST_SYGV(String uplo, @Const MKL_INT n, @Const DoubleBuffer a, @Const MKL_INT lda, @Const DoubleBuffer b, @Const MKL_INT ldb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void DFEAST_SYGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const double[] a, @Const MKL_INT lda, @Const double[] b, @Const MKL_INT ldb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);
public static native void DFEAST_SYGV(String uplo, @Const MKL_INT n, @Const DoublePointer a, @Const MKL_INT lda, @Const DoublePointer b, @Const MKL_INT ldb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void DFEAST_SYGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const DoubleBuffer a, @Const MKL_INT lda, @Const DoubleBuffer b, @Const MKL_INT ldb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void DFEAST_SYGV(String uplo, @Const MKL_INT n, @Const double[] a, @Const MKL_INT lda, @Const double[] b, @Const MKL_INT ldb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);

public static native void cfeast_hegv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void cfeast_hegv(String uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void cfeast_hegv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);
public static native void cfeast_hegv(String uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void cfeast_hegv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void cfeast_hegv(String uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);
public static native void CFEAST_HEGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void CFEAST_HEGV(String uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void CFEAST_HEGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);
public static native void CFEAST_HEGV(String uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void CFEAST_HEGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void CFEAST_HEGV(String uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);

public static native void zfeast_hrci(MKL_INT ijob, @Const MKL_INT n, MKL_Complex16 ze, MKL_Complex16 work, MKL_Complex16 workc, MKL_Complex16 zaq, MKL_Complex16 zsq, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer lambda, MKL_Complex16 q, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void zfeast_hrci(MKL_INT ijob, @Const MKL_INT n, MKL_Complex16 ze, MKL_Complex16 work, MKL_Complex16 workc, MKL_Complex16 zaq, MKL_Complex16 zsq, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer lambda, MKL_Complex16 q, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void zfeast_hrci(MKL_INT ijob, @Const MKL_INT n, MKL_Complex16 ze, MKL_Complex16 work, MKL_Complex16 workc, MKL_Complex16 zaq, MKL_Complex16 zsq, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] lambda, MKL_Complex16 q, MKL_INT m, double[] res, MKL_INT info);
public static native void ZFEAST_HRCI(MKL_INT ijob, @Const MKL_INT n, MKL_Complex16 ze, MKL_Complex16 work, MKL_Complex16 workc, MKL_Complex16 zaq, MKL_Complex16 zsq, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer lambda, MKL_Complex16 q, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void ZFEAST_HRCI(MKL_INT ijob, @Const MKL_INT n, MKL_Complex16 ze, MKL_Complex16 work, MKL_Complex16 workc, MKL_Complex16 zaq, MKL_Complex16 zsq, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer lambda, MKL_Complex16 q, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void ZFEAST_HRCI(MKL_INT ijob, @Const MKL_INT n, MKL_Complex16 ze, MKL_Complex16 work, MKL_Complex16 workc, MKL_Complex16 zaq, MKL_Complex16 zsq, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] lambda, MKL_Complex16 q, MKL_INT m, double[] res, MKL_INT info);

public static native void cfeast_hrci(MKL_INT ijob, @Const MKL_INT n, MKL_Complex8 ze, MKL_Complex8 work, MKL_Complex8 workc, MKL_Complex8 zaq, MKL_Complex8 zsq, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer lambda, MKL_Complex8 q, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void cfeast_hrci(MKL_INT ijob, @Const MKL_INT n, MKL_Complex8 ze, MKL_Complex8 work, MKL_Complex8 workc, MKL_Complex8 zaq, MKL_Complex8 zsq, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer lambda, MKL_Complex8 q, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void cfeast_hrci(MKL_INT ijob, @Const MKL_INT n, MKL_Complex8 ze, MKL_Complex8 work, MKL_Complex8 workc, MKL_Complex8 zaq, MKL_Complex8 zsq, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] lambda, MKL_Complex8 q, MKL_INT m, float[] res, MKL_INT info);
public static native void CFEAST_HRCI(MKL_INT ijob, @Const MKL_INT n, MKL_Complex8 ze, MKL_Complex8 work, MKL_Complex8 workc, MKL_Complex8 zaq, MKL_Complex8 zsq, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer lambda, MKL_Complex8 q, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void CFEAST_HRCI(MKL_INT ijob, @Const MKL_INT n, MKL_Complex8 ze, MKL_Complex8 work, MKL_Complex8 workc, MKL_Complex8 zaq, MKL_Complex8 zsq, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer lambda, MKL_Complex8 q, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void CFEAST_HRCI(MKL_INT ijob, @Const MKL_INT n, MKL_Complex8 ze, MKL_Complex8 work, MKL_Complex8 workc, MKL_Complex8 zaq, MKL_Complex8 zsq, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] lambda, MKL_Complex8 q, MKL_INT m, float[] res, MKL_INT info);

public static native void zfeast_hegv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void zfeast_hegv(String uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void zfeast_hegv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);
public static native void zfeast_hegv(String uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void zfeast_hegv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void zfeast_hegv(String uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);
public static native void ZFEAST_HEGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void ZFEAST_HEGV(String uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void ZFEAST_HEGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);
public static native void ZFEAST_HEGV(String uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void ZFEAST_HEGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void ZFEAST_HEGV(String uplo, @Const MKL_INT n, @Const MKL_Complex16 a, @Const MKL_INT lda, @Const MKL_Complex16 b, @Const MKL_INT ldb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);

public static native void sfeast_srci(MKL_INT ijob, @Const MKL_INT n, MKL_Complex8 ze, FloatPointer work, MKL_Complex8 workc, FloatPointer aq, FloatPointer sq, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer lambda, FloatPointer q, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void sfeast_srci(MKL_INT ijob, @Const MKL_INT n, MKL_Complex8 ze, FloatBuffer work, MKL_Complex8 workc, FloatBuffer aq, FloatBuffer sq, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer lambda, FloatBuffer q, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void sfeast_srci(MKL_INT ijob, @Const MKL_INT n, MKL_Complex8 ze, float[] work, MKL_Complex8 workc, float[] aq, float[] sq, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] lambda, float[] q, MKL_INT m, float[] res, MKL_INT info);
public static native void SFEAST_SRCI(MKL_INT ijob, @Const MKL_INT n, MKL_Complex8 ze, FloatPointer work, MKL_Complex8 workc, FloatPointer aq, FloatPointer sq, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer lambda, FloatPointer q, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void SFEAST_SRCI(MKL_INT ijob, @Const MKL_INT n, MKL_Complex8 ze, FloatBuffer work, MKL_Complex8 workc, FloatBuffer aq, FloatBuffer sq, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer lambda, FloatBuffer q, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void SFEAST_SRCI(MKL_INT ijob, @Const MKL_INT n, MKL_Complex8 ze, float[] work, MKL_Complex8 workc, float[] aq, float[] sq, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] lambda, float[] q, MKL_INT m, float[] res, MKL_INT info);

public static native void dfeast_scsrgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const DoublePointer sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const DoublePointer sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void dfeast_scsrgv(String uplo, @Const MKL_INT n, @Const DoubleBuffer sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const DoubleBuffer sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void dfeast_scsrgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const double[] sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const double[] sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);
public static native void dfeast_scsrgv(String uplo, @Const MKL_INT n, @Const DoublePointer sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const DoublePointer sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void dfeast_scsrgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const DoubleBuffer sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const DoubleBuffer sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void dfeast_scsrgv(String uplo, @Const MKL_INT n, @Const double[] sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const double[] sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);
public static native void DFEAST_SCSRGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const DoublePointer sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const DoublePointer sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void DFEAST_SCSRGV(String uplo, @Const MKL_INT n, @Const DoubleBuffer sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const DoubleBuffer sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void DFEAST_SCSRGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const double[] sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const double[] sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);
public static native void DFEAST_SCSRGV(String uplo, @Const MKL_INT n, @Const DoublePointer sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const DoublePointer sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void DFEAST_SCSRGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const DoubleBuffer sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const DoubleBuffer sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void DFEAST_SCSRGV(String uplo, @Const MKL_INT n, @Const double[] sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const double[] sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);

public static native void sfeast_syev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const FloatPointer a, @Const MKL_INT lda, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void sfeast_syev(String uplo, @Const MKL_INT n, @Const FloatBuffer a, @Const MKL_INT lda, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void sfeast_syev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const float[] a, @Const MKL_INT lda, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);
public static native void sfeast_syev(String uplo, @Const MKL_INT n, @Const FloatPointer a, @Const MKL_INT lda, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void sfeast_syev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const FloatBuffer a, @Const MKL_INT lda, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void sfeast_syev(String uplo, @Const MKL_INT n, @Const float[] a, @Const MKL_INT lda, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);
public static native void SFEAST_SYEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const FloatPointer a, @Const MKL_INT lda, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void SFEAST_SYEV(String uplo, @Const MKL_INT n, @Const FloatBuffer a, @Const MKL_INT lda, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void SFEAST_SYEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const float[] a, @Const MKL_INT lda, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);
public static native void SFEAST_SYEV(String uplo, @Const MKL_INT n, @Const FloatPointer a, @Const MKL_INT lda, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void SFEAST_SYEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const FloatBuffer a, @Const MKL_INT lda, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void SFEAST_SYEV(String uplo, @Const MKL_INT n, @Const float[] a, @Const MKL_INT lda, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);

public static native void cfeast_hcsrev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void cfeast_hcsrev(String uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void cfeast_hcsrev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);
public static native void cfeast_hcsrev(String uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void cfeast_hcsrev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void cfeast_hcsrev(String uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);
public static native void CFEAST_HCSREV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void CFEAST_HCSREV(String uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void CFEAST_HCSREV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);
public static native void CFEAST_HCSREV(String uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void CFEAST_HCSREV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void CFEAST_HCSREV(String uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);

public static native void zfeast_hbev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void zfeast_hbev(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void zfeast_hbev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);
public static native void zfeast_hbev(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void zfeast_hbev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void zfeast_hbev(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);
public static native void ZFEAST_HBEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void ZFEAST_HBEV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void ZFEAST_HBEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);
public static native void ZFEAST_HBEV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, MKL_Complex16 x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void ZFEAST_HBEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, MKL_Complex16 x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void ZFEAST_HBEV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex16 a, @Const MKL_INT lda, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, MKL_Complex16 x, MKL_INT m, double[] res, MKL_INT info);

public static native void dfeast_sbgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const DoublePointer a, @Const MKL_INT lda, @Const MKL_INT klb, @Const DoublePointer b, @Const MKL_INT ldb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void dfeast_sbgv(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const DoubleBuffer a, @Const MKL_INT lda, @Const MKL_INT klb, @Const DoubleBuffer b, @Const MKL_INT ldb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void dfeast_sbgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const double[] a, @Const MKL_INT lda, @Const MKL_INT klb, @Const double[] b, @Const MKL_INT ldb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);
public static native void dfeast_sbgv(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const DoublePointer a, @Const MKL_INT lda, @Const MKL_INT klb, @Const DoublePointer b, @Const MKL_INT ldb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void dfeast_sbgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const DoubleBuffer a, @Const MKL_INT lda, @Const MKL_INT klb, @Const DoubleBuffer b, @Const MKL_INT ldb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void dfeast_sbgv(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const double[] a, @Const MKL_INT lda, @Const MKL_INT klb, @Const double[] b, @Const MKL_INT ldb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);
public static native void DFEAST_SBGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const DoublePointer a, @Const MKL_INT lda, @Const MKL_INT klb, @Const DoublePointer b, @Const MKL_INT ldb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void DFEAST_SBGV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const DoubleBuffer a, @Const MKL_INT lda, @Const MKL_INT klb, @Const DoubleBuffer b, @Const MKL_INT ldb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void DFEAST_SBGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const double[] a, @Const MKL_INT lda, @Const MKL_INT klb, @Const double[] b, @Const MKL_INT ldb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);
public static native void DFEAST_SBGV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const DoublePointer a, @Const MKL_INT lda, @Const MKL_INT klb, @Const DoublePointer b, @Const MKL_INT ldb, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void DFEAST_SBGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const DoubleBuffer a, @Const MKL_INT lda, @Const MKL_INT klb, @Const DoubleBuffer b, @Const MKL_INT ldb, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void DFEAST_SBGV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const double[] a, @Const MKL_INT lda, @Const MKL_INT klb, @Const double[] b, @Const MKL_INT ldb, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);

public static native void cfeast_hbgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void cfeast_hbgv(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void cfeast_hbgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);
public static native void cfeast_hbgv(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void cfeast_hbgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void cfeast_hbgv(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);
public static native void CFEAST_HBGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void CFEAST_HBGV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void CFEAST_HBGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);
public static native void CFEAST_HBGV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void CFEAST_HBGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void CFEAST_HBGV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const MKL_Complex8 a, @Const MKL_INT lda, @Const MKL_INT klb, @Const MKL_Complex8 b, @Const MKL_INT ldb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);

public static native void cfeast_heev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void cfeast_heev(String uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void cfeast_heev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);
public static native void cfeast_heev(String uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void cfeast_heev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void cfeast_heev(String uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);
public static native void CFEAST_HEEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void CFEAST_HEEV(String uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void CFEAST_HEEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);
public static native void CFEAST_HEEV(String uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void CFEAST_HEEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void CFEAST_HEEV(String uplo, @Const MKL_INT n, @Const MKL_Complex8 a, @Const MKL_INT lda, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);

public static native void sfeast_sbgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const FloatPointer a, @Const MKL_INT lda, @Const MKL_INT klb, @Const FloatPointer b, @Const MKL_INT ldb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT mode, FloatPointer res, MKL_INT info);
public static native void sfeast_sbgv(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const FloatBuffer a, @Const MKL_INT lda, @Const MKL_INT klb, @Const FloatBuffer b, @Const MKL_INT ldb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT mode, FloatBuffer res, MKL_INT info);
public static native void sfeast_sbgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const float[] a, @Const MKL_INT lda, @Const MKL_INT klb, @Const float[] b, @Const MKL_INT ldb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT mode, float[] res, MKL_INT info);
public static native void sfeast_sbgv(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const FloatPointer a, @Const MKL_INT lda, @Const MKL_INT klb, @Const FloatPointer b, @Const MKL_INT ldb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT mode, FloatPointer res, MKL_INT info);
public static native void sfeast_sbgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const FloatBuffer a, @Const MKL_INT lda, @Const MKL_INT klb, @Const FloatBuffer b, @Const MKL_INT ldb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT mode, FloatBuffer res, MKL_INT info);
public static native void sfeast_sbgv(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const float[] a, @Const MKL_INT lda, @Const MKL_INT klb, @Const float[] b, @Const MKL_INT ldb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT mode, float[] res, MKL_INT info);
public static native void SFEAST_SBGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const FloatPointer a, @Const MKL_INT lda, @Const MKL_INT klb, @Const FloatPointer b, @Const MKL_INT ldb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void SFEAST_SBGV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const FloatBuffer a, @Const MKL_INT lda, @Const MKL_INT klb, @Const FloatBuffer b, @Const MKL_INT ldb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void SFEAST_SBGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const float[] a, @Const MKL_INT lda, @Const MKL_INT klb, @Const float[] b, @Const MKL_INT ldb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);
public static native void SFEAST_SBGV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const FloatPointer a, @Const MKL_INT lda, @Const MKL_INT klb, @Const FloatPointer b, @Const MKL_INT ldb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, FloatPointer x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void SFEAST_SBGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const FloatBuffer a, @Const MKL_INT lda, @Const MKL_INT klb, @Const FloatBuffer b, @Const MKL_INT ldb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, FloatBuffer x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void SFEAST_SBGV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const float[] a, @Const MKL_INT lda, @Const MKL_INT klb, @Const float[] b, @Const MKL_INT ldb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, float[] x, MKL_INT m, float[] res, MKL_INT info);

public static native void cfeast_hcsrgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex8 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void cfeast_hcsrgv(String uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex8 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void cfeast_hcsrgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex8 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);
public static native void cfeast_hcsrgv(String uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex8 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void cfeast_hcsrgv(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex8 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void cfeast_hcsrgv(String uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex8 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);
public static native void CFEAST_HCSRGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex8 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void CFEAST_HCSRGV(String uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex8 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void CFEAST_HCSRGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex8 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);
public static native void CFEAST_HCSRGV(String uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex8 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, FloatPointer epsout, MKL_INT loop, @Const FloatPointer emin, @Const FloatPointer emax, MKL_INT m0, FloatPointer e, MKL_Complex8 x, MKL_INT m, FloatPointer res, MKL_INT info);
public static native void CFEAST_HCSRGV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex8 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, FloatBuffer epsout, MKL_INT loop, @Const FloatBuffer emin, @Const FloatBuffer emax, MKL_INT m0, FloatBuffer e, MKL_Complex8 x, MKL_INT m, FloatBuffer res, MKL_INT info);
public static native void CFEAST_HCSRGV(String uplo, @Const MKL_INT n, @Const MKL_Complex8 sa, @Const MKL_INT isa, @Const MKL_INT jsa, @Const MKL_Complex8 sb, @Const MKL_INT isb, @Const MKL_INT jsb, MKL_INT fpm, float[] epsout, MKL_INT loop, @Const float[] emin, @Const float[] emax, MKL_INT m0, float[] e, MKL_Complex8 x, MKL_INT m, float[] res, MKL_INT info);

public static native void dfeast_syev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const DoublePointer a, @Const MKL_INT lda, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void dfeast_syev(String uplo, @Const MKL_INT n, @Const DoubleBuffer a, @Const MKL_INT lda, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void dfeast_syev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const double[] a, @Const MKL_INT lda, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);
public static native void dfeast_syev(String uplo, @Const MKL_INT n, @Const DoublePointer a, @Const MKL_INT lda, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void dfeast_syev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const DoubleBuffer a, @Const MKL_INT lda, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void dfeast_syev(String uplo, @Const MKL_INT n, @Const double[] a, @Const MKL_INT lda, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);
public static native void DFEAST_SYEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const DoublePointer a, @Const MKL_INT lda, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void DFEAST_SYEV(String uplo, @Const MKL_INT n, @Const DoubleBuffer a, @Const MKL_INT lda, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void DFEAST_SYEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const double[] a, @Const MKL_INT lda, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);
public static native void DFEAST_SYEV(String uplo, @Const MKL_INT n, @Const DoublePointer a, @Const MKL_INT lda, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void DFEAST_SYEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const DoubleBuffer a, @Const MKL_INT lda, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void DFEAST_SYEV(String uplo, @Const MKL_INT n, @Const double[] a, @Const MKL_INT lda, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);

public static native void dfeast_sbev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const DoublePointer a, @Const MKL_INT lda, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void dfeast_sbev(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const DoubleBuffer a, @Const MKL_INT lda, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void dfeast_sbev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const double[] a, @Const MKL_INT lda, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);
public static native void dfeast_sbev(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const DoublePointer a, @Const MKL_INT lda, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void dfeast_sbev(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const DoubleBuffer a, @Const MKL_INT lda, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void dfeast_sbev(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const double[] a, @Const MKL_INT lda, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);
public static native void DFEAST_SBEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const DoublePointer a, @Const MKL_INT lda, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void DFEAST_SBEV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const DoubleBuffer a, @Const MKL_INT lda, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void DFEAST_SBEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const double[] a, @Const MKL_INT lda, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);
public static native void DFEAST_SBEV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const DoublePointer a, @Const MKL_INT lda, MKL_INT fpm, DoublePointer epsout, MKL_INT loop, @Const DoublePointer emin, @Const DoublePointer emax, MKL_INT m0, DoublePointer e, DoublePointer x, MKL_INT m, DoublePointer res, MKL_INT info);
public static native void DFEAST_SBEV(@Cast("const char*") BytePointer uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const DoubleBuffer a, @Const MKL_INT lda, MKL_INT fpm, DoubleBuffer epsout, MKL_INT loop, @Const DoubleBuffer emin, @Const DoubleBuffer emax, MKL_INT m0, DoubleBuffer e, DoubleBuffer x, MKL_INT m, DoubleBuffer res, MKL_INT info);
public static native void DFEAST_SBEV(String uplo, @Const MKL_INT n, @Const MKL_INT kla, @Const double[] a, @Const MKL_INT lda, MKL_INT fpm, double[] epsout, MKL_INT loop, @Const double[] emin, @Const double[] emax, MKL_INT m0, double[] e, double[] x, MKL_INT m, double[] res, MKL_INT info);

// #ifdef __cplusplus
// #endif /* __cplusplus */

// #endif


// Parsed from mkl_dnn_types.h

/*******************************************************************************
* Copyright 2015-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

// #ifndef _MKL_DNN_TYPES_H
// #define _MKL_DNN_TYPES_H

// #include <stdlib.h>

// #if defined(__cplusplus_cli)
public static class _uniPrimitive_s extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public _uniPrimitive_s() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public _uniPrimitive_s(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public _uniPrimitive_s(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public _uniPrimitive_s position(long position) {
        return (_uniPrimitive_s)super.position(position);
    }
}
public static class _dnnLayout_s extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public _dnnLayout_s() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public _dnnLayout_s(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public _dnnLayout_s(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public _dnnLayout_s position(long position) {
        return (_dnnLayout_s)super.position(position);
    }
}
// #endif
@Namespace @Name("void") @Opaque public static class dnnPrimitiveAttributes_t extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public dnnPrimitiveAttributes_t() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public dnnPrimitiveAttributes_t(Pointer p) { super(p); }
}

public static final int DNN_MAX_DIMENSION =       32;
public static final int DNN_QUERY_MAX_LENGTH =    128;

/** enum dnnError_t */
public static final int
    E_SUCCESS                   = 0,
    E_INCORRECT_INPUT_PARAMETER = -1,
    E_UNEXPECTED_NULL_POINTER   = -2,
    E_MEMORY_ERROR              = -3,
    E_UNSUPPORTED_DIMENSION     = -4,
    E_UNIMPLEMENTED             = -127;

/** enum dnnAlgorithm_t */
public static final int
    /** GEMM base convolution (unimplemented) */
    dnnAlgorithmConvolutionGemm = 0,
    /** Direct convolution */
    dnnAlgorithmConvolutionDirect = 1,
    /** FFT based convolution (unimplemented) */
    dnnAlgorithmConvolutionFFT = 2,
    /** Maximum pooling */
    dnnAlgorithmPoolingMax = 3,
    /** Minimum pooling */
    dnnAlgorithmPoolingMin = 4,
    /** Average pooling (padded values are not taken into account) */
    dnnAlgorithmPoolingAvgExcludePadding = 5,
    /** Alias for average pooling (padded values are not taken into account) */
    dnnAlgorithmPoolingAvg =  dnnAlgorithmPoolingAvgExcludePadding,
    /** Average pooling (padded values are taken into account) */
    dnnAlgorithmPoolingAvgIncludePadding =  dnnAlgorithmPoolingAvgExcludePadding + 1;

/** enum dnnResourceType_t */
public static final int
    dnnResourceSrc            = 0,
    dnnResourceFrom           = 0,
    dnnResourceDst            = 1,
    dnnResourceTo             = 1,
    dnnResourceFilter         = 2,
    dnnResourceScaleShift     = 2,
    dnnResourceBias           = 3,
    dnnResourceMean           = 3,
    dnnResourceDiffSrc        = 4,
    dnnResourceDiffFilter     = 5,
    dnnResourceDiffScaleShift = 5,
    dnnResourceDiffBias       = 6,
    dnnResourceVariance       = 6,
    dnnResourceDiffDst        = 7,
    dnnResourceWorkspace      = 8,
    dnnResourceMultipleSrc    = 16,
    dnnResourceMultipleDst    = 24,
    dnnResourceNumber         = 32;

/** enum dnnBorder_t */
public static final int
    dnnBorderZeros          =  0x0,
    dnnBorderZerosAsymm     =  0x100,
    dnnBorderExtrapolation  =  0x3;

/** enum dnnBatchNormalizationFlag_t */
public static final int
    dnnUseInputMeanVariance =  0x1,
    dnnUseScaleShift        =  0x2;

// #endif


// Parsed from mkl_dnn.h

/*******************************************************************************
* Copyright 2015-2017 Intel Corporation All Rights Reserved.
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*******************************************************************************/

// #ifndef _MKL_DNN_H
// #define _MKL_DNN_H

// #include <stdarg.h>
// #include <stddef.h>

// #include "mkl_dnn_types.h"

// #ifdef __cplusplus
// #endif

/*******************************************************************************
 * F32 section: single precision
 ******************************************************************************/

public static native @Cast("dnnError_t") int dnnLayoutCreate_F32(
        dnnLayout_t pLayout, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer size, @Cast("const size_t*") SizeTPointer strides);
public static native @Cast("dnnError_t") int dnnLayoutCreateFromPrimitive_F32(
        dnnLayout_t pLayout, @Const @ByVal dnnPrimitive_t primitive, @Cast("dnnResourceType_t") int type);

/** Returns the size of buffer required to serialize dnnLayout_t structure. */
public static native @Cast("size_t") long dnnLayoutSerializationBufferSize_F32();

/** Serializes given \p layout into buffer \p buf. User-provided buffer \p buf
 * should have enough space to store dnnLayout_t structure.
 * \sa dnnLayoutSerializationBufferSize_F32 */
public static native @Cast("dnnError_t") int dnnLayoutSerialize_F32(@Const @ByVal dnnLayout_t layout, Pointer buf);

/** Creates new layout restored from previously serialized one. */
public static native @Cast("dnnError_t") int dnnLayoutDeserialize_F32(dnnLayout_t pLayout, @Const Pointer buf);

public static native @Cast("size_t") long dnnLayoutGetMemorySize_F32(
        @Const @ByVal dnnLayout_t layout);
public static native int dnnLayoutCompare_F32(
        @Const @ByVal dnnLayout_t l1, @Const @ByVal dnnLayout_t l2);
public static native @Cast("dnnError_t") int dnnAllocateBuffer_F32(
        @Cast("void**") PointerPointer pPtr, @ByVal dnnLayout_t layout);
public static native @Cast("dnnError_t") int dnnAllocateBuffer_F32(
        @Cast("void**") @ByPtrPtr Pointer pPtr, @ByVal dnnLayout_t layout);
public static native @Cast("dnnError_t") int dnnReleaseBuffer_F32(
        Pointer ptr);
public static native @Cast("dnnError_t") int dnnLayoutDelete_F32(
        @ByVal dnnLayout_t layout);

public static native @Cast("dnnError_t") int dnnPrimitiveAttributesCreate_F32(
        @ByPtrPtr dnnPrimitiveAttributes_t attributes);
public static native @Cast("dnnError_t") int dnnPrimitiveAttributesDestroy_F32(
        dnnPrimitiveAttributes_t attributes);
public static native @Cast("dnnError_t") int dnnPrimitiveGetAttributes_F32(
        @ByVal dnnPrimitive_t primitive,
        @ByPtrPtr dnnPrimitiveAttributes_t attributes);

public static native @Cast("dnnError_t") int dnnExecute_F32(
        @ByVal dnnPrimitive_t primitive, @Cast("void**") PointerPointer resources);
public static native @Cast("dnnError_t") int dnnExecute_F32(
        @ByVal dnnPrimitive_t primitive, @Cast("void**") @ByPtrPtr Pointer resources);
public static native @Cast("dnnError_t") int dnnExecuteAsync_F32(
        @ByVal dnnPrimitive_t primitive, @Cast("void**") PointerPointer resources);
public static native @Cast("dnnError_t") int dnnExecuteAsync_F32(
        @ByVal dnnPrimitive_t primitive, @Cast("void**") @ByPtrPtr Pointer resources);
public static native @Cast("dnnError_t") int dnnWaitFor_F32(
        @ByVal dnnPrimitive_t primitive);
public static native @Cast("dnnError_t") int dnnDelete_F32(
        @ByVal dnnPrimitive_t primitive);

public static native @Cast("dnnError_t") int dnnConversionCreate_F32(
        dnnPrimitive_t pConversion, @Const @ByVal dnnLayout_t from, @Const @ByVal dnnLayout_t to);
public static native @Cast("dnnError_t") int dnnConversionExecute_F32(
        @ByVal dnnPrimitive_t conversion, Pointer from, Pointer to);

public static native @Cast("dnnError_t") int dnnSumCreate_F32(
        dnnPrimitive_t pSum, dnnPrimitiveAttributes_t attributes, @Cast("const size_t") long nSummands,
        @ByVal dnnLayout_t layout, FloatPointer coefficients);
public static native @Cast("dnnError_t") int dnnSumCreate_F32(
        dnnPrimitive_t pSum, dnnPrimitiveAttributes_t attributes, @Cast("const size_t") long nSummands,
        @ByVal dnnLayout_t layout, FloatBuffer coefficients);
public static native @Cast("dnnError_t") int dnnSumCreate_F32(
        dnnPrimitive_t pSum, dnnPrimitiveAttributes_t attributes, @Cast("const size_t") long nSummands,
        @ByVal dnnLayout_t layout, float[] coefficients);
public static native @Cast("dnnError_t") int dnnConcatCreate_F32(
        dnnPrimitive_t pConcat, dnnPrimitiveAttributes_t attributes, @Cast("const size_t") long nSrcTensors, dnnLayout_t src);
public static native @Cast("dnnError_t") int dnnSplitCreate_F32(
        dnnPrimitive_t pSplit, dnnPrimitiveAttributes_t attributes, @Cast("const size_t") long nDstTensors,
        @ByVal dnnLayout_t layout, @Cast("size_t*") SizeTPointer dstChannelSize);
public static native @Cast("dnnError_t") int dnnScaleCreate_F32(
        dnnPrimitive_t pScale,
        dnnPrimitiveAttributes_t attributes,
        @Const @ByVal dnnLayout_t dataLayout, float alpha);

public static native @Cast("dnnError_t") int dnnConvolutionCreateForward_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntPointer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateForward_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntBuffer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateForward_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const int[] inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateForwardBias_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntPointer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateForwardBias_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntBuffer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateForwardBias_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const int[] inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateBackwardData_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntPointer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateBackwardData_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntBuffer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateBackwardData_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const int[] inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateBackwardFilter_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntPointer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateBackwardFilter_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntBuffer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateBackwardFilter_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const int[] inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateBackwardBias_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer dstSize);

public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateForward_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntPointer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateForward_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntBuffer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateForward_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const int[] inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateForwardBias_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntPointer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateForwardBias_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntBuffer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateForwardBias_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const int[] inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateBackwardData_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntPointer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateBackwardData_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntBuffer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateBackwardData_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const int[] inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateBackwardFilter_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntPointer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateBackwardFilter_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntBuffer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateBackwardFilter_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const int[] inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateBackwardBias_F32(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer dstSize);

public static native @Cast("dnnError_t") int dnnReLUCreateForward_F32(
        dnnPrimitive_t pRelu,
        dnnPrimitiveAttributes_t attributes,
        @Const @ByVal dnnLayout_t dataLayout, float negativeSlope);
public static native @Cast("dnnError_t") int dnnReLUCreateBackward_F32(
        dnnPrimitive_t pRelu,
        dnnPrimitiveAttributes_t attributes,
        @Const @ByVal dnnLayout_t diffLayout, @Const @ByVal dnnLayout_t dataLayout, float negativeSlope);

public static native @Cast("dnnError_t") int dnnLRNCreateForward_F32(
        dnnPrimitive_t pLrn,
        dnnPrimitiveAttributes_t attributes,
        @Const @ByVal dnnLayout_t dataLayout, @Cast("size_t") long kernel_size, float alpha, float beta, float k);
public static native @Cast("dnnError_t") int dnnLRNCreateBackward_F32(
        dnnPrimitive_t pLrn,
        dnnPrimitiveAttributes_t attributes,
        @Const @ByVal dnnLayout_t diffLayout, @Const @ByVal dnnLayout_t dataLayout, @Cast("size_t") long kernel_size, float alpha, float beta, float k);

public static native @Cast("dnnError_t") int dnnBatchNormalizationCreateForward_F32(
        dnnPrimitive_t pBatchNormalization,
        dnnPrimitiveAttributes_t attributes,
        @Const @ByVal dnnLayout_t dataLayout, float eps);
public static native @Cast("dnnError_t") int dnnBatchNormalizationCreateBackwardScaleShift_F32(
        dnnPrimitive_t pBatchNormalization,
        dnnPrimitiveAttributes_t attributes,
        @Const @ByVal dnnLayout_t dataLayout, float eps);
public static native @Cast("dnnError_t") int dnnBatchNormalizationCreateBackwardData_F32(
        dnnPrimitive_t pBatchNormalization,
        dnnPrimitiveAttributes_t attributes,
        @Const @ByVal dnnLayout_t dataLayout, float eps);

public static native @Cast("dnnError_t") int dnnBatchNormalizationCreateForward_v2_F32(
        dnnPrimitive_t pBatchNormalization,
        dnnPrimitiveAttributes_t attributes,
        @Const @ByVal dnnLayout_t dataLayout, float eps,
        @Cast("unsigned int") int flags);
public static native @Cast("dnnError_t") int dnnBatchNormalizationCreateBackward_v2_F32(
        dnnPrimitive_t pBatchNormalization,
        dnnPrimitiveAttributes_t attributes,
        @Const @ByVal dnnLayout_t dataLayout, float eps,
        @Cast("unsigned int") int flags);

public static native @Cast("dnnError_t") int dnnPoolingCreateForward_F32(
        dnnPrimitive_t pPooling,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int op,
        @Const @ByVal dnnLayout_t srcLayout,
        @Cast("const size_t*") SizeTPointer kernelSize, @Cast("const size_t*") SizeTPointer kernelStride,
        @Const IntPointer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnPoolingCreateForward_F32(
        dnnPrimitive_t pPooling,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int op,
        @Const @ByVal dnnLayout_t srcLayout,
        @Cast("const size_t*") SizeTPointer kernelSize, @Cast("const size_t*") SizeTPointer kernelStride,
        @Const IntBuffer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnPoolingCreateForward_F32(
        dnnPrimitive_t pPooling,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int op,
        @Const @ByVal dnnLayout_t srcLayout,
        @Cast("const size_t*") SizeTPointer kernelSize, @Cast("const size_t*") SizeTPointer kernelStride,
        @Const int[] inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnPoolingCreateBackward_F32(
        dnnPrimitive_t pPooling,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int op,
        @Const @ByVal dnnLayout_t srcLayout,
        @Cast("const size_t*") SizeTPointer kernelSize, @Cast("const size_t*") SizeTPointer kernelStride,
        @Const IntPointer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnPoolingCreateBackward_F32(
        dnnPrimitive_t pPooling,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int op,
        @Const @ByVal dnnLayout_t srcLayout,
        @Cast("const size_t*") SizeTPointer kernelSize, @Cast("const size_t*") SizeTPointer kernelStride,
        @Const IntBuffer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnPoolingCreateBackward_F32(
        dnnPrimitive_t pPooling,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int op,
        @Const @ByVal dnnLayout_t srcLayout,
        @Cast("const size_t*") SizeTPointer kernelSize, @Cast("const size_t*") SizeTPointer kernelStride,
        @Const int[] inputOffset, @Cast("const dnnBorder_t") int borderType);

public static native @Cast("dnnError_t") int dnnInnerProductCreateForward_F32(
        dnnPrimitive_t pInnerProduct,
        dnnPrimitiveAttributes_t attributes,
        @Cast("size_t") long dimensions,
        @Cast("const size_t*") SizeTPointer srcSize,
        @Cast("size_t") long outputChannels);
public static native @Cast("dnnError_t") int dnnInnerProductCreateForwardBias_F32(
        dnnPrimitive_t pInnerProduct,
        dnnPrimitiveAttributes_t attributes,
        @Cast("size_t") long dimensions,
        @Cast("const size_t*") SizeTPointer srcSize,
        @Cast("size_t") long outputChannels);
public static native @Cast("dnnError_t") int dnnInnerProductCreateBackwardData_F32(
        dnnPrimitive_t pInnerProduct,
        dnnPrimitiveAttributes_t attributes,
        @Cast("size_t") long dimensions,
        @Cast("const size_t*") SizeTPointer srcSize,
        @Cast("size_t") long outputChannels);
public static native @Cast("dnnError_t") int dnnInnerProductCreateBackwardFilter_F32(
        dnnPrimitive_t pInnerProduct,
        dnnPrimitiveAttributes_t attributes,
        @Cast("size_t") long dimensions,
        @Cast("const size_t*") SizeTPointer srcSize,
        @Cast("size_t") long outputChannels);
public static native @Cast("dnnError_t") int dnnInnerProductCreateBackwardBias_F32(
        dnnPrimitive_t pInnerProduct,
        dnnPrimitiveAttributes_t attributes,
        @Cast("size_t") long dimensions,
        @Cast("const size_t*") SizeTPointer dstSize);

/*******************************************************************************
 * F64 section: double precision
 ******************************************************************************/

public static native @Cast("dnnError_t") int dnnLayoutCreate_F64(
        dnnLayout_t pLayout, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer size, @Cast("const size_t*") SizeTPointer strides);
public static native @Cast("dnnError_t") int dnnLayoutCreateFromPrimitive_F64(
        dnnLayout_t pLayout, @Const @ByVal dnnPrimitive_t primitive, @Cast("dnnResourceType_t") int type);

/** Returns the size of buffer required to serialize dnnLayout_t structure. */
public static native @Cast("size_t") long dnnLayoutSerializationBufferSize_F64();

/** Serializes given \p layout into buffer \p buf. User-provided buffer \p buf
 * should have enough space to store dnnLayout_t structure.
 * \sa dnnLayoutSerializationBufferSize_F64 */
public static native @Cast("dnnError_t") int dnnLayoutSerialize_F64(@Const @ByVal dnnLayout_t layout, Pointer buf);

/** Creates new layout restored from previously serialized one. */
public static native @Cast("dnnError_t") int dnnLayoutDeserialize_F64(dnnLayout_t pLayout, @Const Pointer buf);

public static native @Cast("size_t") long dnnLayoutGetMemorySize_F64(
        @Const @ByVal dnnLayout_t layout);
public static native int dnnLayoutCompare_F64(
        @Const @ByVal dnnLayout_t l1, @Const @ByVal dnnLayout_t l2);
public static native @Cast("dnnError_t") int dnnAllocateBuffer_F64(
        @Cast("void**") PointerPointer pPtr, @ByVal dnnLayout_t layout);
public static native @Cast("dnnError_t") int dnnAllocateBuffer_F64(
        @Cast("void**") @ByPtrPtr Pointer pPtr, @ByVal dnnLayout_t layout);
public static native @Cast("dnnError_t") int dnnReleaseBuffer_F64(
        Pointer ptr);
public static native @Cast("dnnError_t") int dnnLayoutDelete_F64(
        @ByVal dnnLayout_t layout);

public static native @Cast("dnnError_t") int dnnPrimitiveAttributesCreate_F64(
        @ByPtrPtr dnnPrimitiveAttributes_t attributes);
public static native @Cast("dnnError_t") int dnnPrimitiveAttributesDestroy_F64(
        dnnPrimitiveAttributes_t attributes);
public static native @Cast("dnnError_t") int dnnPrimitiveGetAttributes_F64(
        @ByVal dnnPrimitive_t primitive,
        @ByPtrPtr dnnPrimitiveAttributes_t attributes);

public static native @Cast("dnnError_t") int dnnExecute_F64(
        @ByVal dnnPrimitive_t primitive, @Cast("void**") PointerPointer resources);
public static native @Cast("dnnError_t") int dnnExecute_F64(
        @ByVal dnnPrimitive_t primitive, @Cast("void**") @ByPtrPtr Pointer resources);
public static native @Cast("dnnError_t") int dnnExecuteAsync_F64(
        @ByVal dnnPrimitive_t primitive, @Cast("void**") PointerPointer resources);
public static native @Cast("dnnError_t") int dnnExecuteAsync_F64(
        @ByVal dnnPrimitive_t primitive, @Cast("void**") @ByPtrPtr Pointer resources);
public static native @Cast("dnnError_t") int dnnWaitFor_F64(
        @ByVal dnnPrimitive_t primitive);
public static native @Cast("dnnError_t") int dnnDelete_F64(
        @ByVal dnnPrimitive_t primitive);

public static native @Cast("dnnError_t") int dnnConversionCreate_F64(
        dnnPrimitive_t pConversion, @Const @ByVal dnnLayout_t from, @Const @ByVal dnnLayout_t to);
public static native @Cast("dnnError_t") int dnnConversionExecute_F64(
        @ByVal dnnPrimitive_t conversion, Pointer from, Pointer to);

public static native @Cast("dnnError_t") int dnnSumCreate_F64(
        dnnPrimitive_t pSum, dnnPrimitiveAttributes_t attributes, @Cast("const size_t") long nSummands,
        @ByVal dnnLayout_t layout, DoublePointer coefficients);
public static native @Cast("dnnError_t") int dnnSumCreate_F64(
        dnnPrimitive_t pSum, dnnPrimitiveAttributes_t attributes, @Cast("const size_t") long nSummands,
        @ByVal dnnLayout_t layout, DoubleBuffer coefficients);
public static native @Cast("dnnError_t") int dnnSumCreate_F64(
        dnnPrimitive_t pSum, dnnPrimitiveAttributes_t attributes, @Cast("const size_t") long nSummands,
        @ByVal dnnLayout_t layout, double[] coefficients);
public static native @Cast("dnnError_t") int dnnConcatCreate_F64(
         dnnPrimitive_t pConcat, dnnPrimitiveAttributes_t attributes, @Cast("const size_t") long nSrcTensors, dnnLayout_t src);
public static native @Cast("dnnError_t") int dnnSplitCreate_F64(
        dnnPrimitive_t pSplit, dnnPrimitiveAttributes_t attributes, @Cast("const size_t") long nDstTensors,
        @ByVal dnnLayout_t layout, @Cast("size_t*") SizeTPointer dstChannelSize);
public static native @Cast("dnnError_t") int dnnScaleCreate_F64(
        dnnPrimitive_t pScale,
        dnnPrimitiveAttributes_t attributes,
        @Const @ByVal dnnLayout_t dataLayout, double alpha);

public static native @Cast("dnnError_t") int dnnConvolutionCreateForward_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntPointer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateForward_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntBuffer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateForward_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const int[] inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateForwardBias_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntPointer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateForwardBias_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntBuffer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateForwardBias_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const int[] inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateBackwardData_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntPointer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateBackwardData_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntBuffer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateBackwardData_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const int[] inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateBackwardFilter_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntPointer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateBackwardFilter_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntBuffer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateBackwardFilter_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const int[] inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnConvolutionCreateBackwardBias_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer dstSize);

public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateForward_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntPointer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateForward_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntBuffer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateForward_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const int[] inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateForwardBias_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntPointer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateForwardBias_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntBuffer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateForwardBias_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const int[] inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateBackwardData_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntPointer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateBackwardData_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntBuffer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateBackwardData_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const int[] inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateBackwardFilter_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntPointer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateBackwardFilter_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const IntBuffer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateBackwardFilter_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer srcSize, @Cast("const size_t*") SizeTPointer dstSize, @Cast("const size_t*") SizeTPointer filterSize,
        @Cast("const size_t*") SizeTPointer convolutionStrides, @Const int[] inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnGroupsConvolutionCreateBackwardBias_F64(
        dnnPrimitive_t pConvolution,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int algorithm,
        @Cast("size_t") long groups, @Cast("size_t") long dimension, @Cast("const size_t*") SizeTPointer dstSize);

public static native @Cast("dnnError_t") int dnnReLUCreateForward_F64(
        dnnPrimitive_t pRelu,
        dnnPrimitiveAttributes_t attributes,
        @Const @ByVal dnnLayout_t dataLayout, double negativeSlope);
public static native @Cast("dnnError_t") int dnnReLUCreateBackward_F64(
        dnnPrimitive_t pRelu,
        dnnPrimitiveAttributes_t attributes,
        @Const @ByVal dnnLayout_t diffLayout, @Const @ByVal dnnLayout_t dataLayout, double negativeSlope);

public static native @Cast("dnnError_t") int dnnLRNCreateForward_F64(
        dnnPrimitive_t pLrn,
        dnnPrimitiveAttributes_t attributes,
        @Const @ByVal dnnLayout_t dataLayout, @Cast("size_t") long kernel_size, double alpha, double beta, double k);
public static native @Cast("dnnError_t") int dnnLRNCreateBackward_F64(
        dnnPrimitive_t pLrn,
        dnnPrimitiveAttributes_t attributes,
        @Const @ByVal dnnLayout_t diffLayout, @Const @ByVal dnnLayout_t dataLayout, @Cast("size_t") long kernel_size, double alpha, double beta, double k);

public static native @Cast("dnnError_t") int dnnBatchNormalizationCreateForward_F64(
        dnnPrimitive_t pBatchNormalization,
        dnnPrimitiveAttributes_t attributes,
        @Const @ByVal dnnLayout_t dataLayout, double eps);
public static native @Cast("dnnError_t") int dnnBatchNormalizationCreateBackwardScaleShift_F64(
        dnnPrimitive_t pBatchNormalization,
        dnnPrimitiveAttributes_t attributes,
        @Const @ByVal dnnLayout_t dataLayout, double eps);
public static native @Cast("dnnError_t") int dnnBatchNormalizationCreateBackwardData_F64(
        dnnPrimitive_t pBatchNormalization,
        dnnPrimitiveAttributes_t attributes,
        @Const @ByVal dnnLayout_t dataLayout, double eps);

public static native @Cast("dnnError_t") int dnnBatchNormalizationCreateForward_v2_F64(
        dnnPrimitive_t pBatchNormalization,
        dnnPrimitiveAttributes_t attributes,
        @Const @ByVal dnnLayout_t dataLayout, double eps,
        @Cast("unsigned int") int flags);
public static native @Cast("dnnError_t") int dnnBatchNormalizationCreateBackward_v2_F64(
        dnnPrimitive_t pBatchNormalization,
        dnnPrimitiveAttributes_t attributes,
        @Const @ByVal dnnLayout_t dataLayout, double eps,
        @Cast("unsigned int") int flags);

public static native @Cast("dnnError_t") int dnnPoolingCreateForward_F64(
        dnnPrimitive_t pPooling,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int op,
        @Const @ByVal dnnLayout_t srcLayout,
        @Cast("const size_t*") SizeTPointer kernelSize, @Cast("const size_t*") SizeTPointer kernelStride,
        @Const IntPointer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnPoolingCreateForward_F64(
        dnnPrimitive_t pPooling,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int op,
        @Const @ByVal dnnLayout_t srcLayout,
        @Cast("const size_t*") SizeTPointer kernelSize, @Cast("const size_t*") SizeTPointer kernelStride,
        @Const IntBuffer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnPoolingCreateForward_F64(
        dnnPrimitive_t pPooling,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int op,
        @Const @ByVal dnnLayout_t srcLayout,
        @Cast("const size_t*") SizeTPointer kernelSize, @Cast("const size_t*") SizeTPointer kernelStride,
        @Const int[] inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnPoolingCreateBackward_F64(
        dnnPrimitive_t pPooling,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int op,
        @Const @ByVal dnnLayout_t srcLayout,
        @Cast("const size_t*") SizeTPointer kernelSize, @Cast("const size_t*") SizeTPointer kernelStride,
        @Const IntPointer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnPoolingCreateBackward_F64(
        dnnPrimitive_t pPooling,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int op,
        @Const @ByVal dnnLayout_t srcLayout,
        @Cast("const size_t*") SizeTPointer kernelSize, @Cast("const size_t*") SizeTPointer kernelStride,
        @Const IntBuffer inputOffset, @Cast("const dnnBorder_t") int borderType);
public static native @Cast("dnnError_t") int dnnPoolingCreateBackward_F64(
        dnnPrimitive_t pPooling,
        dnnPrimitiveAttributes_t attributes,
        @Cast("dnnAlgorithm_t") int op,
        @Const @ByVal dnnLayout_t srcLayout,
        @Cast("const size_t*") SizeTPointer kernelSize, @Cast("const size_t*") SizeTPointer kernelStride,
        @Const int[] inputOffset, @Cast("const dnnBorder_t") int borderType);

public static native @Cast("dnnError_t") int dnnInnerProductCreateForward_F64(
        dnnPrimitive_t pInnerProduct,
        dnnPrimitiveAttributes_t attributes,
        @Cast("size_t") long dimensions,
        @Cast("const size_t*") SizeTPointer srcSize,
        @Cast("size_t") long outputChannels);
public static native @Cast("dnnError_t") int dnnInnerProductCreateForwardBias_F64(
        dnnPrimitive_t pInnerProduct,
        dnnPrimitiveAttributes_t attributes,
        @Cast("size_t") long dimensions,
        @Cast("const size_t*") SizeTPointer srcSize,
        @Cast("size_t") long outputChannels);
public static native @Cast("dnnError_t") int dnnInnerProductCreateBackwardData_F64(
        dnnPrimitive_t pInnerProduct,
        dnnPrimitiveAttributes_t attributes,
        @Cast("size_t") long dimensions,
        @Cast("const size_t*") SizeTPointer srcSize,
        @Cast("size_t") long outputChannels);
public static native @Cast("dnnError_t") int dnnInnerProductCreateBackwardFilter_F64(
        dnnPrimitive_t pInnerProduct,
        dnnPrimitiveAttributes_t attributes,
        @Cast("size_t") long dimensions,
        @Cast("const size_t*") SizeTPointer srcSize,
        @Cast("size_t") long outputChannels);
public static native @Cast("dnnError_t") int dnnInnerProductCreateBackwardBias_F64(
        dnnPrimitive_t pInnerProduct,
        dnnPrimitiveAttributes_t attributes,
        @Cast("size_t") long dimensions,
        @Cast("const size_t*") SizeTPointer dstSize);

// #ifdef __cplusplus
// #endif

// #endif


}
